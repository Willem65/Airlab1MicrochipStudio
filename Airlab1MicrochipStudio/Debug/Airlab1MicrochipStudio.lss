
Airlab1MicrochipStudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000052a4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00802000  000052a4  00005338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000019bb  008020e8  008020e8  00005420  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00005420  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005450  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000268  00000000  00000000  00005490  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000775d  00000000  00000000  000056f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003242  00000000  00000000  0000ce55  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000482e  00000000  00000000  00010097  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000554  00000000  00000000  000148c8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002fbd  00000000  00000000  00014e1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002373  00000000  00000000  00017dd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000328  00000000  00000000  0001a14c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6e 02 	jmp	0x4dc	; 0x4dc <__ctors_end>
       4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
       8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
       c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      10:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      14:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      18:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      1c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      20:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      24:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      28:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      2c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      30:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      34:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      38:	0c 94 ff 0d 	jmp	0x1bfe	; 0x1bfe <__vector_14>
      3c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      40:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      44:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      48:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      4c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      50:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      54:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      58:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      5c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      60:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      64:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      68:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      6c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      70:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      74:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      78:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      7c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      80:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      84:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      88:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      8c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      90:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      94:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      98:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      9c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      a0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      a4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      a8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      ac:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      b0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      b4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      b8:	0c 94 d8 28 	jmp	0x51b0	; 0x51b0 <__vector_46>
      bc:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      c0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      c4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      c8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      cc:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      d0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      d4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      d8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      dc:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      e0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      e4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      e8:	0c 94 5c 27 	jmp	0x4eb8	; 0x4eb8 <__vector_58>
      ec:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      f0:	0c 94 be 27 	jmp	0x4f7c	; 0x4f7c <__vector_60>
      f4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      f8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
      fc:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     100:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     104:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     108:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     10c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     110:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     114:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     118:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     11c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     120:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     124:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     128:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     12c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     130:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     134:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     138:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     13c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     140:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     144:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     148:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     14c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     150:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     154:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     158:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     15c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     160:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     164:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     168:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     16c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     170:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     174:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     178:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     17c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     180:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     184:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     188:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     18c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     190:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     194:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     198:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     19c:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1a0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1a4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1a8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1ac:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1b0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1b4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1b8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1bc:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1c0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1c4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1c8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1cc:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1d0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1d4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1d8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1dc:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1e0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1e4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1e8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1ec:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1f0:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1f4:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1f8:	0c 94 94 02 	jmp	0x528	; 0x528 <__bad_interrupt>
     1fc:	8b 0e       	add	r8, r27
     1fe:	91 11       	cpse	r25, r1
     200:	d2 12       	cpse	r13, r18
     202:	44 15       	cp	r20, r4
     204:	89 20       	and	r8, r9
     206:	89 20       	and	r8, r9
     208:	59 17       	cp	r21, r25
     20a:	6d 17       	cp	r22, r29
     20c:	89 20       	and	r8, r9
     20e:	89 20       	and	r8, r9
     210:	89 20       	and	r8, r9
     212:	89 20       	and	r8, r9
     214:	89 20       	and	r8, r9
     216:	89 20       	and	r8, r9
     218:	89 20       	and	r8, r9
     21a:	89 20       	and	r8, r9
     21c:	89 20       	and	r8, r9
     21e:	89 20       	and	r8, r9
     220:	89 20       	and	r8, r9
     222:	89 20       	and	r8, r9
     224:	89 20       	and	r8, r9
     226:	89 20       	and	r8, r9
     228:	89 20       	and	r8, r9
     22a:	89 20       	and	r8, r9
     22c:	89 20       	and	r8, r9
     22e:	89 20       	and	r8, r9
     230:	89 20       	and	r8, r9
     232:	89 20       	and	r8, r9
     234:	89 20       	and	r8, r9
     236:	89 20       	and	r8, r9
     238:	89 20       	and	r8, r9
     23a:	89 20       	and	r8, r9
     23c:	89 20       	and	r8, r9
     23e:	89 20       	and	r8, r9
     240:	89 20       	and	r8, r9
     242:	89 20       	and	r8, r9
     244:	89 20       	and	r8, r9
     246:	89 20       	and	r8, r9
     248:	89 20       	and	r8, r9
     24a:	89 20       	and	r8, r9
     24c:	89 20       	and	r8, r9
     24e:	89 20       	and	r8, r9
     250:	89 20       	and	r8, r9
     252:	89 20       	and	r8, r9
     254:	89 20       	and	r8, r9
     256:	89 20       	and	r8, r9
     258:	89 20       	and	r8, r9
     25a:	89 20       	and	r8, r9
     25c:	89 20       	and	r8, r9
     25e:	89 20       	and	r8, r9
     260:	89 20       	and	r8, r9
     262:	89 20       	and	r8, r9
     264:	89 20       	and	r8, r9
     266:	89 20       	and	r8, r9
     268:	89 20       	and	r8, r9
     26a:	89 20       	and	r8, r9
     26c:	89 20       	and	r8, r9
     26e:	89 20       	and	r8, r9
     270:	89 20       	and	r8, r9
     272:	89 20       	and	r8, r9
     274:	89 20       	and	r8, r9
     276:	89 20       	and	r8, r9
     278:	89 20       	and	r8, r9
     27a:	89 20       	and	r8, r9
     27c:	89 20       	and	r8, r9
     27e:	89 20       	and	r8, r9
     280:	89 20       	and	r8, r9
     282:	89 20       	and	r8, r9
     284:	89 20       	and	r8, r9
     286:	89 20       	and	r8, r9
     288:	89 20       	and	r8, r9
     28a:	89 20       	and	r8, r9
     28c:	89 20       	and	r8, r9
     28e:	89 20       	and	r8, r9
     290:	89 20       	and	r8, r9
     292:	89 20       	and	r8, r9
     294:	89 20       	and	r8, r9
     296:	89 20       	and	r8, r9
     298:	89 20       	and	r8, r9
     29a:	89 20       	and	r8, r9
     29c:	89 20       	and	r8, r9
     29e:	89 20       	and	r8, r9
     2a0:	89 20       	and	r8, r9
     2a2:	89 20       	and	r8, r9
     2a4:	89 20       	and	r8, r9
     2a6:	89 20       	and	r8, r9
     2a8:	89 20       	and	r8, r9
     2aa:	89 20       	and	r8, r9
     2ac:	89 20       	and	r8, r9
     2ae:	89 20       	and	r8, r9
     2b0:	89 20       	and	r8, r9
     2b2:	89 20       	and	r8, r9
     2b4:	89 20       	and	r8, r9
     2b6:	89 20       	and	r8, r9
     2b8:	89 20       	and	r8, r9
     2ba:	89 20       	and	r8, r9
     2bc:	89 20       	and	r8, r9
     2be:	89 20       	and	r8, r9
     2c0:	89 20       	and	r8, r9
     2c2:	89 20       	and	r8, r9
     2c4:	89 20       	and	r8, r9
     2c6:	89 20       	and	r8, r9
     2c8:	89 20       	and	r8, r9
     2ca:	89 20       	and	r8, r9
     2cc:	89 20       	and	r8, r9
     2ce:	89 20       	and	r8, r9
     2d0:	89 20       	and	r8, r9
     2d2:	89 20       	and	r8, r9
     2d4:	89 20       	and	r8, r9
     2d6:	89 20       	and	r8, r9
     2d8:	89 20       	and	r8, r9
     2da:	89 20       	and	r8, r9
     2dc:	89 20       	and	r8, r9
     2de:	89 20       	and	r8, r9
     2e0:	89 20       	and	r8, r9
     2e2:	89 20       	and	r8, r9
     2e4:	89 20       	and	r8, r9
     2e6:	89 20       	and	r8, r9
     2e8:	89 20       	and	r8, r9
     2ea:	89 20       	and	r8, r9
     2ec:	89 20       	and	r8, r9
     2ee:	89 20       	and	r8, r9
     2f0:	89 20       	and	r8, r9
     2f2:	89 20       	and	r8, r9
     2f4:	89 20       	and	r8, r9
     2f6:	89 20       	and	r8, r9
     2f8:	89 20       	and	r8, r9
     2fa:	89 20       	and	r8, r9
     2fc:	f2 17       	cp	r31, r18
     2fe:	20 19       	sub	r18, r0
     300:	43 1c       	adc	r4, r3
     302:	57 1d       	adc	r21, r7
     304:	8a 1c       	adc	r8, r10
     306:	20 1e       	adc	r2, r16
     308:	cc 1e       	adc	r12, r28
     30a:	dc 1e       	adc	r13, r28
     30c:	2e 20       	and	r2, r14
     30e:	28 13       	cpse	r18, r24
     310:	34 13       	cpse	r19, r20
     312:	34 13       	cpse	r19, r20
     314:	28 13       	cpse	r18, r24
     316:	28 13       	cpse	r18, r24
     318:	34 13       	cpse	r19, r20
     31a:	34 13       	cpse	r19, r20
     31c:	28 13       	cpse	r18, r24
     31e:	40 13       	cpse	r20, r16
     320:	40 13       	cpse	r20, r16
     322:	28 13       	cpse	r18, r24
     324:	28 13       	cpse	r18, r24
     326:	28 13       	cpse	r18, r24
     328:	28 13       	cpse	r18, r24
     32a:	40 13       	cpse	r20, r16
     32c:	40 13       	cpse	r20, r16
     32e:	28 13       	cpse	r18, r24
     330:	40 13       	cpse	r20, r16
     332:	40 13       	cpse	r20, r16
     334:	28 13       	cpse	r18, r24
     336:	40 13       	cpse	r20, r16
     338:	28 13       	cpse	r18, r24
     33a:	28 13       	cpse	r18, r24
     33c:	28 13       	cpse	r18, r24
     33e:	28 13       	cpse	r18, r24
     340:	28 13       	cpse	r18, r24
     342:	56 13       	cpse	r21, r22
     344:	56 13       	cpse	r21, r22
     346:	56 13       	cpse	r21, r22
     348:	56 13       	cpse	r21, r22
     34a:	56 13       	cpse	r21, r22
     34c:	56 13       	cpse	r21, r22
     34e:	56 13       	cpse	r21, r22
     350:	7e 13       	cpse	r23, r30
     352:	7e 13       	cpse	r23, r30
     354:	7e 13       	cpse	r23, r30
     356:	5b 13       	cpse	r21, r27
     358:	63 13       	cpse	r22, r19
     35a:	79 13       	cpse	r23, r25
     35c:	7c 13       	cpse	r23, r28
     35e:	7c 13       	cpse	r23, r28
     360:	7c 13       	cpse	r23, r28
     362:	7c 13       	cpse	r23, r28
     364:	7c 13       	cpse	r23, r28
     366:	7c 13       	cpse	r23, r28
     368:	7e 13       	cpse	r23, r30
     36a:	5e 13       	cpse	r21, r30
     36c:	5e 13       	cpse	r21, r30
     36e:	3e 25       	eor	r19, r14
     370:	54 25       	eor	r21, r4
     372:	42 27       	eor	r20, r18
     374:	42 27       	eor	r20, r18
     376:	42 27       	eor	r20, r18
     378:	42 27       	eor	r20, r18
     37a:	42 27       	eor	r20, r18
     37c:	42 27       	eor	r20, r18
     37e:	42 27       	eor	r20, r18
     380:	42 27       	eor	r20, r18
     382:	42 27       	eor	r20, r18
     384:	42 27       	eor	r20, r18
     386:	42 27       	eor	r20, r18
     388:	42 27       	eor	r20, r18
     38a:	42 27       	eor	r20, r18
     38c:	42 27       	eor	r20, r18
     38e:	6a 25       	eor	r22, r10
     390:	6e 25       	eor	r22, r14
     392:	71 25       	eor	r23, r1
     394:	78 25       	eor	r23, r8
     396:	9e 25       	eor	r25, r14
     398:	42 27       	eor	r20, r18
     39a:	56 26       	eor	r5, r22
     39c:	42 27       	eor	r20, r18
     39e:	42 27       	eor	r20, r18
     3a0:	42 27       	eor	r20, r18
     3a2:	42 27       	eor	r20, r18
     3a4:	42 27       	eor	r20, r18
     3a6:	42 27       	eor	r20, r18
     3a8:	42 27       	eor	r20, r18
     3aa:	42 27       	eor	r20, r18
     3ac:	42 27       	eor	r20, r18
     3ae:	42 27       	eor	r20, r18
     3b0:	42 27       	eor	r20, r18
     3b2:	42 27       	eor	r20, r18
     3b4:	42 27       	eor	r20, r18
     3b6:	42 27       	eor	r20, r18
     3b8:	42 27       	eor	r20, r18
     3ba:	42 27       	eor	r20, r18
     3bc:	42 27       	eor	r20, r18
     3be:	42 27       	eor	r20, r18
     3c0:	42 27       	eor	r20, r18
     3c2:	42 27       	eor	r20, r18
     3c4:	42 27       	eor	r20, r18
     3c6:	42 27       	eor	r20, r18
     3c8:	42 27       	eor	r20, r18
     3ca:	42 27       	eor	r20, r18
     3cc:	42 27       	eor	r20, r18
     3ce:	42 27       	eor	r20, r18
     3d0:	42 27       	eor	r20, r18
     3d2:	42 27       	eor	r20, r18
     3d4:	dd 25       	eor	r29, r13
     3d6:	08 26       	eor	r0, r24
     3d8:	2f 26       	eor	r2, r31
     3da:	42 27       	eor	r20, r18
     3dc:	42 27       	eor	r20, r18
     3de:	42 27       	eor	r20, r18
     3e0:	42 27       	eor	r20, r18
     3e2:	b6 25       	eor	r27, r6
     3e4:	42 27       	eor	r20, r18
     3e6:	42 27       	eor	r20, r18
     3e8:	42 27       	eor	r20, r18
     3ea:	42 27       	eor	r20, r18
     3ec:	42 27       	eor	r20, r18
     3ee:	42 27       	eor	r20, r18
     3f0:	42 27       	eor	r20, r18
     3f2:	42 27       	eor	r20, r18
     3f4:	42 27       	eor	r20, r18
     3f6:	42 27       	eor	r20, r18
     3f8:	42 27       	eor	r20, r18
     3fa:	42 27       	eor	r20, r18
     3fc:	42 27       	eor	r20, r18
     3fe:	42 27       	eor	r20, r18
     400:	42 27       	eor	r20, r18
     402:	42 27       	eor	r20, r18
     404:	42 27       	eor	r20, r18
     406:	42 27       	eor	r20, r18
     408:	42 27       	eor	r20, r18
     40a:	42 27       	eor	r20, r18
     40c:	42 27       	eor	r20, r18
     40e:	42 27       	eor	r20, r18
     410:	42 27       	eor	r20, r18
     412:	42 27       	eor	r20, r18
     414:	42 27       	eor	r20, r18
     416:	42 27       	eor	r20, r18
     418:	42 27       	eor	r20, r18
     41a:	42 27       	eor	r20, r18
     41c:	42 27       	eor	r20, r18
     41e:	42 27       	eor	r20, r18
     420:	42 27       	eor	r20, r18
     422:	42 27       	eor	r20, r18
     424:	42 27       	eor	r20, r18
     426:	42 27       	eor	r20, r18
     428:	42 27       	eor	r20, r18
     42a:	42 27       	eor	r20, r18
     42c:	42 27       	eor	r20, r18
     42e:	d9 26       	eor	r13, r25
     430:	f5 26       	eor	r15, r21
     432:	28 27       	eor	r18, r24

00000434 <__trampolines_start>:
     434:	0c 94 40 13 	jmp	0x2680	; 0x2680 <__DATA_REGION_LENGTH__+0x680>
     438:	0c 94 6d 17 	jmp	0x2eda	; 0x2eda <__DATA_REGION_LENGTH__+0xeda>
     43c:	0c 94 9e 25 	jmp	0x4b3c	; 0x4b3c <DoSerial+0x10e>
     440:	0c 94 91 11 	jmp	0x2322	; 0x2322 <__DATA_REGION_LENGTH__+0x322>
     444:	0c 94 20 1e 	jmp	0x3c40	; 0x3c40 <__DATA_REGION_LENGTH__+0x1c40>
     448:	0c 94 3e 25 	jmp	0x4a7c	; 0x4a7c <DoSerial+0x4e>
     44c:	0c 94 7e 13 	jmp	0x26fc	; 0x26fc <__DATA_REGION_LENGTH__+0x6fc>
     450:	0c 94 71 25 	jmp	0x4ae2	; 0x4ae2 <DoSerial+0xb4>
     454:	0c 94 f2 17 	jmp	0x2fe4	; 0x2fe4 <__DATA_REGION_LENGTH__+0xfe4>
     458:	0c 94 43 1c 	jmp	0x3886	; 0x3886 <__DATA_REGION_LENGTH__+0x1886>
     45c:	0c 94 7c 13 	jmp	0x26f8	; 0x26f8 <__DATA_REGION_LENGTH__+0x6f8>
     460:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
     464:	0c 94 34 13 	jmp	0x2668	; 0x2668 <__DATA_REGION_LENGTH__+0x668>
     468:	0c 94 56 26 	jmp	0x4cac	; 0x4cac <DoSerial+0x27e>
     46c:	0c 94 6e 25 	jmp	0x4adc	; 0x4adc <DoSerial+0xae>
     470:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__stack+0x5d>
     474:	0c 94 6a 25 	jmp	0x4ad4	; 0x4ad4 <DoSerial+0xa6>
     478:	0c 94 dc 1e 	jmp	0x3db8	; 0x3db8 <__DATA_REGION_LENGTH__+0x1db8>
     47c:	0c 94 dd 25 	jmp	0x4bba	; 0x4bba <DoSerial+0x18c>
     480:	0c 94 79 13 	jmp	0x26f2	; 0x26f2 <__DATA_REGION_LENGTH__+0x6f2>
     484:	0c 94 b6 25 	jmp	0x4b6c	; 0x4b6c <DoSerial+0x13e>
     488:	0c 94 78 25 	jmp	0x4af0	; 0x4af0 <DoSerial+0xc2>
     48c:	0c 94 d9 26 	jmp	0x4db2	; 0x4db2 <DoSerial+0x384>
     490:	0c 94 f5 26 	jmp	0x4dea	; 0x4dea <DoSerial+0x3bc>
     494:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <__DATA_REGION_LENGTH__+0x1d98>
     498:	0c 94 2f 26 	jmp	0x4c5e	; 0x4c5e <DoSerial+0x230>
     49c:	0c 94 42 27 	jmp	0x4e84	; 0x4e84 <DoSerial+0x456>
     4a0:	0c 94 8b 0e 	jmp	0x1d16	; 0x1d16 <DoEvent+0x68>
     4a4:	0c 94 44 15 	jmp	0x2a88	; 0x2a88 <__DATA_REGION_LENGTH__+0xa88>
     4a8:	0c 94 57 1d 	jmp	0x3aae	; 0x3aae <__DATA_REGION_LENGTH__+0x1aae>
     4ac:	0c 94 28 13 	jmp	0x2650	; 0x2650 <__DATA_REGION_LENGTH__+0x650>
     4b0:	0c 94 28 27 	jmp	0x4e50	; 0x4e50 <DoSerial+0x422>
     4b4:	0c 94 8a 1c 	jmp	0x3914	; 0x3914 <__DATA_REGION_LENGTH__+0x1914>
     4b8:	0c 94 08 26 	jmp	0x4c10	; 0x4c10 <DoSerial+0x1e2>
     4bc:	0c 94 63 13 	jmp	0x26c6	; 0x26c6 <__DATA_REGION_LENGTH__+0x6c6>
     4c0:	0c 94 20 19 	jmp	0x3240	; 0x3240 <__DATA_REGION_LENGTH__+0x1240>
     4c4:	0c 94 54 25 	jmp	0x4aa8	; 0x4aa8 <DoSerial+0x7a>
     4c8:	0c 94 59 17 	jmp	0x2eb2	; 0x2eb2 <__DATA_REGION_LENGTH__+0xeb2>
     4cc:	0c 94 5b 13 	jmp	0x26b6	; 0x26b6 <__DATA_REGION_LENGTH__+0x6b6>
     4d0:	0c 94 d2 12 	jmp	0x25a4	; 0x25a4 <__DATA_REGION_LENGTH__+0x5a4>
     4d4:	0c 94 5e 13 	jmp	0x26bc	; 0x26bc <__DATA_REGION_LENGTH__+0x6bc>
     4d8:	0c 94 56 13 	jmp	0x26ac	; 0x26ac <__DATA_REGION_LENGTH__+0x6ac>

000004dc <__ctors_end>:
     4dc:	11 24       	eor	r1, r1
     4de:	1f be       	out	0x3f, r1	; 63
     4e0:	cf ef       	ldi	r28, 0xFF	; 255
     4e2:	cd bf       	out	0x3d, r28	; 61
     4e4:	df e3       	ldi	r29, 0x3F	; 63
     4e6:	de bf       	out	0x3e, r29	; 62
     4e8:	00 e0       	ldi	r16, 0x00	; 0
     4ea:	0c bf       	out	0x3c, r16	; 60
     4ec:	18 be       	out	0x38, r1	; 56
     4ee:	19 be       	out	0x39, r1	; 57
     4f0:	1a be       	out	0x3a, r1	; 58
     4f2:	1b be       	out	0x3b, r1	; 59

000004f4 <__do_copy_data>:
     4f4:	10 e2       	ldi	r17, 0x20	; 32
     4f6:	a0 e0       	ldi	r26, 0x00	; 0
     4f8:	b0 e2       	ldi	r27, 0x20	; 32
     4fa:	e4 ea       	ldi	r30, 0xA4	; 164
     4fc:	f2 e5       	ldi	r31, 0x52	; 82
     4fe:	00 e0       	ldi	r16, 0x00	; 0
     500:	0b bf       	out	0x3b, r16	; 59
     502:	02 c0       	rjmp	.+4      	; 0x508 <__do_copy_data+0x14>
     504:	07 90       	elpm	r0, Z+
     506:	0d 92       	st	X+, r0
     508:	a8 3e       	cpi	r26, 0xE8	; 232
     50a:	b1 07       	cpc	r27, r17
     50c:	d9 f7       	brne	.-10     	; 0x504 <__do_copy_data+0x10>
     50e:	1b be       	out	0x3b, r1	; 59

00000510 <__do_clear_bss>:
     510:	2a e3       	ldi	r18, 0x3A	; 58
     512:	a8 ee       	ldi	r26, 0xE8	; 232
     514:	b0 e2       	ldi	r27, 0x20	; 32
     516:	01 c0       	rjmp	.+2      	; 0x51a <.do_clear_bss_start>

00000518 <.do_clear_bss_loop>:
     518:	1d 92       	st	X+, r1

0000051a <.do_clear_bss_start>:
     51a:	a3 3a       	cpi	r26, 0xA3	; 163
     51c:	b2 07       	cpc	r27, r18
     51e:	e1 f7       	brne	.-8      	; 0x518 <.do_clear_bss_loop>
     520:	0e 94 ee 0b 	call	0x17dc	; 0x17dc <main>
     524:	0c 94 50 29 	jmp	0x52a0	; 0x52a0 <_exit>

00000528 <__bad_interrupt>:
     528:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000052c <TimerControl>:
void TimerControl(unsigned char Module)
{
	unsigned char SetTimerOn = 0;
	unsigned char cntModule;

	if (ModuleData[Module][MIC_RING]&0x80)
     52c:	90 e0       	ldi	r25, 0x00	; 0
     52e:	fc 01       	movw	r30, r24
     530:	ee 0f       	add	r30, r30
     532:	ff 1f       	adc	r31, r31
     534:	ee 0f       	add	r30, r30
     536:	ff 1f       	adc	r31, r31
     538:	ee 0f       	add	r30, r30
     53a:	ff 1f       	adc	r31, r31
     53c:	e5 5f       	subi	r30, 0xF5	; 245
     53e:	f4 4d       	sbci	r31, 0xD4	; 212
     540:	27 81       	ldd	r18, Z+7	; 0x07
     542:	22 23       	and	r18, r18
     544:	64 f4       	brge	.+24     	; 0x55e <TimerControl+0x32>
	{
		if (ConsoleModuleSettings[Module][TIMERMIC])
     546:	2d e1       	ldi	r18, 0x1D	; 29
     548:	28 9f       	mul	r18, r24
     54a:	f0 01       	movw	r30, r0
     54c:	29 9f       	mul	r18, r25
     54e:	f0 0d       	add	r31, r0
     550:	11 24       	eor	r1, r1
     552:	e5 5e       	subi	r30, 0xE5	; 229
     554:	f7 4c       	sbci	r31, 0xC7	; 199
     556:	22 81       	ldd	r18, Z+2	; 0x02
     558:	21 11       	cpse	r18, r1
     55a:	27 c0       	rjmp	.+78     	; 0x5aa <TimerControl+0x7e>
     55c:	2d c0       	rjmp	.+90     	; 0x5b8 <TimerControl+0x8c>
		SetTimerOn = 1;
	}
	else if (!(ModuleData[Module][LINEB]&0x80))
     55e:	fc 01       	movw	r30, r24
     560:	ee 0f       	add	r30, r30
     562:	ff 1f       	adc	r31, r31
     564:	ee 0f       	add	r30, r30
     566:	ff 1f       	adc	r31, r31
     568:	ee 0f       	add	r30, r30
     56a:	ff 1f       	adc	r31, r31
     56c:	e5 5f       	subi	r30, 0xF5	; 245
     56e:	f4 4d       	sbci	r31, 0xD4	; 212
     570:	26 81       	ldd	r18, Z+6	; 0x06
     572:	22 23       	and	r18, r18
     574:	64 f0       	brlt	.+24     	; 0x58e <TimerControl+0x62>
	{
		if (ConsoleModuleSettings[Module][TIMERLINEA])
     576:	2d e1       	ldi	r18, 0x1D	; 29
     578:	28 9f       	mul	r18, r24
     57a:	f0 01       	movw	r30, r0
     57c:	29 9f       	mul	r18, r25
     57e:	f0 0d       	add	r31, r0
     580:	11 24       	eor	r1, r1
     582:	e5 5e       	subi	r30, 0xE5	; 229
     584:	f7 4c       	sbci	r31, 0xC7	; 199
     586:	20 81       	ld	r18, Z
     588:	21 11       	cpse	r18, r1
     58a:	11 c0       	rjmp	.+34     	; 0x5ae <TimerControl+0x82>
     58c:	15 c0       	rjmp	.+42     	; 0x5b8 <TimerControl+0x8c>
		SetTimerOn = 1;
	}
	else if (ModuleData[Module][LINEB]&0x80)
     58e:	22 23       	and	r18, r18
     590:	84 f4       	brge	.+32     	; 0x5b2 <TimerControl+0x86>
	{
		if (ConsoleModuleSettings[Module][TIMERLINEB])
     592:	2d e1       	ldi	r18, 0x1D	; 29
     594:	28 9f       	mul	r18, r24
     596:	f0 01       	movw	r30, r0
     598:	29 9f       	mul	r18, r25
     59a:	f0 0d       	add	r31, r0
     59c:	11 24       	eor	r1, r1
     59e:	e5 5e       	subi	r30, 0xE5	; 229
     5a0:	f7 4c       	sbci	r31, 0xC7	; 199
     5a2:	21 81       	ldd	r18, Z+1	; 0x01
     5a4:	21 11       	cpse	r18, r1
     5a6:	07 c0       	rjmp	.+14     	; 0x5b6 <TimerControl+0x8a>
     5a8:	07 c0       	rjmp	.+14     	; 0x5b8 <TimerControl+0x8c>
	unsigned char cntModule;

	if (ModuleData[Module][MIC_RING]&0x80)
	{
		if (ConsoleModuleSettings[Module][TIMERMIC])
		SetTimerOn = 1;
     5aa:	21 e0       	ldi	r18, 0x01	; 1
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <TimerControl+0x8c>
	}
	else if (!(ModuleData[Module][LINEB]&0x80))
	{
		if (ConsoleModuleSettings[Module][TIMERLINEA])
		SetTimerOn = 1;
     5ae:	21 e0       	ldi	r18, 0x01	; 1
     5b0:	03 c0       	rjmp	.+6      	; 0x5b8 <TimerControl+0x8c>
//unsigned char I2CModule;


void TimerControl(unsigned char Module)
{
	unsigned char SetTimerOn = 0;
     5b2:	20 e0       	ldi	r18, 0x00	; 0
     5b4:	01 c0       	rjmp	.+2      	; 0x5b8 <TimerControl+0x8c>
		SetTimerOn = 1;
	}
	else if (ModuleData[Module][LINEB]&0x80)
	{
		if (ConsoleModuleSettings[Module][TIMERLINEB])
		SetTimerOn = 1;
     5b6:	21 e0       	ldi	r18, 0x01	; 1
	}

	if (SetTimerOn)
     5b8:	22 23       	and	r18, r18
     5ba:	19 f1       	breq	.+70     	; 0x602 <TimerControl+0xd6>
	{
		if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
     5bc:	fc 01       	movw	r30, r24
     5be:	ee 0f       	add	r30, r30
     5c0:	ff 1f       	adc	r31, r31
     5c2:	ee 0f       	add	r30, r30
     5c4:	ff 1f       	adc	r31, r31
     5c6:	ee 0f       	add	r30, r30
     5c8:	ff 1f       	adc	r31, r31
     5ca:	e5 5f       	subi	r30, 0xF5	; 245
     5cc:	f4 4d       	sbci	r31, 0xD4	; 212
     5ce:	21 81       	ldd	r18, Z+1	; 0x01
     5d0:	22 23       	and	r18, r18
     5d2:	94 f4       	brge	.+36     	; 0x5f8 <TimerControl+0xcc>
     5d4:	fc 01       	movw	r30, r24
     5d6:	e0 56       	subi	r30, 0x60	; 96
     5d8:	fd 4d       	sbci	r31, 0xDD	; 221
     5da:	20 81       	ld	r18, Z
     5dc:	25 ff       	sbrs	r18, 5
     5de:	0c c0       	rjmp	.+24     	; 0x5f8 <TimerControl+0xcc>
		{// !JB
			TimeAndDate.Hours = 0;
     5e0:	e6 e1       	ldi	r30, 0x16	; 22
     5e2:	fa e3       	ldi	r31, 0x3A	; 58
     5e4:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
     5e6:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
     5e8:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
     5ea:	10 82       	st	Z, r1
			TimerActive[Module] = 1;
     5ec:	fc 01       	movw	r30, r24
     5ee:	ea 5c       	subi	r30, 0xCA	; 202
     5f0:	fd 4c       	sbci	r31, 0xCD	; 205
     5f2:	21 e0       	ldi	r18, 0x01	; 1
     5f4:	20 83       	st	Z, r18
     5f6:	09 c0       	rjmp	.+18     	; 0x60a <TimerControl+0xde>
		}
		else
		{
			TimerActive[Module] = 0;
     5f8:	fc 01       	movw	r30, r24
     5fa:	ea 5c       	subi	r30, 0xCA	; 202
     5fc:	fd 4c       	sbci	r31, 0xCD	; 205
     5fe:	10 82       	st	Z, r1
     600:	04 c0       	rjmp	.+8      	; 0x60a <TimerControl+0xde>
		}
	}
	else
	{
		TimerActive[Module] = 0;
     602:	fc 01       	movw	r30, r24
     604:	ea 5c       	subi	r30, 0xCA	; 202
     606:	fd 4c       	sbci	r31, 0xCD	; 205
     608:	10 82       	st	Z, r1
	}

	GlobalTimerActive = 0;
     60a:	10 92 1b 3a 	sts	0x3A1B, r1	; 0x803a1b <GlobalTimerActive>
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     60e:	80 e0       	ldi	r24, 0x00	; 0
     610:	0b c0       	rjmp	.+22     	; 0x628 <TimerControl+0xfc>
	{
		if (TimerActive[cntModule])
     612:	e8 2f       	mov	r30, r24
     614:	f0 e0       	ldi	r31, 0x00	; 0
     616:	ea 5c       	subi	r30, 0xCA	; 202
     618:	fd 4c       	sbci	r31, 0xCD	; 205
     61a:	90 81       	ld	r25, Z
     61c:	99 23       	and	r25, r25
     61e:	19 f0       	breq	.+6      	; 0x626 <TimerControl+0xfa>
		GlobalTimerActive = 1;
     620:	91 e0       	ldi	r25, 0x01	; 1
     622:	90 93 1b 3a 	sts	0x3A1B, r25	; 0x803a1b <GlobalTimerActive>
	{
		TimerActive[Module] = 0;
	}

	GlobalTimerActive = 0;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     626:	8f 5f       	subi	r24, 0xFF	; 255
     628:	80 31       	cpi	r24, 0x10	; 16
     62a:	98 f3       	brcs	.-26     	; 0x612 <TimerControl+0xe6>
	{
		if (TimerActive[cntModule])
		GlobalTimerActive = 1;
	}
}
     62c:	08 95       	ret

0000062e <ShowFunction>:


void ShowFunction(unsigned char Function)
{
	unsigned char cnt;
	for (cnt=0; cnt<NROFMODULES; cnt++)
     62e:	40 e0       	ldi	r20, 0x00	; 0
     630:	1b c0       	rjmp	.+54     	; 0x668 <ShowFunction+0x3a>
	{
		ShowFunctionData[cnt] &= CUE_LED^0xFF;
     632:	24 2f       	mov	r18, r20
     634:	30 e0       	ldi	r19, 0x00	; 0
     636:	f9 01       	movw	r30, r18
     638:	ec 5f       	subi	r30, 0xFC	; 252
     63a:	f5 4c       	sbci	r31, 0xC5	; 197
     63c:	90 81       	ld	r25, Z
     63e:	97 7f       	andi	r25, 0xF7	; 247
     640:	90 83       	st	Z, r25
		if (ConsoleModuleSettings[cnt][Function])
     642:	5d e1       	ldi	r21, 0x1D	; 29
     644:	52 9f       	mul	r21, r18
     646:	f0 01       	movw	r30, r0
     648:	53 9f       	mul	r21, r19
     64a:	f0 0d       	add	r31, r0
     64c:	11 24       	eor	r1, r1
     64e:	e5 5e       	subi	r30, 0xE5	; 229
     650:	f7 4c       	sbci	r31, 0xC7	; 199
     652:	e8 0f       	add	r30, r24
     654:	f1 1d       	adc	r31, r1
     656:	50 81       	ld	r21, Z
     658:	55 23       	and	r21, r21
     65a:	29 f0       	breq	.+10     	; 0x666 <ShowFunction+0x38>
		{
			ShowFunctionData[cnt] |= CUE_LED;
     65c:	f9 01       	movw	r30, r18
     65e:	ec 5f       	subi	r30, 0xFC	; 252
     660:	f5 4c       	sbci	r31, 0xC5	; 197
     662:	98 60       	ori	r25, 0x08	; 8
     664:	90 83       	st	Z, r25


void ShowFunction(unsigned char Function)
{
	unsigned char cnt;
	for (cnt=0; cnt<NROFMODULES; cnt++)
     666:	4f 5f       	subi	r20, 0xFF	; 255
     668:	40 31       	cpi	r20, 0x10	; 16
     66a:	18 f3       	brcs	.-58     	; 0x632 <ShowFunction+0x4>
		if (ConsoleModuleSettings[cnt][Function])
		{
			ShowFunctionData[cnt] |= CUE_LED;
		}
	}
	SendSerialData = 1;
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
     672:	08 95       	ret

00000674 <GetTelcoNrFromModuleNr>:
{
	char cntTelco = -1;
	char TelcoNr = -1;
	char cntModule;
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     674:	80 e0       	ldi	r24, 0x00	; 0
     676:	01 c0       	rjmp	.+2      	; 0x67a <GetTelcoNrFromModuleNr+0x6>
     678:	8f 5f       	subi	r24, 0xFF	; 255
     67a:	80 31       	cpi	r24, 0x10	; 16
     67c:	e8 f3       	brcs	.-6      	; 0x678 <GetTelcoNrFromModuleNr+0x4>
			}
		}
	}

	return TelcoNr;
}
     67e:	8f ef       	ldi	r24, 0xFF	; 255
     680:	08 95       	ret

00000682 <CheckTBMic>:
void CheckTBMic()
{
	char TBByTelco = 0;
	char cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     682:	80 e0       	ldi	r24, 0x00	; 0
     684:	01 c0       	rjmp	.+2      	; 0x688 <CheckTBMic+0x6>
     686:	8f 5f       	subi	r24, 0xFF	; 255
     688:	80 31       	cpi	r24, 0x10	; 16
     68a:	e8 f3       	brcs	.-6      	; 0x686 <CheckTBMic+0x4>
	}
	else
	{
		//TBL_MUTE = 0xFF;   // willem
	}
}
     68c:	08 95       	ret

0000068e <StudioMicControl>:
void StudioMicControl()
{
	unsigned char cntModule;
	unsigned char StudioMicActive=0;

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
     68e:	e0 ea       	ldi	r30, 0xA0	; 160
     690:	f2 e2       	ldi	r31, 0x22	; 34
     692:	40 89       	ldd	r20, Z+16	; 0x10
     694:	4b 7f       	andi	r20, 0xFB	; 251
     696:	40 8b       	std	Z+16, r20	; 0x10
}

void StudioMicControl()
{
	unsigned char cntModule;
	unsigned char StudioMicActive=0;
     698:	50 e0       	ldi	r21, 0x00	; 0

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     69a:	80 e0       	ldi	r24, 0x00	; 0
     69c:	64 c0       	rjmp	.+200    	; 0x766 <StudioMicControl+0xd8>
	{
		if (((ConsoleModuleSettings[cntModule][STUDIOMIC]) || (ConsoleModuleSettings[cntModule][ANNMIC])) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
     69e:	28 2f       	mov	r18, r24
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	9d e1       	ldi	r25, 0x1D	; 29
     6a4:	92 9f       	mul	r25, r18
     6a6:	f0 01       	movw	r30, r0
     6a8:	93 9f       	mul	r25, r19
     6aa:	f0 0d       	add	r31, r0
     6ac:	11 24       	eor	r1, r1
     6ae:	e5 5e       	subi	r30, 0xE5	; 229
     6b0:	f7 4c       	sbci	r31, 0xC7	; 199
     6b2:	97 85       	ldd	r25, Z+15	; 0x0f
     6b4:	91 11       	cpse	r25, r1
     6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <StudioMicControl+0x42>
     6b8:	9d e1       	ldi	r25, 0x1D	; 29
     6ba:	92 9f       	mul	r25, r18
     6bc:	f0 01       	movw	r30, r0
     6be:	93 9f       	mul	r25, r19
     6c0:	f0 0d       	add	r31, r0
     6c2:	11 24       	eor	r1, r1
     6c4:	e5 5e       	subi	r30, 0xE5	; 229
     6c6:	f7 4c       	sbci	r31, 0xC7	; 199
     6c8:	96 85       	ldd	r25, Z+14	; 0x0e
     6ca:	99 23       	and	r25, r25
     6cc:	09 f4       	brne	.+2      	; 0x6d0 <StudioMicControl+0x42>
     6ce:	4a c0       	rjmp	.+148    	; 0x764 <StudioMicControl+0xd6>
     6d0:	f9 01       	movw	r30, r18
     6d2:	e0 59       	subi	r30, 0x90	; 144
     6d4:	fd 4d       	sbci	r31, 0xDD	; 221
     6d6:	90 81       	ld	r25, Z
     6d8:	91 50       	subi	r25, 0x01	; 1
     6da:	92 30       	cpi	r25, 0x02	; 2
     6dc:	08 f0       	brcs	.+2      	; 0x6e0 <StudioMicControl+0x52>
     6de:	42 c0       	rjmp	.+132    	; 0x764 <StudioMicControl+0xd6>
			else
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED)))
					StudioMicActive = 1; // !JB
			}*/
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     6e0:	f9 01       	movw	r30, r18
     6e2:	ee 0f       	add	r30, r30
     6e4:	ff 1f       	adc	r31, r31
     6e6:	ee 0f       	add	r30, r30
     6e8:	ff 1f       	adc	r31, r31
     6ea:	ee 0f       	add	r30, r30
     6ec:	ff 1f       	adc	r31, r31
     6ee:	e5 5f       	subi	r30, 0xF5	; 245
     6f0:	f4 4d       	sbci	r31, 0xD4	; 212
     6f2:	97 81       	ldd	r25, Z+7	; 0x07
     6f4:	99 23       	and	r25, r25
     6f6:	24 f1       	brlt	.+72     	; 0x740 <StudioMicControl+0xb2>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) ||
     6f8:	f9 01       	movw	r30, r18
     6fa:	ee 0f       	add	r30, r30
     6fc:	ff 1f       	adc	r31, r31
     6fe:	ee 0f       	add	r30, r30
     700:	ff 1f       	adc	r31, r31
     702:	ee 0f       	add	r30, r30
     704:	ff 1f       	adc	r31, r31
     706:	e5 5f       	subi	r30, 0xF5	; 245
     708:	f4 4d       	sbci	r31, 0xD4	; 212
     70a:	96 81       	ldd	r25, Z+6	; 0x06
			else
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED)))
					StudioMicActive = 1; // !JB
			}*/
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     70c:	99 23       	and	r25, r25
     70e:	5c f0       	brlt	.+22     	; 0x726 <StudioMicControl+0x98>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) ||
     710:	6d e1       	ldi	r22, 0x1D	; 29
     712:	62 9f       	mul	r22, r18
     714:	f0 01       	movw	r30, r0
     716:	63 9f       	mul	r22, r19
     718:	f0 0d       	add	r31, r0
     71a:	11 24       	eor	r1, r1
     71c:	e5 5e       	subi	r30, 0xE5	; 229
     71e:	f7 4c       	sbci	r31, 0xC7	; 199
     720:	67 89       	ldd	r22, Z+23	; 0x17
     722:	61 11       	cpse	r22, r1
     724:	0d c0       	rjmp	.+26     	; 0x740 <StudioMicControl+0xb2>
     726:	99 23       	and	r25, r25
     728:	ec f4       	brge	.+58     	; 0x764 <StudioMicControl+0xd6>
				 (((ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEB])))
     72a:	9d e1       	ldi	r25, 0x1D	; 29
     72c:	92 9f       	mul	r25, r18
     72e:	f0 01       	movw	r30, r0
     730:	93 9f       	mul	r25, r19
     732:	f0 0d       	add	r31, r0
     734:	11 24       	eor	r1, r1
     736:	e5 5e       	subi	r30, 0xE5	; 229
     738:	f7 4c       	sbci	r31, 0xC7	; 199
     73a:	90 8d       	ldd	r25, Z+24	; 0x18
     73c:	99 23       	and	r25, r25
     73e:	91 f0       	breq	.+36     	; 0x764 <StudioMicControl+0xd6>
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED)))
     740:	f9 01       	movw	r30, r18
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	ee 0f       	add	r30, r30
     748:	ff 1f       	adc	r31, r31
     74a:	ee 0f       	add	r30, r30
     74c:	ff 1f       	adc	r31, r31
     74e:	e5 5f       	subi	r30, 0xF5	; 245
     750:	f4 4d       	sbci	r31, 0xD4	; 212
     752:	91 81       	ldd	r25, Z+1	; 0x01
     754:	99 23       	and	r25, r25
     756:	34 f4       	brge	.+12     	; 0x764 <StudioMicControl+0xd6>
     758:	f9 01       	movw	r30, r18
     75a:	e0 56       	subi	r30, 0x60	; 96
     75c:	fd 4d       	sbci	r31, 0xDD	; 221
     75e:	90 81       	ld	r25, Z
     760:	95 fd       	sbrc	r25, 5
					StudioMicActive = 1; // !JB
     762:	51 e0       	ldi	r21, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char StudioMicActive=0;

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     764:	8f 5f       	subi	r24, 0xFF	; 255
     766:	80 31       	cpi	r24, 0x10	; 16
     768:	08 f4       	brcc	.+2      	; 0x76c <StudioMicControl+0xde>
     76a:	99 cf       	rjmp	.-206    	; 0x69e <StudioMicControl+0x10>
					StudioMicActive = 1; // !JB
			}
		}
	}

	if (StudioMicActive)
     76c:	55 23       	and	r21, r21
     76e:	19 f0       	breq	.+6      	; 0x776 <StudioMicControl+0xe8>
		ConsoleFunctionData[16] |= STUDIOMUTE_FUNCTION_LED;		
     770:	44 60       	ori	r20, 0x04	; 4
     772:	40 93 b0 22 	sts	0x22B0, r20	; 0x8022b0 <ConsoleFunctionData+0x10>

	if (ConsoleFunctionData[16]&STUDIOMUTE_FUNCTION_LED)
     776:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     77a:	82 ff       	sbrs	r24, 2
     77c:	19 c0       	rjmp	.+50     	; 0x7b0 <StudioMicControl+0x122>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     77e:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     782:	a1 e0       	ldi	r26, 0x01	; 1
     784:	ae 0f       	add	r26, r30
     786:	f0 e0       	ldi	r31, 0x00	; 0
     788:	eb 53       	subi	r30, 0x3B	; 59
     78a:	fc 4d       	sbci	r31, 0xDC	; 220
     78c:	80 ed       	ldi	r24, 0xD0	; 208
     78e:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_STUDIOMUTE;
     790:	e1 e0       	ldi	r30, 0x01	; 1
     792:	ea 0f       	add	r30, r26
     794:	b0 e0       	ldi	r27, 0x00	; 0
     796:	ab 53       	subi	r26, 0x3B	; 59
     798:	bc 4d       	sbci	r27, 0xDC	; 220
     79a:	81 e0       	ldi	r24, 0x01	; 1
     79c:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     79e:	91 e0       	ldi	r25, 0x01	; 1
     7a0:	9e 0f       	add	r25, r30
     7a2:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
     7a6:	f0 e0       	ldi	r31, 0x00	; 0
     7a8:	eb 53       	subi	r30, 0x3B	; 59
     7aa:	fc 4d       	sbci	r31, 0xDC	; 220
     7ac:	80 83       	st	Z, r24
     7ae:	17 c0       	rjmp	.+46     	; 0x7de <StudioMicControl+0x150>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     7b0:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     7b4:	a1 e0       	ldi	r26, 0x01	; 1
     7b6:	ae 0f       	add	r26, r30
     7b8:	f0 e0       	ldi	r31, 0x00	; 0
     7ba:	eb 53       	subi	r30, 0x3B	; 59
     7bc:	fc 4d       	sbci	r31, 0xDC	; 220
     7be:	80 ed       	ldi	r24, 0xD0	; 208
     7c0:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_STUDIOMUTE;
     7c2:	e1 e0       	ldi	r30, 0x01	; 1
     7c4:	ea 0f       	add	r30, r26
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	ab 53       	subi	r26, 0x3B	; 59
     7ca:	bc 4d       	sbci	r27, 0xDC	; 220
     7cc:	81 e0       	ldi	r24, 0x01	; 1
     7ce:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     7d0:	8e 0f       	add	r24, r30
     7d2:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	eb 53       	subi	r30, 0x3B	; 59
     7da:	fc 4d       	sbci	r31, 0xDC	; 220
     7dc:	10 82       	st	Z, r1
	}

	SendSerialData = 1;
     7de:	81 e0       	ldi	r24, 0x01	; 1
     7e0:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
     7e4:	08 95       	ret

000007e6 <DJControl>:
void DJControl()
{
	unsigned char cntModule;
	unsigned char DJMicActive=0;

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
     7e6:	e0 ea       	ldi	r30, 0xA0	; 160
     7e8:	f2 e2       	ldi	r31, 0x22	; 34
     7ea:	40 89       	ldd	r20, Z+16	; 0x10
     7ec:	4e 7f       	andi	r20, 0xFE	; 254
     7ee:	40 8b       	std	Z+16, r20	; 0x10


void DJControl()
{
	unsigned char cntModule;
	unsigned char DJMicActive=0;
     7f0:	50 e0       	ldi	r21, 0x00	; 0

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     7f2:	80 e0       	ldi	r24, 0x00	; 0
     7f4:	5f c0       	rjmp	.+190    	; 0x8b4 <__EEPROM_REGION_LENGTH__+0xb4>
	{
		if ((ConsoleModuleSettings[cntModule][DJMIC]) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
     7f6:	28 2f       	mov	r18, r24
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	9d e1       	ldi	r25, 0x1D	; 29
     7fc:	92 9f       	mul	r25, r18
     7fe:	f0 01       	movw	r30, r0
     800:	93 9f       	mul	r25, r19
     802:	f0 0d       	add	r31, r0
     804:	11 24       	eor	r1, r1
     806:	e5 5e       	subi	r30, 0xE5	; 229
     808:	f7 4c       	sbci	r31, 0xC7	; 199
     80a:	95 85       	ldd	r25, Z+13	; 0x0d
     80c:	99 23       	and	r25, r25
     80e:	09 f4       	brne	.+2      	; 0x812 <__EEPROM_REGION_LENGTH__+0x12>
     810:	50 c0       	rjmp	.+160    	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
     812:	f9 01       	movw	r30, r18
     814:	e0 59       	subi	r30, 0x90	; 144
     816:	fd 4d       	sbci	r31, 0xDD	; 221
     818:	90 81       	ld	r25, Z
     81a:	91 50       	subi	r25, 0x01	; 1
     81c:	92 30       	cpi	r25, 0x02	; 2
     81e:	08 f0       	brcs	.+2      	; 0x822 <__EEPROM_REGION_LENGTH__+0x22>
     820:	48 c0       	rjmp	.+144    	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED) || (ConsoleFunctionData[cntModule]&CUE_FUNCTION))
					DJMicActive = 1; // !JB
			}
		}*/
//v1.15
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     822:	f9 01       	movw	r30, r18
     824:	ee 0f       	add	r30, r30
     826:	ff 1f       	adc	r31, r31
     828:	ee 0f       	add	r30, r30
     82a:	ff 1f       	adc	r31, r31
     82c:	ee 0f       	add	r30, r30
     82e:	ff 1f       	adc	r31, r31
     830:	e5 5f       	subi	r30, 0xF5	; 245
     832:	f4 4d       	sbci	r31, 0xD4	; 212
     834:	97 81       	ldd	r25, Z+7	; 0x07
     836:	99 23       	and	r25, r25
     838:	24 f1       	brlt	.+72     	; 0x882 <__EEPROM_REGION_LENGTH__+0x82>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) || (((ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEB])))
     83a:	f9 01       	movw	r30, r18
     83c:	ee 0f       	add	r30, r30
     83e:	ff 1f       	adc	r31, r31
     840:	ee 0f       	add	r30, r30
     842:	ff 1f       	adc	r31, r31
     844:	ee 0f       	add	r30, r30
     846:	ff 1f       	adc	r31, r31
     848:	e5 5f       	subi	r30, 0xF5	; 245
     84a:	f4 4d       	sbci	r31, 0xD4	; 212
     84c:	96 81       	ldd	r25, Z+6	; 0x06
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED) || (ConsoleFunctionData[cntModule]&CUE_FUNCTION))
					DJMicActive = 1; // !JB
			}
		}*/
//v1.15
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     84e:	99 23       	and	r25, r25
     850:	5c f0       	brlt	.+22     	; 0x868 <__EEPROM_REGION_LENGTH__+0x68>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) || (((ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEB])))
     852:	6d e1       	ldi	r22, 0x1D	; 29
     854:	62 9f       	mul	r22, r18
     856:	f0 01       	movw	r30, r0
     858:	63 9f       	mul	r22, r19
     85a:	f0 0d       	add	r31, r0
     85c:	11 24       	eor	r1, r1
     85e:	e5 5e       	subi	r30, 0xE5	; 229
     860:	f7 4c       	sbci	r31, 0xC7	; 199
     862:	67 89       	ldd	r22, Z+23	; 0x17
     864:	61 11       	cpse	r22, r1
     866:	0d c0       	rjmp	.+26     	; 0x882 <__EEPROM_REGION_LENGTH__+0x82>
     868:	99 23       	and	r25, r25
     86a:	1c f5       	brge	.+70     	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
     86c:	9d e1       	ldi	r25, 0x1D	; 29
     86e:	92 9f       	mul	r25, r18
     870:	f0 01       	movw	r30, r0
     872:	93 9f       	mul	r25, r19
     874:	f0 0d       	add	r31, r0
     876:	11 24       	eor	r1, r1
     878:	e5 5e       	subi	r30, 0xE5	; 229
     87a:	f7 4c       	sbci	r31, 0xC7	; 199
     87c:	90 8d       	ldd	r25, Z+24	; 0x18
     87e:	99 23       	and	r25, r25
     880:	c1 f0       	breq	.+48     	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED) || (ConsoleFunctionData[cntModule]&CUE_FUNCTION)))
     882:	f9 01       	movw	r30, r18
     884:	ee 0f       	add	r30, r30
     886:	ff 1f       	adc	r31, r31
     888:	ee 0f       	add	r30, r30
     88a:	ff 1f       	adc	r31, r31
     88c:	ee 0f       	add	r30, r30
     88e:	ff 1f       	adc	r31, r31
     890:	e5 5f       	subi	r30, 0xF5	; 245
     892:	f4 4d       	sbci	r31, 0xD4	; 212
     894:	91 81       	ldd	r25, Z+1	; 0x01
     896:	99 23       	and	r25, r25
     898:	64 f4       	brge	.+24     	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
     89a:	f9 01       	movw	r30, r18
     89c:	e0 56       	subi	r30, 0x60	; 96
     89e:	fd 4d       	sbci	r31, 0xDD	; 221
     8a0:	90 81       	ld	r25, Z
     8a2:	95 fd       	sbrc	r25, 5
     8a4:	03 c0       	rjmp	.+6      	; 0x8ac <__EEPROM_REGION_LENGTH__+0xac>
     8a6:	92 fd       	sbrc	r25, 2
     8a8:	03 c0       	rjmp	.+6      	; 0x8b0 <__EEPROM_REGION_LENGTH__+0xb0>
     8aa:	03 c0       	rjmp	.+6      	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
					DJMicActive = 1; // !JB
     8ac:	51 e0       	ldi	r21, 0x01	; 1
     8ae:	01 c0       	rjmp	.+2      	; 0x8b2 <__EEPROM_REGION_LENGTH__+0xb2>
     8b0:	51 e0       	ldi	r21, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char DJMicActive=0;

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     8b2:	8f 5f       	subi	r24, 0xFF	; 255
     8b4:	80 31       	cpi	r24, 0x10	; 16
     8b6:	08 f4       	brcc	.+2      	; 0x8ba <__EEPROM_REGION_LENGTH__+0xba>
     8b8:	9e cf       	rjmp	.-196    	; 0x7f6 <DJControl+0x10>
					DJMicActive = 1; // !JB
			}
		}
	}

	if (DJMicActive)
     8ba:	55 23       	and	r21, r21
     8bc:	19 f0       	breq	.+6      	; 0x8c4 <__EEPROM_REGION_LENGTH__+0xc4>
		ConsoleFunctionData[16] |= CRMMUTE_FUNCTION_LED;		
     8be:	41 60       	ori	r20, 0x01	; 1
     8c0:	40 93 b0 22 	sts	0x22B0, r20	; 0x8022b0 <ConsoleFunctionData+0x10>

	if (ConsoleFunctionData[16]&CRMMUTE_FUNCTION_LED)
     8c4:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     8c8:	80 ff       	sbrs	r24, 0
     8ca:	19 c0       	rjmp	.+50     	; 0x8fe <__EEPROM_REGION_LENGTH__+0xfe>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     8cc:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     8d0:	a1 e0       	ldi	r26, 0x01	; 1
     8d2:	ae 0f       	add	r26, r30
     8d4:	f0 e0       	ldi	r31, 0x00	; 0
     8d6:	eb 53       	subi	r30, 0x3B	; 59
     8d8:	fc 4d       	sbci	r31, 0xDC	; 220
     8da:	80 ed       	ldi	r24, 0xD0	; 208
     8dc:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CRMMUTE;
     8de:	e1 e0       	ldi	r30, 0x01	; 1
     8e0:	ea 0f       	add	r30, r26
     8e2:	b0 e0       	ldi	r27, 0x00	; 0
     8e4:	ab 53       	subi	r26, 0x3B	; 59
     8e6:	bc 4d       	sbci	r27, 0xDC	; 220
     8e8:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     8ea:	81 e0       	ldi	r24, 0x01	; 1
     8ec:	8e 0f       	add	r24, r30
     8ee:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	eb 53       	subi	r30, 0x3B	; 59
     8f6:	fc 4d       	sbci	r31, 0xDC	; 220
     8f8:	81 e0       	ldi	r24, 0x01	; 1
     8fa:	80 83       	st	Z, r24
     8fc:	17 c0       	rjmp	.+46     	; 0x92c <__EEPROM_REGION_LENGTH__+0x12c>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     8fe:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     902:	a1 e0       	ldi	r26, 0x01	; 1
     904:	ae 0f       	add	r26, r30
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	eb 53       	subi	r30, 0x3B	; 59
     90a:	fc 4d       	sbci	r31, 0xDC	; 220
     90c:	80 ed       	ldi	r24, 0xD0	; 208
     90e:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CRMMUTE;
     910:	e1 e0       	ldi	r30, 0x01	; 1
     912:	ea 0f       	add	r30, r26
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	ab 53       	subi	r26, 0x3B	; 59
     918:	bc 4d       	sbci	r27, 0xDC	; 220
     91a:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	8e 0f       	add	r24, r30
     920:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     924:	f0 e0       	ldi	r31, 0x00	; 0
     926:	eb 53       	subi	r30, 0x3B	; 59
     928:	fc 4d       	sbci	r31, 0xDC	; 220
     92a:	10 82       	st	Z, r1
	}
	SendSerialData = 1;
     92c:	81 e0       	ldi	r24, 0x01	; 1
     92e:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
     932:	08 95       	ret

00000934 <OnAirControl>:

void OnAirControl()
{
	unsigned char cntModule;
	unsigned char OnAir1=0;
	unsigned char OnAir2=0;
     934:	40 e0       	ldi	r20, 0x00	; 0
}

void OnAirControl()
{
	unsigned char cntModule;
	unsigned char OnAir1=0;
     936:	50 e0       	ldi	r21, 0x00	; 0
	unsigned char OnAir2=0;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     938:	80 e0       	ldi	r24, 0x00	; 0
     93a:	e0 c0       	rjmp	.+448    	; 0xafc <OnAirControl+0x1c8>
	{
		if  ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO))
     93c:	28 2f       	mov	r18, r24
     93e:	30 e0       	ldi	r19, 0x00	; 0
     940:	f9 01       	movw	r30, r18
     942:	e0 59       	subi	r30, 0x90	; 144
     944:	fd 4d       	sbci	r31, 0xDD	; 221
     946:	90 81       	ld	r25, Z
     948:	91 50       	subi	r25, 0x01	; 1
     94a:	92 30       	cpi	r25, 0x02	; 2
     94c:	08 f0       	brcs	.+2      	; 0x950 <OnAirControl+0x1c>
     94e:	d5 c0       	rjmp	.+426    	; 0xafa <OnAirControl+0x1c6>
		{
			if (ModuleData[cntModule][MIC_RING]&0x80)
     950:	f9 01       	movw	r30, r18
     952:	ee 0f       	add	r30, r30
     954:	ff 1f       	adc	r31, r31
     956:	ee 0f       	add	r30, r30
     958:	ff 1f       	adc	r31, r31
     95a:	ee 0f       	add	r30, r30
     95c:	ff 1f       	adc	r31, r31
     95e:	e5 5f       	subi	r30, 0xF5	; 245
     960:	f4 4d       	sbci	r31, 0xD4	; 212
     962:	97 81       	ldd	r25, Z+7	; 0x07
     964:	99 23       	and	r25, r25
     966:	ec f5       	brge	.+122    	; 0x9e2 <OnAirControl+0xae>
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1MIC])
     968:	9d e1       	ldi	r25, 0x1D	; 29
     96a:	92 9f       	mul	r25, r18
     96c:	f0 01       	movw	r30, r0
     96e:	93 9f       	mul	r25, r19
     970:	f0 0d       	add	r31, r0
     972:	11 24       	eor	r1, r1
     974:	e5 5e       	subi	r30, 0xE5	; 229
     976:	f7 4c       	sbci	r31, 0xC7	; 199
     978:	92 89       	ldd	r25, Z+18	; 0x12
     97a:	99 23       	and	r25, r25
     97c:	91 f0       	breq	.+36     	; 0x9a2 <OnAirControl+0x6e>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     97e:	f9 01       	movw	r30, r18
     980:	ee 0f       	add	r30, r30
     982:	ff 1f       	adc	r31, r31
     984:	ee 0f       	add	r30, r30
     986:	ff 1f       	adc	r31, r31
     988:	ee 0f       	add	r30, r30
     98a:	ff 1f       	adc	r31, r31
     98c:	e5 5f       	subi	r30, 0xF5	; 245
     98e:	f4 4d       	sbci	r31, 0xD4	; 212
     990:	91 81       	ldd	r25, Z+1	; 0x01
     992:	99 23       	and	r25, r25
     994:	34 f4       	brge	.+12     	; 0x9a2 <OnAirControl+0x6e>
     996:	f9 01       	movw	r30, r18
     998:	e0 56       	subi	r30, 0x60	; 96
     99a:	fd 4d       	sbci	r31, 0xDD	; 221
     99c:	90 81       	ld	r25, Z
     99e:	95 fd       	sbrc	r25, 5
				OnAir1 = 1;	 // !JB
     9a0:	51 e0       	ldi	r21, 0x01	; 1
				if (ConsoleModuleSettings[cntModule][ONAIR2MIC])
     9a2:	9d e1       	ldi	r25, 0x1D	; 29
     9a4:	92 9f       	mul	r25, r18
     9a6:	f0 01       	movw	r30, r0
     9a8:	93 9f       	mul	r25, r19
     9aa:	f0 0d       	add	r31, r0
     9ac:	11 24       	eor	r1, r1
     9ae:	e5 5e       	subi	r30, 0xE5	; 229
     9b0:	f7 4c       	sbci	r31, 0xC7	; 199
     9b2:	95 89       	ldd	r25, Z+21	; 0x15
     9b4:	99 23       	and	r25, r25
     9b6:	09 f4       	brne	.+2      	; 0x9ba <OnAirControl+0x86>
     9b8:	a0 c0       	rjmp	.+320    	; 0xafa <OnAirControl+0x1c6>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     9ba:	f9 01       	movw	r30, r18
     9bc:	ee 0f       	add	r30, r30
     9be:	ff 1f       	adc	r31, r31
     9c0:	ee 0f       	add	r30, r30
     9c2:	ff 1f       	adc	r31, r31
     9c4:	ee 0f       	add	r30, r30
     9c6:	ff 1f       	adc	r31, r31
     9c8:	e5 5f       	subi	r30, 0xF5	; 245
     9ca:	f4 4d       	sbci	r31, 0xD4	; 212
     9cc:	91 81       	ldd	r25, Z+1	; 0x01
     9ce:	99 23       	and	r25, r25
     9d0:	0c f0       	brlt	.+2      	; 0x9d4 <OnAirControl+0xa0>
     9d2:	93 c0       	rjmp	.+294    	; 0xafa <OnAirControl+0x1c6>
     9d4:	f9 01       	movw	r30, r18
     9d6:	e0 56       	subi	r30, 0x60	; 96
     9d8:	fd 4d       	sbci	r31, 0xDD	; 221
     9da:	90 81       	ld	r25, Z
     9dc:	95 fd       	sbrc	r25, 5
     9de:	88 c0       	rjmp	.+272    	; 0xaf0 <OnAirControl+0x1bc>
     9e0:	8c c0       	rjmp	.+280    	; 0xafa <OnAirControl+0x1c6>
				OnAir2 = 1;	 // !JB
			}
			else if (!(ModuleData[cntModule][LINEB]&0x80))
     9e2:	f9 01       	movw	r30, r18
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	ee 0f       	add	r30, r30
     9ea:	ff 1f       	adc	r31, r31
     9ec:	ee 0f       	add	r30, r30
     9ee:	ff 1f       	adc	r31, r31
     9f0:	e5 5f       	subi	r30, 0xF5	; 245
     9f2:	f4 4d       	sbci	r31, 0xD4	; 212
     9f4:	96 81       	ldd	r25, Z+6	; 0x06
     9f6:	99 23       	and	r25, r25
     9f8:	ec f1       	brlt	.+122    	; 0xa74 <OnAirControl+0x140>
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEA])
     9fa:	9d e1       	ldi	r25, 0x1D	; 29
     9fc:	92 9f       	mul	r25, r18
     9fe:	f0 01       	movw	r30, r0
     a00:	93 9f       	mul	r25, r19
     a02:	f0 0d       	add	r31, r0
     a04:	11 24       	eor	r1, r1
     a06:	e5 5e       	subi	r30, 0xE5	; 229
     a08:	f7 4c       	sbci	r31, 0xC7	; 199
     a0a:	90 89       	ldd	r25, Z+16	; 0x10
     a0c:	99 23       	and	r25, r25
     a0e:	91 f0       	breq	.+36     	; 0xa34 <OnAirControl+0x100>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     a10:	f9 01       	movw	r30, r18
     a12:	ee 0f       	add	r30, r30
     a14:	ff 1f       	adc	r31, r31
     a16:	ee 0f       	add	r30, r30
     a18:	ff 1f       	adc	r31, r31
     a1a:	ee 0f       	add	r30, r30
     a1c:	ff 1f       	adc	r31, r31
     a1e:	e5 5f       	subi	r30, 0xF5	; 245
     a20:	f4 4d       	sbci	r31, 0xD4	; 212
     a22:	91 81       	ldd	r25, Z+1	; 0x01
     a24:	99 23       	and	r25, r25
     a26:	34 f4       	brge	.+12     	; 0xa34 <OnAirControl+0x100>
     a28:	f9 01       	movw	r30, r18
     a2a:	e0 56       	subi	r30, 0x60	; 96
     a2c:	fd 4d       	sbci	r31, 0xDD	; 221
     a2e:	90 81       	ld	r25, Z
     a30:	95 fd       	sbrc	r25, 5
				OnAir1 = 1;	// !JB
     a32:	51 e0       	ldi	r21, 0x01	; 1
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEA])
     a34:	9d e1       	ldi	r25, 0x1D	; 29
     a36:	92 9f       	mul	r25, r18
     a38:	f0 01       	movw	r30, r0
     a3a:	93 9f       	mul	r25, r19
     a3c:	f0 0d       	add	r31, r0
     a3e:	11 24       	eor	r1, r1
     a40:	e5 5e       	subi	r30, 0xE5	; 229
     a42:	f7 4c       	sbci	r31, 0xC7	; 199
     a44:	93 89       	ldd	r25, Z+19	; 0x13
     a46:	99 23       	and	r25, r25
     a48:	09 f4       	brne	.+2      	; 0xa4c <OnAirControl+0x118>
     a4a:	57 c0       	rjmp	.+174    	; 0xafa <OnAirControl+0x1c6>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     a4c:	f9 01       	movw	r30, r18
     a4e:	ee 0f       	add	r30, r30
     a50:	ff 1f       	adc	r31, r31
     a52:	ee 0f       	add	r30, r30
     a54:	ff 1f       	adc	r31, r31
     a56:	ee 0f       	add	r30, r30
     a58:	ff 1f       	adc	r31, r31
     a5a:	e5 5f       	subi	r30, 0xF5	; 245
     a5c:	f4 4d       	sbci	r31, 0xD4	; 212
     a5e:	91 81       	ldd	r25, Z+1	; 0x01
     a60:	99 23       	and	r25, r25
     a62:	0c f0       	brlt	.+2      	; 0xa66 <OnAirControl+0x132>
     a64:	4a c0       	rjmp	.+148    	; 0xafa <OnAirControl+0x1c6>
     a66:	f9 01       	movw	r30, r18
     a68:	e0 56       	subi	r30, 0x60	; 96
     a6a:	fd 4d       	sbci	r31, 0xDD	; 221
     a6c:	90 81       	ld	r25, Z
     a6e:	95 fd       	sbrc	r25, 5
     a70:	41 c0       	rjmp	.+130    	; 0xaf4 <OnAirControl+0x1c0>
     a72:	43 c0       	rjmp	.+134    	; 0xafa <OnAirControl+0x1c6>
				OnAir2 = 1;	// !JB
			}
			else if (ModuleData[cntModule][LINEB]&0x80)
     a74:	99 23       	and	r25, r25
     a76:	0c f0       	brlt	.+2      	; 0xa7a <OnAirControl+0x146>
     a78:	40 c0       	rjmp	.+128    	; 0xafa <OnAirControl+0x1c6>
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEB])
     a7a:	9d e1       	ldi	r25, 0x1D	; 29
     a7c:	92 9f       	mul	r25, r18
     a7e:	f0 01       	movw	r30, r0
     a80:	93 9f       	mul	r25, r19
     a82:	f0 0d       	add	r31, r0
     a84:	11 24       	eor	r1, r1
     a86:	e5 5e       	subi	r30, 0xE5	; 229
     a88:	f7 4c       	sbci	r31, 0xC7	; 199
     a8a:	91 89       	ldd	r25, Z+17	; 0x11
     a8c:	99 23       	and	r25, r25
     a8e:	91 f0       	breq	.+36     	; 0xab4 <OnAirControl+0x180>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     a90:	f9 01       	movw	r30, r18
     a92:	ee 0f       	add	r30, r30
     a94:	ff 1f       	adc	r31, r31
     a96:	ee 0f       	add	r30, r30
     a98:	ff 1f       	adc	r31, r31
     a9a:	ee 0f       	add	r30, r30
     a9c:	ff 1f       	adc	r31, r31
     a9e:	e5 5f       	subi	r30, 0xF5	; 245
     aa0:	f4 4d       	sbci	r31, 0xD4	; 212
     aa2:	91 81       	ldd	r25, Z+1	; 0x01
     aa4:	99 23       	and	r25, r25
     aa6:	34 f4       	brge	.+12     	; 0xab4 <OnAirControl+0x180>
     aa8:	f9 01       	movw	r30, r18
     aaa:	e0 56       	subi	r30, 0x60	; 96
     aac:	fd 4d       	sbci	r31, 0xDD	; 221
     aae:	90 81       	ld	r25, Z
     ab0:	95 fd       	sbrc	r25, 5
				OnAir1 = 1;	 // !JB
     ab2:	51 e0       	ldi	r21, 0x01	; 1
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEB])
     ab4:	9d e1       	ldi	r25, 0x1D	; 29
     ab6:	92 9f       	mul	r25, r18
     ab8:	f0 01       	movw	r30, r0
     aba:	93 9f       	mul	r25, r19
     abc:	f0 0d       	add	r31, r0
     abe:	11 24       	eor	r1, r1
     ac0:	e5 5e       	subi	r30, 0xE5	; 229
     ac2:	f7 4c       	sbci	r31, 0xC7	; 199
     ac4:	94 89       	ldd	r25, Z+20	; 0x14
     ac6:	99 23       	and	r25, r25
     ac8:	c1 f0       	breq	.+48     	; 0xafa <OnAirControl+0x1c6>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     aca:	f9 01       	movw	r30, r18
     acc:	ee 0f       	add	r30, r30
     ace:	ff 1f       	adc	r31, r31
     ad0:	ee 0f       	add	r30, r30
     ad2:	ff 1f       	adc	r31, r31
     ad4:	ee 0f       	add	r30, r30
     ad6:	ff 1f       	adc	r31, r31
     ad8:	e5 5f       	subi	r30, 0xF5	; 245
     ada:	f4 4d       	sbci	r31, 0xD4	; 212
     adc:	91 81       	ldd	r25, Z+1	; 0x01
     ade:	99 23       	and	r25, r25
     ae0:	64 f4       	brge	.+24     	; 0xafa <OnAirControl+0x1c6>
     ae2:	f9 01       	movw	r30, r18
     ae4:	e0 56       	subi	r30, 0x60	; 96
     ae6:	fd 4d       	sbci	r31, 0xDD	; 221
     ae8:	90 81       	ld	r25, Z
     aea:	95 fd       	sbrc	r25, 5
     aec:	05 c0       	rjmp	.+10     	; 0xaf8 <OnAirControl+0x1c4>
     aee:	05 c0       	rjmp	.+10     	; 0xafa <OnAirControl+0x1c6>
				if (ConsoleModuleSettings[cntModule][ONAIR1MIC])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	 // !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2MIC])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir2 = 1;	 // !JB
     af0:	41 e0       	ldi	r20, 0x01	; 1
     af2:	03 c0       	rjmp	.+6      	; 0xafa <OnAirControl+0x1c6>
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEA])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	// !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEA])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir2 = 1;	// !JB
     af4:	41 e0       	ldi	r20, 0x01	; 1
     af6:	01 c0       	rjmp	.+2      	; 0xafa <OnAirControl+0x1c6>
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEB])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	 // !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEB])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir2 = 1;	// !JB
     af8:	41 e0       	ldi	r20, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char OnAir1=0;
	unsigned char OnAir2=0;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     afa:	8f 5f       	subi	r24, 0xFF	; 255
     afc:	80 31       	cpi	r24, 0x10	; 16
     afe:	08 f4       	brcc	.+2      	; 0xb02 <OnAirControl+0x1ce>
     b00:	1d cf       	rjmp	.-454    	; 0x93c <OnAirControl+0x8>
				OnAir2 = 1;	// !JB
			}
		}
	}
	
	ConsoleFunctionData[16] &= ONAIR1_FUNCTION^0xFF;
     b02:	e0 ea       	ldi	r30, 0xA0	; 160
     b04:	f2 e2       	ldi	r31, 0x22	; 34
     b06:	80 89       	ldd	r24, Z+16	; 0x10
	ConsoleFunctionData[16] &= ONAIR2_FUNCTION^0xFF;
     b08:	8f 7c       	andi	r24, 0xCF	; 207
     b0a:	80 8b       	std	Z+16, r24	; 0x10
	if (OnAir1)
     b0c:	55 23       	and	r21, r21
     b0e:	19 f0       	breq	.+6      	; 0xb16 <OnAirControl+0x1e2>
	ConsoleFunctionData[16] |= ONAIR1_FUNCTION;
     b10:	80 62       	ori	r24, 0x20	; 32
     b12:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
	if (OnAir2)
     b16:	44 23       	and	r20, r20
     b18:	29 f0       	breq	.+10     	; 0xb24 <OnAirControl+0x1f0>
	ConsoleFunctionData[16] |= ONAIR2_FUNCTION;
     b1a:	e0 ea       	ldi	r30, 0xA0	; 160
     b1c:	f2 e2       	ldi	r31, 0x22	; 34
     b1e:	80 89       	ldd	r24, Z+16	; 0x10
     b20:	80 61       	ori	r24, 0x10	; 16
     b22:	80 8b       	std	Z+16, r24	; 0x10

	if (ConsoleFunctionData[16]&ONAIR1_FUNCTION)
     b24:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     b28:	85 ff       	sbrs	r24, 5
     b2a:	19 c0       	rjmp	.+50     	; 0xb5e <OnAirControl+0x22a>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR1;
     b2c:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     b30:	a1 e0       	ldi	r26, 0x01	; 1
     b32:	ae 0f       	add	r26, r30
     b34:	f0 e0       	ldi	r31, 0x00	; 0
     b36:	eb 53       	subi	r30, 0x3B	; 59
     b38:	fc 4d       	sbci	r31, 0xDC	; 220
     b3a:	84 e8       	ldi	r24, 0x84	; 132
     b3c:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     b3e:	e1 e0       	ldi	r30, 0x01	; 1
     b40:	ea 0f       	add	r30, r26
     b42:	b0 e0       	ldi	r27, 0x00	; 0
     b44:	ab 53       	subi	r26, 0x3B	; 59
     b46:	bc 4d       	sbci	r27, 0xDC	; 220
     b48:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8e 0f       	add	r24, r30
     b4e:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     b52:	f0 e0       	ldi	r31, 0x00	; 0
     b54:	eb 53       	subi	r30, 0x3B	; 59
     b56:	fc 4d       	sbci	r31, 0xDC	; 220
     b58:	81 e0       	ldi	r24, 0x01	; 1
     b5a:	80 83       	st	Z, r24
     b5c:	17 c0       	rjmp	.+46     	; 0xb8c <OnAirControl+0x258>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR1;
     b5e:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     b62:	a1 e0       	ldi	r26, 0x01	; 1
     b64:	ae 0f       	add	r26, r30
     b66:	f0 e0       	ldi	r31, 0x00	; 0
     b68:	eb 53       	subi	r30, 0x3B	; 59
     b6a:	fc 4d       	sbci	r31, 0xDC	; 220
     b6c:	84 e8       	ldi	r24, 0x84	; 132
     b6e:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     b70:	e1 e0       	ldi	r30, 0x01	; 1
     b72:	ea 0f       	add	r30, r26
     b74:	b0 e0       	ldi	r27, 0x00	; 0
     b76:	ab 53       	subi	r26, 0x3B	; 59
     b78:	bc 4d       	sbci	r27, 0xDC	; 220
     b7a:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	8e 0f       	add	r24, r30
     b80:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     b84:	f0 e0       	ldi	r31, 0x00	; 0
     b86:	eb 53       	subi	r30, 0x3B	; 59
     b88:	fc 4d       	sbci	r31, 0xDC	; 220
     b8a:	10 82       	st	Z, r1
	}

	if (ConsoleFunctionData[16]&ONAIR2_FUNCTION)
     b8c:	80 91 b0 22 	lds	r24, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     b90:	84 ff       	sbrs	r24, 4
     b92:	19 c0       	rjmp	.+50     	; 0xbc6 <OnAirControl+0x292>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR2;
     b94:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     b98:	a1 e0       	ldi	r26, 0x01	; 1
     b9a:	ae 0f       	add	r26, r30
     b9c:	f0 e0       	ldi	r31, 0x00	; 0
     b9e:	eb 53       	subi	r30, 0x3B	; 59
     ba0:	fc 4d       	sbci	r31, 0xDC	; 220
     ba2:	85 e8       	ldi	r24, 0x85	; 133
     ba4:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     ba6:	e1 e0       	ldi	r30, 0x01	; 1
     ba8:	ea 0f       	add	r30, r26
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ab 53       	subi	r26, 0x3B	; 59
     bae:	bc 4d       	sbci	r27, 0xDC	; 220
     bb0:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     bb2:	81 e0       	ldi	r24, 0x01	; 1
     bb4:	8e 0f       	add	r24, r30
     bb6:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     bba:	f0 e0       	ldi	r31, 0x00	; 0
     bbc:	eb 53       	subi	r30, 0x3B	; 59
     bbe:	fc 4d       	sbci	r31, 0xDC	; 220
     bc0:	81 e0       	ldi	r24, 0x01	; 1
     bc2:	80 83       	st	Z, r24
     bc4:	17 c0       	rjmp	.+46     	; 0xbf4 <OnAirControl+0x2c0>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR2;
     bc6:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     bca:	a1 e0       	ldi	r26, 0x01	; 1
     bcc:	ae 0f       	add	r26, r30
     bce:	f0 e0       	ldi	r31, 0x00	; 0
     bd0:	eb 53       	subi	r30, 0x3B	; 59
     bd2:	fc 4d       	sbci	r31, 0xDC	; 220
     bd4:	85 e8       	ldi	r24, 0x85	; 133
     bd6:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     bd8:	e1 e0       	ldi	r30, 0x01	; 1
     bda:	ea 0f       	add	r30, r26
     bdc:	b0 e0       	ldi	r27, 0x00	; 0
     bde:	ab 53       	subi	r26, 0x3B	; 59
     be0:	bc 4d       	sbci	r27, 0xDC	; 220
     be2:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	8e 0f       	add	r24, r30
     be8:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	eb 53       	subi	r30, 0x3B	; 59
     bf0:	fc 4d       	sbci	r31, 0xDC	; 220
     bf2:	10 82       	st	Z, r1
	}
	SendSerialData = 1;
     bf4:	81 e0       	ldi	r24, 0x01	; 1
     bf6:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
     bfa:	08 95       	ret

00000bfc <StartControl>:

void StartControl(unsigned char Module, unsigned char On)
{
	unsigned char Status = 0;

	ConsoleFunctionData[Module] &= START_FUNCTION^0xFF;
     bfc:	28 2f       	mov	r18, r24
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	f9 01       	movw	r30, r18
     c02:	e0 56       	subi	r30, 0x60	; 96
     c04:	fd 4d       	sbci	r31, 0xDD	; 221
     c06:	90 81       	ld	r25, Z
     c08:	9d 7f       	andi	r25, 0xFD	; 253
     c0a:	90 83       	st	Z, r25
	if (On)
     c0c:	66 23       	and	r22, r22
     c0e:	09 f4       	brne	.+2      	; 0xc12 <StartControl+0x16>
     c10:	4c c0       	rjmp	.+152    	; 0xcaa <StartControl+0xae>
	{
		if (ModuleData[Module][MIC_RING]&0x80)
     c12:	f9 01       	movw	r30, r18
     c14:	ee 0f       	add	r30, r30
     c16:	ff 1f       	adc	r31, r31
     c18:	ee 0f       	add	r30, r30
     c1a:	ff 1f       	adc	r31, r31
     c1c:	ee 0f       	add	r30, r30
     c1e:	ff 1f       	adc	r31, r31
     c20:	e5 5f       	subi	r30, 0xF5	; 245
     c22:	f4 4d       	sbci	r31, 0xD4	; 212
     c24:	47 81       	ldd	r20, Z+7	; 0x07
     c26:	44 23       	and	r20, r20
     c28:	8c f4       	brge	.+34     	; 0xc4c <StartControl+0x50>
		{
			if (ConsoleModuleSettings[Module][STARTMIC])
     c2a:	4d e1       	ldi	r20, 0x1D	; 29
     c2c:	42 9f       	mul	r20, r18
     c2e:	f0 01       	movw	r30, r0
     c30:	43 9f       	mul	r20, r19
     c32:	f0 0d       	add	r31, r0
     c34:	11 24       	eor	r1, r1
     c36:	e5 5e       	subi	r30, 0xE5	; 229
     c38:	f7 4c       	sbci	r31, 0xC7	; 199
     c3a:	45 81       	ldd	r20, Z+5	; 0x05
     c3c:	44 23       	and	r20, r20
     c3e:	a9 f1       	breq	.+106    	; 0xcaa <StartControl+0xae>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     c40:	f9 01       	movw	r30, r18
     c42:	e0 56       	subi	r30, 0x60	; 96
     c44:	fd 4d       	sbci	r31, 0xDD	; 221
     c46:	92 60       	ori	r25, 0x02	; 2
     c48:	90 83       	st	Z, r25
     c4a:	2f c0       	rjmp	.+94     	; 0xcaa <StartControl+0xae>
		}
		else if (!(ModuleData[Module][LINEB]&0x80))
     c4c:	f9 01       	movw	r30, r18
     c4e:	ee 0f       	add	r30, r30
     c50:	ff 1f       	adc	r31, r31
     c52:	ee 0f       	add	r30, r30
     c54:	ff 1f       	adc	r31, r31
     c56:	ee 0f       	add	r30, r30
     c58:	ff 1f       	adc	r31, r31
     c5a:	e5 5f       	subi	r30, 0xF5	; 245
     c5c:	f4 4d       	sbci	r31, 0xD4	; 212
     c5e:	46 81       	ldd	r20, Z+6	; 0x06
     c60:	44 23       	and	r20, r20
     c62:	8c f0       	brlt	.+34     	; 0xc86 <StartControl+0x8a>
		{
			if (ConsoleModuleSettings[Module][STARTLINEA])
     c64:	4d e1       	ldi	r20, 0x1D	; 29
     c66:	42 9f       	mul	r20, r18
     c68:	f0 01       	movw	r30, r0
     c6a:	43 9f       	mul	r20, r19
     c6c:	f0 0d       	add	r31, r0
     c6e:	11 24       	eor	r1, r1
     c70:	e5 5e       	subi	r30, 0xE5	; 229
     c72:	f7 4c       	sbci	r31, 0xC7	; 199
     c74:	43 81       	ldd	r20, Z+3	; 0x03
     c76:	44 23       	and	r20, r20
     c78:	c1 f0       	breq	.+48     	; 0xcaa <StartControl+0xae>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     c7a:	f9 01       	movw	r30, r18
     c7c:	e0 56       	subi	r30, 0x60	; 96
     c7e:	fd 4d       	sbci	r31, 0xDD	; 221
     c80:	92 60       	ori	r25, 0x02	; 2
     c82:	90 83       	st	Z, r25
     c84:	12 c0       	rjmp	.+36     	; 0xcaa <StartControl+0xae>
		}
		else if (ModuleData[Module][LINEB]&0x80)
     c86:	44 23       	and	r20, r20
     c88:	84 f4       	brge	.+32     	; 0xcaa <StartControl+0xae>
		{
			if (ConsoleModuleSettings[Module][STARTLINEB])
     c8a:	4d e1       	ldi	r20, 0x1D	; 29
     c8c:	42 9f       	mul	r20, r18
     c8e:	f0 01       	movw	r30, r0
     c90:	43 9f       	mul	r20, r19
     c92:	f0 0d       	add	r31, r0
     c94:	11 24       	eor	r1, r1
     c96:	e5 5e       	subi	r30, 0xE5	; 229
     c98:	f7 4c       	sbci	r31, 0xC7	; 199
     c9a:	44 81       	ldd	r20, Z+4	; 0x04
     c9c:	44 23       	and	r20, r20
     c9e:	29 f0       	breq	.+10     	; 0xcaa <StartControl+0xae>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     ca0:	f9 01       	movw	r30, r18
     ca2:	e0 56       	subi	r30, 0x60	; 96
     ca4:	fd 4d       	sbci	r31, 0xDD	; 221
     ca6:	92 60       	ori	r25, 0x02	; 2
     ca8:	90 83       	st	Z, r25
		}
	}
	
	cntStartPuls[Module] = 0;
     caa:	f9 01       	movw	r30, r18
     cac:	e5 51       	subi	r30, 0x15	; 21
     cae:	f6 4c       	sbci	r31, 0xC6	; 198
     cb0:	10 82       	st	Z, r1
	if ((ConsoleFunctionData[Module]&START_FUNCTION) && (ConsoleModuleSettings[Module][STARTPULS]))
     cb2:	f9 01       	movw	r30, r18
     cb4:	e0 56       	subi	r30, 0x60	; 96
     cb6:	fd 4d       	sbci	r31, 0xDD	; 221
     cb8:	90 81       	ld	r25, Z
     cba:	49 2f       	mov	r20, r25
     cbc:	42 70       	andi	r20, 0x02	; 2
     cbe:	91 ff       	sbrs	r25, 1
     cc0:	10 c0       	rjmp	.+32     	; 0xce2 <StartControl+0xe6>
     cc2:	9d e1       	ldi	r25, 0x1D	; 29
     cc4:	92 9f       	mul	r25, r18
     cc6:	f0 01       	movw	r30, r0
     cc8:	93 9f       	mul	r25, r19
     cca:	f0 0d       	add	r31, r0
     ccc:	11 24       	eor	r1, r1
     cce:	e5 5e       	subi	r30, 0xE5	; 229
     cd0:	f7 4c       	sbci	r31, 0xC7	; 199
     cd2:	91 85       	ldd	r25, Z+9	; 0x09
     cd4:	99 23       	and	r25, r25
     cd6:	29 f0       	breq	.+10     	; 0xce2 <StartControl+0xe6>
	{
		cntStartPuls[Module] = PULSWIDTH;
     cd8:	f9 01       	movw	r30, r18
     cda:	e5 51       	subi	r30, 0x15	; 21
     cdc:	f6 4c       	sbci	r31, 0xC6	; 198
     cde:	9a e0       	ldi	r25, 0x0A	; 10
     ce0:	90 83       	st	Z, r25
	}

	if (ConsoleFunctionData[Module]&START_FUNCTION)
     ce2:	44 23       	and	r20, r20
     ce4:	c9 f0       	breq	.+50     	; 0xd18 <StartControl+0x11c>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
     ce6:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     cea:	a1 e0       	ldi	r26, 0x01	; 1
     cec:	ae 0f       	add	r26, r30
     cee:	f0 e0       	ldi	r31, 0x00	; 0
     cf0:	eb 53       	subi	r30, 0x3B	; 59
     cf2:	fc 4d       	sbci	r31, 0xDC	; 220
     cf4:	92 e8       	ldi	r25, 0x82	; 130
     cf6:	90 83       	st	Z, r25
		SerialBufferOut[SerialBufferOutPtrTop++] = Module;
     cf8:	e1 e0       	ldi	r30, 0x01	; 1
     cfa:	ea 0f       	add	r30, r26
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	ab 53       	subi	r26, 0x3B	; 59
     d00:	bc 4d       	sbci	r27, 0xDC	; 220
     d02:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     d04:	81 e0       	ldi	r24, 0x01	; 1
     d06:	8e 0f       	add	r24, r30
     d08:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	eb 53       	subi	r30, 0x3B	; 59
     d10:	fc 4d       	sbci	r31, 0xDC	; 220
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	80 83       	st	Z, r24
     d16:	18 c0       	rjmp	.+48     	; 0xd48 <StartControl+0x14c>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_STOP;
     d18:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
     d1c:	a1 e0       	ldi	r26, 0x01	; 1
     d1e:	ae 0f       	add	r26, r30
     d20:	f0 e0       	ldi	r31, 0x00	; 0
     d22:	eb 53       	subi	r30, 0x3B	; 59
     d24:	fc 4d       	sbci	r31, 0xDC	; 220
     d26:	93 e8       	ldi	r25, 0x83	; 131
     d28:	90 83       	st	Z, r25
		SerialBufferOut[SerialBufferOutPtrTop++] = Module;
     d2a:	e1 e0       	ldi	r30, 0x01	; 1
     d2c:	ea 0f       	add	r30, r26
     d2e:	b0 e0       	ldi	r27, 0x00	; 0
     d30:	ab 53       	subi	r26, 0x3B	; 59
     d32:	bc 4d       	sbci	r27, 0xDC	; 220
     d34:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	8e 0f       	add	r24, r30
     d3a:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
     d3e:	f0 e0       	ldi	r31, 0x00	; 0
     d40:	eb 53       	subi	r30, 0x3B	; 59
     d42:	fc 4d       	sbci	r31, 0xDC	; 220
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	80 83       	st	Z, r24
	}
	SendSerialData = 1;
     d48:	81 e0       	ldi	r24, 0x01	; 1
     d4a:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
     d4e:	08 95       	ret

00000d50 <CheckStartCondition>:
	}
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	18 2f       	mov	r17, r24
	unsigned char StartOn = 0;

	if (!ConsoleModuleSettings[Module][SWITCHSTART])
     d58:	c8 2f       	mov	r28, r24
     d5a:	d0 e0       	ldi	r29, 0x00	; 0
     d5c:	8d e1       	ldi	r24, 0x1D	; 29
     d5e:	8c 9f       	mul	r24, r28
     d60:	f0 01       	movw	r30, r0
     d62:	8d 9f       	mul	r24, r29
     d64:	f0 0d       	add	r31, r0
     d66:	11 24       	eor	r1, r1
     d68:	e5 5e       	subi	r30, 0xE5	; 229
     d6a:	f7 4c       	sbci	r31, 0xC7	; 199
     d6c:	84 8d       	ldd	r24, Z+28	; 0x1c
     d6e:	81 11       	cpse	r24, r1
     d70:	a5 c0       	rjmp	.+330    	; 0xebc <CheckStartCondition+0x16c>
	{
		if  ((ConsoleModuleSettings[Module][STARTON]) && (ConsoleModuleSettings[Module][STARTFADER]))
     d72:	8d e1       	ldi	r24, 0x1D	; 29
     d74:	8c 9f       	mul	r24, r28
     d76:	f0 01       	movw	r30, r0
     d78:	8d 9f       	mul	r24, r29
     d7a:	f0 0d       	add	r31, r0
     d7c:	11 24       	eor	r1, r1
     d7e:	e5 5e       	subi	r30, 0xE5	; 229
     d80:	f7 4c       	sbci	r31, 0xC7	; 199
     d82:	87 81       	ldd	r24, Z+7	; 0x07
     d84:	88 23       	and	r24, r24
     d86:	c1 f1       	breq	.+112    	; 0xdf8 <CheckStartCondition+0xa8>
     d88:	9d e1       	ldi	r25, 0x1D	; 29
     d8a:	9c 9f       	mul	r25, r28
     d8c:	f0 01       	movw	r30, r0
     d8e:	9d 9f       	mul	r25, r29
     d90:	f0 0d       	add	r31, r0
     d92:	11 24       	eor	r1, r1
     d94:	e5 5e       	subi	r30, 0xE5	; 229
     d96:	f7 4c       	sbci	r31, 0xC7	; 199
     d98:	96 81       	ldd	r25, Z+6	; 0x06
     d9a:	99 23       	and	r25, r25
     d9c:	69 f1       	breq	.+90     	; 0xdf8 <CheckStartCondition+0xa8>
		{
			if (((ModuleData[Module][FADERON]&0x80)) && (ConsoleFunctionData[Module]&ON_LED))
     d9e:	fe 01       	movw	r30, r28
     da0:	ee 0f       	add	r30, r30
     da2:	ff 1f       	adc	r31, r31
     da4:	ee 0f       	add	r30, r30
     da6:	ff 1f       	adc	r31, r31
     da8:	ee 0f       	add	r30, r30
     daa:	ff 1f       	adc	r31, r31
     dac:	e5 5f       	subi	r30, 0xF5	; 245
     dae:	f4 4d       	sbci	r31, 0xD4	; 212
     db0:	81 81       	ldd	r24, Z+1	; 0x01
     db2:	88 23       	and	r24, r24
     db4:	bc f4       	brge	.+46     	; 0xde4 <CheckStartCondition+0x94>
     db6:	fe 01       	movw	r30, r28
     db8:	e0 56       	subi	r30, 0x60	; 96
     dba:	fd 4d       	sbci	r31, 0xDD	; 221
     dbc:	80 81       	ld	r24, Z
     dbe:	85 ff       	sbrs	r24, 5
     dc0:	11 c0       	rjmp	.+34     	; 0xde4 <CheckStartCondition+0x94>
			{	 //!JB
				if (!StartActive[Module])
     dc2:	fe 01       	movw	r30, r28
     dc4:	ec 56       	subi	r30, 0x6C	; 108
     dc6:	f4 4d       	sbci	r31, 0xD4	; 212
     dc8:	80 81       	ld	r24, Z
     dca:	81 11       	cpse	r24, r1
     dcc:	79 c0       	rjmp	.+242    	; 0xec0 <CheckStartCondition+0x170>
				{
					StartControl(Module,1);
     dce:	61 e0       	ldi	r22, 0x01	; 1
     dd0:	81 2f       	mov	r24, r17
     dd2:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
					StartActive[Module] = 1;
     dd6:	81 e0       	ldi	r24, 0x01	; 1
     dd8:	fe 01       	movw	r30, r28
     dda:	ec 56       	subi	r30, 0x6C	; 108
     ddc:	f4 4d       	sbci	r31, 0xD4	; 212
     dde:	80 83       	st	Z, r24
				}
				StartOn = 1;
     de0:	91 e0       	ldi	r25, 0x01	; 1
     de2:	77 c0       	rjmp	.+238    	; 0xed2 <CheckStartCondition+0x182>
			}
			else
			{
				StartControl(Module,0);
     de4:	60 e0       	ldi	r22, 0x00	; 0
     de6:	81 2f       	mov	r24, r17
     de8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
				StartActive[Module] = 0;
     dec:	fe 01       	movw	r30, r28
     dee:	ec 56       	subi	r30, 0x6C	; 108
     df0:	f4 4d       	sbci	r31, 0xD4	; 212
     df2:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     df4:	90 e0       	ldi	r25, 0x00	; 0
     df6:	6d c0       	rjmp	.+218    	; 0xed2 <CheckStartCondition+0x182>
			{
				StartControl(Module,0);
				StartActive[Module] = 0;
			}
		}
		else if  ((ConsoleModuleSettings[Module][STARTON]) && (!(ConsoleModuleSettings[Module][STARTFADER])))
     df8:	88 23       	and	r24, r24
     dfa:	61 f1       	breq	.+88     	; 0xe54 <CheckStartCondition+0x104>
     dfc:	9d e1       	ldi	r25, 0x1D	; 29
     dfe:	9c 9f       	mul	r25, r28
     e00:	f0 01       	movw	r30, r0
     e02:	9d 9f       	mul	r25, r29
     e04:	f0 0d       	add	r31, r0
     e06:	11 24       	eor	r1, r1
     e08:	e5 5e       	subi	r30, 0xE5	; 229
     e0a:	f7 4c       	sbci	r31, 0xC7	; 199
     e0c:	96 81       	ldd	r25, Z+6	; 0x06
     e0e:	91 11       	cpse	r25, r1
     e10:	21 c0       	rjmp	.+66     	; 0xe54 <CheckStartCondition+0x104>
		{
			if (ConsoleFunctionData[Module]&ON_LED)
     e12:	fe 01       	movw	r30, r28
     e14:	e0 56       	subi	r30, 0x60	; 96
     e16:	fd 4d       	sbci	r31, 0xDD	; 221
     e18:	80 81       	ld	r24, Z
     e1a:	85 ff       	sbrs	r24, 5
     e1c:	11 c0       	rjmp	.+34     	; 0xe40 <CheckStartCondition+0xf0>
			{
				if (!StartActive[Module])
     e1e:	fe 01       	movw	r30, r28
     e20:	ec 56       	subi	r30, 0x6C	; 108
     e22:	f4 4d       	sbci	r31, 0xD4	; 212
     e24:	80 81       	ld	r24, Z
     e26:	81 11       	cpse	r24, r1
     e28:	4d c0       	rjmp	.+154    	; 0xec4 <CheckStartCondition+0x174>
				{
					StartControl(Module,1);
     e2a:	61 e0       	ldi	r22, 0x01	; 1
     e2c:	81 2f       	mov	r24, r17
     e2e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
					StartActive[Module] = 1;
     e32:	81 e0       	ldi	r24, 0x01	; 1
     e34:	fe 01       	movw	r30, r28
     e36:	ec 56       	subi	r30, 0x6C	; 108
     e38:	f4 4d       	sbci	r31, 0xD4	; 212
     e3a:	80 83       	st	Z, r24
				}
				StartOn = 1;
     e3c:	91 e0       	ldi	r25, 0x01	; 1
     e3e:	49 c0       	rjmp	.+146    	; 0xed2 <CheckStartCondition+0x182>
			}
			else
			{
				StartControl(Module,0);
     e40:	60 e0       	ldi	r22, 0x00	; 0
     e42:	81 2f       	mov	r24, r17
     e44:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
				StartActive[Module] = 0;
     e48:	fe 01       	movw	r30, r28
     e4a:	ec 56       	subi	r30, 0x6C	; 108
     e4c:	f4 4d       	sbci	r31, 0xD4	; 212
     e4e:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     e50:	90 e0       	ldi	r25, 0x00	; 0
     e52:	3f c0       	rjmp	.+126    	; 0xed2 <CheckStartCondition+0x182>
			{
				StartControl(Module,0);
				StartActive[Module] = 0;
			}
		}
		else if  ((!ConsoleModuleSettings[Module][STARTON]) && (ConsoleModuleSettings[Module][STARTFADER]))
     e54:	81 11       	cpse	r24, r1
     e56:	38 c0       	rjmp	.+112    	; 0xec8 <CheckStartCondition+0x178>
     e58:	8d e1       	ldi	r24, 0x1D	; 29
     e5a:	8c 9f       	mul	r24, r28
     e5c:	f0 01       	movw	r30, r0
     e5e:	8d 9f       	mul	r24, r29
     e60:	f0 0d       	add	r31, r0
     e62:	11 24       	eor	r1, r1
     e64:	e5 5e       	subi	r30, 0xE5	; 229
     e66:	f7 4c       	sbci	r31, 0xC7	; 199
     e68:	86 81       	ldd	r24, Z+6	; 0x06
     e6a:	88 23       	and	r24, r24
     e6c:	79 f1       	breq	.+94     	; 0xecc <CheckStartCondition+0x17c>
		{
			if ((ModuleData[Module][FADERON]&0x80))
     e6e:	fe 01       	movw	r30, r28
     e70:	ee 0f       	add	r30, r30
     e72:	ff 1f       	adc	r31, r31
     e74:	ee 0f       	add	r30, r30
     e76:	ff 1f       	adc	r31, r31
     e78:	ee 0f       	add	r30, r30
     e7a:	ff 1f       	adc	r31, r31
     e7c:	e5 5f       	subi	r30, 0xF5	; 245
     e7e:	f4 4d       	sbci	r31, 0xD4	; 212
     e80:	81 81       	ldd	r24, Z+1	; 0x01
     e82:	88 23       	and	r24, r24
     e84:	8c f4       	brge	.+34     	; 0xea8 <CheckStartCondition+0x158>
			{	 // !JB
				if (!StartActive[Module])
     e86:	fe 01       	movw	r30, r28
     e88:	ec 56       	subi	r30, 0x6C	; 108
     e8a:	f4 4d       	sbci	r31, 0xD4	; 212
     e8c:	80 81       	ld	r24, Z
     e8e:	81 11       	cpse	r24, r1
     e90:	1f c0       	rjmp	.+62     	; 0xed0 <CheckStartCondition+0x180>
				{
					StartControl(Module,1);
     e92:	61 e0       	ldi	r22, 0x01	; 1
     e94:	81 2f       	mov	r24, r17
     e96:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
					StartActive[Module] = 1;
     e9a:	81 e0       	ldi	r24, 0x01	; 1
     e9c:	fe 01       	movw	r30, r28
     e9e:	ec 56       	subi	r30, 0x6C	; 108
     ea0:	f4 4d       	sbci	r31, 0xD4	; 212
     ea2:	80 83       	st	Z, r24
				}
				StartOn = 1;
     ea4:	91 e0       	ldi	r25, 0x01	; 1
     ea6:	15 c0       	rjmp	.+42     	; 0xed2 <CheckStartCondition+0x182>
			}
			else
			{
				StartControl(Module,0);
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	81 2f       	mov	r24, r17
     eac:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
				StartActive[Module] = 0;
     eb0:	fe 01       	movw	r30, r28
     eb2:	ec 56       	subi	r30, 0x6C	; 108
     eb4:	f4 4d       	sbci	r31, 0xD4	; 212
     eb6:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     eb8:	90 e0       	ldi	r25, 0x00	; 0
     eba:	0b c0       	rjmp	.+22     	; 0xed2 <CheckStartCondition+0x182>
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	09 c0       	rjmp	.+18     	; 0xed2 <CheckStartCondition+0x182>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     ec0:	91 e0       	ldi	r25, 0x01	; 1
     ec2:	07 c0       	rjmp	.+14     	; 0xed2 <CheckStartCondition+0x182>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	05 c0       	rjmp	.+10     	; 0xed2 <CheckStartCondition+0x182>
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	03 c0       	rjmp	.+6      	; 0xed2 <CheckStartCondition+0x182>
     ecc:	90 e0       	ldi	r25, 0x00	; 0
     ece:	01 c0       	rjmp	.+2      	; 0xed2 <CheckStartCondition+0x182>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     ed0:	91 e0       	ldi	r25, 0x01	; 1
				StartControl(Module,0);
				StartActive[Module] = 0;
			}
		}
	}
	if (ConsoleModuleSettings[Module][STARTCUE])
     ed2:	8d e1       	ldi	r24, 0x1D	; 29
     ed4:	8c 9f       	mul	r24, r28
     ed6:	f0 01       	movw	r30, r0
     ed8:	8d 9f       	mul	r24, r29
     eda:	f0 0d       	add	r31, r0
     edc:	11 24       	eor	r1, r1
     ede:	e5 5e       	subi	r30, 0xE5	; 229
     ee0:	f7 4c       	sbci	r31, 0xC7	; 199
     ee2:	80 85       	ldd	r24, Z+8	; 0x08
     ee4:	88 23       	and	r24, r24
     ee6:	c1 f0       	breq	.+48     	; 0xf18 <CheckStartCondition+0x1c8>
	{
		if (ConsoleFunctionData[Module]&CUE_FUNCTION)
     ee8:	fe 01       	movw	r30, r28
     eea:	e0 56       	subi	r30, 0x60	; 96
     eec:	fd 4d       	sbci	r31, 0xDD	; 221
     eee:	80 81       	ld	r24, Z
     ef0:	82 ff       	sbrs	r24, 2
     ef2:	09 c0       	rjmp	.+18     	; 0xf06 <CheckStartCondition+0x1b6>
		{
			StartControl(Module,1);
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	81 2f       	mov	r24, r17
     ef8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
			StartActive[Module] = 1;
     efc:	cc 56       	subi	r28, 0x6C	; 108
     efe:	d4 4d       	sbci	r29, 0xD4	; 212
     f00:	81 e0       	ldi	r24, 0x01	; 1
     f02:	88 83       	st	Y, r24
     f04:	09 c0       	rjmp	.+18     	; 0xf18 <CheckStartCondition+0x1c8>
		}
		else if (!StartOn)
     f06:	91 11       	cpse	r25, r1
     f08:	07 c0       	rjmp	.+14     	; 0xf18 <CheckStartCondition+0x1c8>
		{
			StartControl(Module,0);
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	81 2f       	mov	r24, r17
     f0e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
			StartActive[Module] = 0;
     f12:	cc 56       	subi	r28, 0x6C	; 108
     f14:	d4 4d       	sbci	r29, 0xD4	; 212
     f16:	18 82       	st	Y, r1
		}
	}
}
     f18:	df 91       	pop	r29
     f1a:	cf 91       	pop	r28
     f1c:	1f 91       	pop	r17
     f1e:	08 95       	ret

00000f20 <SetConsoleData>:
void SetConsoleData()
{
	unsigned char cntByte, cntBit;  // byte   bits
	
	// Volgens mij is dit hieronder voor de MASTER MODULE
	for (cntBit=0; cntBit<8; cntBit++)	// 8 bits
     f20:	20 e0       	ldi	r18, 0x00	; 0
     f22:	27 c0       	rjmp	.+78     	; 0xf72 <SetConsoleData+0x52>
	{
		//DATA1 = ConsoleFunctionData[16]&(0x80>>cntBit);   // AND de data met 1000 0000 . Data staat in :   ConsoleFunctionData[16]
		if (ConsoleFunctionData[16]&(0x80>>cntBit))
     f24:	40 91 b0 22 	lds	r20, 0x22B0	; 0x8022b0 <ConsoleFunctionData+0x10>
     f28:	80 e8       	ldi	r24, 0x80	; 128
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	02 2e       	mov	r0, r18
     f2e:	02 c0       	rjmp	.+4      	; 0xf34 <SetConsoleData+0x14>
     f30:	95 95       	asr	r25
     f32:	87 95       	ror	r24
     f34:	0a 94       	dec	r0
     f36:	e2 f7       	brpl	.-8      	; 0xf30 <SetConsoleData+0x10>
     f38:	50 e0       	ldi	r21, 0x00	; 0
     f3a:	84 23       	and	r24, r20
     f3c:	95 23       	and	r25, r21
     f3e:	89 2b       	or	r24, r25
     f40:	21 f0       	breq	.+8      	; 0xf4a <SetConsoleData+0x2a>
			PORTC_OUTSET = DATA1;
     f42:	88 e0       	ldi	r24, 0x08	; 8
     f44:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
     f48:	03 c0       	rjmp	.+6      	; 0xf50 <SetConsoleData+0x30>
		else
			PORTC_OUTCLR = DATA1;
     f4a:	88 e0       	ldi	r24, 0x08	; 8
     f4c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
		
		PORTC_OUTSET = CLK1;
     f50:	80 e1       	ldi	r24, 0x10	; 16
     f52:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
		//CLK2 = 1;
		for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);		// Wacht
     f56:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <Wait>
     f5a:	03 c0       	rjmp	.+6      	; 0xf62 <SetConsoleData+0x42>
     f5c:	8f 5f       	subi	r24, 0xFF	; 255
     f5e:	80 93 09 25 	sts	0x2509, r24	; 0x802509 <Wait>
     f62:	80 91 09 25 	lds	r24, 0x2509	; 0x802509 <Wait>
     f66:	85 30       	cpi	r24, 0x05	; 5
     f68:	c8 f3       	brcs	.-14     	; 0xf5c <SetConsoleData+0x3c>
		//CLK1 = 0;
		PORTC_OUTCLR = CLK1;
     f6a:	80 e1       	ldi	r24, 0x10	; 16
     f6c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
void SetConsoleData()
{
	unsigned char cntByte, cntBit;  // byte   bits
	
	// Volgens mij is dit hieronder voor de MASTER MODULE
	for (cntBit=0; cntBit<8; cntBit++)	// 8 bits
     f70:	2f 5f       	subi	r18, 0xFF	; 255
     f72:	28 30       	cpi	r18, 0x08	; 8
     f74:	b8 f2       	brcs	.-82     	; 0xf24 <SetConsoleData+0x4>
     f76:	40 e0       	ldi	r20, 0x00	; 0
     f78:	8c c0       	rjmp	.+280    	; 0x1092 <SetConsoleData+0x172>
	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntBit=0; cntBit<6; cntBit++)								// 8 * 6 = 48
		{
			if ((OperatingMode==MODULEMODE) && ((0x01<<cntBit)&CUE_LED))   // Als betreffende module AND CUE_LED=1
     f7a:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
     f7e:	81 30       	cpi	r24, 0x01	; 1
     f80:	d9 f5       	brne	.+118    	; 0xff8 <SetConsoleData+0xd8>
     f82:	69 2f       	mov	r22, r25
     f84:	28 e0       	ldi	r18, 0x08	; 8
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	09 2e       	mov	r0, r25
     f8a:	02 c0       	rjmp	.+4      	; 0xf90 <SetConsoleData+0x70>
     f8c:	35 95       	asr	r19
     f8e:	27 95       	ror	r18
     f90:	0a 94       	dec	r0
     f92:	e2 f7       	brpl	.-8      	; 0xf8c <SetConsoleData+0x6c>
     f94:	20 ff       	sbrs	r18, 0
     f96:	30 c0       	rjmp	.+96     	; 0xff8 <SetConsoleData+0xd8>
			{
				//DATA1 = ShowFunctionData[7-cntByte]&(0x01<<cntBit);						// ShowFunctionData
				if ( ShowFunctionData[7-cntByte]&(0x01<<cntBit) )
     f98:	a4 2f       	mov	r26, r20
     f9a:	b0 e0       	ldi	r27, 0x00	; 0
     f9c:	e7 e0       	ldi	r30, 0x07	; 7
     f9e:	f0 e0       	ldi	r31, 0x00	; 0
     fa0:	ea 1b       	sub	r30, r26
     fa2:	fb 0b       	sbc	r31, r27
     fa4:	ec 5f       	subi	r30, 0xFC	; 252
     fa6:	f5 4c       	sbci	r31, 0xC5	; 197
     fa8:	20 81       	ld	r18, Z
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	09 2e       	mov	r0, r25
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <SetConsoleData+0x94>
     fb0:	35 95       	asr	r19
     fb2:	27 95       	ror	r18
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <SetConsoleData+0x90>
     fb8:	20 ff       	sbrs	r18, 0
     fba:	04 c0       	rjmp	.+8      	; 0xfc4 <SetConsoleData+0xa4>
					PORTC_OUTSET = DATA1;
     fbc:	88 e0       	ldi	r24, 0x08	; 8
     fbe:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
     fc2:	03 c0       	rjmp	.+6      	; 0xfca <SetConsoleData+0xaa>
				else
					PORTC_OUTCLR = DATA1;
     fc4:	88 e0       	ldi	r24, 0x08	; 8
     fc6:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
				
				//DATA2 = ShowFunctionData[15-cntByte]&(0x01<<cntBit);
				if ( ShowFunctionData[15-cntByte]&(0x01<<cntBit) )
     fca:	ef e0       	ldi	r30, 0x0F	; 15
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	ea 1b       	sub	r30, r26
     fd0:	fb 0b       	sbc	r31, r27
     fd2:	ec 5f       	subi	r30, 0xFC	; 252
     fd4:	f5 4c       	sbci	r31, 0xC5	; 197
     fd6:	20 81       	ld	r18, Z
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	02 c0       	rjmp	.+4      	; 0xfe0 <SetConsoleData+0xc0>
     fdc:	35 95       	asr	r19
     fde:	27 95       	ror	r18
     fe0:	6a 95       	dec	r22
     fe2:	e2 f7       	brpl	.-8      	; 0xfdc <SetConsoleData+0xbc>
     fe4:	20 ff       	sbrs	r18, 0
     fe6:	04 c0       	rjmp	.+8      	; 0xff0 <SetConsoleData+0xd0>
					PORTC_OUTSET = DATA2;
     fe8:	80 e2       	ldi	r24, 0x20	; 32
     fea:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
     fee:	34 c0       	rjmp	.+104    	; 0x1058 <SetConsoleData+0x138>
				else
					PORTC_OUTCLR = DATA2;
     ff0:	80 e2       	ldi	r24, 0x20	; 32
     ff2:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
     ff6:	30 c0       	rjmp	.+96     	; 0x1058 <SetConsoleData+0x138>
			}
			else
			{
				//DATA1 = ConsoleFunctionData[7-cntByte]&(0x01<<cntBit);        // ConsoleFunctionData
				if ( ConsoleFunctionData[7-cntByte]&(0x01<<cntBit) )
     ff8:	64 2f       	mov	r22, r20
     ffa:	70 e0       	ldi	r23, 0x00	; 0
     ffc:	e7 e0       	ldi	r30, 0x07	; 7
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	e6 1b       	sub	r30, r22
    1002:	f7 0b       	sbc	r31, r23
    1004:	e0 56       	subi	r30, 0x60	; 96
    1006:	fd 4d       	sbci	r31, 0xDD	; 221
    1008:	20 81       	ld	r18, Z
    100a:	a9 2f       	mov	r26, r25
    100c:	30 e0       	ldi	r19, 0x00	; 0
    100e:	09 2e       	mov	r0, r25
    1010:	02 c0       	rjmp	.+4      	; 0x1016 <SetConsoleData+0xf6>
    1012:	35 95       	asr	r19
    1014:	27 95       	ror	r18
    1016:	0a 94       	dec	r0
    1018:	e2 f7       	brpl	.-8      	; 0x1012 <SetConsoleData+0xf2>
    101a:	20 ff       	sbrs	r18, 0
    101c:	04 c0       	rjmp	.+8      	; 0x1026 <SetConsoleData+0x106>
					PORTC_OUTSET = DATA1;
    101e:	88 e0       	ldi	r24, 0x08	; 8
    1020:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    1024:	03 c0       	rjmp	.+6      	; 0x102c <SetConsoleData+0x10c>
				else
					PORTC_OUTCLR = DATA1;
    1026:	88 e0       	ldi	r24, 0x08	; 8
    1028:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
				
				//DATA2 = ConsoleFunctionData[15-cntByte]&(0x01<<cntBit);
				if ( ConsoleFunctionData[15-cntByte]&(0x01<<cntBit) )
    102c:	ef e0       	ldi	r30, 0x0F	; 15
    102e:	f0 e0       	ldi	r31, 0x00	; 0
    1030:	e6 1b       	sub	r30, r22
    1032:	f7 0b       	sbc	r31, r23
    1034:	e0 56       	subi	r30, 0x60	; 96
    1036:	fd 4d       	sbci	r31, 0xDD	; 221
    1038:	20 81       	ld	r18, Z
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	02 c0       	rjmp	.+4      	; 0x1042 <SetConsoleData+0x122>
    103e:	35 95       	asr	r19
    1040:	27 95       	ror	r18
    1042:	aa 95       	dec	r26
    1044:	e2 f7       	brpl	.-8      	; 0x103e <SetConsoleData+0x11e>
    1046:	20 ff       	sbrs	r18, 0
    1048:	04 c0       	rjmp	.+8      	; 0x1052 <SetConsoleData+0x132>
					PORTC_OUTSET = DATA2;
    104a:	80 e2       	ldi	r24, 0x20	; 32
    104c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    1050:	03 c0       	rjmp	.+6      	; 0x1058 <SetConsoleData+0x138>
				else
					PORTC_OUTCLR = DATA2;				
    1052:	80 e2       	ldi	r24, 0x20	; 32
    1054:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
			}
			//CLK1 = 1;
			PORTC_OUTSET = CLK1;
    1058:	e5 e4       	ldi	r30, 0x45	; 69
    105a:	f6 e0       	ldi	r31, 0x06	; 6
    105c:	80 e1       	ldi	r24, 0x10	; 16
    105e:	80 83       	st	Z, r24
			//CLK2 = 1;
			PORTC_OUTSET = CLK2;
    1060:	80 e4       	ldi	r24, 0x40	; 64
    1062:	80 83       	st	Z, r24
			for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);		// Wacht
    1064:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <Wait>
    1068:	03 c0       	rjmp	.+6      	; 0x1070 <SetConsoleData+0x150>
    106a:	8f 5f       	subi	r24, 0xFF	; 255
    106c:	80 93 09 25 	sts	0x2509, r24	; 0x802509 <Wait>
    1070:	80 91 09 25 	lds	r24, 0x2509	; 0x802509 <Wait>
    1074:	85 30       	cpi	r24, 0x05	; 5
    1076:	c8 f3       	brcs	.-14     	; 0x106a <SetConsoleData+0x14a>
			//CLK1 = 0;
			PORTC_OUTCLR = CLK1;
    1078:	e6 e4       	ldi	r30, 0x46	; 70
    107a:	f6 e0       	ldi	r31, 0x06	; 6
    107c:	80 e1       	ldi	r24, 0x10	; 16
    107e:	80 83       	st	Z, r24
			//CLK2 = 0;
			PORTC_OUTCLR = CLK2;
    1080:	80 e4       	ldi	r24, 0x40	; 64
    1082:	80 83       	st	Z, r24
	}

	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntBit=0; cntBit<6; cntBit++)								// 8 * 6 = 48
    1084:	9f 5f       	subi	r25, 0xFF	; 255
    1086:	01 c0       	rjmp	.+2      	; 0x108a <SetConsoleData+0x16a>
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	96 30       	cpi	r25, 0x06	; 6
    108c:	08 f4       	brcc	.+2      	; 0x1090 <SetConsoleData+0x170>
    108e:	75 cf       	rjmp	.-278    	; 0xf7a <SetConsoleData+0x5a>
		PORTC_OUTCLR = CLK1;
	
	}

	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
    1090:	4f 5f       	subi	r20, 0xFF	; 255
    1092:	48 30       	cpi	r20, 0x08	; 8
    1094:	c8 f3       	brcs	.-14     	; 0x1088 <SetConsoleData+0x168>
			PORTC_OUTCLR = CLK1;
			//CLK2 = 0;
			PORTC_OUTCLR = CLK2;
		}
	}
	PORTB_OUTCLR = STRB1;
    1096:	81 e0       	ldi	r24, 0x01	; 1
    1098:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
	for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
    109c:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <Wait>
    10a0:	03 c0       	rjmp	.+6      	; 0x10a8 <SetConsoleData+0x188>
    10a2:	8f 5f       	subi	r24, 0xFF	; 255
    10a4:	80 93 09 25 	sts	0x2509, r24	; 0x802509 <Wait>
    10a8:	80 91 09 25 	lds	r24, 0x2509	; 0x802509 <Wait>
    10ac:	85 30       	cpi	r24, 0x05	; 5
    10ae:	c8 f3       	brcs	.-14     	; 0x10a2 <SetConsoleData+0x182>
	PORTB_OUTSET = STRB1;
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
	//STRB2 = 0;
	//for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
	//STRB2 = 1;
	PORTC_OUTCLR = STRB2;
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
	for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
    10bc:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <Wait>
    10c0:	03 c0       	rjmp	.+6      	; 0x10c8 <SetConsoleData+0x1a8>
    10c2:	8f 5f       	subi	r24, 0xFF	; 255
    10c4:	80 93 09 25 	sts	0x2509, r24	; 0x802509 <Wait>
    10c8:	80 91 09 25 	lds	r24, 0x2509	; 0x802509 <Wait>
    10cc:	85 30       	cpi	r24, 0x05	; 5
    10ce:	c8 f3       	brcs	.-14     	; 0x10c2 <SetConsoleData+0x1a2>
	PORTC_OUTSET = STRB2;	
    10d0:	82 e0       	ldi	r24, 0x02	; 2
    10d2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    10d6:	08 95       	ret

000010d8 <CheckCUEByRemoteMIC>:
void CheckCUEByRemoteMIC(void)
{
	char Status = 0;
	int cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    10d8:	80 e0       	ldi	r24, 0x00	; 0
    10da:	90 e0       	ldi	r25, 0x00	; 0



void CheckCUEByRemoteMIC(void)
{
	char Status = 0;
    10dc:	30 e0       	ldi	r19, 0x00	; 0
	int cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    10de:	18 c0       	rjmp	.+48     	; 0x1110 <CheckCUEByRemoteMIC+0x38>
	{
		if  (ModuleType[cntModule]==TRIPLE)
    10e0:	fc 01       	movw	r30, r24
    10e2:	e0 59       	subi	r30, 0x90	; 144
    10e4:	fd 4d       	sbci	r31, 0xDD	; 221
    10e6:	20 81       	ld	r18, Z
    10e8:	21 30       	cpi	r18, 0x01	; 1
    10ea:	89 f4       	brne	.+34     	; 0x110e <CheckCUEByRemoteMIC+0x36>
		{
			if (ModuleData[cntModule][MIC_RING]&0x80)
    10ec:	fc 01       	movw	r30, r24
    10ee:	ee 0f       	add	r30, r30
    10f0:	ff 1f       	adc	r31, r31
    10f2:	ee 0f       	add	r30, r30
    10f4:	ff 1f       	adc	r31, r31
    10f6:	ee 0f       	add	r30, r30
    10f8:	ff 1f       	adc	r31, r31
    10fa:	e5 5f       	subi	r30, 0xF5	; 245
    10fc:	f4 4d       	sbci	r31, 0xD4	; 212
    10fe:	27 81       	ldd	r18, Z+7	; 0x07
    1100:	22 23       	and	r18, r18
    1102:	2c f4       	brge	.+10     	; 0x110e <CheckCUEByRemoteMIC+0x36>
			{
				Status |= CUEByRemoteMIC[cntModule];
    1104:	fc 01       	movw	r30, r24
    1106:	e9 5f       	subi	r30, 0xF9	; 249
    1108:	fd 4c       	sbci	r31, 0xCD	; 205
    110a:	20 81       	ld	r18, Z
    110c:	32 2b       	or	r19, r18
void CheckCUEByRemoteMIC(void)
{
	char Status = 0;
	int cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    110e:	01 96       	adiw	r24, 0x01	; 1
    1110:	80 31       	cpi	r24, 0x10	; 16
    1112:	91 05       	cpc	r25, r1
    1114:	2c f3       	brlt	.-54     	; 0x10e0 <CheckCUEByRemoteMIC+0x8>
				Status |= CUEByRemoteMIC[cntModule];
			}
		}
	}

	SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
    1116:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    111a:	a1 e0       	ldi	r26, 0x01	; 1
    111c:	ae 0f       	add	r26, r30
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	eb 53       	subi	r30, 0x3B	; 59
    1122:	fc 4d       	sbci	r31, 0xDC	; 220
    1124:	80 ed       	ldi	r24, 0xD0	; 208
    1126:	80 83       	st	Z, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CUE_BY_MIC_REMOTE;
    1128:	e1 e0       	ldi	r30, 0x01	; 1
    112a:	ea 0f       	add	r30, r26
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	ab 53       	subi	r26, 0x3B	; 59
    1130:	bc 4d       	sbci	r27, 0xDC	; 220
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	8c 93       	st	X, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = Status;
    1136:	81 e0       	ldi	r24, 0x01	; 1
    1138:	8e 0f       	add	r24, r30
    113a:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    113e:	f0 e0       	ldi	r31, 0x00	; 0
    1140:	eb 53       	subi	r30, 0x3B	; 59
    1142:	fc 4d       	sbci	r31, 0xDC	; 220
    1144:	30 83       	st	Z, r19
    1146:	08 95       	ret

00001148 <GetModuleNrFromTelcoNr>:
{
	char cntTelco = -1;
	char ModuleNr = -1;
	char cntModule;
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1148:	80 e0       	ldi	r24, 0x00	; 0
    114a:	01 c0       	rjmp	.+2      	; 0x114e <GetModuleNrFromTelcoNr+0x6>
    114c:	8f 5f       	subi	r24, 0xFF	; 255
    114e:	80 31       	cpi	r24, 0x10	; 16
    1150:	e8 f3       	brcs	.-6      	; 0x114c <GetModuleNrFromTelcoNr+0x4>
			}
		}
	}

	return ModuleNr;
}
    1152:	8f ef       	ldi	r24, 0xFF	; 255
    1154:	08 95       	ret

00001156 <CueControl>:
void CueControl()
{
	unsigned char cntModule;
	unsigned char CueActive=0;

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
    1156:	e0 ea       	ldi	r30, 0xA0	; 160
    1158:	f2 e2       	ldi	r31, 0x22	; 34
    115a:	40 89       	ldd	r20, Z+16	; 0x10
    115c:	4d 7f       	andi	r20, 0xFD	; 253
    115e:	40 8b       	std	Z+16, r20	; 0x10


void CueControl()
{
	unsigned char cntModule;
	unsigned char CueActive=0;
    1160:	50 e0       	ldi	r21, 0x00	; 0

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1162:	80 e0       	ldi	r24, 0x00	; 0
    1164:	11 c0       	rjmp	.+34     	; 0x1188 <CueControl+0x32>
	{
		if ((ConsoleFunctionData[cntModule]&CUE_FUNCTION) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
    1166:	28 2f       	mov	r18, r24
    1168:	30 e0       	ldi	r19, 0x00	; 0
    116a:	f9 01       	movw	r30, r18
    116c:	e0 56       	subi	r30, 0x60	; 96
    116e:	fd 4d       	sbci	r31, 0xDD	; 221
    1170:	90 81       	ld	r25, Z
    1172:	92 ff       	sbrs	r25, 2
    1174:	08 c0       	rjmp	.+16     	; 0x1186 <CueControl+0x30>
    1176:	f9 01       	movw	r30, r18
    1178:	e0 59       	subi	r30, 0x90	; 144
    117a:	fd 4d       	sbci	r31, 0xDD	; 221
    117c:	90 81       	ld	r25, Z
    117e:	91 50       	subi	r25, 0x01	; 1
    1180:	92 30       	cpi	r25, 0x02	; 2
    1182:	08 f4       	brcc	.+2      	; 0x1186 <CueControl+0x30>
		CueActive = 1;
    1184:	51 e0       	ldi	r21, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char CueActive=0;

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1186:	8f 5f       	subi	r24, 0xFF	; 255
    1188:	80 31       	cpi	r24, 0x10	; 16
    118a:	68 f3       	brcs	.-38     	; 0x1166 <CueControl+0x10>
	{
		if ((ConsoleFunctionData[cntModule]&CUE_FUNCTION) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
		CueActive = 1;
	}

	if (DirectorTBCUEBussActive != 0)
    118c:	80 91 17 32 	lds	r24, 0x3217	; 0x803217 <DirectorTBCUEBussActive>
    1190:	81 11       	cpse	r24, r1
	{
		CueActive = 1;
    1192:	51 e0       	ldi	r21, 0x01	; 1
	}

	if ((CueActive) && (ConsoleMasterSettings[CUETOCRM]))
    1194:	55 23       	and	r21, r21
    1196:	39 f0       	breq	.+14     	; 0x11a6 <CueControl+0x50>
    1198:	80 91 8f 2b 	lds	r24, 0x2B8F	; 0x802b8f <ConsoleMasterSettings+0x1>
    119c:	88 23       	and	r24, r24
    119e:	19 f0       	breq	.+6      	; 0x11a6 <CueControl+0x50>
	ConsoleFunctionData[16] |= MASTER_CUE_ON_FUNCTION_LED;
    11a0:	42 60       	ori	r20, 0x02	; 2
    11a2:	40 93 b0 22 	sts	0x22B0, r20	; 0x8022b0 <ConsoleFunctionData+0x10>

	//Check auto communication
	ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    11a6:	e0 ea       	ldi	r30, 0xA0	; 160
    11a8:	f2 e2       	ldi	r31, 0x22	; 34
    11aa:	80 89       	ldd	r24, Z+16	; 0x10
    11ac:	87 7f       	andi	r24, 0xF7	; 247
    11ae:	80 8b       	std	Z+16, r24	; 0x10
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    11b0:	80 e0       	ldi	r24, 0x00	; 0
    11b2:	2b c0       	rjmp	.+86     	; 0x120a <CueControl+0xb4>
	{
		if (ConsoleFunctionData[cntModule]&CUE_LED)
    11b4:	28 2f       	mov	r18, r24
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	f9 01       	movw	r30, r18
    11ba:	e0 56       	subi	r30, 0x60	; 96
    11bc:	fd 4d       	sbci	r31, 0xDD	; 221
    11be:	90 81       	ld	r25, Z
    11c0:	93 ff       	sbrs	r25, 3
    11c2:	22 c0       	rjmp	.+68     	; 0x1208 <CueControl+0xb2>
		{
			if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    11c4:	f9 01       	movw	r30, r18
    11c6:	ee 0f       	add	r30, r30
    11c8:	ff 1f       	adc	r31, r31
    11ca:	ee 0f       	add	r30, r30
    11cc:	ff 1f       	adc	r31, r31
    11ce:	ee 0f       	add	r30, r30
    11d0:	ff 1f       	adc	r31, r31
    11d2:	e5 5f       	subi	r30, 0xF5	; 245
    11d4:	f4 4d       	sbci	r31, 0xD4	; 212
    11d6:	47 81       	ldd	r20, Z+7	; 0x07
    11d8:	44 23       	and	r20, r20
    11da:	b4 f4       	brge	.+44     	; 0x1208 <CueControl+0xb2>
    11dc:	4d e1       	ldi	r20, 0x1D	; 29
    11de:	42 9f       	mul	r20, r18
    11e0:	f0 01       	movw	r30, r0
    11e2:	43 9f       	mul	r20, r19
    11e4:	f0 0d       	add	r31, r0
    11e6:	11 24       	eor	r1, r1
    11e8:	e5 5e       	subi	r30, 0xE5	; 229
    11ea:	f7 4c       	sbci	r31, 0xC7	; 199
    11ec:	26 85       	ldd	r18, Z+14	; 0x0e
    11ee:	22 23       	and	r18, r18
    11f0:	59 f0       	breq	.+22     	; 0x1208 <CueControl+0xb2>
    11f2:	94 ff       	sbrs	r25, 4
    11f4:	09 c0       	rjmp	.+18     	; 0x1208 <CueControl+0xb2>
    11f6:	90 91 90 2b 	lds	r25, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    11fa:	99 23       	and	r25, r25
    11fc:	29 f0       	breq	.+10     	; 0x1208 <CueControl+0xb2>
			{
				ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    11fe:	e0 ea       	ldi	r30, 0xA0	; 160
    1200:	f2 e2       	ldi	r31, 0x22	; 34
    1202:	90 89       	ldd	r25, Z+16	; 0x10
    1204:	98 60       	ori	r25, 0x08	; 8
    1206:	90 8b       	std	Z+16, r25	; 0x10
	if ((CueActive) && (ConsoleMasterSettings[CUETOCRM]))
	ConsoleFunctionData[16] |= MASTER_CUE_ON_FUNCTION_LED;

	//Check auto communication
	ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1208:	8f 5f       	subi	r24, 0xFF	; 255
    120a:	80 31       	cpi	r24, 0x10	; 16
    120c:	98 f2       	brcs	.-90     	; 0x11b4 <CueControl+0x5e>
			}
		}
	}
	CheckTBMic();

	SendSerialData = 1;
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    1214:	08 95       	ret

00001216 <Init>:
//########################################################################################################################################
//########################################################################################################################################
//########################################################################################################################################

void Init(void)
{	
    1216:	1f 93       	push	r17
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    121c:	83 e9       	ldi	r24, 0x93	; 147
    121e:	91 e1       	ldi	r25, 0x11	; 17
    1220:	01 97       	sbiw	r24, 0x01	; 1
    1222:	f1 f7       	brne	.-4      	; 0x1220 <Init+0xa>
    1224:	00 c0       	rjmp	.+0      	; 0x1226 <Init+0x10>
    1226:	00 00       	nop
	unsigned char ClearMem = 0;
	
	_delay_ms(2);
	//############## PORT DIRECTION REGISTERS ######################
	
	PORTA_DIRSET = 0b01111111;		// Initialise port als uitgang LCD DISPLAY
    1228:	e1 e0       	ldi	r30, 0x01	; 1
    122a:	f6 e0       	ldi	r31, 0x06	; 6
    122c:	8f e7       	ldi	r24, 0x7F	; 127
    122e:	80 83       	st	Z, r24
	PORTA_DIRSET = 0b10000000;      // RST_CC uitgang even als test pin
    1230:	80 e8       	ldi	r24, 0x80	; 128
    1232:	80 83       	st	Z, r24
	
	
	PORTR_DIRCLR = 0b00000011;		// Initialise port als ingang KNOPJES INLEZEN  ( SW1 t/m SW2   Zie orginele schema muxboard airlb6a )
    1234:	83 e0       	ldi	r24, 0x03	; 3
    1236:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7de7e2>
	PORTD_DIRCLR = 0b11111100;		// Initialise port als ingang KNOPJES INLEZEN  ( SW2 t/m SW7   Zie orginele schema muxboard airlb6a )
    123a:	9c ef       	ldi	r25, 0xFC	; 252
    123c:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <__TEXT_REGION_LENGTH__+0x7de662>


	PORTB_DIRSET = 0b00001110;		// Initialise port als uitgang KNOPJES SCANNEN  ( AS3 AS0 en AS1  Zie orginele schema muxboard airlb6a )
    1240:	a1 e2       	ldi	r26, 0x21	; 33
    1242:	b6 e0       	ldi	r27, 0x06	; 6
    1244:	9e e0       	ldi	r25, 0x0E	; 14
    1246:	9c 93       	st	X, r25
	PORTC_DIRSET = 0b00000101;		// Initialise port als uitgang KNOPJES SCANNEN  ( AS4 en AS2      Zie orginele schema muxboard airlb6a )
    1248:	c1 e4       	ldi	r28, 0x41	; 65
    124a:	d6 e0       	ldi	r29, 0x06	; 6
    124c:	95 e0       	ldi	r25, 0x05	; 5
    124e:	98 83       	st	Y, r25

	PORTE_DIRCLR = 0b00000100;      //  Initialise port als ingang   RX RS232
    1250:	e2 e8       	ldi	r30, 0x82	; 130
    1252:	f6 e0       	ldi	r31, 0x06	; 6
    1254:	94 e0       	ldi	r25, 0x04	; 4
    1256:	90 83       	st	Z, r25
	PORTE_DIRSET = 0b00001000;	    //  Initialise port als uitgang  TX RS232
    1258:	98 e0       	ldi	r25, 0x08	; 8
    125a:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <__TEXT_REGION_LENGTH__+0x7de681>

	PORTC_DIRSET = 0b01111010;	    // Initialise port als uitgang LEDJES AANSTUREN  CLK2 DATA2 CLK1 DATA1 en STRB2
    125e:	9a e7       	ldi	r25, 0x7A	; 122
    1260:	98 83       	st	Y, r25
	PORTB_DIRSET = 0b00000001;	    // Initialise port als uitgang LEDJES AANSTUREN  STRB1 
    1262:	91 e0       	ldi	r25, 0x01	; 1
    1264:	9c 93       	st	X, r25
	
		PORTE_DIRCLR = 0b00000011;      //  Initialise port als ingang   IIC
    1266:	80 83       	st	Z, r24
	
	
	
	//##############################################################	
	
	SetupSIO0();  // Setup Serial port	
    1268:	0e 94 45 27 	call	0x4e8a	; 0x4e8a <SetupSIO0>
	SetupLCD();
    126c:	0e 94 9b 20 	call	0x4136	; 0x4136 <SetupLCD>
	//////-----------------------------------------------------------------------------------------------


	unsigned char n,s;

	s=SREG;
    1270:	2f b7       	in	r18, 0x3f	; 63


	// Internal 2 MHz RC oscillator initialization
	// Enable the internal 2 MHz RC oscillator
	OSC.CTRL|=OSC_RC2MEN_bm;
    1272:	e0 e5       	ldi	r30, 0x50	; 80
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	80 81       	ld	r24, Z
    1278:	81 60       	ori	r24, 0x01	; 1
    127a:	80 83       	st	Z, r24
	// Disable the auto-calibration of the internal 2 MHz RC oscillator
	DFLLRC2M.CTRL&= ~DFLL_ENABLE_bm;
    127c:	e8 e6       	ldi	r30, 0x68	; 104
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	8e 7f       	andi	r24, 0xFE	; 254
    1284:	80 83       	st	Z, r24

	// Wait for the internal 2 MHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC2MRDY_bm)==0);
    1286:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    128a:	80 ff       	sbrs	r24, 0
    128c:	fc cf       	rjmp	.-8      	; 0x1286 <Init+0x70>
	// PLL clock source: 2 MHz Internal Osc.
	// PLL multiplication factor: 18
	// PLL output/2: Off
	// PLL frequency: 36,000000 MHz
	// Set the PLL clock source and multiplication factor
	n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLDIV_bm | OSC_PLLFAC_gm))) |
    128e:	e0 e5       	ldi	r30, 0x50	; 80
    1290:	f0 e0       	ldi	r31, 0x00	; 0
    1292:	85 81       	ldd	r24, Z+5	; 0x05
	OSC_PLLSRC_RC2M_gc | (0<<OSC_PLLDIV_bp) | 18;
	CCP=CCP_IOREG_gc;
    1294:	98 ed       	ldi	r25, 0xD8	; 216
    1296:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL=n;
    1298:	82 e1       	ldi	r24, 0x12	; 18
    129a:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL|=OSC_PLLEN_bm;
    129c:	80 81       	ld	r24, Z
    129e:	80 61       	ori	r24, 0x10	; 16
    12a0:	80 83       	st	Z, r24
	// System Clock prescalers B & C division factors: B:1, C:1
	// ClkPer4: 9000,000 kHz
	// ClkPer2: 9000,000 kHz
	// ClkPer:  9000,000 kHz
	// ClkCPU:  9000,000 kHz
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    12a2:	e0 e4       	ldi	r30, 0x40	; 64
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	81 81       	ldd	r24, Z+1	; 0x01
    12a8:	80 78       	andi	r24, 0x80	; 128
    12aa:	8c 60       	ori	r24, 0x0C	; 12
	CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
    12ac:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL=n;
    12ae:	81 83       	std	Z+1, r24	; 0x01

	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
    12b0:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    12b4:	84 ff       	sbrs	r24, 4
    12b6:	fc cf       	rjmp	.-8      	; 0x12b0 <Init+0x9a>

	// Select the system clock source: Phase Locked Loop
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
    12b8:	e0 e4       	ldi	r30, 0x40	; 64
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	88 7f       	andi	r24, 0xF8	; 248
    12c0:	84 60       	ori	r24, 0x04	; 4
	CCP=CCP_IOREG_gc;
    12c2:	98 ed       	ldi	r25, 0xD8	; 216
    12c4:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL=n;
    12c6:	80 83       	st	Z, r24

	// Disable the unused oscillators: 32 MHz, internal 32 kHz, external clock/crystal oscillator
	OSC.CTRL&= ~(OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm);
    12c8:	e0 e5       	ldi	r30, 0x50	; 80
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	80 81       	ld	r24, Z
    12ce:	81 7f       	andi	r24, 0xF1	; 241
    12d0:	80 83       	st	Z, r24

	// ClkPer output disabled
	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
    12d2:	e0 eb       	ldi	r30, 0xB0	; 176
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	84 81       	ldd	r24, Z+4	; 0x04
    12d8:	80 7f       	andi	r24, 0xF0	; 240
    12da:	84 83       	std	Z+4, r24	; 0x04
	// Restore interrupts enabled/disabled state
	SREG=s;
    12dc:	2f bf       	out	0x3f, r18	; 63
    12de:	83 e9       	ldi	r24, 0x93	; 147
    12e0:	91 e1       	ldi	r25, 0x11	; 17
    12e2:	01 97       	sbiw	r24, 0x01	; 1
    12e4:	f1 f7       	brne	.-4      	; 0x12e2 <Init+0xcc>
    12e6:	00 c0       	rjmp	.+0      	; 0x12e8 <Init+0xd2>
    12e8:	00 00       	nop
	

	_delay_ms(2);	

	
	OperatingMode = NORMALMODE;
    12ea:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
	//GlobalTimerActive = 1;   // willem
	DirectorTBCUEBussActive = 0;
    12ee:	10 92 17 32 	sts	0x3217, r1	; 0x803217 <DirectorTBCUEBussActive>
	
	//ConsoleFunctionData[0] |= 0x10;  // Even voor de Test : ConsoleFunctionData[module] |= ON_LED   LED wordt op des betreffende module aan of uit gezet plus overige functies mogelijk
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    12f2:	20 e0       	ldi	r18, 0x00	; 0
    12f4:	0c c0       	rjmp	.+24     	; 0x130e <Init+0xf8>
	{
		ConsoleFunctionData[cntModule] = MUTE_FUNCTION;
    12f6:	82 2f       	mov	r24, r18
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	fc 01       	movw	r30, r24
    12fc:	e0 56       	subi	r30, 0x60	; 96
    12fe:	fd 4d       	sbci	r31, 0xDD	; 221
    1300:	30 e1       	ldi	r19, 0x10	; 16
    1302:	30 83       	st	Z, r19
		ShowFunctionData[cntModule] = 0x00;
    1304:	fc 01       	movw	r30, r24
    1306:	ec 5f       	subi	r30, 0xFC	; 252
    1308:	f5 4c       	sbci	r31, 0xC5	; 197
    130a:	10 82       	st	Z, r1
	//GlobalTimerActive = 1;   // willem
	DirectorTBCUEBussActive = 0;
	
	//ConsoleFunctionData[0] |= 0x10;  // Even voor de Test : ConsoleFunctionData[module] |= ON_LED   LED wordt op des betreffende module aan of uit gezet plus overige functies mogelijk
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    130c:	2f 5f       	subi	r18, 0xFF	; 255
    130e:	20 31       	cpi	r18, 0x10	; 16
    1310:	90 f3       	brcs	.-28     	; 0x12f6 <Init+0xe0>
	{
		ConsoleFunctionData[cntModule] = MUTE_FUNCTION;
		ShowFunctionData[cntModule] = 0x00;
	}
	ConsoleFunctionData[16] = NOT_POWER_ON_CC;
    1312:	80 e4       	ldi	r24, 0x40	; 64
    1314:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
	
	SetConsoleData();
    1318:	0e 94 90 07 	call	0xf20	; 0xf20 <SetConsoleData>
	//STRB1 = 1;
	//STRB2 = 1;
	
		
	
	OldTimeAndDate.Hours = 0;
    131c:	ec e1       	ldi	r30, 0x1C	; 28
    131e:	fa e3       	ldi	r31, 0x3A	; 58
    1320:	13 82       	std	Z+3, r1	; 0x03
	OldTimeAndDate.Minutes = 0;
    1322:	12 82       	std	Z+2, r1	; 0x02
	OldTimeAndDate.Seconds = 0;
    1324:	11 82       	std	Z+1, r1	; 0x01
	OldTimeAndDate.Frames = 0;
    1326:	10 82       	st	Z, r1
	TimeAndDate.Hours = 0;
    1328:	e6 e1       	ldi	r30, 0x16	; 22
    132a:	fa e3       	ldi	r31, 0x3A	; 58
    132c:	13 82       	std	Z+3, r1	; 0x03
	TimeAndDate.Minutes = 0;
    132e:	12 82       	std	Z+2, r1	; 0x02
	TimeAndDate.Seconds = 0;
    1330:	11 82       	std	Z+1, r1	; 0x01
	TimeAndDate.Frames = 0;
    1332:	10 82       	st	Z, r1
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1334:	20 e0       	ldi	r18, 0x00	; 0
    1336:	1f c0       	rjmp	.+62     	; 0x1376 <Init+0x160>
	{
		TimerActive[cntModule] = 0;
    1338:	82 2f       	mov	r24, r18
    133a:	90 e0       	ldi	r25, 0x00	; 0
    133c:	fc 01       	movw	r30, r24
    133e:	ea 5c       	subi	r30, 0xCA	; 202
    1340:	fd 4c       	sbci	r31, 0xCD	; 205
    1342:	10 82       	st	Z, r1
		cntStartPuls[cntModule] = 0;
    1344:	fc 01       	movw	r30, r24
    1346:	e5 51       	subi	r30, 0x15	; 21
    1348:	f6 4c       	sbci	r31, 0xC6	; 198
    134a:	10 82       	st	Z, r1
		cntStartFunction[cntModule] = 0;
    134c:	fc 01       	movw	r30, r24
    134e:	ee 54       	subi	r30, 0x4E	; 78
    1350:	fd 4d       	sbci	r31, 0xDD	; 221
    1352:	10 82       	st	Z, r1
		cntCueFunction[cntModule] = 0;
    1354:	fc 01       	movw	r30, r24
    1356:	ed 5e       	subi	r30, 0xED	; 237
    1358:	fe 4d       	sbci	r31, 0xDE	; 222
    135a:	10 82       	st	Z, r1
		cntMuteFunction[cntModule] = 0;
    135c:	fc 01       	movw	r30, r24
    135e:	ef 56       	subi	r30, 0x6F	; 111
    1360:	f2 4d       	sbci	r31, 0xD2	; 210
    1362:	10 82       	st	Z, r1
		StartActive[cntModule] = 0;
    1364:	fc 01       	movw	r30, r24
    1366:	ec 56       	subi	r30, 0x6C	; 108
    1368:	f4 4d       	sbci	r31, 0xD4	; 212
    136a:	10 82       	st	Z, r1
		CUEByRemoteMIC[cntModule] = 0;
    136c:	fc 01       	movw	r30, r24
    136e:	e9 5f       	subi	r30, 0xF9	; 249
    1370:	fd 4c       	sbci	r31, 0xCD	; 205
    1372:	10 82       	st	Z, r1
	OldTimeAndDate.Frames = 0;
	TimeAndDate.Hours = 0;
	TimeAndDate.Minutes = 0;
	TimeAndDate.Seconds = 0;
	TimeAndDate.Frames = 0;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	20 31       	cpi	r18, 0x10	; 16
    1378:	f8 f2       	brcs	.-66     	; 0x1338 <Init+0x122>
		cntCueFunction[cntModule] = 0;
		cntMuteFunction[cntModule] = 0;
		StartActive[cntModule] = 0;
		CUEByRemoteMIC[cntModule] = 0;
	}
	GlobalTimerActive = 0;
    137a:	10 92 1b 3a 	sts	0x3A1B, r1	; 0x803a1b <GlobalTimerActive>
	TextStringPtr = 0;
    137e:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

	SerialBufferInPtrTop = 0;
    1382:	10 92 15 3a 	sts	0x3A15, r1	; 0x803a15 <SerialBufferInPtrTop>
	SerialBufferInPtrBottom = 0;
    1386:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <SerialBufferInPtrBottom>
	SerialBufferOutPtrTop = 0;
    138a:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <SerialBufferOutPtrTop>
	SerialBufferOutPtrBottom = 0;
    138e:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <SerialBufferOutPtrBottom>
	SerialCnt = 0;
    1392:	10 92 c4 23 	sts	0x23C4, r1	; 0x8023c4 <SerialCnt>
	SerialLength = 0;
    1396:	10 92 6e 22 	sts	0x226E, r1	; 0x80226e <SerialLength>
	SendSerialReady = 1;
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <SendSerialReady>
	
	

	

	I2CBufferInPtrTop = 0;
    13a0:	10 92 80 22 	sts	0x2280, r1	; 0x802280 <I2CBufferInPtrTop>
	I2CBufferInPtrBottom = 0;
    13a4:	10 92 18 32 	sts	0x3218, r1	; 0x803218 <I2CBufferInPtrBottom>
	I2CBufferOutPtrTop = 0;
    13a8:	10 92 6c 22 	sts	0x226C, r1	; 0x80226c <I2CBufferOutPtrTop>
	I2CBufferOutPtrBottom = 0;
    13ac:	10 92 25 21 	sts	0x2125, r1	; 0x802125 <I2CBufferOutPtrBottom>
	I2CSendReady=1;
    13b0:	80 93 8d 2b 	sts	0x2B8D, r24	; 0x802b8d <I2CSendReady>
	I2CMasterReciever = 0;
    13b4:	10 92 8c 2b 	sts	0x2B8C, r1	; 0x802b8c <I2CMasterReciever>
	I2CError = 0;
    13b8:	10 92 6b 22 	sts	0x226B, r1	; 0x80226b <I2CError>
	CardInserted = 0;
    13bc:	10 92 6d 22 	sts	0x226D, r1	; 0x80226d <CardInserted>
	
	//SetupSIO1();
			
	SetupTimer0();
    13c0:	0e 94 eb 0d 	call	0x1bd6	; 0x1bd6 <SetupTimer0>

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// Set display 
	SetLCD(1,"   D&R Airlab   ");
    13c4:	6e e1       	ldi	r22, 0x1E	; 30
    13c6:	70 e2       	ldi	r23, 0x20	; 32
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	SetLCD(0,"\xC0");
    13d0:	6f e2       	ldi	r22, 0x2F	; 47
    13d2:	70 e2       	ldi	r23, 0x20	; 32
    13d4:	80 e0       	ldi	r24, 0x00	; 0
    13d6:	90 e0       	ldi	r25, 0x00	; 0
    13d8:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	SetLCD(1,"  Initializing  ");	
    13dc:	61 e3       	ldi	r22, 0x31	; 49
    13de:	70 e2       	ldi	r23, 0x20	; 32
    13e0:	81 e0       	ldi	r24, 0x01	; 1
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	
	NrOfTelcos = 0;
    13e8:	10 92 c3 22 	sts	0x22C3, r1	; 0x8022c3 <NrOfTelcos>
	NrOfTriples = 0;
    13ec:	10 92 c2 22 	sts	0x22C2, r1	; 0x8022c2 <NrOfTriples>
	/*
		Initialize the interrupts
			-> Enable low level interrupts
			-> Enable global interrupts
	*/	
	TWIM_InitInterrupt();
    13f0:	0e 94 73 28 	call	0x50e6	; 0x50e6 <TWIM_InitInterrupt>
	//TWIM_Init();
	PMIC_CTRL |= PMIC_LOLVLEN_bm;
    13f4:	e2 ea       	ldi	r30, 0xA2	; 162
    13f6:	f0 e0       	ldi	r31, 0x00	; 0
    13f8:	80 81       	ld	r24, Z
    13fa:	81 60       	ori	r24, 0x01	; 1
    13fc:	80 83       	st	Z, r24
	sei();
    13fe:	78 94       	sei
//---------------------------------------------------------------------------------------
	
	Address = 0x0000;
	
	// ModuleType
	TWIM_Receive(I2CAddressEEProm, Address, ModuleType, NROFMODULES);
    1400:	20 e1       	ldi	r18, 0x10	; 16
    1402:	40 e7       	ldi	r20, 0x70	; 112
    1404:	52 e2       	ldi	r21, 0x22	; 34
    1406:	60 e0       	ldi	r22, 0x00	; 0
    1408:	80 e7       	ldi	r24, 0x70	; 112
    140a:	0e 94 ac 28 	call	0x5158	; 0x5158 <TWIM_Receive>
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
    140e:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    1412:	85 30       	cpi	r24, 0x05	; 5
    1414:	21 f0       	breq	.+8      	; 0x141e <Init+0x208>
    1416:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    141a:	8f 3f       	cpi	r24, 0xFF	; 255
    141c:	c1 f7       	brne	.-16     	; 0x140e <Init+0x1f8>
	Address += NROFMODULES;
	
	int t=0;
	
	// ConsoleModuleSettings
	TWIM_Receive(I2CAddressEEProm, Address, EEread, 29);
    141e:	2d e1       	ldi	r18, 0x1D	; 29
    1420:	46 ef       	ldi	r20, 0xF6	; 246
    1422:	50 e2       	ldi	r21, 0x20	; 32
    1424:	60 e1       	ldi	r22, 0x10	; 16
    1426:	80 e7       	ldi	r24, 0x70	; 112
    1428:	0e 94 ac 28 	call	0x5158	; 0x5158 <TWIM_Receive>
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
    142c:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    1430:	85 30       	cpi	r24, 0x05	; 5
    1432:	21 f0       	breq	.+8      	; 0x143c <Init+0x226>
    1434:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    1438:	8f 3f       	cpi	r24, 0xFF	; 255
    143a:	c1 f7       	brne	.-16     	; 0x142c <Init+0x216>
	OldTimeAndDate.Frames = 0;
	TimeAndDate.Hours = 0;
	TimeAndDate.Minutes = 0;
	TimeAndDate.Seconds = 0;
	TimeAndDate.Frames = 0;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    143c:	80 e0       	ldi	r24, 0x00	; 0
    143e:	90 e0       	ldi	r25, 0x00	; 0
    1440:	09 c0       	rjmp	.+18     	; 0x1454 <Init+0x23e>
	TWIM_Receive(I2CAddressEEProm, Address, EEread, 29);
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
	
	for (t=0; t<30; t++)
	{
		ConsoleModuleSettings[0][t]=EEread[t];
    1442:	fc 01       	movw	r30, r24
    1444:	ea 50       	subi	r30, 0x0A	; 10
    1446:	ff 4d       	sbci	r31, 0xDF	; 223
    1448:	20 81       	ld	r18, Z
    144a:	fc 01       	movw	r30, r24
    144c:	e5 5e       	subi	r30, 0xE5	; 229
    144e:	f7 4c       	sbci	r31, 0xC7	; 199
    1450:	20 83       	st	Z, r18
	
	// ConsoleModuleSettings
	TWIM_Receive(I2CAddressEEProm, Address, EEread, 29);
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
	
	for (t=0; t<30; t++)
    1452:	01 96       	adiw	r24, 0x01	; 1
    1454:	8e 31       	cpi	r24, 0x1E	; 30
    1456:	91 05       	cpc	r25, r1
    1458:	a4 f3       	brlt	.-24     	; 0x1442 <Init+0x22c>
	}
		
	Address += 29;
	
	// ConsoleMasterSettings	
	TWIM_Receive(I2CAddressEEProm, Address, ConsoleMasterSettings, 5);
    145a:	25 e0       	ldi	r18, 0x05	; 5
    145c:	4e e8       	ldi	r20, 0x8E	; 142
    145e:	5b e2       	ldi	r21, 0x2B	; 43
    1460:	6d e2       	ldi	r22, 0x2D	; 45
    1462:	80 e7       	ldi	r24, 0x70	; 112
    1464:	0e 94 ac 28 	call	0x5158	; 0x5158 <TWIM_Receive>
	while(!((TWIM_Status() == TWI_MASTER_RECEIVED) || (TWIM_Status() == TWI_MASTER_ERROR)));
    1468:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    146c:	85 30       	cpi	r24, 0x05	; 5
    146e:	21 f0       	breq	.+8      	; 0x1478 <Init+0x262>
    1470:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    1474:	8f 3f       	cpi	r24, 0xFF	; 255
    1476:	c1 f7       	brne	.-16     	; 0x1468 <Init+0x252>
	
	
//------------------------------------------------------------------------------------------------------------------------------------------------	


	Delay(10);	
    1478:	8a e0       	ldi	r24, 0x0A	; 10
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>

	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <Init+0x296>
	{
		for (cntByte=0; cntByte<8; cntByte++)
		{
			ModuleData[cntModule][cntByte]=ATTACK;
    1484:	e2 2f       	mov	r30, r18
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	ee 0f       	add	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	e5 5f       	subi	r30, 0xF5	; 245
    1496:	f4 4d       	sbci	r31, 0xD4	; 212
    1498:	e8 0f       	add	r30, r24
    149a:	f1 1d       	adc	r31, r1
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	90 83       	st	Z, r25
	Delay(10);	

	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		for (cntByte=0; cntByte<8; cntByte++)
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <Init+0x290>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	68 f3       	brcs	.-38     	; 0x1484 <Init+0x26e>


	Delay(10);	

	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    14aa:	2f 5f       	subi	r18, 0xFF	; 255
    14ac:	20 31       	cpi	r18, 0x10	; 16
    14ae:	d0 f3       	brcs	.-12     	; 0x14a4 <Init+0x28e>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <Init+0x2ac>
			ModuleData[cntModule][cntByte]=ATTACK;
		}
	}
	for (cntByte=0; cntByte<8; cntByte++)
	{
		MasterData[cntByte]=ATTACK;
    14b4:	e8 2f       	mov	r30, r24
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	e5 50       	subi	r30, 0x05	; 5
    14ba:	f6 4c       	sbci	r31, 0xC6	; 198
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	90 83       	st	Z, r25
		for (cntByte=0; cntByte<8; cntByte++)
		{
			ModuleData[cntModule][cntByte]=ATTACK;
		}
	}
	for (cntByte=0; cntByte<8; cntByte++)
    14c0:	8f 5f       	subi	r24, 0xFF	; 255
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	b8 f3       	brcs	.-18     	; 0x14b4 <Init+0x29e>
	{
		MasterData[cntByte]=ATTACK;
	}
	
	Delay(10);
    14c6:	8a e0       	ldi	r24, 0x0A	; 10
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>

	for (cntModule=0; cntModule<100; cntModule++)
    14ce:	c0 e0       	ldi	r28, 0x00	; 0
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <Init+0x2ca>
	{
		ReadModuleSwitches(MODULE1_8);
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <ReadModuleSwitches>
		ReadModuleSwitches(MODULE9_16);
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <ReadModuleSwitches>
		MasterData[cntByte]=ATTACK;
	}
	
	Delay(10);

	for (cntModule=0; cntModule<100; cntModule++)
    14de:	cf 5f       	subi	r28, 0xFF	; 255
    14e0:	c4 36       	cpi	r28, 0x64	; 100
    14e2:	b8 f3       	brcs	.-18     	; 0x14d2 <Init+0x2bc>
	{
		ReadModuleSwitches(MODULE1_8);
		ReadModuleSwitches(MODULE9_16);
	}
	EventBufferPtrTop = 0;
    14e4:	10 92 8b 2b 	sts	0x2B8B, r1	; 0x802b8b <EventBufferPtrTop>
	EventBufferPtrBottom = 0;
    14e8:	10 92 f5 20 	sts	0x20F5, r1	; 0x8020f5 <EventBufferPtrBottom>
	

	
	
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    14ec:	10 e0       	ldi	r17, 0x00	; 0
    14ee:	80 c0       	rjmp	.+256    	; 0x15f0 <Init+0x3da>
	{
		unsigned char Type = 0;

		if (ModuleData[cntModule][4]&0x80)
    14f0:	c1 2f       	mov	r28, r17
    14f2:	d0 e0       	ldi	r29, 0x00	; 0
    14f4:	fe 01       	movw	r30, r28
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	e5 5f       	subi	r30, 0xF5	; 245
    1504:	f4 4d       	sbci	r31, 0xD4	; 212
    1506:	84 81       	ldd	r24, Z+4	; 0x04
    1508:	88 23       	and	r24, r24
    150a:	14 f0       	brlt	.+4      	; 0x1510 <Init+0x2fa>
	
	
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		unsigned char Type = 0;
    150c:	80 e0       	ldi	r24, 0x00	; 0
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <Init+0x2fc>

		if (ModuleData[cntModule][4]&0x80)
		Type = 0x02;
    1510:	82 e0       	ldi	r24, 0x02	; 2
		if (ModuleData[cntModule][5]&0x80)
    1512:	fe 01       	movw	r30, r28
    1514:	ee 0f       	add	r30, r30
    1516:	ff 1f       	adc	r31, r31
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	e5 5f       	subi	r30, 0xF5	; 245
    1522:	f4 4d       	sbci	r31, 0xD4	; 212
    1524:	95 81       	ldd	r25, Z+5	; 0x05
    1526:	99 23       	and	r25, r25
    1528:	0c f4       	brge	.+2      	; 0x152c <Init+0x316>
		Type |= 0x01;
    152a:	81 60       	ori	r24, 0x01	; 1

		if (ModuleType[cntModule] != Type)
    152c:	fe 01       	movw	r30, r28
    152e:	e0 59       	subi	r30, 0x90	; 144
    1530:	fd 4d       	sbci	r31, 0xDD	; 221
    1532:	90 81       	ld	r25, Z
    1534:	89 17       	cp	r24, r25
    1536:	d1 f1       	breq	.+116    	; 0x15ac <Init+0x396>
		{
			ModuleType[cntModule] = Type;
    1538:	fe 01       	movw	r30, r28
    153a:	e0 59       	subi	r30, 0x90	; 144
    153c:	fd 4d       	sbci	r31, 0xDD	; 221
    153e:	80 83       	st	Z, r24
			SetLCD(0,"\xC0");
    1540:	6f e2       	ldi	r22, 0x2F	; 47
    1542:	70 e2       	ldi	r23, 0x20	; 32
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
			SetLCD(1,"Config changed");
    154c:	62 e4       	ldi	r22, 0x42	; 66
    154e:	70 e2       	ldi	r23, 0x20	; 32
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
			Delay(20);
    1558:	84 e1       	ldi	r24, 0x14	; 20
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>

			ConsoleModuleSettings[cntModule][TIMERLINEA] = 0x01;
    1560:	8d e1       	ldi	r24, 0x1D	; 29
    1562:	8c 9f       	mul	r24, r28
    1564:	f0 01       	movw	r30, r0
    1566:	8d 9f       	mul	r24, r29
    1568:	f0 0d       	add	r31, r0
    156a:	11 24       	eor	r1, r1
    156c:	e5 5e       	subi	r30, 0xE5	; 229
    156e:	f7 4c       	sbci	r31, 0xC7	; 199
    1570:	81 e0       	ldi	r24, 0x01	; 1
    1572:	80 83       	st	Z, r24
			ConsoleModuleSettings[cntModule][TIMERLINEB] = 0x00;
    1574:	11 82       	std	Z+1, r1	; 0x01
			ConsoleModuleSettings[cntModule][TIMERMIC] = 0x00;
    1576:	12 82       	std	Z+2, r1	; 0x02
			ConsoleModuleSettings[cntModule][STARTLINEA] = 0x01;			
    1578:	83 83       	std	Z+3, r24	; 0x03
			ConsoleModuleSettings[cntModule][STARTLINEB] = 0x00;
    157a:	14 82       	std	Z+4, r1	; 0x04
			ConsoleModuleSettings[cntModule][STARTMIC] = 0x00;
    157c:	15 82       	std	Z+5, r1	; 0x05
			ConsoleModuleSettings[cntModule][STARTFADER] = 0x01;
    157e:	86 83       	std	Z+6, r24	; 0x06
			ConsoleModuleSettings[cntModule][STARTON] = 0x00;     //7
    1580:	17 82       	std	Z+7, r1	; 0x07
			
			
			ConsoleModuleSettings[cntModule][STARTCUE] = 0x00;
    1582:	10 86       	std	Z+8, r1	; 0x08
			ConsoleModuleSettings[cntModule][STARTPULS] = 0x00;
    1584:	11 86       	std	Z+9, r1	; 0x09
			ConsoleModuleSettings[cntModule][REMLINEA] = 0x00;
    1586:	12 86       	std	Z+10, r1	; 0x0a
			ConsoleModuleSettings[cntModule][REMLINEB] = 0x00;
    1588:	13 86       	std	Z+11, r1	; 0x0b
			ConsoleModuleSettings[cntModule][REMMIC] = 0x00;
    158a:	14 86       	std	Z+12, r1	; 0x0c
			ConsoleModuleSettings[cntModule][DJMIC] = 0x00;
    158c:	15 86       	std	Z+13, r1	; 0x0d
			ConsoleModuleSettings[cntModule][ANNMIC] = 0x00;
    158e:	16 86       	std	Z+14, r1	; 0x0e
			ConsoleModuleSettings[cntModule][STUDIOMIC] = 0x00;   //15
    1590:	17 86       	std	Z+15, r1	; 0x0f
			
			ConsoleModuleSettings[cntModule][ONAIR1LINEA] = 0x00;
    1592:	10 8a       	std	Z+16, r1	; 0x10
			ConsoleModuleSettings[cntModule][ONAIR1LINEB] = 0x00;
    1594:	11 8a       	std	Z+17, r1	; 0x11
			ConsoleModuleSettings[cntModule][ONAIR1MIC] = 0x00;
    1596:	12 8a       	std	Z+18, r1	; 0x12
			ConsoleModuleSettings[cntModule][ONAIR2LINEA] = 0x00;
    1598:	13 8a       	std	Z+19, r1	; 0x13
			ConsoleModuleSettings[cntModule][ONAIR2LINEB] = 0x00;
    159a:	14 8a       	std	Z+20, r1	; 0x14
			ConsoleModuleSettings[cntModule][ONAIR2MIC] = 0x00;
    159c:	15 8a       	std	Z+21, r1	; 0x15
			ConsoleModuleSettings[cntModule][POWERON] = 0x00;
    159e:	16 8a       	std	Z+22, r1	; 0x16
			ConsoleModuleSettings[cntModule][MICATLINEA] = 0x00;   //23
    15a0:	17 8a       	std	Z+23, r1	; 0x17
			
			ConsoleModuleSettings[cntModule][MICATLINEB] = 0x00;
    15a2:	10 8e       	std	Z+24, r1	; 0x18
			ConsoleModuleSettings[cntModule][REMONMIC] = 0x00;
    15a4:	11 8e       	std	Z+25, r1	; 0x19
			ConsoleModuleSettings[cntModule][REMONLINEA] = 0x00;
    15a6:	12 8e       	std	Z+26, r1	; 0x1a
			ConsoleModuleSettings[cntModule][REMONLINEB] = 0x00;
    15a8:	13 8e       	std	Z+27, r1	; 0x1b
			ConsoleModuleSettings[cntModule][SWITCHSTART] = 0x00;  //28
    15aa:	14 8e       	std	Z+28, r1	; 0x1c
		}

		if (ModuleType[cntModule] == TELCO)
    15ac:	fe 01       	movw	r30, r28
    15ae:	e0 59       	subi	r30, 0x90	; 144
    15b0:	fd 4d       	sbci	r31, 0xDD	; 221
    15b2:	80 81       	ld	r24, Z
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	d9 f4       	brne	.+54     	; 0x15ee <Init+0x3d8>
		{
			ConsoleModuleSettings[cntModule][TIMERMIC] = 0x00;
    15b8:	8d e1       	ldi	r24, 0x1D	; 29
    15ba:	8c 9f       	mul	r24, r28
    15bc:	f0 01       	movw	r30, r0
    15be:	8d 9f       	mul	r24, r29
    15c0:	f0 0d       	add	r31, r0
    15c2:	11 24       	eor	r1, r1
    15c4:	e5 5e       	subi	r30, 0xE5	; 229
    15c6:	f7 4c       	sbci	r31, 0xC7	; 199
    15c8:	12 82       	std	Z+2, r1	; 0x02
			ConsoleModuleSettings[cntModule][STARTLINEA] = 0x01;
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	83 83       	std	Z+3, r24	; 0x03
			ConsoleModuleSettings[cntModule][STARTLINEB] = 0x01;
    15ce:	84 83       	std	Z+4, r24	; 0x04
			ConsoleModuleSettings[cntModule][STARTMIC] = 0x00;
    15d0:	15 82       	std	Z+5, r1	; 0x05
			ConsoleModuleSettings[cntModule][STARTFADER] = 0x00;
    15d2:	16 82       	std	Z+6, r1	; 0x06
			ConsoleModuleSettings[cntModule][STARTON] = 0x01;
    15d4:	87 83       	std	Z+7, r24	; 0x07
			ConsoleModuleSettings[cntModule][STARTPULS] = 0x00;
    15d6:	11 86       	std	Z+9, r1	; 0x09
			ConsoleModuleSettings[cntModule][DJMIC] = 0x00;
    15d8:	15 86       	std	Z+13, r1	; 0x0d
			ConsoleModuleSettings[cntModule][ANNMIC] = 0x00;
    15da:	16 86       	std	Z+14, r1	; 0x0e
			ConsoleModuleSettings[cntModule][STUDIOMIC] = 0x00;
    15dc:	17 86       	std	Z+15, r1	; 0x0f
			ConsoleModuleSettings[cntModule][ONAIR1MIC] = 0x00;
    15de:	12 8a       	std	Z+18, r1	; 0x12
			ConsoleModuleSettings[cntModule][ONAIR2MIC] = 0x00;
    15e0:	15 8a       	std	Z+21, r1	; 0x15
			ConsoleModuleSettings[cntModule][MICATLINEA] = 0x00;
    15e2:	17 8a       	std	Z+23, r1	; 0x17
			ConsoleModuleSettings[cntModule][MICATLINEB] = 0x00;
    15e4:	10 8e       	std	Z+24, r1	; 0x18
			ConsoleModuleSettings[cntModule][REMONMIC] = 0x00;
    15e6:	11 8e       	std	Z+25, r1	; 0x19
			ConsoleModuleSettings[cntModule][REMONLINEA] = 0x00;
    15e8:	12 8e       	std	Z+26, r1	; 0x1a
			ConsoleModuleSettings[cntModule][REMONLINEB] = 0x00;
    15ea:	13 8e       	std	Z+27, r1	; 0x1b
			ConsoleModuleSettings[cntModule][SWITCHSTART] = 0x00;
    15ec:	14 8e       	std	Z+28, r1	; 0x1c
	

	
	
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    15ee:	1f 5f       	subi	r17, 0xFF	; 255
    15f0:	10 31       	cpi	r17, 0x10	; 16
    15f2:	08 f4       	brcc	.+2      	; 0x15f6 <Init+0x3e0>
    15f4:	7d cf       	rjmp	.-262    	; 0x14f0 <Init+0x2da>
    15f6:	10 e0       	ldi	r17, 0x00	; 0
    15f8:	68 c0       	rjmp	.+208    	; 0x16ca <Init+0x4b4>
	
	
	// Determine Startup setting
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		ConsoleFunctionData[cntModule] = 0x00;
    15fa:	c1 2f       	mov	r28, r17
    15fc:	d0 e0       	ldi	r29, 0x00	; 0
    15fe:	fe 01       	movw	r30, r28
    1600:	e0 56       	subi	r30, 0x60	; 96
    1602:	fd 4d       	sbci	r31, 0xDD	; 221
    1604:	10 82       	st	Z, r1
		if (ConsoleModuleSettings[cntModule][POWERON])
    1606:	8d e1       	ldi	r24, 0x1D	; 29
    1608:	8c 9f       	mul	r24, r28
    160a:	f0 01       	movw	r30, r0
    160c:	8d 9f       	mul	r24, r29
    160e:	f0 0d       	add	r31, r0
    1610:	11 24       	eor	r1, r1
    1612:	e5 5e       	subi	r30, 0xE5	; 229
    1614:	f7 4c       	sbci	r31, 0xC7	; 199
    1616:	86 89       	ldd	r24, Z+22	; 0x16
    1618:	88 23       	and	r24, r24
    161a:	09 f4       	brne	.+2      	; 0x161e <Init+0x408>
    161c:	51 c0       	rjmp	.+162    	; 0x16c0 <Init+0x4aa>
		{
			ConsoleFunctionData[cntModule] |= ON_LED;
    161e:	80 e2       	ldi	r24, 0x20	; 32
    1620:	fe 01       	movw	r30, r28
    1622:	e0 56       	subi	r30, 0x60	; 96
    1624:	fd 4d       	sbci	r31, 0xDD	; 221
    1626:	80 83       	st	Z, r24
			if ((ConsoleModuleSettings[cntModule][STARTON]) && (!ConsoleModuleSettings[cntModule][STARTFADER]))
    1628:	8d e1       	ldi	r24, 0x1D	; 29
    162a:	8c 9f       	mul	r24, r28
    162c:	f0 01       	movw	r30, r0
    162e:	8d 9f       	mul	r24, r29
    1630:	f0 0d       	add	r31, r0
    1632:	11 24       	eor	r1, r1
    1634:	e5 5e       	subi	r30, 0xE5	; 229
    1636:	f7 4c       	sbci	r31, 0xC7	; 199
    1638:	87 81       	ldd	r24, Z+7	; 0x07
    163a:	88 23       	and	r24, r24
    163c:	79 f0       	breq	.+30     	; 0x165c <Init+0x446>
    163e:	8d e1       	ldi	r24, 0x1D	; 29
    1640:	8c 9f       	mul	r24, r28
    1642:	f0 01       	movw	r30, r0
    1644:	8d 9f       	mul	r24, r29
    1646:	f0 0d       	add	r31, r0
    1648:	11 24       	eor	r1, r1
    164a:	e5 5e       	subi	r30, 0xE5	; 229
    164c:	f7 4c       	sbci	r31, 0xC7	; 199
    164e:	86 81       	ldd	r24, Z+6	; 0x06
    1650:	81 11       	cpse	r24, r1
    1652:	04 c0       	rjmp	.+8      	; 0x165c <Init+0x446>
			StartControl(cntModule,1);
    1654:	61 e0       	ldi	r22, 0x01	; 1
    1656:	81 2f       	mov	r24, r17
    1658:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>

			if ((ModuleData[cntModule][FADERON]&0x80))
    165c:	fe 01       	movw	r30, r28
    165e:	ee 0f       	add	r30, r30
    1660:	ff 1f       	adc	r31, r31
    1662:	ee 0f       	add	r30, r30
    1664:	ff 1f       	adc	r31, r31
    1666:	ee 0f       	add	r30, r30
    1668:	ff 1f       	adc	r31, r31
    166a:	e5 5f       	subi	r30, 0xF5	; 245
    166c:	f4 4d       	sbci	r31, 0xD4	; 212
    166e:	81 81       	ldd	r24, Z+1	; 0x01
    1670:	88 23       	and	r24, r24
    1672:	04 f5       	brge	.+64     	; 0x16b4 <Init+0x49e>
			{ // !JB
				if  ((ConsoleModuleSettings[cntModule][STARTON]) && (ConsoleModuleSettings[cntModule][STARTFADER]))
    1674:	8d e1       	ldi	r24, 0x1D	; 29
    1676:	8c 9f       	mul	r24, r28
    1678:	f0 01       	movw	r30, r0
    167a:	8d 9f       	mul	r24, r29
    167c:	f0 0d       	add	r31, r0
    167e:	11 24       	eor	r1, r1
    1680:	e5 5e       	subi	r30, 0xE5	; 229
    1682:	f7 4c       	sbci	r31, 0xC7	; 199
    1684:	87 81       	ldd	r24, Z+7	; 0x07
    1686:	88 23       	and	r24, r24
    1688:	79 f0       	breq	.+30     	; 0x16a8 <Init+0x492>
    168a:	8d e1       	ldi	r24, 0x1D	; 29
    168c:	8c 9f       	mul	r24, r28
    168e:	f0 01       	movw	r30, r0
    1690:	8d 9f       	mul	r24, r29
    1692:	f0 0d       	add	r31, r0
    1694:	11 24       	eor	r1, r1
    1696:	e5 5e       	subi	r30, 0xE5	; 229
    1698:	f7 4c       	sbci	r31, 0xC7	; 199
    169a:	86 81       	ldd	r24, Z+6	; 0x06
    169c:	88 23       	and	r24, r24
    169e:	21 f0       	breq	.+8      	; 0x16a8 <Init+0x492>
				StartControl(cntModule,1);
    16a0:	61 e0       	ldi	r22, 0x01	; 1
    16a2:	81 2f       	mov	r24, r17
    16a4:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>

				ConsoleFunctionData[cntModule] |= REMOTE_FUNCTION;
    16a8:	c0 56       	subi	r28, 0x60	; 96
    16aa:	dd 4d       	sbci	r29, 0xDD	; 221
    16ac:	88 81       	ld	r24, Y
    16ae:	81 60       	ori	r24, 0x01	; 1
    16b0:	88 83       	st	Y, r24
    16b2:	0a c0       	rjmp	.+20     	; 0x16c8 <Init+0x4b2>
			}
			else
			{
				ConsoleFunctionData[cntModule] |= MUTE_FUNCTION;
    16b4:	c0 56       	subi	r28, 0x60	; 96
    16b6:	dd 4d       	sbci	r29, 0xDD	; 221
    16b8:	88 81       	ld	r24, Y
    16ba:	80 61       	ori	r24, 0x10	; 16
    16bc:	88 83       	st	Y, r24
    16be:	04 c0       	rjmp	.+8      	; 0x16c8 <Init+0x4b2>
			}
		}
		else
		{
			ConsoleFunctionData[cntModule] |= MUTE_FUNCTION;
    16c0:	c0 56       	subi	r28, 0x60	; 96
    16c2:	dd 4d       	sbci	r29, 0xDD	; 221
    16c4:	80 e1       	ldi	r24, 0x10	; 16
    16c6:	88 83       	st	Y, r24
	
		 
	
	
	// Determine Startup setting
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    16c8:	1f 5f       	subi	r17, 0xFF	; 255
    16ca:	10 31       	cpi	r17, 0x10	; 16
    16cc:	08 f4       	brcc	.+2      	; 0x16d0 <Init+0x4ba>
    16ce:	95 cf       	rjmp	.-214    	; 0x15fa <Init+0x3e4>
		// Watchdog
		//PCON |= 0x10;
		//T3 = 0;
	}	
	
	ConsoleFunctionData[16] = NOT_POWER_ON_CC;
    16d0:	80 e4       	ldi	r24, 0x40	; 64
    16d2:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>

	for (cntModule; cntModule<NROFMODULES; cntModule++)
    16d6:	04 c0       	rjmp	.+8      	; 0x16e0 <Init+0x4ca>
	{
		TimerControl(cntModule);
    16d8:	81 2f       	mov	r24, r17
    16da:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
		//T3 = 0;
	}	
	
	ConsoleFunctionData[16] = NOT_POWER_ON_CC;

	for (cntModule; cntModule<NROFMODULES; cntModule++)
    16de:	1f 5f       	subi	r17, 0xFF	; 255
    16e0:	10 31       	cpi	r17, 0x10	; 16
    16e2:	d0 f3       	brcs	.-12     	; 0x16d8 <Init+0x4c2>
		//PCON |= 0x10;
		//T3 = 0;
	}

	//OnAir1/2 Control
	OnAirControl();
    16e4:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>

	//DJ-Control
	DJControl();
    16e8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>

	//StudioMic Control
	StudioMicControl();
    16ec:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>

	//Cue Control
	CueControl();
    16f0:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>

	SetConsoleData();
    16f4:	0e 94 90 07 	call	0xf20	; 0xf20 <SetConsoleData>


	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    16f8:	80 e0       	ldi	r24, 0x00	; 0
    16fa:	16 c0       	rjmp	.+44     	; 0x1728 <Init+0x512>
	{
		switch (ModuleType[cntModule])
    16fc:	e8 2f       	mov	r30, r24
    16fe:	f0 e0       	ldi	r31, 0x00	; 0
    1700:	e0 59       	subi	r30, 0x90	; 144
    1702:	fd 4d       	sbci	r31, 0xDD	; 221
    1704:	90 81       	ld	r25, Z
    1706:	91 30       	cpi	r25, 0x01	; 1
    1708:	19 f0       	breq	.+6      	; 0x1710 <Init+0x4fa>
    170a:	92 30       	cpi	r25, 0x02	; 2
    170c:	39 f0       	breq	.+14     	; 0x171c <Init+0x506>
    170e:	0b c0       	rjmp	.+22     	; 0x1726 <Init+0x510>
		{
			case TRIPLE:
			{
				// Triple Module
				NrOfTriples++;
    1710:	90 91 c2 22 	lds	r25, 0x22C2	; 0x8022c2 <NrOfTriples>
    1714:	9f 5f       	subi	r25, 0xFF	; 255
    1716:	90 93 c2 22 	sts	0x22C2, r25	; 0x8022c2 <NrOfTriples>
			}
			break;
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <Init+0x510>
			case TELCO:
			{
				// Telco Module
				NrOfTelcos++;
    171c:	90 91 c3 22 	lds	r25, 0x22C3	; 0x8022c3 <NrOfTelcos>
    1720:	9f 5f       	subi	r25, 0xFF	; 255
    1722:	90 93 c3 22 	sts	0x22C3, r25	; 0x8022c3 <NrOfTelcos>

	SetConsoleData();


	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1726:	8f 5f       	subi	r24, 0xFF	; 255
    1728:	80 31       	cpi	r24, 0x10	; 16
    172a:	40 f3       	brcs	.-48     	; 0x16fc <Init+0x4e6>
		//PCON |= 0x10;
		//T3 = 0;
	}
		
	/* Set display */
	SetLCD(0,"\x80");
    172c:	61 e5       	ldi	r22, 0x51	; 81
    172e:	70 e2       	ldi	r23, 0x20	; 32
    1730:	80 e0       	ldi	r24, 0x00	; 0
    1732:	90 e0       	ldi	r25, 0x00	; 0
    1734:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	SetLCD(1,"   D&R Airlab   ");
    1738:	6e e1       	ldi	r22, 0x1E	; 30
    173a:	70 e2       	ldi	r23, 0x20	; 32
    173c:	81 e0       	ldi	r24, 0x01	; 1
    173e:	90 e0       	ldi	r25, 0x00	; 0
    1740:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	ShowConfig();
    1744:	0e 94 51 24 	call	0x48a2	; 0x48a2 <ShowConfig>
	
	Delay(1000);
    1748:	88 ee       	ldi	r24, 0xE8	; 232
    174a:	93 e0       	ldi	r25, 0x03	; 3
    174c:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>
	
	
	PORTD_OUTCLR = 0x01;
    1750:	e6 e6       	ldi	r30, 0x66	; 102
    1752:	f6 e0       	ldi	r31, 0x06	; 6
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x02;
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x04;
    175c:	84 e0       	ldi	r24, 0x04	; 4
    175e:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x08;
    1760:	88 e0       	ldi	r24, 0x08	; 8
    1762:	80 83       	st	Z, r24
	PORTD_OUTSET = 0x10;
    1764:	80 e1       	ldi	r24, 0x10	; 16
    1766:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>

	if ((PORTC_IN&0x43)==0x00)
    176a:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7de648>
    176e:	83 74       	andi	r24, 0x43	; 67
    1770:	79 f4       	brne	.+30     	; 0x1790 <Init+0x57a>
	{
		ConsoleMasterSettings[4] = 0x01;
    1772:	81 e0       	ldi	r24, 0x01	; 1
    1774:	80 93 92 2b 	sts	0x2B92, r24	; 0x802b92 <ConsoleMasterSettings+0x4>
		SetLCD(0,"\xC0");
    1778:	6f e2       	ldi	r22, 0x2F	; 47
    177a:	70 e2       	ldi	r23, 0x20	; 32
    177c:	80 e0       	ldi	r24, 0x00	; 0
    177e:	90 e0       	ldi	r25, 0x00	; 0
    1780:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
		SetLCD(1,"Security off    ");
    1784:	63 e5       	ldi	r22, 0x53	; 83
    1786:	70 e2       	ldi	r23, 0x20	; 32
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	90 e0       	ldi	r25, 0x00	; 0
    178c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	}
	
	Delay(50);
    1790:	82 e3       	ldi	r24, 0x32	; 50
    1792:	90 e0       	ldi	r25, 0x00	; 0
    1794:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>
	SetLCD(0,"\x80");
    1798:	61 e5       	ldi	r22, 0x51	; 81
    179a:	70 e2       	ldi	r23, 0x20	; 32
    179c:	80 e0       	ldi	r24, 0x00	; 0
    179e:	90 e0       	ldi	r25, 0x00	; 0
    17a0:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	SetLCD(1,"                ");
    17a4:	64 e6       	ldi	r22, 0x64	; 100
    17a6:	70 e2       	ldi	r23, 0x20	; 32
    17a8:	81 e0       	ldi	r24, 0x01	; 1
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	SetLCD(0,"\xC0");
    17b0:	6f e2       	ldi	r22, 0x2F	; 47
    17b2:	70 e2       	ldi	r23, 0x20	; 32
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	90 e0       	ldi	r25, 0x00	; 0
    17b8:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	SetLCD(1,TextString[TextStringPtr]);
    17bc:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    17c0:	91 e1       	ldi	r25, 0x11	; 17
    17c2:	69 9f       	mul	r22, r25
    17c4:	b0 01       	movw	r22, r0
    17c6:	11 24       	eor	r1, r1
    17c8:	6a 5d       	subi	r22, 0xDA	; 218
    17ca:	7d 4d       	sbci	r23, 0xDD	; 221
    17cc:	81 e0       	ldi	r24, 0x01	; 1
    17ce:	90 e0       	ldi	r25, 0x00	; 0
    17d0:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>





}
    17d4:	df 91       	pop	r29
    17d6:	cf 91       	pop	r28
    17d8:	1f 91       	pop	r17
    17da:	08 95       	ret

000017dc <main>:
//*****************************************************************************************************************************
//*****************************************************************************************************************************
//*****************************************************************************************************************************
//*****************************************************************************************************************************
int	main (void)
{	
    17dc:	cf 93       	push	r28
    17de:	df 93       	push	r29
    17e0:	cd b7       	in	r28, 0x3d	; 61
    17e2:	de b7       	in	r29, 0x3e	; 62
    17e4:	29 97       	sbiw	r28, 0x09	; 9
    17e6:	cd bf       	out	0x3d, r28	; 61
    17e8:	de bf       	out	0x3e, r29	; 62
	char TextBuffer[9];
	
	Init();
    17ea:	0e 94 0b 09 	call	0x1216	; 0x1216 <Init>
				//}
			//}
		//}
	//}

	TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    17ee:	e6 e1       	ldi	r30, 0x16	; 22
    17f0:	fa e3       	ldi	r31, 0x3A	; 58
    17f2:	23 81       	ldd	r18, Z+3	; 0x03
    17f4:	8d ec       	ldi	r24, 0xCD	; 205
    17f6:	28 9f       	mul	r18, r24
    17f8:	91 2d       	mov	r25, r1
    17fa:	11 24       	eor	r1, r1
    17fc:	96 95       	lsr	r25
    17fe:	96 95       	lsr	r25
    1800:	96 95       	lsr	r25
    1802:	30 e3       	ldi	r19, 0x30	; 48
    1804:	39 0f       	add	r19, r25
    1806:	39 83       	std	Y+1, r19	; 0x01
	TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    1808:	99 0f       	add	r25, r25
    180a:	39 2f       	mov	r19, r25
    180c:	33 0f       	add	r19, r19
    180e:	33 0f       	add	r19, r19
    1810:	93 0f       	add	r25, r19
    1812:	29 1b       	sub	r18, r25
    1814:	92 2f       	mov	r25, r18
    1816:	90 5d       	subi	r25, 0xD0	; 208
    1818:	9a 83       	std	Y+2, r25	; 0x02
	TextBuffer[2] = ':';
    181a:	4a e3       	ldi	r20, 0x3A	; 58
    181c:	4b 83       	std	Y+3, r20	; 0x03
	TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    181e:	22 81       	ldd	r18, Z+2	; 0x02
    1820:	28 9f       	mul	r18, r24
    1822:	91 2d       	mov	r25, r1
    1824:	11 24       	eor	r1, r1
    1826:	96 95       	lsr	r25
    1828:	96 95       	lsr	r25
    182a:	96 95       	lsr	r25
    182c:	30 e3       	ldi	r19, 0x30	; 48
    182e:	39 0f       	add	r19, r25
    1830:	3c 83       	std	Y+4, r19	; 0x04
	TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    1832:	99 0f       	add	r25, r25
    1834:	39 2f       	mov	r19, r25
    1836:	33 0f       	add	r19, r19
    1838:	33 0f       	add	r19, r19
    183a:	93 0f       	add	r25, r19
    183c:	29 1b       	sub	r18, r25
    183e:	92 2f       	mov	r25, r18
    1840:	90 5d       	subi	r25, 0xD0	; 208
    1842:	9d 83       	std	Y+5, r25	; 0x05
	TextBuffer[5] = ':';
    1844:	4e 83       	std	Y+6, r20	; 0x06
	TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    1846:	91 81       	ldd	r25, Z+1	; 0x01
    1848:	98 9f       	mul	r25, r24
    184a:	81 2d       	mov	r24, r1
    184c:	11 24       	eor	r1, r1
    184e:	86 95       	lsr	r24
    1850:	86 95       	lsr	r24
    1852:	86 95       	lsr	r24
    1854:	20 e3       	ldi	r18, 0x30	; 48
    1856:	28 0f       	add	r18, r24
    1858:	2f 83       	std	Y+7, r18	; 0x07
	TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    185a:	88 0f       	add	r24, r24
    185c:	28 2f       	mov	r18, r24
    185e:	22 0f       	add	r18, r18
    1860:	22 0f       	add	r18, r18
    1862:	82 0f       	add	r24, r18
    1864:	98 1b       	sub	r25, r24
    1866:	89 2f       	mov	r24, r25
    1868:	80 5d       	subi	r24, 0xD0	; 208
    186a:	88 87       	std	Y+8, r24	; 0x08

	SetLCD(0,"\x84");
    186c:	65 e7       	ldi	r22, 0x75	; 117
    186e:	70 e2       	ldi	r23, 0x20	; 32
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	TextBuffer[8] = 0;
    1878:	19 86       	std	Y+9, r1	; 0x09
	SetLCD(1,TextBuffer);
    187a:	be 01       	movw	r22, r28
    187c:	6f 5f       	subi	r22, 0xFF	; 255
    187e:	7f 4f       	sbci	r23, 0xFF	; 255
    1880:	81 e0       	ldi	r24, 0x01	; 1
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

					
	unsigned char cntByte, cntChannel;				
										
	// MASTERSETUPDATA
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
    1888:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <SerialBufferOutPtrBottom>
    188c:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <SerialBufferInPtrBottom>
    1890:	10 92 15 3a 	sts	0x3A15, r1	; 0x803a15 <SerialBufferInPtrTop>
														
	SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    1894:	e5 ec       	ldi	r30, 0xC5	; 197
    1896:	f3 e2       	ldi	r31, 0x23	; 35
    1898:	84 e9       	ldi	r24, 0x94	; 148
    189a:	80 83       	st	Z, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    189c:	82 e0       	ldi	r24, 0x02	; 2
    189e:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    18a2:	11 82       	std	Z+1, r1	; 0x01
										
	for (cntByte=0; cntByte<5; cntByte++)
    18a4:	80 e0       	ldi	r24, 0x00	; 0
    18a6:	11 c0       	rjmp	.+34     	; 0x18ca <main+0xee>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    18a8:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    18ac:	91 e0       	ldi	r25, 0x01	; 1
    18ae:	9e 0f       	add	r25, r30
    18b0:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    18b4:	f0 e0       	ldi	r31, 0x00	; 0
    18b6:	a8 2f       	mov	r26, r24
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	a2 57       	subi	r26, 0x72	; 114
    18bc:	b4 4d       	sbci	r27, 0xD4	; 212
    18be:	9c 91       	ld	r25, X
    18c0:	eb 53       	subi	r30, 0x3B	; 59
    18c2:	fc 4d       	sbci	r31, 0xDC	; 220
    18c4:	9f 77       	andi	r25, 0x7F	; 127
    18c6:	90 83       	st	Z, r25
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
														
	SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
	SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
										
	for (cntByte=0; cntByte<5; cntByte++)
    18c8:	8f 5f       	subi	r24, 0xFF	; 255
    18ca:	85 30       	cpi	r24, 0x05	; 5
    18cc:	68 f3       	brcs	.-38     	; 0x18a8 <main+0xcc>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
	}

	if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    18ce:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    18d2:	88 23       	and	r24, r24
    18d4:	69 f0       	breq	.+26     	; 0x18f0 <main+0x114>
    18d6:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    18da:	88 23       	and	r24, r24
    18dc:	49 f0       	breq	.+18     	; 0x18f0 <main+0x114>
	{
		USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    18de:	81 e0       	ldi	r24, 0x01	; 1
    18e0:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    18e4:	80 91 c5 23 	lds	r24, 0x23C5	; 0x8023c5 <SerialBufferOut>
    18e8:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
		SendSerialReady = 0;
    18ec:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
	}


					
	Delay(100);
    18f0:	84 e6       	ldi	r24, 0x64	; 100
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>
	//cntChannel=0;
		
	// MODULESETDATA
	for (cntChannel=0; cntChannel<16; cntChannel++)
    18f8:	20 e0       	ldi	r18, 0x00	; 0
    18fa:	46 c0       	rjmp	.+140    	; 0x1988 <main+0x1ac>
	{
		//if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
		//{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    18fc:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    1900:	e1 e0       	ldi	r30, 0x01	; 1
    1902:	ea 0f       	add	r30, r26
    1904:	b0 e0       	ldi	r27, 0x00	; 0
    1906:	ab 53       	subi	r26, 0x3B	; 59
    1908:	bc 4d       	sbci	r27, 0xDC	; 220
    190a:	83 e9       	ldi	r24, 0x93	; 147
    190c:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    190e:	81 e0       	ldi	r24, 0x01	; 1
    1910:	8e 0f       	add	r24, r30
    1912:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	eb 53       	subi	r30, 0x3B	; 59
    191a:	fc 4d       	sbci	r31, 0xDC	; 220
    191c:	20 83       	st	Z, r18
						
		for (cntByte=0; cntByte<29; cntByte++)
    191e:	90 e0       	ldi	r25, 0x00	; 0
    1920:	16 c0       	rjmp	.+44     	; 0x194e <main+0x172>
		{
			ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
    1922:	8d e1       	ldi	r24, 0x1D	; 29
    1924:	28 9f       	mul	r18, r24
    1926:	f0 01       	movw	r30, r0
    1928:	11 24       	eor	r1, r1
    192a:	e5 5e       	subi	r30, 0xE5	; 229
    192c:	f7 4c       	sbci	r31, 0xC7	; 199
    192e:	e9 0f       	add	r30, r25
    1930:	f1 1d       	adc	r31, r1
    1932:	80 81       	ld	r24, Z
    1934:	81 70       	andi	r24, 0x01	; 1
    1936:	80 83       	st	Z, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
    1938:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    193c:	31 e0       	ldi	r19, 0x01	; 1
    193e:	3e 0f       	add	r19, r30
    1940:	30 93 82 22 	sts	0x2282, r19	; 0x802282 <SerialBufferOutPtrTop>
    1944:	f0 e0       	ldi	r31, 0x00	; 0
    1946:	eb 53       	subi	r30, 0x3B	; 59
    1948:	fc 4d       	sbci	r31, 0xDC	; 220
    194a:	80 83       	st	Z, r24
		//if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
		//{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
		SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
						
		for (cntByte=0; cntByte<29; cntByte++)
    194c:	9f 5f       	subi	r25, 0xFF	; 255
    194e:	9d 31       	cpi	r25, 0x1D	; 29
    1950:	40 f3       	brcs	.-48     	; 0x1922 <main+0x146>
		{
			ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
			SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
		}
		//}
		if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    1952:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    1956:	e0 91 93 2b 	lds	r30, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    195a:	8e 17       	cp	r24, r30
    195c:	81 f0       	breq	.+32     	; 0x197e <main+0x1a2>
    195e:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    1962:	88 23       	and	r24, r24
    1964:	61 f0       	breq	.+24     	; 0x197e <main+0x1a2>
		{
			USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	8e 0f       	add	r24, r30
    196a:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	eb 53       	subi	r30, 0x3B	; 59
    1972:	fc 4d       	sbci	r31, 0xDC	; 220
    1974:	80 81       	ld	r24, Z
    1976:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
			SendSerialReady = 0;
    197a:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
		}
		while(SendSerialReady);
    197e:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    1982:	81 11       	cpse	r24, r1
    1984:	fc cf       	rjmp	.-8      	; 0x197e <main+0x1a2>
					
	Delay(100);
	//cntChannel=0;
		
	// MODULESETDATA
	for (cntChannel=0; cntChannel<16; cntChannel++)
    1986:	2f 5f       	subi	r18, 0xFF	; 255
    1988:	20 31       	cpi	r18, 0x10	; 16
    198a:	08 f4       	brcc	.+2      	; 0x198e <main+0x1b2>
    198c:	b7 cf       	rjmp	.-146    	; 0x18fc <main+0x120>
			SendSerialReady = 0;
		}
		while(SendSerialReady);
	}
									
	Delay(10);
    198e:	8a e0       	ldi	r24, 0x0A	; 10
    1990:	90 e0       	ldi	r25, 0x00	; 0
    1992:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>
// ************** WHILE(1) ************* ************** WHILE(1) ************* ************** WHILE(1) *************

	//SerialBufferOutPtrTop = 1;  // Dit schijnt belangrijk te zijn
	//SerialBufferOutPtrBottom = 2;  // buffers moeten opeen volgend zijn !!!  0-1  1-2  2-3 enz.
	
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
    1996:	10 92 93 2b 	sts	0x2B93, r1	; 0x802b93 <SerialBufferOutPtrBottom>
    199a:	10 92 82 22 	sts	0x2282, r1	; 0x802282 <SerialBufferOutPtrTop>
    199e:	10 92 24 21 	sts	0x2124, r1	; 0x802124 <SerialBufferInPtrBottom>
    19a2:	10 92 15 3a 	sts	0x3A15, r1	; 0x803a15 <SerialBufferInPtrTop>
	
	while(1)
	{
		unsigned char cnt;

		for (cnt=0; cnt<NROFMODULES; cnt++)
    19a6:	f1 2c       	mov	r15, r1
    19a8:	79 c0       	rjmp	.+242    	; 0x1a9c <main+0x2c0>
		{
			if (cntStartPuls[cnt])
    19aa:	0f 2d       	mov	r16, r15
    19ac:	10 e0       	ldi	r17, 0x00	; 0
    19ae:	f8 01       	movw	r30, r16
    19b0:	e5 51       	subi	r30, 0x15	; 21
    19b2:	f6 4c       	sbci	r31, 0xC6	; 198
    19b4:	80 81       	ld	r24, Z
    19b6:	88 23       	and	r24, r24
    19b8:	81 f0       	breq	.+32     	; 0x19da <main+0x1fe>
			{
				cntStartPuls[cnt]--;
    19ba:	81 50       	subi	r24, 0x01	; 1
    19bc:	f8 01       	movw	r30, r16
    19be:	e5 51       	subi	r30, 0x15	; 21
    19c0:	f6 4c       	sbci	r31, 0xC6	; 198
    19c2:	80 83       	st	Z, r24
				if (cntStartPuls[cnt]==0)
    19c4:	81 11       	cpse	r24, r1
    19c6:	09 c0       	rjmp	.+18     	; 0x19da <main+0x1fe>
				{
					ConsoleFunctionData[cnt] &= START_FUNCTION^0xFF;
    19c8:	f8 01       	movw	r30, r16
    19ca:	e0 56       	subi	r30, 0x60	; 96
    19cc:	fd 4d       	sbci	r31, 0xDD	; 221
    19ce:	80 81       	ld	r24, Z
    19d0:	8d 7f       	andi	r24, 0xFD	; 253
    19d2:	80 83       	st	Z, r24
					SendSerialData = 1;
    19d4:	81 e0       	ldi	r24, 0x01	; 1
    19d6:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				}
			}

			if (cntStartFunction[cnt])
    19da:	f8 01       	movw	r30, r16
    19dc:	ee 54       	subi	r30, 0x4E	; 78
    19de:	fd 4d       	sbci	r31, 0xDD	; 221
    19e0:	80 81       	ld	r24, Z
    19e2:	88 23       	and	r24, r24
    19e4:	81 f0       	breq	.+32     	; 0x1a06 <main+0x22a>
			{
				cntStartFunction[cnt]--;
    19e6:	81 50       	subi	r24, 0x01	; 1
    19e8:	f8 01       	movw	r30, r16
    19ea:	ee 54       	subi	r30, 0x4E	; 78
    19ec:	fd 4d       	sbci	r31, 0xDD	; 221
    19ee:	80 83       	st	Z, r24
				if (cntStartFunction[cnt]==0)
    19f0:	81 11       	cpse	r24, r1
    19f2:	09 c0       	rjmp	.+18     	; 0x1a06 <main+0x22a>
				{
					ConsoleFunctionData[cnt] &= START_FUNCTION^0xFF;
    19f4:	f8 01       	movw	r30, r16
    19f6:	e0 56       	subi	r30, 0x60	; 96
    19f8:	fd 4d       	sbci	r31, 0xDD	; 221
    19fa:	80 81       	ld	r24, Z
    19fc:	8d 7f       	andi	r24, 0xFD	; 253
    19fe:	80 83       	st	Z, r24
					SendSerialData = 1;
    1a00:	81 e0       	ldi	r24, 0x01	; 1
    1a02:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				}
			}
			if (cntCueFunction[cnt])
    1a06:	f8 01       	movw	r30, r16
    1a08:	ed 5e       	subi	r30, 0xED	; 237
    1a0a:	fe 4d       	sbci	r31, 0xDE	; 222
    1a0c:	80 81       	ld	r24, Z
    1a0e:	88 23       	and	r24, r24
    1a10:	91 f0       	breq	.+36     	; 0x1a36 <main+0x25a>
			{
				cntCueFunction[cnt]--;
    1a12:	81 50       	subi	r24, 0x01	; 1
    1a14:	f8 01       	movw	r30, r16
    1a16:	ed 5e       	subi	r30, 0xED	; 237
    1a18:	fe 4d       	sbci	r31, 0xDE	; 222
    1a1a:	80 83       	st	Z, r24
				if (cntCueFunction[cnt]==0)
    1a1c:	81 11       	cpse	r24, r1
    1a1e:	0b c0       	rjmp	.+22     	; 0x1a36 <main+0x25a>
				{
					ConsoleFunctionData[cnt] |= CUE_FUNCTION;
    1a20:	f8 01       	movw	r30, r16
    1a22:	e0 56       	subi	r30, 0x60	; 96
    1a24:	fd 4d       	sbci	r31, 0xDD	; 221
    1a26:	80 81       	ld	r24, Z
    1a28:	84 60       	ori	r24, 0x04	; 4
    1a2a:	80 83       	st	Z, r24
					CueControl();
    1a2c:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
					SendSerialData = 1;
    1a30:	81 e0       	ldi	r24, 0x01	; 1
    1a32:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				}
			}
			if (cntMuteFunction[cnt])
    1a36:	f8 01       	movw	r30, r16
    1a38:	ef 56       	subi	r30, 0x6F	; 111
    1a3a:	f2 4d       	sbci	r31, 0xD2	; 210
    1a3c:	80 81       	ld	r24, Z
    1a3e:	88 23       	and	r24, r24
    1a40:	61 f1       	breq	.+88     	; 0x1a9a <main+0x2be>
			{
				cntMuteFunction[cnt]--;
    1a42:	81 50       	subi	r24, 0x01	; 1
    1a44:	f8 01       	movw	r30, r16
    1a46:	ef 56       	subi	r30, 0x6F	; 111
    1a48:	f2 4d       	sbci	r31, 0xD2	; 210
    1a4a:	80 83       	st	Z, r24
				if (cntMuteFunction[cnt]==0)
    1a4c:	81 11       	cpse	r24, r1
    1a4e:	25 c0       	rjmp	.+74     	; 0x1a9a <main+0x2be>
				{
					char TelcoNr = GetTelcoNrFromModuleNr(cnt);
    1a50:	8f 2d       	mov	r24, r15
    1a52:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>

					ConsoleFunctionData[cnt] &= MUTE_FUNCTION^0xFF;
    1a56:	f8 01       	movw	r30, r16
    1a58:	e0 56       	subi	r30, 0x60	; 96
    1a5a:	fd 4d       	sbci	r31, 0xDD	; 221
    1a5c:	90 81       	ld	r25, Z
    1a5e:	9f 7e       	andi	r25, 0xEF	; 239
    1a60:	90 83       	st	Z, r25

					if ((TelcoNr>=0) && (TelcoNr<4))
    1a62:	84 30       	cpi	r24, 0x04	; 4
    1a64:	b8 f4       	brcc	.+46     	; 0x1a94 <main+0x2b8>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    1a66:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    1a6a:	a1 e0       	ldi	r26, 0x01	; 1
    1a6c:	ae 0f       	add	r26, r30
    1a6e:	f0 e0       	ldi	r31, 0x00	; 0
    1a70:	eb 53       	subi	r30, 0x3B	; 59
    1a72:	fc 4d       	sbci	r31, 0xDC	; 220
    1a74:	93 ec       	ldi	r25, 0xC3	; 195
    1a76:	90 83       	st	Z, r25
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    1a78:	e1 e0       	ldi	r30, 0x01	; 1
    1a7a:	ea 0f       	add	r30, r26
    1a7c:	b0 e0       	ldi	r27, 0x00	; 0
    1a7e:	ab 53       	subi	r26, 0x3B	; 59
    1a80:	bc 4d       	sbci	r27, 0xDC	; 220
    1a82:	8c 93       	st	X, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    1a84:	81 e0       	ldi	r24, 0x01	; 1
    1a86:	8e 0f       	add	r24, r30
    1a88:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    1a8c:	f0 e0       	ldi	r31, 0x00	; 0
    1a8e:	eb 53       	subi	r30, 0x3B	; 59
    1a90:	fc 4d       	sbci	r31, 0xDC	; 220
    1a92:	10 82       	st	Z, r1
					}

					SendSerialData = 1;
    1a94:	81 e0       	ldi	r24, 0x01	; 1
    1a96:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
	
	while(1)
	{
		unsigned char cnt;

		for (cnt=0; cnt<NROFMODULES; cnt++)
    1a9a:	f3 94       	inc	r15
    1a9c:	ef e0       	ldi	r30, 0x0F	; 15
    1a9e:	ef 15       	cp	r30, r15
    1aa0:	08 f0       	brcs	.+2      	; 0x1aa4 <main+0x2c8>
    1aa2:	83 cf       	rjmp	.-250    	; 0x19aa <main+0x1ce>
					SendSerialData = 1;
				}
			}
		}
				
		if (SendSerialData)
    1aa4:	80 91 6f 22 	lds	r24, 0x226F	; 0x80226f <SendSerialData>
    1aa8:	88 23       	and	r24, r24
    1aaa:	21 f0       	breq	.+8      	; 0x1ab4 <main+0x2d8>
		{
			SendSerialData = 0;
    1aac:	10 92 6f 22 	sts	0x226F, r1	; 0x80226f <SendSerialData>
			SetConsoleData();
    1ab0:	0e 94 90 07 	call	0xf20	; 0xf20 <SetConsoleData>
		}
		
		if ((TimeAndDate.Seconds != OldTimeAndDate.Seconds) ) //&& (OperatingMode==NORMALMODE))
    1ab4:	90 91 17 3a 	lds	r25, 0x3A17	; 0x803a17 <TimeAndDate+0x1>
    1ab8:	80 91 1d 3a 	lds	r24, 0x3A1D	; 0x803a1d <OldTimeAndDate+0x1>
    1abc:	98 17       	cp	r25, r24
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <main+0x2e6>
    1ac0:	4e c0       	rjmp	.+156    	; 0x1b5e <main+0x382>
		{		
			TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    1ac2:	06 e1       	ldi	r16, 0x16	; 22
    1ac4:	1a e3       	ldi	r17, 0x3A	; 58
    1ac6:	f8 01       	movw	r30, r16
    1ac8:	33 81       	ldd	r19, Z+3	; 0x03
    1aca:	8d ec       	ldi	r24, 0xCD	; 205
    1acc:	38 9f       	mul	r19, r24
    1ace:	21 2d       	mov	r18, r1
    1ad0:	11 24       	eor	r1, r1
    1ad2:	26 95       	lsr	r18
    1ad4:	26 95       	lsr	r18
    1ad6:	26 95       	lsr	r18
    1ad8:	40 e3       	ldi	r20, 0x30	; 48
    1ada:	42 0f       	add	r20, r18
    1adc:	49 83       	std	Y+1, r20	; 0x01
			TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    1ade:	22 0f       	add	r18, r18
    1ae0:	42 2f       	mov	r20, r18
    1ae2:	44 0f       	add	r20, r20
    1ae4:	44 0f       	add	r20, r20
    1ae6:	24 0f       	add	r18, r20
    1ae8:	32 1b       	sub	r19, r18
    1aea:	30 5d       	subi	r19, 0xD0	; 208
    1aec:	3a 83       	std	Y+2, r19	; 0x02
			TextBuffer[2] = ':';
    1aee:	5a e3       	ldi	r21, 0x3A	; 58
    1af0:	5b 83       	std	Y+3, r21	; 0x03
			TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    1af2:	32 81       	ldd	r19, Z+2	; 0x02
    1af4:	38 9f       	mul	r19, r24
    1af6:	21 2d       	mov	r18, r1
    1af8:	11 24       	eor	r1, r1
    1afa:	26 95       	lsr	r18
    1afc:	26 95       	lsr	r18
    1afe:	26 95       	lsr	r18
    1b00:	40 e3       	ldi	r20, 0x30	; 48
    1b02:	42 0f       	add	r20, r18
    1b04:	4c 83       	std	Y+4, r20	; 0x04
			TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    1b06:	22 0f       	add	r18, r18
    1b08:	42 2f       	mov	r20, r18
    1b0a:	44 0f       	add	r20, r20
    1b0c:	44 0f       	add	r20, r20
    1b0e:	24 0f       	add	r18, r20
    1b10:	32 1b       	sub	r19, r18
    1b12:	30 5d       	subi	r19, 0xD0	; 208
    1b14:	3d 83       	std	Y+5, r19	; 0x05
			TextBuffer[5] = ':';
    1b16:	5e 83       	std	Y+6, r21	; 0x06
			TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    1b18:	98 9f       	mul	r25, r24
    1b1a:	81 2d       	mov	r24, r1
    1b1c:	11 24       	eor	r1, r1
    1b1e:	86 95       	lsr	r24
    1b20:	86 95       	lsr	r24
    1b22:	86 95       	lsr	r24
    1b24:	20 e3       	ldi	r18, 0x30	; 48
    1b26:	28 0f       	add	r18, r24
    1b28:	2f 83       	std	Y+7, r18	; 0x07
			TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    1b2a:	88 0f       	add	r24, r24
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	22 0f       	add	r18, r18
    1b30:	22 0f       	add	r18, r18
    1b32:	82 0f       	add	r24, r18
    1b34:	98 1b       	sub	r25, r24
    1b36:	90 5d       	subi	r25, 0xD0	; 208
    1b38:	98 87       	std	Y+8, r25	; 0x08
			TextBuffer[8] = 0;
    1b3a:	19 86       	std	Y+9, r1	; 0x09
			
			SetLCD(0,"\x84");
    1b3c:	65 e7       	ldi	r22, 0x75	; 117
    1b3e:	70 e2       	ldi	r23, 0x20	; 32
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
			SetLCD(1,TextBuffer);
    1b48:	be 01       	movw	r22, r28
    1b4a:	6f 5f       	subi	r22, 0xFF	; 255
    1b4c:	7f 4f       	sbci	r23, 0xFF	; 255
    1b4e:	81 e0       	ldi	r24, 0x01	; 1
    1b50:	90 e0       	ldi	r25, 0x00	; 0
    1b52:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
			OldTimeAndDate.Seconds = TimeAndDate.Seconds;		
    1b56:	f8 01       	movw	r30, r16
    1b58:	81 81       	ldd	r24, Z+1	; 0x01
    1b5a:	80 93 1d 3a 	sts	0x3A1D, r24	; 0x803a1d <OldTimeAndDate+0x1>
		}
		
		ReadConsole();
    1b5e:	0e 94 3e 24 	call	0x487c	; 0x487c <ReadConsole>
		
		if (EventBufferPtrTop != EventBufferPtrBottom)
    1b62:	80 91 8b 2b 	lds	r24, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    1b66:	e0 91 f5 20 	lds	r30, 0x20F5	; 0x8020f5 <EventBufferPtrBottom>
    1b6a:	8e 17       	cp	r24, r30
    1b6c:	69 f0       	breq	.+26     	; 0x1b88 <main+0x3ac>
		{
			//USARTE0_DATA = EventBuffer[EventBufferPtrBottom];    // Aha hier weet je nu welke schakelaar er is ingedrukt
			DoEvent(EventBuffer[EventBufferPtrBottom++]);			
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	8e 0f       	add	r24, r30
    1b72:	80 93 f5 20 	sts	0x20F5, r24	; 0x8020f5 <EventBufferPtrBottom>
    1b76:	f0 e0       	ldi	r31, 0x00	; 0
    1b78:	ee 0f       	add	r30, r30
    1b7a:	ff 1f       	adc	r31, r31
    1b7c:	e6 5f       	subi	r30, 0xF6	; 246
    1b7e:	fa 4d       	sbci	r31, 0xDA	; 218
    1b80:	80 81       	ld	r24, Z
    1b82:	91 81       	ldd	r25, Z+1	; 0x01
    1b84:	0e 94 57 0e 	call	0x1cae	; 0x1cae <DoEvent>
			//USARTE0_DATA =EventBufferPtrBottom;
			//EventBufferPtrBottom++;			
		}

		
		ConsoleMasterSettings[3]=1;  // is nodig zodat RS232 communicatie altijd mogelijk is
    1b88:	81 e0       	ldi	r24, 0x01	; 1
    1b8a:	80 93 91 2b 	sts	0x2B91, r24	; 0x802b91 <ConsoleMasterSettings+0x3>

		if (ConsoleMasterSettings[3])
		{
			if (SerialBufferInPtrTop != SerialBufferInPtrBottom)
    1b8e:	90 91 15 3a 	lds	r25, 0x3A15	; 0x803a15 <SerialBufferInPtrTop>
    1b92:	80 91 24 21 	lds	r24, 0x2124	; 0x802124 <SerialBufferInPtrBottom>
    1b96:	98 13       	cpse	r25, r24
						
			DoSerial();
    1b98:	0e 94 17 25 	call	0x4a2e	; 0x4a2e <DoSerial>

			if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom)  && SendSerialReady)
    1b9c:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    1ba0:	e0 91 93 2b 	lds	r30, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    1ba4:	8e 17       	cp	r24, r30
    1ba6:	09 f4       	brne	.+2      	; 0x1baa <main+0x3ce>
    1ba8:	fe ce       	rjmp	.-516    	; 0x19a6 <main+0x1ca>
    1baa:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    1bae:	88 23       	and	r24, r24
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <main+0x3d8>
    1bb2:	f9 ce       	rjmp	.-526    	; 0x19a6 <main+0x1ca>
			//if(SendSerialReady)
			{
				
				USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];				
    1bb4:	81 e0       	ldi	r24, 0x01	; 1
    1bb6:	8e 0f       	add	r24, r30
    1bb8:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    1bbc:	f0 e0       	ldi	r31, 0x00	; 0
    1bbe:	eb 53       	subi	r30, 0x3B	; 59
    1bc0:	fc 4d       	sbci	r31, 0xDC	; 220
    1bc2:	80 81       	ld	r24, Z
    1bc4:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
				SendSerialReady = 0;
    1bc8:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
				while ( !( USARTE0.STATUS & USART_DREIF_bm) );
    1bcc:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7deaa1>
    1bd0:	85 ff       	sbrs	r24, 5
    1bd2:	fc cf       	rjmp	.-8      	; 0x1bcc <main+0x3f0>
    1bd4:	e8 ce       	rjmp	.-560    	; 0x19a6 <main+0x1ca>

00001bd6 <SetupTimer0>:
struct TimeAndDateStruct OldTimeAndDate, TimeAndDate;


void SetupTimer0()
{	
	cli();
    1bd6:	f8 94       	cli

	// Clock source: ClkPer/4
	TCC0_CTRLA=TC_CLKSEL_DIV4_gc;
    1bd8:	83 e0       	ldi	r24, 0x03	; 3
    1bda:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7de800>
	//TCC0_CTRLA = 0x02;


	// Overflow interrupt: Low Level
	// Error interrupt: Disabled
	TCC0_INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
    1bde:	82 e0       	ldi	r24, 0x02	; 2
    1be0:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7de806>
	//TCC0_INTCTRLA = 0x02;
	
	
	// Set Period register
	TCC0_PER=0x5A5D;
    1be4:	8d e5       	ldi	r24, 0x5D	; 93
    1be6:	9a e5       	ldi	r25, 0x5A	; 90
    1be8:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
    1bec:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>

	PMIC_CTRL |= 0x02;
    1bf0:	e2 ea       	ldi	r30, 0xA2	; 162
    1bf2:	f0 e0       	ldi	r31, 0x00	; 0
    1bf4:	80 81       	ld	r24, Z
    1bf6:	82 60       	ori	r24, 0x02	; 2
    1bf8:	80 83       	st	Z, r24
	
	sei();	
    1bfa:	78 94       	sei
    1bfc:	08 95       	ret

00001bfe <__vector_14>:
}

ISR(TCC0_OVF_vect) 
{
    1bfe:	1f 92       	push	r1
    1c00:	0f 92       	push	r0
    1c02:	0f b6       	in	r0, 0x3f	; 63
    1c04:	0f 92       	push	r0
    1c06:	11 24       	eor	r1, r1
    1c08:	08 b6       	in	r0, 0x38	; 56
    1c0a:	0f 92       	push	r0
    1c0c:	18 be       	out	0x38, r1	; 56
    1c0e:	0b b6       	in	r0, 0x3b	; 59
    1c10:	0f 92       	push	r0
    1c12:	1b be       	out	0x3b, r1	; 59
    1c14:	8f 93       	push	r24
    1c16:	ef 93       	push	r30
    1c18:	ff 93       	push	r31

	//GlobalTimerActive=1;     // willem
	 Count++;
    1c1a:	80 91 1a 3a 	lds	r24, 0x3A1A	; 0x803a1a <Count>
    1c1e:	8f 5f       	subi	r24, 0xFF	; 255
    1c20:	80 93 1a 3a 	sts	0x3A1A, r24	; 0x803a1a <Count>
	 if (Count>9) //Was before 10.
    1c24:	8a 30       	cpi	r24, 0x0A	; 10
    1c26:	10 f0       	brcs	.+4      	; 0x1c2c <__vector_14+0x2e>
		 Count = 0;
    1c28:	10 92 1a 3a 	sts	0x3A1A, r1	; 0x803a1a <Count>

	 if ((Count==0x00) && (GlobalTimerActive))
    1c2c:	80 91 1a 3a 	lds	r24, 0x3A1A	; 0x803a1a <Count>
    1c30:	81 11       	cpse	r24, r1
    1c32:	1f c0       	rjmp	.+62     	; 0x1c72 <__vector_14+0x74>
    1c34:	80 91 1b 3a 	lds	r24, 0x3A1B	; 0x803a1b <GlobalTimerActive>
    1c38:	88 23       	and	r24, r24
    1c3a:	d9 f0       	breq	.+54     	; 0x1c72 <__vector_14+0x74>
	 {
		 	//PORTA_OUTTGL |= (1<<0);    // ----------------------------------------------------------------
		 	//PORTA_OUTTGL |= 0x80;
			TimeAndDate.Frames+=10;
    1c3c:	e6 e1       	ldi	r30, 0x16	; 22
    1c3e:	fa e3       	ldi	r31, 0x3A	; 58
    1c40:	80 81       	ld	r24, Z
    1c42:	86 5f       	subi	r24, 0xF6	; 246
    1c44:	80 83       	st	Z, r24
			
			if (TimeAndDate.Frames>90)
    1c46:	8b 35       	cpi	r24, 0x5B	; 91
    1c48:	a0 f0       	brcs	.+40     	; 0x1c72 <__vector_14+0x74>
			{


				TimeAndDate.Frames = 0;
    1c4a:	10 82       	st	Z, r1
				TimeAndDate.Seconds++;
    1c4c:	81 81       	ldd	r24, Z+1	; 0x01
    1c4e:	8f 5f       	subi	r24, 0xFF	; 255
    1c50:	81 83       	std	Z+1, r24	; 0x01
				if (TimeAndDate.Seconds>59)
    1c52:	8c 33       	cpi	r24, 0x3C	; 60
    1c54:	70 f0       	brcs	.+28     	; 0x1c72 <__vector_14+0x74>
				{
					
					TimeAndDate.Seconds = 0;
    1c56:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Minutes++;
    1c58:	82 81       	ldd	r24, Z+2	; 0x02
    1c5a:	8f 5f       	subi	r24, 0xFF	; 255
    1c5c:	82 83       	std	Z+2, r24	; 0x02
					if (TimeAndDate.Minutes>59)
    1c5e:	8c 33       	cpi	r24, 0x3C	; 60
    1c60:	40 f0       	brcs	.+16     	; 0x1c72 <__vector_14+0x74>
					{
						TimeAndDate.Minutes = 0;
    1c62:	12 82       	std	Z+2, r1	; 0x02
						TimeAndDate.Hours++;
    1c64:	83 81       	ldd	r24, Z+3	; 0x03
    1c66:	8f 5f       	subi	r24, 0xFF	; 255
    1c68:	83 83       	std	Z+3, r24	; 0x03
						if (TimeAndDate.Hours>23)
    1c6a:	88 31       	cpi	r24, 0x18	; 24
    1c6c:	10 f0       	brcs	.+4      	; 0x1c72 <__vector_14+0x74>
						{
							TimeAndDate.Hours = 0;
    1c6e:	10 92 19 3a 	sts	0x3A19, r1	; 0x803a19 <TimeAndDate+0x3>
					}
				}
		 }
	}

    1c72:	ff 91       	pop	r31
    1c74:	ef 91       	pop	r30
    1c76:	8f 91       	pop	r24
    1c78:	0f 90       	pop	r0
    1c7a:	0b be       	out	0x3b, r0	; 59
    1c7c:	0f 90       	pop	r0
    1c7e:	08 be       	out	0x38, r0	; 56
    1c80:	0f 90       	pop	r0
    1c82:	0f be       	out	0x3f, r0	; 63
    1c84:	0f 90       	pop	r0
    1c86:	1f 90       	pop	r1
    1c88:	18 95       	reti

00001c8a <Delay>:
* delay(100) = ca. 1 Sec                                        *
****************************************************************/
void Delay(int tijd)
{
	int x, y;
	for (x = 1; x <= tijd; x++)
    1c8a:	41 e0       	ldi	r20, 0x01	; 1
    1c8c:	50 e0       	ldi	r21, 0x00	; 0
    1c8e:	0b c0       	rjmp	.+22     	; 0x1ca6 <Delay+0x1c>
	{
		for (y = 0; y <= 1000; y++)
    1c90:	2f 5f       	subi	r18, 0xFF	; 255
    1c92:	3f 4f       	sbci	r19, 0xFF	; 255
    1c94:	02 c0       	rjmp	.+4      	; 0x1c9a <Delay+0x10>
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	29 3e       	cpi	r18, 0xE9	; 233
    1c9c:	63 e0       	ldi	r22, 0x03	; 3
    1c9e:	36 07       	cpc	r19, r22
    1ca0:	bc f3       	brlt	.-18     	; 0x1c90 <Delay+0x6>
* delay(100) = ca. 1 Sec                                        *
****************************************************************/
void Delay(int tijd)
{
	int x, y;
	for (x = 1; x <= tijd; x++)
    1ca2:	4f 5f       	subi	r20, 0xFF	; 255
    1ca4:	5f 4f       	sbci	r21, 0xFF	; 255
    1ca6:	84 17       	cp	r24, r20
    1ca8:	95 07       	cpc	r25, r21
    1caa:	ac f7       	brge	.-22     	; 0x1c96 <Delay+0xc>
			//PCON |= 0x10;
			//T3 = 0;
			;
		}
	}
    1cac:	08 95       	ret

00001cae <DoEvent>:


//unsigned char  CS_CC;

void DoEvent(unsigned int Event)
{
    1cae:	8f 92       	push	r8
    1cb0:	9f 92       	push	r9
    1cb2:	af 92       	push	r10
    1cb4:	bf 92       	push	r11
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	cd b7       	in	r28, 0x3d	; 61
    1cc8:	de b7       	in	r29, 0x3e	; 62
    1cca:	61 97       	sbiw	r28, 0x11	; 17
    1ccc:	cd bf       	out	0x3d, r28	; 61
    1cce:	de bf       	out	0x3e, r29	; 62
	unsigned char EventType = (Event&0x87);
    1cd0:	28 2f       	mov	r18, r24
    1cd2:	27 78       	andi	r18, 0x87	; 135
	unsigned char Module = (Event>>3)&0x0F;
    1cd4:	ac 01       	movw	r20, r24
    1cd6:	56 95       	lsr	r21
    1cd8:	47 95       	ror	r20
    1cda:	56 95       	lsr	r21
    1cdc:	47 95       	ror	r20
    1cde:	56 95       	lsr	r21
    1ce0:	47 95       	ror	r20
    1ce2:	34 2f       	mov	r19, r20
    1ce4:	3f 70       	andi	r19, 0x0F	; 15
    1ce6:	e3 2e       	mov	r14, r19
	unsigned char EventOn = !(Event&0x100);
    1ce8:	8c 01       	movw	r16, r24
    1cea:	00 27       	eor	r16, r16
    1cec:	11 70       	andi	r17, 0x01	; 1
	
	if ((Event&0x287) == EXT_MUTE)
    1cee:	87 78       	andi	r24, 0x87	; 135
    1cf0:	92 70       	andi	r25, 0x02	; 2
    1cf2:	87 38       	cpi	r24, 0x87	; 135
    1cf4:	92 40       	sbci	r25, 0x02	; 2
    1cf6:	09 f4       	brne	.+2      	; 0x1cfa <DoEvent+0x4c>
	{
		EventType = MUTE;
    1cf8:	28 e8       	ldi	r18, 0x88	; 136
	}

	switch (EventType)
    1cfa:	82 2f       	mov	r24, r18
    1cfc:	90 e0       	ldi	r25, 0x00	; 0
    1cfe:	89 38       	cpi	r24, 0x89	; 137
    1d00:	91 05       	cpc	r25, r1
    1d02:	10 f0       	brcs	.+4      	; 0x1d08 <DoEvent+0x5a>
    1d04:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
    1d08:	fc 01       	movw	r30, r24
    1d0a:	88 27       	eor	r24, r24
    1d0c:	e2 50       	subi	r30, 0x02	; 2
    1d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d10:	8f 4f       	sbci	r24, 0xFF	; 255
    1d12:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__tablejump2__>
	{
		case EXTERNREMOTEIN:
		{
			if (OperatingMode != MODULEMODE)
    1d16:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    1d1a:	81 30       	cpi	r24, 0x01	; 1
    1d1c:	11 f4       	brne	.+4      	; 0x1d22 <DoEvent+0x74>
    1d1e:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			{
				switch (ModuleType[Module])
    1d22:	f1 2c       	mov	r15, r1
    1d24:	f7 01       	movw	r30, r14
    1d26:	e0 59       	subi	r30, 0x90	; 144
    1d28:	fd 4d       	sbci	r31, 0xDD	; 221
    1d2a:	80 81       	ld	r24, Z
    1d2c:	81 30       	cpi	r24, 0x01	; 1
    1d2e:	29 f0       	breq	.+10     	; 0x1d3a <DoEvent+0x8c>
    1d30:	82 30       	cpi	r24, 0x02	; 2
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <DoEvent+0x88>
    1d34:	4f c2       	rjmp	.+1182   	; 0x21d4 <__DATA_REGION_LENGTH__+0x1d4>
    1d36:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
				{
					case TRIPLE:
					{ // TRIPLE
						if (EventOn)
    1d3a:	01 2b       	or	r16, r17
    1d3c:	09 f0       	breq	.+2      	; 0x1d40 <DoEvent+0x92>
    1d3e:	aa c1       	rjmp	.+852    	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    1d40:	f7 01       	movw	r30, r14
    1d42:	ee 0f       	add	r30, r30
    1d44:	ff 1f       	adc	r31, r31
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	e5 5f       	subi	r30, 0xF5	; 245
    1d50:	f4 4d       	sbci	r31, 0xD4	; 212
    1d52:	87 81       	ldd	r24, Z+7	; 0x07
    1d54:	88 23       	and	r24, r24
    1d56:	0c f0       	brlt	.+2      	; 0x1d5a <DoEvent+0xac>
    1d58:	53 c0       	rjmp	.+166    	; 0x1e00 <DoEvent+0x152>
    1d5a:	8d e1       	ldi	r24, 0x1D	; 29
    1d5c:	8e 9d       	mul	r24, r14
    1d5e:	f0 01       	movw	r30, r0
    1d60:	8f 9d       	mul	r24, r15
    1d62:	f0 0d       	add	r31, r0
    1d64:	11 24       	eor	r1, r1
    1d66:	e5 5e       	subi	r30, 0xE5	; 229
    1d68:	f7 4c       	sbci	r31, 0xC7	; 199
    1d6a:	84 85       	ldd	r24, Z+12	; 0x0c
    1d6c:	88 23       	and	r24, r24
    1d6e:	09 f4       	brne	.+2      	; 0x1d72 <DoEvent+0xc4>
    1d70:	47 c0       	rjmp	.+142    	; 0x1e00 <DoEvent+0x152>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    1d72:	0f 2e       	mov	r0, r31
    1d74:	f0 ea       	ldi	r31, 0xA0	; 160
    1d76:	cf 2e       	mov	r12, r31
    1d78:	f2 e2       	ldi	r31, 0x22	; 34
    1d7a:	df 2e       	mov	r13, r31
    1d7c:	f0 2d       	mov	r31, r0
    1d7e:	87 01       	movw	r16, r14
    1d80:	00 56       	subi	r16, 0x60	; 96
    1d82:	1d 4d       	sbci	r17, 0xDD	; 221
    1d84:	f8 01       	movw	r30, r16
    1d86:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1d88:	8c 60       	ori	r24, 0x0C	; 12
    1d8a:	80 83       	st	Z, r24
	
								//DJ-Control
								DJControl();
    1d8c:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
	
								ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1d90:	f6 01       	movw	r30, r12
    1d92:	80 89       	ldd	r24, Z+16	; 0x10
    1d94:	87 7f       	andi	r24, 0xF7	; 247
    1d96:	80 8b       	std	Z+16, r24	; 0x10
								if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1d98:	f8 01       	movw	r30, r16
    1d9a:	90 81       	ld	r25, Z
    1d9c:	90 ff       	sbrs	r25, 0
    1d9e:	04 c0       	rjmp	.+8      	; 0x1da8 <DoEvent+0xfa>
									ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1da0:	f8 01       	movw	r30, r16
    1da2:	90 61       	ori	r25, 0x10	; 16
    1da4:	90 83       	st	Z, r25
    1da6:	20 c0       	rjmp	.+64     	; 0x1de8 <DoEvent+0x13a>
								else if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1da8:	f7 01       	movw	r30, r14
    1daa:	ee 0f       	add	r30, r30
    1dac:	ff 1f       	adc	r31, r31
    1dae:	ee 0f       	add	r30, r30
    1db0:	ff 1f       	adc	r31, r31
    1db2:	ee 0f       	add	r30, r30
    1db4:	ff 1f       	adc	r31, r31
    1db6:	e5 5f       	subi	r30, 0xF5	; 245
    1db8:	f4 4d       	sbci	r31, 0xD4	; 212
    1dba:	27 81       	ldd	r18, Z+7	; 0x07
    1dbc:	22 23       	and	r18, r18
    1dbe:	a4 f4       	brge	.+40     	; 0x1de8 <DoEvent+0x13a>
    1dc0:	2d e1       	ldi	r18, 0x1D	; 29
    1dc2:	2e 9d       	mul	r18, r14
    1dc4:	f0 01       	movw	r30, r0
    1dc6:	2f 9d       	mul	r18, r15
    1dc8:	f0 0d       	add	r31, r0
    1dca:	11 24       	eor	r1, r1
    1dcc:	e5 5e       	subi	r30, 0xE5	; 229
    1dce:	f7 4c       	sbci	r31, 0xC7	; 199
    1dd0:	26 85       	ldd	r18, Z+14	; 0x0e
    1dd2:	22 23       	and	r18, r18
    1dd4:	49 f0       	breq	.+18     	; 0x1de8 <DoEvent+0x13a>
    1dd6:	94 ff       	sbrs	r25, 4
    1dd8:	07 c0       	rjmp	.+14     	; 0x1de8 <DoEvent+0x13a>
    1dda:	90 91 90 2b 	lds	r25, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    1dde:	99 23       	and	r25, r25
    1de0:	19 f0       	breq	.+6      	; 0x1de8 <DoEvent+0x13a>
								{
									ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1de2:	88 60       	ori	r24, 0x08	; 8
    1de4:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
								}

								CUEByRemoteMIC[Module] = 1;
    1de8:	11 e0       	ldi	r17, 0x01	; 1
    1dea:	f7 01       	movw	r30, r14
    1dec:	e9 5f       	subi	r30, 0xF9	; 249
    1dee:	fd 4c       	sbci	r31, 0xCD	; 205
    1df0:	10 83       	st	Z, r17
								CheckCUEByRemoteMIC();
    1df2:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <CheckCUEByRemoteMIC>
								CheckTBMic();
    1df6:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
								SendSerialData = 1;
    1dfa:	10 93 6f 22 	sts	0x226F, r17	; 0x80226f <SendSerialData>
    1dfe:	c6 c0       	rjmp	.+396    	; 0x1f8c <DoEvent+0x2de>
							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    1e00:	f7 01       	movw	r30, r14
    1e02:	ee 0f       	add	r30, r30
    1e04:	ff 1f       	adc	r31, r31
    1e06:	ee 0f       	add	r30, r30
    1e08:	ff 1f       	adc	r31, r31
    1e0a:	ee 0f       	add	r30, r30
    1e0c:	ff 1f       	adc	r31, r31
    1e0e:	e5 5f       	subi	r30, 0xF5	; 245
    1e10:	f4 4d       	sbci	r31, 0xD4	; 212
    1e12:	86 81       	ldd	r24, Z+6	; 0x06
    1e14:	88 23       	and	r24, r24
    1e16:	0c f4       	brge	.+2      	; 0x1e1a <DoEvent+0x16c>
    1e18:	5c c0       	rjmp	.+184    	; 0x1ed2 <DoEvent+0x224>
    1e1a:	9d e1       	ldi	r25, 0x1D	; 29
    1e1c:	9e 9d       	mul	r25, r14
    1e1e:	f0 01       	movw	r30, r0
    1e20:	9f 9d       	mul	r25, r15
    1e22:	f0 0d       	add	r31, r0
    1e24:	11 24       	eor	r1, r1
    1e26:	e5 5e       	subi	r30, 0xE5	; 229
    1e28:	f7 4c       	sbci	r31, 0xC7	; 199
    1e2a:	92 85       	ldd	r25, Z+10	; 0x0a
    1e2c:	99 23       	and	r25, r25
    1e2e:	09 f4       	brne	.+2      	; 0x1e32 <DoEvent+0x184>
    1e30:	50 c0       	rjmp	.+160    	; 0x1ed2 <DoEvent+0x224>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    1e32:	f7 01       	movw	r30, r14
    1e34:	e0 56       	subi	r30, 0x60	; 96
    1e36:	fd 4d       	sbci	r31, 0xDD	; 221
    1e38:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1e3a:	8c 60       	ori	r24, 0x0C	; 12
    1e3c:	80 83       	st	Z, r24

								//DJ-Control
								DJControl();
    1e3e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>

								if (ConsoleModuleSettings[Module][MICATLINEA])
    1e42:	8d e1       	ldi	r24, 0x1D	; 29
    1e44:	8e 9d       	mul	r24, r14
    1e46:	f0 01       	movw	r30, r0
    1e48:	8f 9d       	mul	r24, r15
    1e4a:	f0 0d       	add	r31, r0
    1e4c:	11 24       	eor	r1, r1
    1e4e:	e5 5e       	subi	r30, 0xE5	; 229
    1e50:	f7 4c       	sbci	r31, 0xC7	; 199
    1e52:	87 89       	ldd	r24, Z+23	; 0x17
    1e54:	88 23       	and	r24, r24
    1e56:	09 f4       	brne	.+2      	; 0x1e5a <DoEvent+0x1ac>
    1e58:	99 c0       	rjmp	.+306    	; 0x1f8c <DoEvent+0x2de>
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1e5a:	e0 ea       	ldi	r30, 0xA0	; 160
    1e5c:	f2 e2       	ldi	r31, 0x22	; 34
    1e5e:	80 89       	ldd	r24, Z+16	; 0x10
    1e60:	87 7f       	andi	r24, 0xF7	; 247
    1e62:	80 8b       	std	Z+16, r24	; 0x10
									if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1e64:	f7 01       	movw	r30, r14
    1e66:	e0 56       	subi	r30, 0x60	; 96
    1e68:	fd 4d       	sbci	r31, 0xDD	; 221
    1e6a:	80 81       	ld	r24, Z
    1e6c:	80 ff       	sbrs	r24, 0
    1e6e:	05 c0       	rjmp	.+10     	; 0x1e7a <DoEvent+0x1cc>
										ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1e70:	f7 01       	movw	r30, r14
    1e72:	e0 56       	subi	r30, 0x60	; 96
    1e74:	fd 4d       	sbci	r31, 0xDD	; 221
    1e76:	80 61       	ori	r24, 0x10	; 16
    1e78:	80 83       	st	Z, r24
									if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1e7a:	f7 01       	movw	r30, r14
    1e7c:	ee 0f       	add	r30, r30
    1e7e:	ff 1f       	adc	r31, r31
    1e80:	ee 0f       	add	r30, r30
    1e82:	ff 1f       	adc	r31, r31
    1e84:	ee 0f       	add	r30, r30
    1e86:	ff 1f       	adc	r31, r31
    1e88:	e5 5f       	subi	r30, 0xF5	; 245
    1e8a:	f4 4d       	sbci	r31, 0xD4	; 212
    1e8c:	86 81       	ldd	r24, Z+6	; 0x06
    1e8e:	88 23       	and	r24, r24
    1e90:	d4 f0       	brlt	.+52     	; 0x1ec6 <DoEvent+0x218>
    1e92:	8d e1       	ldi	r24, 0x1D	; 29
    1e94:	8e 9d       	mul	r24, r14
    1e96:	f0 01       	movw	r30, r0
    1e98:	8f 9d       	mul	r24, r15
    1e9a:	f0 0d       	add	r31, r0
    1e9c:	11 24       	eor	r1, r1
    1e9e:	e5 5e       	subi	r30, 0xE5	; 229
    1ea0:	f7 4c       	sbci	r31, 0xC7	; 199
    1ea2:	86 85       	ldd	r24, Z+14	; 0x0e
    1ea4:	88 23       	and	r24, r24
    1ea6:	79 f0       	breq	.+30     	; 0x1ec6 <DoEvent+0x218>
    1ea8:	f7 01       	movw	r30, r14
    1eaa:	e0 56       	subi	r30, 0x60	; 96
    1eac:	fd 4d       	sbci	r31, 0xDD	; 221
    1eae:	80 81       	ld	r24, Z
    1eb0:	84 ff       	sbrs	r24, 4
    1eb2:	09 c0       	rjmp	.+18     	; 0x1ec6 <DoEvent+0x218>
    1eb4:	80 91 90 2b 	lds	r24, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    1eb8:	88 23       	and	r24, r24
    1eba:	29 f0       	breq	.+10     	; 0x1ec6 <DoEvent+0x218>
									{
											ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1ebc:	e0 ea       	ldi	r30, 0xA0	; 160
    1ebe:	f2 e2       	ldi	r31, 0x22	; 34
    1ec0:	80 89       	ldd	r24, Z+16	; 0x10
    1ec2:	88 60       	ori	r24, 0x08	; 8
    1ec4:	80 8b       	std	Z+16, r24	; 0x10
									}
									CheckTBMic();
    1ec6:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
									SendSerialData = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    1ed0:	5d c0       	rjmp	.+186    	; 0x1f8c <DoEvent+0x2de>
								}
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    1ed2:	88 23       	and	r24, r24
    1ed4:	0c f0       	brlt	.+2      	; 0x1ed8 <DoEvent+0x22a>
    1ed6:	5a c0       	rjmp	.+180    	; 0x1f8c <DoEvent+0x2de>
    1ed8:	8d e1       	ldi	r24, 0x1D	; 29
    1eda:	8e 9d       	mul	r24, r14
    1edc:	f0 01       	movw	r30, r0
    1ede:	8f 9d       	mul	r24, r15
    1ee0:	f0 0d       	add	r31, r0
    1ee2:	11 24       	eor	r1, r1
    1ee4:	e5 5e       	subi	r30, 0xE5	; 229
    1ee6:	f7 4c       	sbci	r31, 0xC7	; 199
    1ee8:	83 85       	ldd	r24, Z+11	; 0x0b
    1eea:	88 23       	and	r24, r24
    1eec:	09 f4       	brne	.+2      	; 0x1ef0 <DoEvent+0x242>
    1eee:	4e c0       	rjmp	.+156    	; 0x1f8c <DoEvent+0x2de>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    1ef0:	f7 01       	movw	r30, r14
    1ef2:	e0 56       	subi	r30, 0x60	; 96
    1ef4:	fd 4d       	sbci	r31, 0xDD	; 221
    1ef6:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1ef8:	8c 60       	ori	r24, 0x0C	; 12
    1efa:	80 83       	st	Z, r24

								//DJ-Control
								DJControl();
    1efc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>

								if (ConsoleModuleSettings[Module][MICATLINEB])
    1f00:	8d e1       	ldi	r24, 0x1D	; 29
    1f02:	8e 9d       	mul	r24, r14
    1f04:	f0 01       	movw	r30, r0
    1f06:	8f 9d       	mul	r24, r15
    1f08:	f0 0d       	add	r31, r0
    1f0a:	11 24       	eor	r1, r1
    1f0c:	e5 5e       	subi	r30, 0xE5	; 229
    1f0e:	f7 4c       	sbci	r31, 0xC7	; 199
    1f10:	80 8d       	ldd	r24, Z+24	; 0x18
    1f12:	88 23       	and	r24, r24
    1f14:	d9 f1       	breq	.+118    	; 0x1f8c <DoEvent+0x2de>
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1f16:	e0 ea       	ldi	r30, 0xA0	; 160
    1f18:	f2 e2       	ldi	r31, 0x22	; 34
    1f1a:	80 89       	ldd	r24, Z+16	; 0x10
    1f1c:	87 7f       	andi	r24, 0xF7	; 247
    1f1e:	80 8b       	std	Z+16, r24	; 0x10
									if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1f20:	f7 01       	movw	r30, r14
    1f22:	e0 56       	subi	r30, 0x60	; 96
    1f24:	fd 4d       	sbci	r31, 0xDD	; 221
    1f26:	80 81       	ld	r24, Z
    1f28:	80 ff       	sbrs	r24, 0
    1f2a:	05 c0       	rjmp	.+10     	; 0x1f36 <DoEvent+0x288>
										ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1f2c:	f7 01       	movw	r30, r14
    1f2e:	e0 56       	subi	r30, 0x60	; 96
    1f30:	fd 4d       	sbci	r31, 0xDD	; 221
    1f32:	80 61       	ori	r24, 0x10	; 16
    1f34:	80 83       	st	Z, r24
									if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1f36:	f7 01       	movw	r30, r14
    1f38:	ee 0f       	add	r30, r30
    1f3a:	ff 1f       	adc	r31, r31
    1f3c:	ee 0f       	add	r30, r30
    1f3e:	ff 1f       	adc	r31, r31
    1f40:	ee 0f       	add	r30, r30
    1f42:	ff 1f       	adc	r31, r31
    1f44:	e5 5f       	subi	r30, 0xF5	; 245
    1f46:	f4 4d       	sbci	r31, 0xD4	; 212
    1f48:	86 81       	ldd	r24, Z+6	; 0x06
    1f4a:	88 23       	and	r24, r24
    1f4c:	d4 f4       	brge	.+52     	; 0x1f82 <DoEvent+0x2d4>
    1f4e:	8d e1       	ldi	r24, 0x1D	; 29
    1f50:	8e 9d       	mul	r24, r14
    1f52:	f0 01       	movw	r30, r0
    1f54:	8f 9d       	mul	r24, r15
    1f56:	f0 0d       	add	r31, r0
    1f58:	11 24       	eor	r1, r1
    1f5a:	e5 5e       	subi	r30, 0xE5	; 229
    1f5c:	f7 4c       	sbci	r31, 0xC7	; 199
    1f5e:	86 85       	ldd	r24, Z+14	; 0x0e
    1f60:	88 23       	and	r24, r24
    1f62:	79 f0       	breq	.+30     	; 0x1f82 <DoEvent+0x2d4>
    1f64:	f7 01       	movw	r30, r14
    1f66:	e0 56       	subi	r30, 0x60	; 96
    1f68:	fd 4d       	sbci	r31, 0xDD	; 221
    1f6a:	80 81       	ld	r24, Z
    1f6c:	84 ff       	sbrs	r24, 4
    1f6e:	09 c0       	rjmp	.+18     	; 0x1f82 <DoEvent+0x2d4>
    1f70:	80 91 90 2b 	lds	r24, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    1f74:	88 23       	and	r24, r24
    1f76:	29 f0       	breq	.+10     	; 0x1f82 <DoEvent+0x2d4>
									{
											ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1f78:	e0 ea       	ldi	r30, 0xA0	; 160
    1f7a:	f2 e2       	ldi	r31, 0x22	; 34
    1f7c:	80 89       	ldd	r24, Z+16	; 0x10
    1f7e:	88 60       	ori	r24, 0x08	; 8
    1f80:	80 8b       	std	Z+16, r24	; 0x10
									}
  								CheckTBMic();
    1f82:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
									SendSerialData = 1;
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
								}
							}

							// REMOTE ON
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMONMIC]))
    1f8c:	f7 01       	movw	r30, r14
    1f8e:	ee 0f       	add	r30, r30
    1f90:	ff 1f       	adc	r31, r31
    1f92:	ee 0f       	add	r30, r30
    1f94:	ff 1f       	adc	r31, r31
    1f96:	ee 0f       	add	r30, r30
    1f98:	ff 1f       	adc	r31, r31
    1f9a:	e5 5f       	subi	r30, 0xF5	; 245
    1f9c:	f4 4d       	sbci	r31, 0xD4	; 212
    1f9e:	87 81       	ldd	r24, Z+7	; 0x07
    1fa0:	88 23       	and	r24, r24
    1fa2:	0c f5       	brge	.+66     	; 0x1fe6 <DoEvent+0x338>
    1fa4:	9d e1       	ldi	r25, 0x1D	; 29
    1fa6:	9e 9d       	mul	r25, r14
    1fa8:	f0 01       	movw	r30, r0
    1faa:	9f 9d       	mul	r25, r15
    1fac:	f0 0d       	add	r31, r0
    1fae:	11 24       	eor	r1, r1
    1fb0:	e5 5e       	subi	r30, 0xE5	; 229
    1fb2:	f7 4c       	sbci	r31, 0xC7	; 199
    1fb4:	91 8d       	ldd	r25, Z+25	; 0x19
    1fb6:	99 23       	and	r25, r25
    1fb8:	b1 f0       	breq	.+44     	; 0x1fe6 <DoEvent+0x338>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    1fba:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    1fbe:	81 e0       	ldi	r24, 0x01	; 1
    1fc0:	8e 0f       	add	r24, r30
    1fc2:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    1fc6:	f0 e0       	ldi	r31, 0x00	; 0
    1fc8:	c7 01       	movw	r24, r14
    1fca:	88 0f       	add	r24, r24
    1fcc:	99 1f       	adc	r25, r25
    1fce:	88 0f       	add	r24, r24
    1fd0:	99 1f       	adc	r25, r25
    1fd2:	88 0f       	add	r24, r24
    1fd4:	99 1f       	adc	r25, r25
    1fd6:	83 60       	ori	r24, 0x03	; 3
    1fd8:	ee 0f       	add	r30, r30
    1fda:	ff 1f       	adc	r31, r31
    1fdc:	e6 5f       	subi	r30, 0xF6	; 246
    1fde:	fa 4d       	sbci	r31, 0xDA	; 218
    1fe0:	80 83       	st	Z, r24
    1fe2:	91 83       	std	Z+1, r25	; 0x01
    1fe4:	53 c0       	rjmp	.+166    	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMONLINEA]) && (!(ModuleData[Module][MIC_RING]&0x80)))
    1fe6:	f7 01       	movw	r30, r14
    1fe8:	ee 0f       	add	r30, r30
    1fea:	ff 1f       	adc	r31, r31
    1fec:	ee 0f       	add	r30, r30
    1fee:	ff 1f       	adc	r31, r31
    1ff0:	ee 0f       	add	r30, r30
    1ff2:	ff 1f       	adc	r31, r31
    1ff4:	e5 5f       	subi	r30, 0xF5	; 245
    1ff6:	f4 4d       	sbci	r31, 0xD4	; 212
    1ff8:	96 81       	ldd	r25, Z+6	; 0x06
    1ffa:	99 23       	and	r25, r25
    1ffc:	1c f1       	brlt	.+70     	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    1ffe:	2d e1       	ldi	r18, 0x1D	; 29
    2000:	2e 9d       	mul	r18, r14
    2002:	f0 01       	movw	r30, r0
    2004:	2f 9d       	mul	r18, r15
    2006:	f0 0d       	add	r31, r0
    2008:	11 24       	eor	r1, r1
    200a:	e5 5e       	subi	r30, 0xE5	; 229
    200c:	f7 4c       	sbci	r31, 0xC7	; 199
    200e:	22 8d       	ldd	r18, Z+26	; 0x1a
    2010:	22 23       	and	r18, r18
    2012:	c1 f0       	breq	.+48     	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
    2014:	88 23       	and	r24, r24
    2016:	b4 f0       	brlt	.+44     	; 0x2044 <__DATA_REGION_LENGTH__+0x44>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    2018:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    201c:	81 e0       	ldi	r24, 0x01	; 1
    201e:	8e 0f       	add	r24, r30
    2020:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    2024:	f0 e0       	ldi	r31, 0x00	; 0
    2026:	c7 01       	movw	r24, r14
    2028:	88 0f       	add	r24, r24
    202a:	99 1f       	adc	r25, r25
    202c:	88 0f       	add	r24, r24
    202e:	99 1f       	adc	r25, r25
    2030:	88 0f       	add	r24, r24
    2032:	99 1f       	adc	r25, r25
    2034:	83 60       	ori	r24, 0x03	; 3
    2036:	ee 0f       	add	r30, r30
    2038:	ff 1f       	adc	r31, r31
    203a:	e6 5f       	subi	r30, 0xF6	; 246
    203c:	fa 4d       	sbci	r31, 0xDA	; 218
    203e:	80 83       	st	Z, r24
    2040:	91 83       	std	Z+1, r25	; 0x01
    2042:	24 c0       	rjmp	.+72     	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMONLINEB]) && (!(ModuleData[Module][MIC_RING]&0x80)))
    2044:	99 23       	and	r25, r25
    2046:	14 f5       	brge	.+68     	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    2048:	9d e1       	ldi	r25, 0x1D	; 29
    204a:	9e 9d       	mul	r25, r14
    204c:	f0 01       	movw	r30, r0
    204e:	9f 9d       	mul	r25, r15
    2050:	f0 0d       	add	r31, r0
    2052:	11 24       	eor	r1, r1
    2054:	e5 5e       	subi	r30, 0xE5	; 229
    2056:	f7 4c       	sbci	r31, 0xC7	; 199
    2058:	93 8d       	ldd	r25, Z+27	; 0x1b
    205a:	99 23       	and	r25, r25
    205c:	b9 f0       	breq	.+46     	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
    205e:	88 23       	and	r24, r24
    2060:	ac f0       	brlt	.+42     	; 0x208c <__DATA_REGION_LENGTH__+0x8c>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    2062:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    2066:	81 e0       	ldi	r24, 0x01	; 1
    2068:	8e 0f       	add	r24, r30
    206a:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    206e:	f0 e0       	ldi	r31, 0x00	; 0
    2070:	c7 01       	movw	r24, r14
    2072:	88 0f       	add	r24, r24
    2074:	99 1f       	adc	r25, r25
    2076:	88 0f       	add	r24, r24
    2078:	99 1f       	adc	r25, r25
    207a:	88 0f       	add	r24, r24
    207c:	99 1f       	adc	r25, r25
    207e:	83 60       	ori	r24, 0x03	; 3
    2080:	ee 0f       	add	r30, r30
    2082:	ff 1f       	adc	r31, r31
    2084:	e6 5f       	subi	r30, 0xF6	; 246
    2086:	fa 4d       	sbci	r31, 0xDA	; 218
    2088:	80 83       	st	Z, r24
    208a:	91 83       	std	Z+1, r25	; 0x01
							}

							//Cue-Control
							CueControl();
    208c:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
    2090:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						}
						else
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    2094:	f7 01       	movw	r30, r14
    2096:	ee 0f       	add	r30, r30
    2098:	ff 1f       	adc	r31, r31
    209a:	ee 0f       	add	r30, r30
    209c:	ff 1f       	adc	r31, r31
    209e:	ee 0f       	add	r30, r30
    20a0:	ff 1f       	adc	r31, r31
    20a2:	e5 5f       	subi	r30, 0xF5	; 245
    20a4:	f4 4d       	sbci	r31, 0xD4	; 212
    20a6:	87 81       	ldd	r24, Z+7	; 0x07
    20a8:	88 23       	and	r24, r24
    20aa:	7c f5       	brge	.+94     	; 0x210a <__DATA_REGION_LENGTH__+0x10a>
    20ac:	8d e1       	ldi	r24, 0x1D	; 29
    20ae:	8e 9d       	mul	r24, r14
    20b0:	f0 01       	movw	r30, r0
    20b2:	8f 9d       	mul	r24, r15
    20b4:	f0 0d       	add	r31, r0
    20b6:	11 24       	eor	r1, r1
    20b8:	e5 5e       	subi	r30, 0xE5	; 229
    20ba:	f7 4c       	sbci	r31, 0xC7	; 199
    20bc:	84 85       	ldd	r24, Z+12	; 0x0c
    20be:	88 23       	and	r24, r24
    20c0:	21 f1       	breq	.+72     	; 0x210a <__DATA_REGION_LENGTH__+0x10a>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    20c2:	f7 01       	movw	r30, r14
    20c4:	e0 56       	subi	r30, 0x60	; 96
    20c6:	fd 4d       	sbci	r31, 0xDD	; 221
    20c8:	90 81       	ld	r25, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    20ca:	89 2f       	mov	r24, r25
    20cc:	83 7f       	andi	r24, 0xF3	; 243
    20ce:	80 83       	st	Z, r24
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    20d0:	95 ff       	sbrs	r25, 5
    20d2:	11 c0       	rjmp	.+34     	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
    20d4:	f7 01       	movw	r30, r14
    20d6:	ee 0f       	add	r30, r30
    20d8:	ff 1f       	adc	r31, r31
    20da:	ee 0f       	add	r30, r30
    20dc:	ff 1f       	adc	r31, r31
    20de:	ee 0f       	add	r30, r30
    20e0:	ff 1f       	adc	r31, r31
    20e2:	e5 5f       	subi	r30, 0xF5	; 245
    20e4:	f4 4d       	sbci	r31, 0xD4	; 212
    20e6:	91 81       	ldd	r25, Z+1	; 0x01
    20e8:	99 23       	and	r25, r25
    20ea:	2c f4       	brge	.+10     	; 0x20f6 <__DATA_REGION_LENGTH__+0xf6>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    20ec:	f7 01       	movw	r30, r14
    20ee:	e0 56       	subi	r30, 0x60	; 96
    20f0:	fd 4d       	sbci	r31, 0xDD	; 221
    20f2:	8f 7e       	andi	r24, 0xEF	; 239
    20f4:	80 83       	st	Z, r24

								CUEByRemoteMIC[Module] = 0;
    20f6:	f7 01       	movw	r30, r14
    20f8:	e9 5f       	subi	r30, 0xF9	; 249
    20fa:	fd 4c       	sbci	r31, 0xCD	; 205
    20fc:	10 82       	st	Z, r1
								CheckCUEByRemoteMIC();
    20fe:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <CheckCUEByRemoteMIC>

								SendSerialData = 1;
    2102:	81 e0       	ldi	r24, 0x01	; 1
    2104:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2108:	5f c0       	rjmp	.+190    	; 0x21c8 <__DATA_REGION_LENGTH__+0x1c8>

							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    210a:	f7 01       	movw	r30, r14
    210c:	ee 0f       	add	r30, r30
    210e:	ff 1f       	adc	r31, r31
    2110:	ee 0f       	add	r30, r30
    2112:	ff 1f       	adc	r31, r31
    2114:	ee 0f       	add	r30, r30
    2116:	ff 1f       	adc	r31, r31
    2118:	e5 5f       	subi	r30, 0xF5	; 245
    211a:	f4 4d       	sbci	r31, 0xD4	; 212
    211c:	86 81       	ldd	r24, Z+6	; 0x06
    211e:	88 23       	and	r24, r24
    2120:	4c f1       	brlt	.+82     	; 0x2174 <__DATA_REGION_LENGTH__+0x174>
    2122:	9d e1       	ldi	r25, 0x1D	; 29
    2124:	9e 9d       	mul	r25, r14
    2126:	f0 01       	movw	r30, r0
    2128:	9f 9d       	mul	r25, r15
    212a:	f0 0d       	add	r31, r0
    212c:	11 24       	eor	r1, r1
    212e:	e5 5e       	subi	r30, 0xE5	; 229
    2130:	f7 4c       	sbci	r31, 0xC7	; 199
    2132:	92 85       	ldd	r25, Z+10	; 0x0a
    2134:	99 23       	and	r25, r25
    2136:	f1 f0       	breq	.+60     	; 0x2174 <__DATA_REGION_LENGTH__+0x174>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2138:	f7 01       	movw	r30, r14
    213a:	e0 56       	subi	r30, 0x60	; 96
    213c:	fd 4d       	sbci	r31, 0xDD	; 221
    213e:	90 81       	ld	r25, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2140:	89 2f       	mov	r24, r25
    2142:	83 7f       	andi	r24, 0xF3	; 243
    2144:	80 83       	st	Z, r24
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    2146:	95 ff       	sbrs	r25, 5
    2148:	11 c0       	rjmp	.+34     	; 0x216c <__DATA_REGION_LENGTH__+0x16c>
    214a:	f7 01       	movw	r30, r14
    214c:	ee 0f       	add	r30, r30
    214e:	ff 1f       	adc	r31, r31
    2150:	ee 0f       	add	r30, r30
    2152:	ff 1f       	adc	r31, r31
    2154:	ee 0f       	add	r30, r30
    2156:	ff 1f       	adc	r31, r31
    2158:	e5 5f       	subi	r30, 0xF5	; 245
    215a:	f4 4d       	sbci	r31, 0xD4	; 212
    215c:	91 81       	ldd	r25, Z+1	; 0x01
    215e:	99 23       	and	r25, r25
    2160:	2c f4       	brge	.+10     	; 0x216c <__DATA_REGION_LENGTH__+0x16c>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    2162:	f7 01       	movw	r30, r14
    2164:	e0 56       	subi	r30, 0x60	; 96
    2166:	fd 4d       	sbci	r31, 0xDD	; 221
    2168:	8f 7e       	andi	r24, 0xEF	; 239
    216a:	80 83       	st	Z, r24

								SendSerialData = 1;
    216c:	81 e0       	ldi	r24, 0x01	; 1
    216e:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2172:	2a c0       	rjmp	.+84     	; 0x21c8 <__DATA_REGION_LENGTH__+0x1c8>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    2174:	88 23       	and	r24, r24
    2176:	44 f5       	brge	.+80     	; 0x21c8 <__DATA_REGION_LENGTH__+0x1c8>
    2178:	8d e1       	ldi	r24, 0x1D	; 29
    217a:	8e 9d       	mul	r24, r14
    217c:	f0 01       	movw	r30, r0
    217e:	8f 9d       	mul	r24, r15
    2180:	f0 0d       	add	r31, r0
    2182:	11 24       	eor	r1, r1
    2184:	e5 5e       	subi	r30, 0xE5	; 229
    2186:	f7 4c       	sbci	r31, 0xC7	; 199
    2188:	83 85       	ldd	r24, Z+11	; 0x0b
    218a:	88 23       	and	r24, r24
    218c:	e9 f0       	breq	.+58     	; 0x21c8 <__DATA_REGION_LENGTH__+0x1c8>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    218e:	f7 01       	movw	r30, r14
    2190:	e0 56       	subi	r30, 0x60	; 96
    2192:	fd 4d       	sbci	r31, 0xDD	; 221
    2194:	90 81       	ld	r25, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2196:	89 2f       	mov	r24, r25
    2198:	83 7f       	andi	r24, 0xF3	; 243
    219a:	80 83       	st	Z, r24
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    219c:	95 ff       	sbrs	r25, 5
    219e:	11 c0       	rjmp	.+34     	; 0x21c2 <__DATA_REGION_LENGTH__+0x1c2>
    21a0:	f7 01       	movw	r30, r14
    21a2:	ee 0f       	add	r30, r30
    21a4:	ff 1f       	adc	r31, r31
    21a6:	ee 0f       	add	r30, r30
    21a8:	ff 1f       	adc	r31, r31
    21aa:	ee 0f       	add	r30, r30
    21ac:	ff 1f       	adc	r31, r31
    21ae:	e5 5f       	subi	r30, 0xF5	; 245
    21b0:	f4 4d       	sbci	r31, 0xD4	; 212
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	99 23       	and	r25, r25
    21b6:	2c f4       	brge	.+10     	; 0x21c2 <__DATA_REGION_LENGTH__+0x1c2>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    21b8:	f7 01       	movw	r30, r14
    21ba:	e0 56       	subi	r30, 0x60	; 96
    21bc:	fd 4d       	sbci	r31, 0xDD	; 221
    21be:	8f 7e       	andi	r24, 0xEF	; 239
    21c0:	80 83       	st	Z, r24

								SendSerialData = 1;
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
							}

							//DJ-Control
							DJControl();
    21c8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>

							//Cue-Control
							CueControl();
    21cc:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
    21d0:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						}
					}
					break;
					case TELCO:
					{ // TELCO
						if (EventOn)
    21d4:	01 2b       	or	r16, r17
    21d6:	09 f0       	breq	.+2      	; 0x21da <__DATA_REGION_LENGTH__+0x1da>
    21d8:	7b c0       	rjmp	.+246    	; 0x22d0 <__DATA_REGION_LENGTH__+0x2d0>
						{
							if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    21da:	f7 01       	movw	r30, r14
    21dc:	ee 0f       	add	r30, r30
    21de:	ff 1f       	adc	r31, r31
    21e0:	ee 0f       	add	r30, r30
    21e2:	ff 1f       	adc	r31, r31
    21e4:	ee 0f       	add	r30, r30
    21e6:	ff 1f       	adc	r31, r31
    21e8:	e5 5f       	subi	r30, 0xF5	; 245
    21ea:	f4 4d       	sbci	r31, 0xD4	; 212
    21ec:	86 81       	ldd	r24, Z+6	; 0x06
    21ee:	88 23       	and	r24, r24
    21f0:	0c f1       	brlt	.+66     	; 0x2234 <__DATA_REGION_LENGTH__+0x234>
    21f2:	9d e1       	ldi	r25, 0x1D	; 29
    21f4:	9e 9d       	mul	r25, r14
    21f6:	f0 01       	movw	r30, r0
    21f8:	9f 9d       	mul	r25, r15
    21fa:	f0 0d       	add	r31, r0
    21fc:	11 24       	eor	r1, r1
    21fe:	e5 5e       	subi	r30, 0xE5	; 229
    2200:	f7 4c       	sbci	r31, 0xC7	; 199
    2202:	92 85       	ldd	r25, Z+10	; 0x0a
    2204:	99 23       	and	r25, r25
    2206:	b1 f0       	breq	.+44     	; 0x2234 <__DATA_REGION_LENGTH__+0x234>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | PFL;
    2208:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    220c:	81 e0       	ldi	r24, 0x01	; 1
    220e:	8e 0f       	add	r24, r30
    2210:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    2214:	f0 e0       	ldi	r31, 0x00	; 0
    2216:	c7 01       	movw	r24, r14
    2218:	88 0f       	add	r24, r24
    221a:	99 1f       	adc	r25, r25
    221c:	88 0f       	add	r24, r24
    221e:	99 1f       	adc	r25, r25
    2220:	88 0f       	add	r24, r24
    2222:	99 1f       	adc	r25, r25
    2224:	82 60       	ori	r24, 0x02	; 2
    2226:	ee 0f       	add	r30, r30
    2228:	ff 1f       	adc	r31, r31
    222a:	e6 5f       	subi	r30, 0xF6	; 246
    222c:	fa 4d       	sbci	r31, 0xDA	; 218
    222e:	80 83       	st	Z, r24
    2230:	91 83       	std	Z+1, r25	; 0x01
    2232:	4a c0       	rjmp	.+148    	; 0x22c8 <__DATA_REGION_LENGTH__+0x2c8>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    2234:	88 23       	and	r24, r24
    2236:	0c f5       	brge	.+66     	; 0x227a <__DATA_REGION_LENGTH__+0x27a>
    2238:	8d e1       	ldi	r24, 0x1D	; 29
    223a:	8e 9d       	mul	r24, r14
    223c:	f0 01       	movw	r30, r0
    223e:	8f 9d       	mul	r24, r15
    2240:	f0 0d       	add	r31, r0
    2242:	11 24       	eor	r1, r1
    2244:	e5 5e       	subi	r30, 0xE5	; 229
    2246:	f7 4c       	sbci	r31, 0xC7	; 199
    2248:	83 85       	ldd	r24, Z+11	; 0x0b
    224a:	88 23       	and	r24, r24
    224c:	b1 f0       	breq	.+44     	; 0x227a <__DATA_REGION_LENGTH__+0x27a>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | PFL;
    224e:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	8e 0f       	add	r24, r30
    2256:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    225a:	f0 e0       	ldi	r31, 0x00	; 0
    225c:	c7 01       	movw	r24, r14
    225e:	88 0f       	add	r24, r24
    2260:	99 1f       	adc	r25, r25
    2262:	88 0f       	add	r24, r24
    2264:	99 1f       	adc	r25, r25
    2266:	88 0f       	add	r24, r24
    2268:	99 1f       	adc	r25, r25
    226a:	82 60       	ori	r24, 0x02	; 2
    226c:	ee 0f       	add	r30, r30
    226e:	ff 1f       	adc	r31, r31
    2270:	e6 5f       	subi	r30, 0xF6	; 246
    2272:	fa 4d       	sbci	r31, 0xDA	; 218
    2274:	80 83       	st	Z, r24
    2276:	91 83       	std	Z+1, r25	; 0x01
    2278:	27 c0       	rjmp	.+78     	; 0x22c8 <__DATA_REGION_LENGTH__+0x2c8>
							}
							else if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    227a:	f7 01       	movw	r30, r14
    227c:	ee 0f       	add	r30, r30
    227e:	ff 1f       	adc	r31, r31
    2280:	ee 0f       	add	r30, r30
    2282:	ff 1f       	adc	r31, r31
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	e5 5f       	subi	r30, 0xF5	; 245
    228a:	f4 4d       	sbci	r31, 0xD4	; 212
    228c:	87 81       	ldd	r24, Z+7	; 0x07
    228e:	88 23       	and	r24, r24
    2290:	dc f4       	brge	.+54     	; 0x22c8 <__DATA_REGION_LENGTH__+0x2c8>
    2292:	8d e1       	ldi	r24, 0x1D	; 29
    2294:	8e 9d       	mul	r24, r14
    2296:	f0 01       	movw	r30, r0
    2298:	8f 9d       	mul	r24, r15
    229a:	f0 0d       	add	r31, r0
    229c:	11 24       	eor	r1, r1
    229e:	e5 5e       	subi	r30, 0xE5	; 229
    22a0:	f7 4c       	sbci	r31, 0xC7	; 199
    22a2:	84 85       	ldd	r24, Z+12	; 0x0c
    22a4:	88 23       	and	r24, r24
    22a6:	81 f0       	breq	.+32     	; 0x22c8 <__DATA_REGION_LENGTH__+0x2c8>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    22a8:	f7 01       	movw	r30, r14
    22aa:	e0 56       	subi	r30, 0x60	; 96
    22ac:	fd 4d       	sbci	r31, 0xDD	; 221
    22ae:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    22b0:	8c 60       	ori	r24, 0x0C	; 12
    22b2:	80 83       	st	Z, r24
								if (!(ConsoleFunctionData[Module]&REMOTE_FUNCTION))
    22b4:	80 fd       	sbrc	r24, 0
    22b6:	05 c0       	rjmp	.+10     	; 0x22c2 <__DATA_REGION_LENGTH__+0x2c2>
									ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    22b8:	f7 01       	movw	r30, r14
    22ba:	e0 56       	subi	r30, 0x60	; 96
    22bc:	fd 4d       	sbci	r31, 0xDD	; 221
    22be:	80 61       	ori	r24, 0x10	; 16
    22c0:	80 83       	st	Z, r24
								SendSerialData = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
							}
							//Cue-Control
							CueControl();
    22c8:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
    22cc:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						}
						else
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]) && (ConsoleFunctionData[Module]&REMOTE_FUNCTION))
    22d0:	f7 01       	movw	r30, r14
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	ee 0f       	add	r30, r30
    22d8:	ff 1f       	adc	r31, r31
    22da:	ee 0f       	add	r30, r30
    22dc:	ff 1f       	adc	r31, r31
    22de:	e5 5f       	subi	r30, 0xF5	; 245
    22e0:	f4 4d       	sbci	r31, 0xD4	; 212
    22e2:	87 81       	ldd	r24, Z+7	; 0x07
    22e4:	88 23       	and	r24, r24
    22e6:	cc f4       	brge	.+50     	; 0x231a <__DATA_REGION_LENGTH__+0x31a>
    22e8:	8d e1       	ldi	r24, 0x1D	; 29
    22ea:	8e 9d       	mul	r24, r14
    22ec:	f0 01       	movw	r30, r0
    22ee:	8f 9d       	mul	r24, r15
    22f0:	f0 0d       	add	r31, r0
    22f2:	11 24       	eor	r1, r1
    22f4:	e5 5e       	subi	r30, 0xE5	; 229
    22f6:	f7 4c       	sbci	r31, 0xC7	; 199
    22f8:	84 85       	ldd	r24, Z+12	; 0x0c
    22fa:	88 23       	and	r24, r24
    22fc:	71 f0       	breq	.+28     	; 0x231a <__DATA_REGION_LENGTH__+0x31a>
    22fe:	f7 01       	movw	r30, r14
    2300:	e0 56       	subi	r30, 0x60	; 96
    2302:	fd 4d       	sbci	r31, 0xDD	; 221
    2304:	80 81       	ld	r24, Z
    2306:	80 ff       	sbrs	r24, 0
    2308:	08 c0       	rjmp	.+16     	; 0x231a <__DATA_REGION_LENGTH__+0x31a>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    230a:	f7 01       	movw	r30, r14
    230c:	e0 56       	subi	r30, 0x60	; 96
    230e:	fd 4d       	sbci	r31, 0xDD	; 221
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
								ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    2310:	83 7e       	andi	r24, 0xE3	; 227
    2312:	80 83       	st	Z, r24
								SendSerialData = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
							}
							//Cue-Control
							CueControl();
    231a:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
    231e:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case FADERON:
		{
			switch (ModuleType[Module])
    2322:	ce 2c       	mov	r12, r14
    2324:	d1 2c       	mov	r13, r1
    2326:	f6 01       	movw	r30, r12
    2328:	e0 59       	subi	r30, 0x90	; 144
    232a:	fd 4d       	sbci	r31, 0xDD	; 221
    232c:	80 81       	ld	r24, Z
    232e:	81 30       	cpi	r24, 0x01	; 1
    2330:	29 f0       	breq	.+10     	; 0x233c <__DATA_REGION_LENGTH__+0x33c>
    2332:	82 30       	cpi	r24, 0x02	; 2
    2334:	09 f4       	brne	.+2      	; 0x2338 <__DATA_REGION_LENGTH__+0x338>
    2336:	ac c0       	rjmp	.+344    	; 0x2490 <__DATA_REGION_LENGTH__+0x490>
    2338:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			{
				case TRIPLE:
				{ //Triple
					if (EventOn)
    233c:	01 2b       	or	r16, r17
    233e:	09 f0       	breq	.+2      	; 0x2342 <__DATA_REGION_LENGTH__+0x342>
    2340:	63 c0       	rjmp	.+198    	; 0x2408 <__DATA_REGION_LENGTH__+0x408>
					{		// Was eerst het OfEvent JB
							// Inverse reaction bij op P-print by Jan Betten!! 
							// dus onevent is fader uit bij P-print!!!!

						if (ConsoleFunctionData[Module]&ON_LED)
    2342:	f6 01       	movw	r30, r12
    2344:	e0 56       	subi	r30, 0x60	; 96
    2346:	fd 4d       	sbci	r31, 0xDD	; 221
    2348:	80 81       	ld	r24, Z
    234a:	85 ff       	sbrs	r24, 5
    234c:	3f c0       	rjmp	.+126    	; 0x23cc <__DATA_REGION_LENGTH__+0x3cc>
						{
							ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    234e:	8f 01       	movw	r16, r30
    2350:	81 60       	ori	r24, 0x01	; 1
    2352:	80 83       	st	Z, r24

							//OnAir1/2 Control
							OnAirControl();
    2354:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>

							TimerControl(Module);
    2358:	8e 2d       	mov	r24, r14
    235a:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>

							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    235e:	f8 01       	movw	r30, r16
    2360:	80 81       	ld	r24, Z
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2362:	83 7f       	andi	r24, 0xF3	; 243
    2364:	80 83       	st	Z, r24

							//Cue-Control
							if (ConsoleMasterSettings[AUTOCUERESET])
    2366:	90 91 8e 2b 	lds	r25, 0x2B8E	; 0x802b8e <ConsoleMasterSettings>
    236a:	99 23       	and	r25, r25
    236c:	d9 f0       	breq	.+54     	; 0x23a4 <__DATA_REGION_LENGTH__+0x3a4>
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    236e:	f6 01       	movw	r30, r12
    2370:	ee 0f       	add	r30, r30
    2372:	ff 1f       	adc	r31, r31
    2374:	ee 0f       	add	r30, r30
    2376:	ff 1f       	adc	r31, r31
    2378:	ee 0f       	add	r30, r30
    237a:	ff 1f       	adc	r31, r31
    237c:	e5 5f       	subi	r30, 0xF5	; 245
    237e:	f4 4d       	sbci	r31, 0xD4	; 212
    2380:	91 81       	ldd	r25, Z+1	; 0x01
    2382:	99 23       	and	r25, r25
    2384:	7c f4       	brge	.+30     	; 0x23a4 <__DATA_REGION_LENGTH__+0x3a4>
    2386:	85 fd       	sbrc	r24, 5
    2388:	0a c0       	rjmp	.+20     	; 0x239e <__DATA_REGION_LENGTH__+0x39e>
    238a:	0c c0       	rjmp	.+24     	; 0x23a4 <__DATA_REGION_LENGTH__+0x3a4>
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    238c:	e8 2f       	mov	r30, r24
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	e0 56       	subi	r30, 0x60	; 96
    2392:	fd 4d       	sbci	r31, 0xDD	; 221
    2394:	90 81       	ld	r25, Z
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    2396:	93 7f       	andi	r25, 0xF3	; 243
    2398:	90 83       	st	Z, r25
							if (ConsoleMasterSettings[AUTOCUERESET])
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    239a:	8f 5f       	subi	r24, 0xFF	; 255
    239c:	01 c0       	rjmp	.+2      	; 0x23a0 <__DATA_REGION_LENGTH__+0x3a0>
    239e:	80 e0       	ldi	r24, 0x00	; 0
    23a0:	80 31       	cpi	r24, 0x10	; 16
    23a2:	a0 f3       	brcs	.-24     	; 0x238c <__DATA_REGION_LENGTH__+0x38c>
										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
									}
								}
							}
							CueControl();
    23a4:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>

							//DJ-Control
							DJControl();
    23a8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
							//StudioMic Control
							StudioMicControl();
    23ac:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>

							CheckStartCondition(Module);
    23b0:	8e 2d       	mov	r24, r14
    23b2:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>

							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    23b6:	f6 01       	movw	r30, r12
    23b8:	e0 56       	subi	r30, 0x60	; 96
    23ba:	fd 4d       	sbci	r31, 0xDD	; 221
    23bc:	80 81       	ld	r24, Z
    23be:	8f 7e       	andi	r24, 0xEF	; 239
    23c0:	80 83       	st	Z, r24
							SendSerialData = 1;
    23c2:	81 e0       	ldi	r24, 0x01	; 1
    23c4:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    23c8:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						}
						else
						{
							if ((ConsoleModuleSettings[Module][STARTFADER]) && (!ConsoleModuleSettings[Module][STARTON]))
    23cc:	8d e1       	ldi	r24, 0x1D	; 29
    23ce:	8c 9d       	mul	r24, r12
    23d0:	f0 01       	movw	r30, r0
    23d2:	8d 9d       	mul	r24, r13
    23d4:	f0 0d       	add	r31, r0
    23d6:	11 24       	eor	r1, r1
    23d8:	e5 5e       	subi	r30, 0xE5	; 229
    23da:	f7 4c       	sbci	r31, 0xC7	; 199
    23dc:	86 81       	ldd	r24, Z+6	; 0x06
    23de:	88 23       	and	r24, r24
    23e0:	71 f0       	breq	.+28     	; 0x23fe <__DATA_REGION_LENGTH__+0x3fe>
    23e2:	8d e1       	ldi	r24, 0x1D	; 29
    23e4:	8c 9d       	mul	r24, r12
    23e6:	f0 01       	movw	r30, r0
    23e8:	8d 9d       	mul	r24, r13
    23ea:	f0 0d       	add	r31, r0
    23ec:	11 24       	eor	r1, r1
    23ee:	e5 5e       	subi	r30, 0xE5	; 229
    23f0:	f7 4c       	sbci	r31, 0xC7	; 199
    23f2:	87 81       	ldd	r24, Z+7	; 0x07
    23f4:	81 11       	cpse	r24, r1
    23f6:	03 c0       	rjmp	.+6      	; 0x23fe <__DATA_REGION_LENGTH__+0x3fe>
							{
								CheckStartCondition(Module);
    23f8:	8e 2d       	mov	r24, r14
    23fa:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>
							}
							TimerControl(Module);
    23fe:	8e 2d       	mov	r24, r14
    2400:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
    2404:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						}
					}
					else
					{
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    2408:	f6 01       	movw	r30, r12
    240a:	e0 56       	subi	r30, 0x60	; 96
    240c:	fd 4d       	sbci	r31, 0xDD	; 221
    240e:	80 81       	ld	r24, Z
    2410:	80 61       	ori	r24, 0x10	; 16
    2412:	80 83       	st	Z, r24
						if (ConsoleFunctionData[Module]&ON_LED)
    2414:	85 ff       	sbrs	r24, 5
    2416:	18 c0       	rjmp	.+48     	; 0x2448 <__DATA_REGION_LENGTH__+0x448>
						{
							if (ConsoleModuleSettings[Module][STARTFADER]) 
    2418:	8d e1       	ldi	r24, 0x1D	; 29
    241a:	8c 9d       	mul	r24, r12
    241c:	f0 01       	movw	r30, r0
    241e:	8d 9d       	mul	r24, r13
    2420:	f0 0d       	add	r31, r0
    2422:	11 24       	eor	r1, r1
    2424:	e5 5e       	subi	r30, 0xE5	; 229
    2426:	f7 4c       	sbci	r31, 0xC7	; 199
    2428:	86 81       	ldd	r24, Z+6	; 0x06
    242a:	88 23       	and	r24, r24
    242c:	19 f0       	breq	.+6      	; 0x2434 <__DATA_REGION_LENGTH__+0x434>
							{
									CheckStartCondition(Module);
    242e:	8e 2d       	mov	r24, r14
    2430:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>
							}
							//OnAir1/2 Control
							OnAirControl();
    2434:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>

							TimerControl(Module);
    2438:	8e 2d       	mov	r24, r14
    243a:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>

							//DJ-Control
							DJControl();
    243e:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>

							//StudioMic Control
							StudioMicControl();
    2442:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>
    2446:	19 c0       	rjmp	.+50     	; 0x247a <__DATA_REGION_LENGTH__+0x47a>
						}
						else
						{
							if ((ConsoleModuleSettings[Module][STARTFADER]) && (!ConsoleModuleSettings[Module][STARTON]))
    2448:	8d e1       	ldi	r24, 0x1D	; 29
    244a:	8c 9d       	mul	r24, r12
    244c:	f0 01       	movw	r30, r0
    244e:	8d 9d       	mul	r24, r13
    2450:	f0 0d       	add	r31, r0
    2452:	11 24       	eor	r1, r1
    2454:	e5 5e       	subi	r30, 0xE5	; 229
    2456:	f7 4c       	sbci	r31, 0xC7	; 199
    2458:	86 81       	ldd	r24, Z+6	; 0x06
    245a:	88 23       	and	r24, r24
    245c:	71 f0       	breq	.+28     	; 0x247a <__DATA_REGION_LENGTH__+0x47a>
    245e:	8d e1       	ldi	r24, 0x1D	; 29
    2460:	8c 9d       	mul	r24, r12
    2462:	f0 01       	movw	r30, r0
    2464:	8d 9d       	mul	r24, r13
    2466:	f0 0d       	add	r31, r0
    2468:	11 24       	eor	r1, r1
    246a:	e5 5e       	subi	r30, 0xE5	; 229
    246c:	f7 4c       	sbci	r31, 0xC7	; 199
    246e:	87 81       	ldd	r24, Z+7	; 0x07
    2470:	81 11       	cpse	r24, r1
    2472:	03 c0       	rjmp	.+6      	; 0x247a <__DATA_REGION_LENGTH__+0x47a>
							{
								CheckStartCondition(Module);
    2474:	8e 2d       	mov	r24, r14
    2476:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>
							}
						}
						ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
    247a:	f6 01       	movw	r30, r12
    247c:	e0 56       	subi	r30, 0x60	; 96
    247e:	fd 4d       	sbci	r31, 0xDD	; 221
    2480:	80 81       	ld	r24, Z
    2482:	8e 7f       	andi	r24, 0xFE	; 254
    2484:	80 83       	st	Z, r24
						SendSerialData = 1;
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    248c:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
// was eerst het OnEvent JB
				}
				break;
				case TELCO:
				{ // Telco
					if (EventOn)
    2490:	01 2b       	or	r16, r17
    2492:	09 f0       	breq	.+2      	; 0x2496 <__DATA_REGION_LENGTH__+0x496>
    2494:	77 c0       	rjmp	.+238    	; 0x2584 <__DATA_REGION_LENGTH__+0x584>
					{// JB was else
						if (ConsoleFunctionData[Module]&ON_LED)
    2496:	f6 01       	movw	r30, r12
    2498:	e0 56       	subi	r30, 0x60	; 96
    249a:	fd 4d       	sbci	r31, 0xDD	; 221
    249c:	80 81       	ld	r24, Z
    249e:	85 fd       	sbrc	r24, 5
    24a0:	02 c0       	rjmp	.+4      	; 0x24a6 <__DATA_REGION_LENGTH__+0x4a6>
    24a2:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						{
							char TelcoNr = GetTelcoNrFromModuleNr(Module);
    24a6:	8e 2d       	mov	r24, r14
    24a8:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
							if ((TelcoNr>=0) && (TelcoNr<4))
    24ac:	84 30       	cpi	r24, 0x04	; 4
    24ae:	b8 f4       	brcc	.+46     	; 0x24de <__DATA_REGION_LENGTH__+0x4de>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    24b0:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    24b4:	a1 e0       	ldi	r26, 0x01	; 1
    24b6:	ae 0f       	add	r26, r30
    24b8:	f0 e0       	ldi	r31, 0x00	; 0
    24ba:	eb 53       	subi	r30, 0x3B	; 59
    24bc:	fc 4d       	sbci	r31, 0xDC	; 220
    24be:	92 ec       	ldi	r25, 0xC2	; 194
    24c0:	90 83       	st	Z, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    24c2:	e1 e0       	ldi	r30, 0x01	; 1
    24c4:	ea 0f       	add	r30, r26
    24c6:	b0 e0       	ldi	r27, 0x00	; 0
    24c8:	ab 53       	subi	r26, 0x3B	; 59
    24ca:	bc 4d       	sbci	r27, 0xDC	; 220
    24cc:	8c 93       	st	X, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    24ce:	81 e0       	ldi	r24, 0x01	; 1
    24d0:	8e 0f       	add	r24, r30
    24d2:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	eb 53       	subi	r30, 0x3B	; 59
    24da:	fc 4d       	sbci	r31, 0xDC	; 220
    24dc:	10 82       	st	Z, r1
							}

							//OnAir1/2 Control
							OnAirControl();
    24de:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>
							TimerControl(Module);
    24e2:	8e 2d       	mov	r24, r14
    24e4:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
							
							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    24e8:	f6 01       	movw	r30, r12
    24ea:	e0 56       	subi	r30, 0x60	; 96
    24ec:	fd 4d       	sbci	r31, 0xDD	; 221
    24ee:	80 81       	ld	r24, Z
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    24f0:	83 7f       	andi	r24, 0xF3	; 243
    24f2:	80 83       	st	Z, r24

							//Cue-Control
							if (ConsoleMasterSettings[AUTOCUERESET])
    24f4:	90 91 8e 2b 	lds	r25, 0x2B8E	; 0x802b8e <ConsoleMasterSettings>
    24f8:	99 23       	and	r25, r25
    24fa:	b9 f1       	breq	.+110    	; 0x256a <__DATA_REGION_LENGTH__+0x56a>
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    24fc:	f6 01       	movw	r30, r12
    24fe:	ee 0f       	add	r30, r30
    2500:	ff 1f       	adc	r31, r31
    2502:	ee 0f       	add	r30, r30
    2504:	ff 1f       	adc	r31, r31
    2506:	ee 0f       	add	r30, r30
    2508:	ff 1f       	adc	r31, r31
    250a:	e5 5f       	subi	r30, 0xF5	; 245
    250c:	f4 4d       	sbci	r31, 0xD4	; 212
    250e:	91 81       	ldd	r25, Z+1	; 0x01
    2510:	99 23       	and	r25, r25
    2512:	5c f5       	brge	.+86     	; 0x256a <__DATA_REGION_LENGTH__+0x56a>
    2514:	85 fd       	sbrc	r24, 5
    2516:	26 c0       	rjmp	.+76     	; 0x2564 <__DATA_REGION_LENGTH__+0x564>
    2518:	28 c0       	rjmp	.+80     	; 0x256a <__DATA_REGION_LENGTH__+0x56a>
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    251a:	81 2f       	mov	r24, r17
    251c:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
										if ((TelcoNr>=0) && (TelcoNr<4))
    2520:	84 30       	cpi	r24, 0x04	; 4
    2522:	b8 f4       	brcc	.+46     	; 0x2552 <__DATA_REGION_LENGTH__+0x552>
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2524:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2528:	a1 e0       	ldi	r26, 0x01	; 1
    252a:	ae 0f       	add	r26, r30
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	eb 53       	subi	r30, 0x3B	; 59
    2530:	fc 4d       	sbci	r31, 0xDC	; 220
    2532:	92 ec       	ldi	r25, 0xC2	; 194
    2534:	90 83       	st	Z, r25
											SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2536:	e1 e0       	ldi	r30, 0x01	; 1
    2538:	ea 0f       	add	r30, r26
    253a:	b0 e0       	ldi	r27, 0x00	; 0
    253c:	ab 53       	subi	r26, 0x3B	; 59
    253e:	bc 4d       	sbci	r27, 0xDC	; 220
    2540:	8c 93       	st	X, r24
											SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	8e 0f       	add	r24, r30
    2546:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	eb 53       	subi	r30, 0x3B	; 59
    254e:	fc 4d       	sbci	r31, 0xDC	; 220
    2550:	10 82       	st	Z, r1
										}

										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    2552:	e1 2f       	mov	r30, r17
    2554:	f0 e0       	ldi	r31, 0x00	; 0
    2556:	e0 56       	subi	r30, 0x60	; 96
    2558:	fd 4d       	sbci	r31, 0xDD	; 221
    255a:	80 81       	ld	r24, Z
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    255c:	83 7f       	andi	r24, 0xF3	; 243
    255e:	80 83       	st	Z, r24
							if (ConsoleMasterSettings[AUTOCUERESET])
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2560:	1f 5f       	subi	r17, 0xFF	; 255
    2562:	01 c0       	rjmp	.+2      	; 0x2566 <__DATA_REGION_LENGTH__+0x566>
    2564:	10 e0       	ldi	r17, 0x00	; 0
    2566:	10 31       	cpi	r17, 0x10	; 16
    2568:	c0 f2       	brcs	.-80     	; 0x251a <__DATA_REGION_LENGTH__+0x51a>
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;

									}
								}
							}
							CueControl();
    256a:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>

							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    256e:	f6 01       	movw	r30, r12
    2570:	e0 56       	subi	r30, 0x60	; 96
    2572:	fd 4d       	sbci	r31, 0xDD	; 221
    2574:	80 81       	ld	r24, Z
    2576:	8f 7e       	andi	r24, 0xEF	; 239
    2578:	80 83       	st	Z, r24
							SendSerialData = 1;
    257a:	81 e0       	ldi	r24, 0x01	; 1
    257c:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2580:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						}
					}
					else
					{			// JB was if
 						//OnAir1/2 Control
						OnAirControl();
    2584:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>
						TimerControl(Module);
    2588:	8e 2d       	mov	r24, r14
    258a:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    258e:	f6 01       	movw	r30, r12
    2590:	e0 56       	subi	r30, 0x60	; 96
    2592:	fd 4d       	sbci	r31, 0xDD	; 221
    2594:	80 81       	ld	r24, Z
    2596:	80 61       	ori	r24, 0x10	; 16
    2598:	80 83       	st	Z, r24
						SendSerialData = 1;
    259a:	81 e0       	ldi	r24, 0x01	; 1
    259c:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    25a0:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case PFL:
		{
			switch (OperatingMode)
    25a4:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    25a8:	81 30       	cpi	r24, 0x01	; 1
    25aa:	09 f0       	breq	.+2      	; 0x25ae <__DATA_REGION_LENGTH__+0x5ae>
    25ac:	2d c1       	rjmp	.+602    	; 0x2808 <__DATA_REGION_LENGTH__+0x808>
			{
				case MODULEMODE:
				{
					if ((EventOn) && (ConsoleMasterSettings[4]))
    25ae:	01 2b       	or	r16, r17
    25b0:	11 f0       	breq	.+4      	; 0x25b6 <__DATA_REGION_LENGTH__+0x5b6>
    25b2:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
    25b6:	80 91 92 2b 	lds	r24, 0x2B92	; 0x802b92 <ConsoleMasterSettings+0x4>
    25ba:	88 23       	and	r24, r24
    25bc:	11 f4       	brne	.+4      	; 0x25c2 <__DATA_REGION_LENGTH__+0x5c2>
    25be:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
					{
						unsigned char cntByte;

						char Buffer[] ="Module xx: xxx  ";
    25c2:	81 e1       	ldi	r24, 0x11	; 17
    25c4:	e6 ed       	ldi	r30, 0xD6	; 214
    25c6:	f0 e2       	ldi	r31, 0x20	; 32
    25c8:	de 01       	movw	r26, r28
    25ca:	11 96       	adiw	r26, 0x01	; 1
    25cc:	01 90       	ld	r0, Z+
    25ce:	0d 92       	st	X+, r0
    25d0:	8a 95       	dec	r24
    25d2:	e1 f7       	brne	.-8      	; 0x25cc <__DATA_REGION_LENGTH__+0x5cc>
						
						if (ConsoleModuleSettings[Module][TextStringPtr])
    25d4:	0e 2d       	mov	r16, r14
    25d6:	10 e0       	ldi	r17, 0x00	; 0
    25d8:	90 91 81 22 	lds	r25, 0x2281	; 0x802281 <TextStringPtr>
    25dc:	29 2f       	mov	r18, r25
    25de:	30 e0       	ldi	r19, 0x00	; 0
    25e0:	8d e1       	ldi	r24, 0x1D	; 29
    25e2:	80 9f       	mul	r24, r16
    25e4:	f0 01       	movw	r30, r0
    25e6:	81 9f       	mul	r24, r17
    25e8:	f0 0d       	add	r31, r0
    25ea:	11 24       	eor	r1, r1
    25ec:	e5 5e       	subi	r30, 0xE5	; 229
    25ee:	f7 4c       	sbci	r31, 0xC7	; 199
    25f0:	e2 0f       	add	r30, r18
    25f2:	f3 1f       	adc	r31, r19
    25f4:	80 81       	ld	r24, Z
    25f6:	88 23       	and	r24, r24
    25f8:	61 f0       	breq	.+24     	; 0x2612 <__DATA_REGION_LENGTH__+0x612>
							ConsoleModuleSettings[Module][TextStringPtr] = 0;
    25fa:	8d e1       	ldi	r24, 0x1D	; 29
    25fc:	80 9f       	mul	r24, r16
    25fe:	f0 01       	movw	r30, r0
    2600:	81 9f       	mul	r24, r17
    2602:	f0 0d       	add	r31, r0
    2604:	11 24       	eor	r1, r1
    2606:	e5 5e       	subi	r30, 0xE5	; 229
    2608:	f7 4c       	sbci	r31, 0xC7	; 199
    260a:	e2 0f       	add	r30, r18
    260c:	f3 1f       	adc	r31, r19
    260e:	10 82       	st	Z, r1
    2610:	0c c0       	rjmp	.+24     	; 0x262a <__DATA_REGION_LENGTH__+0x62a>
						else
							ConsoleModuleSettings[Module][TextStringPtr] = 1;
    2612:	8d e1       	ldi	r24, 0x1D	; 29
    2614:	80 9f       	mul	r24, r16
    2616:	f0 01       	movw	r30, r0
    2618:	81 9f       	mul	r24, r17
    261a:	f0 0d       	add	r31, r0
    261c:	11 24       	eor	r1, r1
    261e:	e5 5e       	subi	r30, 0xE5	; 229
    2620:	f7 4c       	sbci	r31, 0xC7	; 199
    2622:	e2 0f       	add	r30, r18
    2624:	f3 1f       	adc	r31, r19
    2626:	81 e0       	ldi	r24, 0x01	; 1
    2628:	80 83       	st	Z, r24

						if (ModuleType[Module]==TELCO)
    262a:	f8 01       	movw	r30, r16
    262c:	e0 59       	subi	r30, 0x90	; 144
    262e:	fd 4d       	sbci	r31, 0xDD	; 221
    2630:	40 81       	ld	r20, Z
    2632:	42 30       	cpi	r20, 0x02	; 2
    2634:	29 f5       	brne	.+74     	; 0x2680 <__DATA_REGION_LENGTH__+0x680>
						{
							switch (TextStringPtr)
    2636:	89 2e       	mov	r8, r25
    2638:	91 2c       	mov	r9, r1
    263a:	f4 01       	movw	r30, r8
    263c:	32 97       	sbiw	r30, 0x02	; 2
    263e:	ea 31       	cpi	r30, 0x1A	; 26
    2640:	f1 05       	cpc	r31, r1
    2642:	f0 f4       	brcc	.+60     	; 0x2680 <__DATA_REGION_LENGTH__+0x680>
    2644:	88 27       	eor	r24, r24
    2646:	e9 57       	subi	r30, 0x79	; 121
    2648:	fe 4f       	sbci	r31, 0xFE	; 254
    264a:	8f 4f       	sbci	r24, 0xFF	; 255
    264c:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__tablejump2__>
								case REMONLINEA:
								case REMONLINEB:
								case MICATLINEA:
								case MICATLINEB:
								{
									ConsoleModuleSettings[Module][TextStringPtr]=0x00;
    2650:	8d e1       	ldi	r24, 0x1D	; 29
    2652:	80 9f       	mul	r24, r16
    2654:	f0 01       	movw	r30, r0
    2656:	81 9f       	mul	r24, r17
    2658:	f0 0d       	add	r31, r0
    265a:	11 24       	eor	r1, r1
    265c:	e5 5e       	subi	r30, 0xE5	; 229
    265e:	f7 4c       	sbci	r31, 0xC7	; 199
    2660:	e2 0f       	add	r30, r18
    2662:	f3 1f       	adc	r31, r19
    2664:	10 82       	st	Z, r1
								}
								break;
    2666:	0c c0       	rjmp	.+24     	; 0x2680 <__DATA_REGION_LENGTH__+0x680>
								case STARTON:
								case STARTLINEA:
								case STARTLINEB:
								case STARTCUE:
								{
									ConsoleModuleSettings[Module][TextStringPtr]=0x01;
    2668:	8d e1       	ldi	r24, 0x1D	; 29
    266a:	80 9f       	mul	r24, r16
    266c:	f0 01       	movw	r30, r0
    266e:	81 9f       	mul	r24, r17
    2670:	f0 0d       	add	r31, r0
    2672:	11 24       	eor	r1, r1
    2674:	e5 5e       	subi	r30, 0xE5	; 229
    2676:	f7 4c       	sbci	r31, 0xC7	; 199
    2678:	e2 0f       	add	r30, r18
    267a:	f3 1f       	adc	r31, r19
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	80 83       	st	Z, r24
								}
								break;
							}
						}

						switch (TextStringPtr)
    2680:	89 2f       	mov	r24, r25
    2682:	90 e0       	ldi	r25, 0x00	; 0
    2684:	fc 01       	movw	r30, r24
    2686:	33 97       	sbiw	r30, 0x03	; 3
    2688:	e6 31       	cpi	r30, 0x16	; 22
    268a:	f1 05       	cpc	r31, r1
    268c:	b8 f5       	brcc	.+110    	; 0x26fc <__DATA_REGION_LENGTH__+0x6fc>
    268e:	88 27       	eor	r24, r24
    2690:	ef 55       	subi	r30, 0x5F	; 95
    2692:	fe 4f       	sbci	r31, 0xFE	; 254
    2694:	8f 4f       	sbci	r24, 0xFF	; 255
    2696:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__tablejump2__>
							case STARTPULS:
							{
								unsigned char cntModule;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									StartControl(cntModule, 0);
    269a:	60 e0       	ldi	r22, 0x00	; 0
    269c:	8f 2d       	mov	r24, r15
    269e:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
									TimerControl(cntModule);
    26a2:	8f 2d       	mov	r24, r15
    26a4:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
							case STARTON:
							case STARTCUE:
							case STARTPULS:
							{
								unsigned char cntModule;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    26a8:	f3 94       	inc	r15
    26aa:	01 c0       	rjmp	.+2      	; 0x26ae <__DATA_REGION_LENGTH__+0x6ae>
								}
								break;
							}
						}

						switch (TextStringPtr)
    26ac:	f1 2c       	mov	r15, r1
							case STARTON:
							case STARTCUE:
							case STARTPULS:
							{
								unsigned char cntModule;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    26ae:	ff e0       	ldi	r31, 0x0F	; 15
    26b0:	ff 15       	cp	r31, r15
    26b2:	98 f7       	brcc	.-26     	; 0x269a <__DATA_REGION_LENGTH__+0x69a>
    26b4:	23 c0       	rjmp	.+70     	; 0x26fc <__DATA_REGION_LENGTH__+0x6fc>
								}
							}
							break;
							case DJMIC:
							{
								DJControl();
    26b6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
							}
							break;
    26ba:	20 c0       	rjmp	.+64     	; 0x26fc <__DATA_REGION_LENGTH__+0x6fc>
							case MICATLINEA:
							case MICATLINEB:
							{
								DJControl();
    26bc:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
								StudioMicControl();
    26c0:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>
							}
							break;
    26c4:	1b c0       	rjmp	.+54     	; 0x26fc <__DATA_REGION_LENGTH__+0x6fc>
							case ANNMIC:
							{
								if (ModuleType[Module]==TRIPLE)
    26c6:	41 30       	cpi	r20, 0x01	; 1
    26c8:	89 f4       	brne	.+34     	; 0x26ec <__DATA_REGION_LENGTH__+0x6ec>
    26ca:	0d c0       	rjmp	.+26     	; 0x26e6 <__DATA_REGION_LENGTH__+0x6e6>
								{
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										if (cntModule!=Module)
    26cc:	8e 15       	cp	r24, r14
    26ce:	49 f0       	breq	.+18     	; 0x26e2 <__DATA_REGION_LENGTH__+0x6e2>
											ConsoleModuleSettings[cntModule][TextStringPtr] = 0x00;
    26d0:	5d e1       	ldi	r21, 0x1D	; 29
    26d2:	85 9f       	mul	r24, r21
    26d4:	f0 01       	movw	r30, r0
    26d6:	11 24       	eor	r1, r1
    26d8:	e5 5e       	subi	r30, 0xE5	; 229
    26da:	f7 4c       	sbci	r31, 0xC7	; 199
    26dc:	e2 0f       	add	r30, r18
    26de:	f3 1f       	adc	r31, r19
    26e0:	10 82       	st	Z, r1
							case ANNMIC:
							{
								if (ModuleType[Module]==TRIPLE)
								{
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    26e2:	8f 5f       	subi	r24, 0xFF	; 255
    26e4:	01 c0       	rjmp	.+2      	; 0x26e8 <__DATA_REGION_LENGTH__+0x6e8>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	80 31       	cpi	r24, 0x10	; 16
    26ea:	80 f3       	brcs	.-32     	; 0x26cc <__DATA_REGION_LENGTH__+0x6cc>
									{
										if (cntModule!=Module)
											ConsoleModuleSettings[cntModule][TextStringPtr] = 0x00;
									}
								}
								StudioMicControl();
    26ec:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>
							}
							break;
    26f0:	05 c0       	rjmp	.+10     	; 0x26fc <__DATA_REGION_LENGTH__+0x6fc>
							case STUDIOMIC:
							{
								StudioMicControl();
    26f2:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>
							}
							break;
    26f6:	02 c0       	rjmp	.+4      	; 0x26fc <__DATA_REGION_LENGTH__+0x6fc>
							case ONAIR2LINEA:
							case ONAIR2LINEB:
							case ONAIR2MIC:
							{
								//OnAir1/2 Control
								OnAirControl();
    26f8:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>
							}
							break;
						}

						Buffer[7] = 0x30+((Module+1)/10);
    26fc:	c8 01       	movw	r24, r16
    26fe:	01 96       	adiw	r24, 0x01	; 1
    2700:	6a e0       	ldi	r22, 0x0A	; 10
    2702:	70 e0       	ldi	r23, 0x00	; 0
    2704:	0e 94 1f 29 	call	0x523e	; 0x523e <__divmodhi4>
    2708:	60 5d       	subi	r22, 0xD0	; 208
    270a:	68 87       	std	Y+8, r22	; 0x08
						Buffer[8] = 0x30+((Module+1)%10);
    270c:	80 5d       	subi	r24, 0xD0	; 208
    270e:	89 87       	std	Y+9, r24	; 0x09
						if (TextStringPtr==STARTPULS)
    2710:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    2714:	89 30       	cpi	r24, 0x09	; 9
    2716:	f9 f4       	brne	.+62     	; 0x2756 <__DATA_REGION_LENGTH__+0x756>
						{
							if (ConsoleModuleSettings[Module][TextStringPtr])
    2718:	9d e1       	ldi	r25, 0x1D	; 29
    271a:	90 9f       	mul	r25, r16
    271c:	f0 01       	movw	r30, r0
    271e:	91 9f       	mul	r25, r17
    2720:	f0 0d       	add	r31, r0
    2722:	11 24       	eor	r1, r1
    2724:	e5 5e       	subi	r30, 0xE5	; 229
    2726:	f7 4c       	sbci	r31, 0xC7	; 199
    2728:	e8 0f       	add	r30, r24
    272a:	f1 1d       	adc	r31, r1
    272c:	80 81       	ld	r24, Z
    272e:	88 23       	and	r24, r24
    2730:	49 f0       	breq	.+18     	; 0x2744 <__DATA_REGION_LENGTH__+0x744>
							{
								Buffer[11] = 'P';
    2732:	80 e5       	ldi	r24, 0x50	; 80
    2734:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'u';
    2736:	85 e7       	ldi	r24, 0x75	; 117
    2738:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'l';
    273a:	8c e6       	ldi	r24, 0x6C	; 108
    273c:	8e 87       	std	Y+14, r24	; 0x0e
								Buffer[14] = 's';
    273e:	83 e7       	ldi	r24, 0x73	; 115
    2740:	8f 87       	std	Y+15, r24	; 0x0f
    2742:	23 c0       	rjmp	.+70     	; 0x278a <__DATA_REGION_LENGTH__+0x78a>
							}
							else
							{
								Buffer[11] = 'C';
    2744:	83 e4       	ldi	r24, 0x43	; 67
    2746:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'o';
    2748:	8f e6       	ldi	r24, 0x6F	; 111
    274a:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'n';
    274c:	8e e6       	ldi	r24, 0x6E	; 110
    274e:	8e 87       	std	Y+14, r24	; 0x0e
								Buffer[14] = 't';
    2750:	84 e7       	ldi	r24, 0x74	; 116
    2752:	8f 87       	std	Y+15, r24	; 0x0f
    2754:	1a c0       	rjmp	.+52     	; 0x278a <__DATA_REGION_LENGTH__+0x78a>
							}
						}
						else
						{
							if (ConsoleModuleSettings[Module][TextStringPtr])
    2756:	9d e1       	ldi	r25, 0x1D	; 29
    2758:	90 9f       	mul	r25, r16
    275a:	f0 01       	movw	r30, r0
    275c:	91 9f       	mul	r25, r17
    275e:	f0 0d       	add	r31, r0
    2760:	11 24       	eor	r1, r1
    2762:	e5 5e       	subi	r30, 0xE5	; 229
    2764:	f7 4c       	sbci	r31, 0xC7	; 199
    2766:	e8 0f       	add	r30, r24
    2768:	f1 1d       	adc	r31, r1
    276a:	80 81       	ld	r24, Z
    276c:	88 23       	and	r24, r24
    276e:	39 f0       	breq	.+14     	; 0x277e <__DATA_REGION_LENGTH__+0x77e>
							{
								Buffer[11] = 'Y';
    2770:	89 e5       	ldi	r24, 0x59	; 89
    2772:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'e';
    2774:	85 e6       	ldi	r24, 0x65	; 101
    2776:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 's';
    2778:	83 e7       	ldi	r24, 0x73	; 115
    277a:	8e 87       	std	Y+14, r24	; 0x0e
    277c:	06 c0       	rjmp	.+12     	; 0x278a <__DATA_REGION_LENGTH__+0x78a>
							}
							else
							{
								Buffer[11] = ' ';
    277e:	80 e2       	ldi	r24, 0x20	; 32
    2780:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'N';
    2782:	8e e4       	ldi	r24, 0x4E	; 78
    2784:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'o';
    2786:	8f e6       	ldi	r24, 0x6F	; 111
    2788:	8e 87       	std	Y+14, r24	; 0x0e
							}
						}
						SetLCD(0,"\xC0");
    278a:	6f e2       	ldi	r22, 0x2F	; 47
    278c:	70 e2       	ldi	r23, 0x20	; 32
    278e:	80 e0       	ldi	r24, 0x00	; 0
    2790:	90 e0       	ldi	r25, 0x00	; 0
    2792:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,Buffer);
    2796:	be 01       	movw	r22, r28
    2798:	6f 5f       	subi	r22, 0xFF	; 255
    279a:	7f 4f       	sbci	r23, 0xFF	; 255
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						ShowFunction(TextStringPtr);
    27a4:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    27a8:	0e 94 17 03 	call	0x62e	; 0x62e <ShowFunction>

			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    27ac:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    27b0:	e1 e0       	ldi	r30, 0x01	; 1
    27b2:	ea 0f       	add	r30, r26
    27b4:	b0 e0       	ldi	r27, 0x00	; 0
    27b6:	ab 53       	subi	r26, 0x3B	; 59
    27b8:	bc 4d       	sbci	r27, 0xDC	; 220
    27ba:	83 e9       	ldi	r24, 0x93	; 147
    27bc:	8c 93       	st	X, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	8e 0f       	add	r24, r30
    27c2:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	eb 53       	subi	r30, 0x3B	; 59
    27ca:	fc 4d       	sbci	r31, 0xDC	; 220
    27cc:	e0 82       	st	Z, r14
						for (cntByte=0; cntByte<29; cntByte++)
    27ce:	80 e0       	ldi	r24, 0x00	; 0
    27d0:	17 c0       	rjmp	.+46     	; 0x2800 <__DATA_REGION_LENGTH__+0x800>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] =
    27d2:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    27d6:	91 e0       	ldi	r25, 0x01	; 1
    27d8:	9e 0f       	add	r25, r30
    27da:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    27de:	f0 e0       	ldi	r31, 0x00	; 0
							ConsoleModuleSettings[Module][cntByte]&0x7F;
    27e0:	9d e1       	ldi	r25, 0x1D	; 29
    27e2:	90 9f       	mul	r25, r16
    27e4:	d0 01       	movw	r26, r0
    27e6:	91 9f       	mul	r25, r17
    27e8:	b0 0d       	add	r27, r0
    27ea:	11 24       	eor	r1, r1
    27ec:	a5 5e       	subi	r26, 0xE5	; 229
    27ee:	b7 4c       	sbci	r27, 0xC7	; 199
    27f0:	a8 0f       	add	r26, r24
    27f2:	b1 1d       	adc	r27, r1
    27f4:	9c 91       	ld	r25, X
			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
						for (cntByte=0; cntByte<29; cntByte++)
						{
							SerialBufferOut[SerialBufferOutPtrTop++] =
    27f6:	eb 53       	subi	r30, 0x3B	; 59
    27f8:	fc 4d       	sbci	r31, 0xDC	; 220
    27fa:	9f 77       	andi	r25, 0x7F	; 127
    27fc:	90 83       	st	Z, r25
						ShowFunction(TextStringPtr);

			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
						for (cntByte=0; cntByte<29; cntByte++)
    27fe:	8f 5f       	subi	r24, 0xFF	; 255
    2800:	8d 31       	cpi	r24, 0x1D	; 29
    2802:	38 f3       	brcs	.-50     	; 0x27d2 <__DATA_REGION_LENGTH__+0x7d2>
    2804:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
					}
				}
				break;
				default:
				{
					switch (ModuleType[Module])
    2808:	ce 2c       	mov	r12, r14
    280a:	d1 2c       	mov	r13, r1
    280c:	f6 01       	movw	r30, r12
    280e:	e0 59       	subi	r30, 0x90	; 144
    2810:	fd 4d       	sbci	r31, 0xDD	; 221
    2812:	80 81       	ld	r24, Z
    2814:	81 30       	cpi	r24, 0x01	; 1
    2816:	29 f0       	breq	.+10     	; 0x2822 <__DATA_REGION_LENGTH__+0x822>
    2818:	82 30       	cpi	r24, 0x02	; 2
    281a:	09 f4       	brne	.+2      	; 0x281e <__DATA_REGION_LENGTH__+0x81e>
    281c:	99 c0       	rjmp	.+306    	; 0x2950 <__DATA_REGION_LENGTH__+0x950>
    281e:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
					{
						case TRIPLE:
						{	// Triple
							if (EventOn)
    2822:	01 2b       	or	r16, r17
    2824:	11 f0       	breq	.+4      	; 0x282a <__DATA_REGION_LENGTH__+0x82a>
    2826:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
							{
								if (ConsoleFunctionData[Module]&CUE_FUNCTION)
    282a:	f6 01       	movw	r30, r12
    282c:	e0 56       	subi	r30, 0x60	; 96
    282e:	fd 4d       	sbci	r31, 0xDD	; 221
    2830:	80 81       	ld	r24, Z
    2832:	82 ff       	sbrs	r24, 2
    2834:	45 c0       	rjmp	.+138    	; 0x28c0 <__DATA_REGION_LENGTH__+0x8c0>
								{
									unsigned char cntModule;

									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2836:	00 ea       	ldi	r16, 0xA0	; 160
    2838:	12 e2       	ldi	r17, 0x22	; 34
    283a:	f6 01       	movw	r30, r12
    283c:	e0 56       	subi	r30, 0x60	; 96
    283e:	fd 4d       	sbci	r31, 0xDD	; 221
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2840:	83 7f       	andi	r24, 0xF3	; 243
    2842:	80 83       	st	Z, r24

									CheckStartCondition(Module);
    2844:	8e 2d       	mov	r24, r14
    2846:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>
									//DJ-Control
									DJControl();
    284a:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>

									//Check auto communication
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    284e:	f8 01       	movw	r30, r16
    2850:	80 89       	ldd	r24, Z+16	; 0x10
    2852:	87 7f       	andi	r24, 0xF7	; 247
    2854:	80 8b       	std	Z+16, r24	; 0x10
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2856:	80 e0       	ldi	r24, 0x00	; 0
    2858:	2b c0       	rjmp	.+86     	; 0x28b0 <__DATA_REGION_LENGTH__+0x8b0>
									{
										if (ConsoleFunctionData[cntModule]&CUE_LED)
    285a:	28 2f       	mov	r18, r24
    285c:	30 e0       	ldi	r19, 0x00	; 0
    285e:	f9 01       	movw	r30, r18
    2860:	e0 56       	subi	r30, 0x60	; 96
    2862:	fd 4d       	sbci	r31, 0xDD	; 221
    2864:	90 81       	ld	r25, Z
    2866:	93 ff       	sbrs	r25, 3
    2868:	22 c0       	rjmp	.+68     	; 0x28ae <__DATA_REGION_LENGTH__+0x8ae>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    286a:	f9 01       	movw	r30, r18
    286c:	ee 0f       	add	r30, r30
    286e:	ff 1f       	adc	r31, r31
    2870:	ee 0f       	add	r30, r30
    2872:	ff 1f       	adc	r31, r31
    2874:	ee 0f       	add	r30, r30
    2876:	ff 1f       	adc	r31, r31
    2878:	e5 5f       	subi	r30, 0xF5	; 245
    287a:	f4 4d       	sbci	r31, 0xD4	; 212
    287c:	47 81       	ldd	r20, Z+7	; 0x07
    287e:	44 23       	and	r20, r20
    2880:	b4 f4       	brge	.+44     	; 0x28ae <__DATA_REGION_LENGTH__+0x8ae>
    2882:	4d e1       	ldi	r20, 0x1D	; 29
    2884:	42 9f       	mul	r20, r18
    2886:	f0 01       	movw	r30, r0
    2888:	43 9f       	mul	r20, r19
    288a:	f0 0d       	add	r31, r0
    288c:	11 24       	eor	r1, r1
    288e:	e5 5e       	subi	r30, 0xE5	; 229
    2890:	f7 4c       	sbci	r31, 0xC7	; 199
    2892:	26 85       	ldd	r18, Z+14	; 0x0e
    2894:	22 23       	and	r18, r18
    2896:	59 f0       	breq	.+22     	; 0x28ae <__DATA_REGION_LENGTH__+0x8ae>
    2898:	94 ff       	sbrs	r25, 4
    289a:	09 c0       	rjmp	.+18     	; 0x28ae <__DATA_REGION_LENGTH__+0x8ae>
    289c:	90 91 90 2b 	lds	r25, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    28a0:	99 23       	and	r25, r25
    28a2:	29 f0       	breq	.+10     	; 0x28ae <__DATA_REGION_LENGTH__+0x8ae>
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    28a4:	e0 ea       	ldi	r30, 0xA0	; 160
    28a6:	f2 e2       	ldi	r31, 0x22	; 34
    28a8:	90 89       	ldd	r25, Z+16	; 0x10
    28aa:	98 60       	ori	r25, 0x08	; 8
    28ac:	90 8b       	std	Z+16, r25	; 0x10
									//DJ-Control
									DJControl();

									//Check auto communication
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    28ae:	8f 5f       	subi	r24, 0xFF	; 255
    28b0:	80 31       	cpi	r24, 0x10	; 16
    28b2:	98 f2       	brcs	.-90     	; 0x285a <__DATA_REGION_LENGTH__+0x85a>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
										}
									}
  								CheckTBMic();
    28b4:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
									SendSerialData = 1;
    28b8:	81 e0       	ldi	r24, 0x01	; 1
    28ba:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    28be:	44 c0       	rjmp	.+136    	; 0x2948 <__DATA_REGION_LENGTH__+0x948>
								}
								else
								{
									unsigned char cntModule;

									ConsoleFunctionData[Module] |= CUE_LED;
    28c0:	00 ea       	ldi	r16, 0xA0	; 160
    28c2:	12 e2       	ldi	r17, 0x22	; 34
    28c4:	f6 01       	movw	r30, r12
    28c6:	e0 56       	subi	r30, 0x60	; 96
    28c8:	fd 4d       	sbci	r31, 0xDD	; 221
									ConsoleFunctionData[Module] |= CUE_FUNCTION;
    28ca:	8c 60       	ori	r24, 0x0C	; 12
    28cc:	80 83       	st	Z, r24
									CheckStartCondition(Module);									
    28ce:	8e 2d       	mov	r24, r14
    28d0:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>

									//DJ-Control
									DJControl();
    28d4:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>

									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    28d8:	f8 01       	movw	r30, r16
    28da:	80 89       	ldd	r24, Z+16	; 0x10
    28dc:	87 7f       	andi	r24, 0xF7	; 247
    28de:	80 8b       	std	Z+16, r24	; 0x10
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    28e0:	80 e0       	ldi	r24, 0x00	; 0
    28e2:	2b c0       	rjmp	.+86     	; 0x293a <__DATA_REGION_LENGTH__+0x93a>
									{
										if (ConsoleFunctionData[cntModule]&CUE_LED)
    28e4:	28 2f       	mov	r18, r24
    28e6:	30 e0       	ldi	r19, 0x00	; 0
    28e8:	f9 01       	movw	r30, r18
    28ea:	e0 56       	subi	r30, 0x60	; 96
    28ec:	fd 4d       	sbci	r31, 0xDD	; 221
    28ee:	90 81       	ld	r25, Z
    28f0:	93 ff       	sbrs	r25, 3
    28f2:	22 c0       	rjmp	.+68     	; 0x2938 <__DATA_REGION_LENGTH__+0x938>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    28f4:	f9 01       	movw	r30, r18
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	ee 0f       	add	r30, r30
    2900:	ff 1f       	adc	r31, r31
    2902:	e5 5f       	subi	r30, 0xF5	; 245
    2904:	f4 4d       	sbci	r31, 0xD4	; 212
    2906:	47 81       	ldd	r20, Z+7	; 0x07
    2908:	44 23       	and	r20, r20
    290a:	b4 f4       	brge	.+44     	; 0x2938 <__DATA_REGION_LENGTH__+0x938>
    290c:	4d e1       	ldi	r20, 0x1D	; 29
    290e:	42 9f       	mul	r20, r18
    2910:	f0 01       	movw	r30, r0
    2912:	43 9f       	mul	r20, r19
    2914:	f0 0d       	add	r31, r0
    2916:	11 24       	eor	r1, r1
    2918:	e5 5e       	subi	r30, 0xE5	; 229
    291a:	f7 4c       	sbci	r31, 0xC7	; 199
    291c:	26 85       	ldd	r18, Z+14	; 0x0e
    291e:	22 23       	and	r18, r18
    2920:	59 f0       	breq	.+22     	; 0x2938 <__DATA_REGION_LENGTH__+0x938>
    2922:	94 ff       	sbrs	r25, 4
    2924:	09 c0       	rjmp	.+18     	; 0x2938 <__DATA_REGION_LENGTH__+0x938>
    2926:	90 91 90 2b 	lds	r25, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    292a:	99 23       	and	r25, r25
    292c:	29 f0       	breq	.+10     	; 0x2938 <__DATA_REGION_LENGTH__+0x938>
											{
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    292e:	e0 ea       	ldi	r30, 0xA0	; 160
    2930:	f2 e2       	ldi	r31, 0x22	; 34
    2932:	90 89       	ldd	r25, Z+16	; 0x10
    2934:	98 60       	ori	r25, 0x08	; 8
    2936:	90 8b       	std	Z+16, r25	; 0x10

									//DJ-Control
									DJControl();

									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2938:	8f 5f       	subi	r24, 0xFF	; 255
    293a:	80 31       	cpi	r24, 0x10	; 16
    293c:	98 f2       	brcs	.-90     	; 0x28e4 <__DATA_REGION_LENGTH__+0x8e4>
											{
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
											}
										}
								}
  								CheckTBMic();
    293e:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
									SendSerialData = 1;
    2942:	81 e0       	ldi	r24, 0x01	; 1
    2944:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
								}
								// Cue-Control
								CueControl();
    2948:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
    294c:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
							}
						}
						break;
						case TELCO:
						{	// Telco
							if ((EventOn) && (!(ModuleData[Module][FADERON]&0x80)))
    2950:	01 2b       	or	r16, r17
    2952:	11 f0       	breq	.+4      	; 0x2958 <__DATA_REGION_LENGTH__+0x958>
    2954:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
    2958:	f6 01       	movw	r30, r12
    295a:	ee 0f       	add	r30, r30
    295c:	ff 1f       	adc	r31, r31
    295e:	ee 0f       	add	r30, r30
    2960:	ff 1f       	adc	r31, r31
    2962:	ee 0f       	add	r30, r30
    2964:	ff 1f       	adc	r31, r31
    2966:	e5 5f       	subi	r30, 0xF5	; 245
    2968:	f4 4d       	sbci	r31, 0xD4	; 212
    296a:	81 81       	ldd	r24, Z+1	; 0x01
    296c:	88 23       	and	r24, r24
    296e:	14 f4       	brge	.+4      	; 0x2974 <__DATA_REGION_LENGTH__+0x974>
    2970:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
							{	 // JB
								char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2974:	8e 2d       	mov	r24, r14
    2976:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>

								if (ConsoleFunctionData[Module]&CUE_FUNCTION)
    297a:	f6 01       	movw	r30, r12
    297c:	e0 56       	subi	r30, 0x60	; 96
    297e:	fd 4d       	sbci	r31, 0xDD	; 221
    2980:	90 81       	ld	r25, Z
    2982:	92 ff       	sbrs	r25, 2
    2984:	24 c0       	rjmp	.+72     	; 0x29ce <__DATA_REGION_LENGTH__+0x9ce>
								{
									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2986:	f6 01       	movw	r30, r12
    2988:	e0 56       	subi	r30, 0x60	; 96
    298a:	fd 4d       	sbci	r31, 0xDD	; 221
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    298c:	93 7f       	andi	r25, 0xF3	; 243
    298e:	90 83       	st	Z, r25

									if ((TelcoNr>=0) && (TelcoNr<4))
    2990:	84 30       	cpi	r24, 0x04	; 4
    2992:	b8 f4       	brcc	.+46     	; 0x29c2 <__DATA_REGION_LENGTH__+0x9c2>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2994:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2998:	a1 e0       	ldi	r26, 0x01	; 1
    299a:	ae 0f       	add	r26, r30
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	eb 53       	subi	r30, 0x3B	; 59
    29a0:	fc 4d       	sbci	r31, 0xDC	; 220
    29a2:	92 ec       	ldi	r25, 0xC2	; 194
    29a4:	90 83       	st	Z, r25
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    29a6:	e1 e0       	ldi	r30, 0x01	; 1
    29a8:	ea 0f       	add	r30, r26
    29aa:	b0 e0       	ldi	r27, 0x00	; 0
    29ac:	ab 53       	subi	r26, 0x3B	; 59
    29ae:	bc 4d       	sbci	r27, 0xDC	; 220
    29b0:	8c 93       	st	X, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    29b2:	81 e0       	ldi	r24, 0x01	; 1
    29b4:	8e 0f       	add	r24, r30
    29b6:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    29ba:	f0 e0       	ldi	r31, 0x00	; 0
    29bc:	eb 53       	subi	r30, 0x3B	; 59
    29be:	fc 4d       	sbci	r31, 0xDC	; 220
    29c0:	10 82       	st	Z, r1
									}
									CheckTBMic();
    29c2:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
									SendSerialData = 1;
    29c6:	81 e0       	ldi	r24, 0x01	; 1
    29c8:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    29cc:	59 c0       	rjmp	.+178    	; 0x2a80 <__DATA_REGION_LENGTH__+0xa80>
								}
								else
								{
									ConsoleFunctionData[Module] |= START_FUNCTION;
    29ce:	f6 01       	movw	r30, r12
    29d0:	e0 56       	subi	r30, 0x60	; 96
    29d2:	fd 4d       	sbci	r31, 0xDD	; 221
									ConsoleFunctionData[Module] |= ON_LED;
									ConsoleFunctionData[Module] |= CUE_LED;
									ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    29d4:	9b 62       	ori	r25, 0x2B	; 43
    29d6:	90 83       	st	Z, r25
//									ConsoleFunctionData[Module] |= CUE_FUNCTION;
									cntCueFunction[Module] = DELAY;
    29d8:	f6 01       	movw	r30, r12
    29da:	ed 5e       	subi	r30, 0xED	; 237
    29dc:	fe 4d       	sbci	r31, 0xDE	; 222
    29de:	9a e0       	ldi	r25, 0x0A	; 10
    29e0:	90 83       	st	Z, r25

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
    29e2:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    29e6:	e1 e0       	ldi	r30, 0x01	; 1
    29e8:	ea 0f       	add	r30, r26
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	ab 53       	subi	r26, 0x3B	; 59
    29ee:	bc 4d       	sbci	r27, 0xDC	; 220
    29f0:	92 e8       	ldi	r25, 0x82	; 130
    29f2:	9c 93       	st	X, r25
									SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    29f4:	a1 e0       	ldi	r26, 0x01	; 1
    29f6:	ae 0f       	add	r26, r30
    29f8:	f0 e0       	ldi	r31, 0x00	; 0
    29fa:	eb 53       	subi	r30, 0x3B	; 59
    29fc:	fc 4d       	sbci	r31, 0xDC	; 220
    29fe:	e0 82       	st	Z, r14
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2a00:	e1 e0       	ldi	r30, 0x01	; 1
    2a02:	ea 0f       	add	r30, r26
    2a04:	e0 93 82 22 	sts	0x2282, r30	; 0x802282 <SerialBufferOutPtrTop>
    2a08:	b0 e0       	ldi	r27, 0x00	; 0
    2a0a:	ab 53       	subi	r26, 0x3B	; 59
    2a0c:	bc 4d       	sbci	r27, 0xDC	; 220
    2a0e:	91 e0       	ldi	r25, 0x01	; 1
    2a10:	9c 93       	st	X, r25

									if ((TelcoNr>=0) && (TelcoNr<4))
    2a12:	84 30       	cpi	r24, 0x04	; 4
    2a14:	b0 f4       	brcc	.+44     	; 0x2a42 <__DATA_REGION_LENGTH__+0xa42>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    2a16:	a1 e0       	ldi	r26, 0x01	; 1
    2a18:	ae 0f       	add	r26, r30
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	eb 53       	subi	r30, 0x3B	; 59
    2a1e:	fc 4d       	sbci	r31, 0xDC	; 220
    2a20:	90 ec       	ldi	r25, 0xC0	; 192
    2a22:	90 83       	st	Z, r25
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2a24:	e1 e0       	ldi	r30, 0x01	; 1
    2a26:	ea 0f       	add	r30, r26
    2a28:	b0 e0       	ldi	r27, 0x00	; 0
    2a2a:	ab 53       	subi	r26, 0x3B	; 59
    2a2c:	bc 4d       	sbci	r27, 0xDC	; 220
    2a2e:	8c 93       	st	X, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2a30:	91 e0       	ldi	r25, 0x01	; 1
    2a32:	9e 0f       	add	r25, r30
    2a34:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    2a38:	f0 e0       	ldi	r31, 0x00	; 0
    2a3a:	eb 53       	subi	r30, 0x3B	; 59
    2a3c:	fc 4d       	sbci	r31, 0xDC	; 220
    2a3e:	91 e0       	ldi	r25, 0x01	; 1
    2a40:	90 83       	st	Z, r25
									}

									if ((TelcoNr>=0) && (TelcoNr<4))
    2a42:	84 30       	cpi	r24, 0x04	; 4
    2a44:	c0 f4       	brcc	.+48     	; 0x2a76 <__DATA_REGION_LENGTH__+0xa76>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2a46:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2a4a:	a1 e0       	ldi	r26, 0x01	; 1
    2a4c:	ae 0f       	add	r26, r30
    2a4e:	f0 e0       	ldi	r31, 0x00	; 0
    2a50:	eb 53       	subi	r30, 0x3B	; 59
    2a52:	fc 4d       	sbci	r31, 0xDC	; 220
    2a54:	92 ec       	ldi	r25, 0xC2	; 194
    2a56:	90 83       	st	Z, r25
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2a58:	e1 e0       	ldi	r30, 0x01	; 1
    2a5a:	ea 0f       	add	r30, r26
    2a5c:	b0 e0       	ldi	r27, 0x00	; 0
    2a5e:	ab 53       	subi	r26, 0x3B	; 59
    2a60:	bc 4d       	sbci	r27, 0xDC	; 220
    2a62:	8c 93       	st	X, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2a64:	81 e0       	ldi	r24, 0x01	; 1
    2a66:	8e 0f       	add	r24, r30
    2a68:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2a6c:	f0 e0       	ldi	r31, 0x00	; 0
    2a6e:	eb 53       	subi	r30, 0x3B	; 59
    2a70:	fc 4d       	sbci	r31, 0xDC	; 220
    2a72:	81 e0       	ldi	r24, 0x01	; 1
    2a74:	80 83       	st	Z, r24
									}
									CheckTBMic();
    2a76:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
									SendSerialData = 1;
    2a7a:	81 e0       	ldi	r24, 0x01	; 1
    2a7c:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
								}
								// Cue-Control
								CueControl();
    2a80:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
    2a84:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case ON:
		{
			switch (ModuleType[Module])
    2a88:	ce 2c       	mov	r12, r14
    2a8a:	d1 2c       	mov	r13, r1
    2a8c:	f6 01       	movw	r30, r12
    2a8e:	e0 59       	subi	r30, 0x90	; 144
    2a90:	fd 4d       	sbci	r31, 0xDD	; 221
    2a92:	80 81       	ld	r24, Z
    2a94:	81 30       	cpi	r24, 0x01	; 1
    2a96:	29 f0       	breq	.+10     	; 0x2aa2 <__DATA_REGION_LENGTH__+0xaa2>
    2a98:	82 30       	cpi	r24, 0x02	; 2
    2a9a:	09 f4       	brne	.+2      	; 0x2a9e <__DATA_REGION_LENGTH__+0xa9e>
    2a9c:	c4 c0       	rjmp	.+392    	; 0x2c26 <__DATA_REGION_LENGTH__+0xc26>
    2a9e:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			{
				case TRIPLE:
				{	// Triple
					if (ConsoleModuleSettings[Module][SWITCHSTART])
    2aa2:	8d e1       	ldi	r24, 0x1D	; 29
    2aa4:	8c 9d       	mul	r24, r12
    2aa6:	f0 01       	movw	r30, r0
    2aa8:	8d 9d       	mul	r24, r13
    2aaa:	f0 0d       	add	r31, r0
    2aac:	11 24       	eor	r1, r1
    2aae:	e5 5e       	subi	r30, 0xE5	; 229
    2ab0:	f7 4c       	sbci	r31, 0xC7	; 199
    2ab2:	84 8d       	ldd	r24, Z+28	; 0x1c
    2ab4:	88 23       	and	r24, r24
    2ab6:	59 f1       	breq	.+86     	; 0x2b0e <__DATA_REGION_LENGTH__+0xb0e>
					{
						ConsoleFunctionData[Module] |= ON_LED;
    2ab8:	f6 01       	movw	r30, r12
    2aba:	e0 56       	subi	r30, 0x60	; 96
    2abc:	fd 4d       	sbci	r31, 0xDD	; 221
    2abe:	80 81       	ld	r24, Z
						ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    2ac0:	81 62       	ori	r24, 0x21	; 33
						ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    2ac2:	8f 7e       	andi	r24, 0xEF	; 239
    2ac4:	80 83       	st	Z, r24

						if (EventOn)
    2ac6:	01 2b       	or	r16, r17
    2ac8:	51 f4       	brne	.+20     	; 0x2ade <__DATA_REGION_LENGTH__+0xade>
						{
							StartControl(Module,1);
    2aca:	61 e0       	ldi	r22, 0x01	; 1
    2acc:	8e 2d       	mov	r24, r14
    2ace:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
							StartActive[Module] = 1;
    2ad2:	f6 01       	movw	r30, r12
    2ad4:	ec 56       	subi	r30, 0x6C	; 108
    2ad6:	f4 4d       	sbci	r31, 0xD4	; 212
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	80 83       	st	Z, r24
    2adc:	13 c0       	rjmp	.+38     	; 0x2b04 <__DATA_REGION_LENGTH__+0xb04>
						}
						else
						{
							if (!ConsoleModuleSettings[Module][STARTPULS])
    2ade:	8d e1       	ldi	r24, 0x1D	; 29
    2ae0:	8c 9d       	mul	r24, r12
    2ae2:	f0 01       	movw	r30, r0
    2ae4:	8d 9d       	mul	r24, r13
    2ae6:	f0 0d       	add	r31, r0
    2ae8:	11 24       	eor	r1, r1
    2aea:	e5 5e       	subi	r30, 0xE5	; 229
    2aec:	f7 4c       	sbci	r31, 0xC7	; 199
    2aee:	81 85       	ldd	r24, Z+9	; 0x09
    2af0:	81 11       	cpse	r24, r1
    2af2:	08 c0       	rjmp	.+16     	; 0x2b04 <__DATA_REGION_LENGTH__+0xb04>
							{
								StartControl(Module,0);
    2af4:	60 e0       	ldi	r22, 0x00	; 0
    2af6:	8e 2d       	mov	r24, r14
    2af8:	0e 94 fe 05 	call	0xbfc	; 0xbfc <StartControl>
								StartActive[Module] = 0;
    2afc:	f6 01       	movw	r30, r12
    2afe:	ec 56       	subi	r30, 0x6C	; 108
    2b00:	f4 4d       	sbci	r31, 0xD4	; 212
    2b02:	10 82       	st	Z, r1
							}
						}
						SendSerialData = 1;
    2b04:	81 e0       	ldi	r24, 0x01	; 1
    2b06:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2b0a:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
					}
					else
					{
						if (EventOn)
    2b0e:	01 2b       	or	r16, r17
    2b10:	11 f0       	breq	.+4      	; 0x2b16 <__DATA_REGION_LENGTH__+0xb16>
    2b12:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						{
							if (ConsoleFunctionData[Module]&ON_LED)
    2b16:	f6 01       	movw	r30, r12
    2b18:	e0 56       	subi	r30, 0x60	; 96
    2b1a:	fd 4d       	sbci	r31, 0xDD	; 221
    2b1c:	80 81       	ld	r24, Z
    2b1e:	85 ff       	sbrs	r24, 5
    2b20:	27 c0       	rjmp	.+78     	; 0x2b70 <__DATA_REGION_LENGTH__+0xb70>
							{
								ConsoleFunctionData[Module] &= ON_LED^0xFF;
    2b22:	8f 01       	movw	r16, r30
								ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
    2b24:	8e 7d       	andi	r24, 0xDE	; 222
    2b26:	80 83       	st	Z, r24
	
								CheckStartCondition(Module);
    2b28:	8e 2d       	mov	r24, r14
    2b2a:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>

								ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    2b2e:	f8 01       	movw	r30, r16
    2b30:	80 81       	ld	r24, Z
    2b32:	80 61       	ori	r24, 0x10	; 16
    2b34:	80 83       	st	Z, r24
				
								if ((ModuleData[Module][FADERON]&0x80))
    2b36:	f6 01       	movw	r30, r12
    2b38:	ee 0f       	add	r30, r30
    2b3a:	ff 1f       	adc	r31, r31
    2b3c:	ee 0f       	add	r30, r30
    2b3e:	ff 1f       	adc	r31, r31
    2b40:	ee 0f       	add	r30, r30
    2b42:	ff 1f       	adc	r31, r31
    2b44:	e5 5f       	subi	r30, 0xF5	; 245
    2b46:	f4 4d       	sbci	r31, 0xD4	; 212
    2b48:	81 81       	ldd	r24, Z+1	; 0x01
    2b4a:	88 23       	and	r24, r24
    2b4c:	64 f4       	brge	.+24     	; 0x2b66 <__DATA_REGION_LENGTH__+0xb66>
								{	 // !JB
									CheckStartCondition(Module);
    2b4e:	8e 2d       	mov	r24, r14
    2b50:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>

									//DJ-Control
									DJControl();
    2b54:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
			
									//Studio-Mic-Control
									StudioMicControl();			
    2b58:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>

									//Timer-Control
									TimerControl(Module);
    2b5c:	8e 2d       	mov	r24, r14
    2b5e:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
				
									//OnAir Control
									OnAirControl();
    2b62:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>
								}
								SendSerialData = 1;
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2b6c:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
							}
							else
							{
								ConsoleFunctionData[Module] |= ON_LED;
    2b70:	f6 01       	movw	r30, r12
    2b72:	e0 56       	subi	r30, 0x60	; 96
    2b74:	fd 4d       	sbci	r31, 0xDD	; 221
    2b76:	80 62       	ori	r24, 0x20	; 32
    2b78:	80 83       	st	Z, r24

								CheckStartCondition(Module);
    2b7a:	8e 2d       	mov	r24, r14
    2b7c:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>

								if ((ModuleData[Module][FADERON]&0x80))
    2b80:	f6 01       	movw	r30, r12
    2b82:	ee 0f       	add	r30, r30
    2b84:	ff 1f       	adc	r31, r31
    2b86:	ee 0f       	add	r30, r30
    2b88:	ff 1f       	adc	r31, r31
    2b8a:	ee 0f       	add	r30, r30
    2b8c:	ff 1f       	adc	r31, r31
    2b8e:	e5 5f       	subi	r30, 0xF5	; 245
    2b90:	f4 4d       	sbci	r31, 0xD4	; 212
    2b92:	81 81       	ldd	r24, Z+1	; 0x01
    2b94:	88 23       	and	r24, r24
    2b96:	0c f0       	brlt	.+2      	; 0x2b9a <__DATA_REGION_LENGTH__+0xb9a>
    2b98:	41 c0       	rjmp	.+130    	; 0x2c1c <__DATA_REGION_LENGTH__+0xc1c>
								{	 // !JB
									ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    2b9a:	86 01       	movw	r16, r12
    2b9c:	00 56       	subi	r16, 0x60	; 96
    2b9e:	1d 4d       	sbci	r17, 0xDD	; 221
    2ba0:	f8 01       	movw	r30, r16
    2ba2:	80 81       	ld	r24, Z
    2ba4:	81 60       	ori	r24, 0x01	; 1
    2ba6:	80 83       	st	Z, r24

									CheckStartCondition(Module);
    2ba8:	8e 2d       	mov	r24, r14
    2baa:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>

									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2bae:	f8 01       	movw	r30, r16
    2bb0:	80 81       	ld	r24, Z
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2bb2:	83 7f       	andi	r24, 0xF3	; 243
    2bb4:	80 83       	st	Z, r24
								
									//Cue-Control
									if (ConsoleMasterSettings[AUTOCUERESET])
    2bb6:	90 91 8e 2b 	lds	r25, 0x2B8E	; 0x802b8e <ConsoleMasterSettings>
    2bba:	99 23       	and	r25, r25
    2bbc:	d9 f0       	breq	.+54     	; 0x2bf4 <__DATA_REGION_LENGTH__+0xbf4>
									{
										if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2bbe:	f6 01       	movw	r30, r12
    2bc0:	ee 0f       	add	r30, r30
    2bc2:	ff 1f       	adc	r31, r31
    2bc4:	ee 0f       	add	r30, r30
    2bc6:	ff 1f       	adc	r31, r31
    2bc8:	ee 0f       	add	r30, r30
    2bca:	ff 1f       	adc	r31, r31
    2bcc:	e5 5f       	subi	r30, 0xF5	; 245
    2bce:	f4 4d       	sbci	r31, 0xD4	; 212
    2bd0:	91 81       	ldd	r25, Z+1	; 0x01
    2bd2:	99 23       	and	r25, r25
    2bd4:	7c f4       	brge	.+30     	; 0x2bf4 <__DATA_REGION_LENGTH__+0xbf4>
    2bd6:	85 fd       	sbrc	r24, 5
    2bd8:	0a c0       	rjmp	.+20     	; 0x2bee <__DATA_REGION_LENGTH__+0xbee>
    2bda:	0c c0       	rjmp	.+24     	; 0x2bf4 <__DATA_REGION_LENGTH__+0xbf4>
										{	 // !JB
											unsigned char cntModule;
											for (cntModule=0; cntModule<NROFMODULES; cntModule++)
											{
												ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    2bdc:	e8 2f       	mov	r30, r24
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	e0 56       	subi	r30, 0x60	; 96
    2be2:	fd 4d       	sbci	r31, 0xDD	; 221
    2be4:	90 81       	ld	r25, Z
												ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    2be6:	93 7f       	andi	r25, 0xF3	; 243
    2be8:	90 83       	st	Z, r25
									if (ConsoleMasterSettings[AUTOCUERESET])
									{
										if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
										{	 // !JB
											unsigned char cntModule;
											for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2bea:	8f 5f       	subi	r24, 0xFF	; 255
    2bec:	01 c0       	rjmp	.+2      	; 0x2bf0 <__DATA_REGION_LENGTH__+0xbf0>
    2bee:	80 e0       	ldi	r24, 0x00	; 0
    2bf0:	80 31       	cpi	r24, 0x10	; 16
    2bf2:	a0 f3       	brcs	.-24     	; 0x2bdc <__DATA_REGION_LENGTH__+0xbdc>
												ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
												ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
											}
										}
									}
									CueControl();
    2bf4:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
			
									//Timer-Control
									TimerControl(Module);
    2bf8:	8e 2d       	mov	r24, r14
    2bfa:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
											
									//OnAirControl
									OnAirControl();
    2bfe:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>

									//DJ-Control
									DJControl();
    2c02:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
			
									//Studio-Mic-Control
									StudioMicControl();
    2c06:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>

									CheckStartCondition(Module);
    2c0a:	8e 2d       	mov	r24, r14
    2c0c:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>
														
									ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;					
    2c10:	f6 01       	movw	r30, r12
    2c12:	e0 56       	subi	r30, 0x60	; 96
    2c14:	fd 4d       	sbci	r31, 0xDD	; 221
    2c16:	80 81       	ld	r24, Z
    2c18:	8f 7e       	andi	r24, 0xEF	; 239
    2c1a:	80 83       	st	Z, r24
								}
								SendSerialData = 1;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2c22:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
					}
				}
				break;
				case TELCO:
				{ //Telco
					if (EventOn)
    2c26:	01 2b       	or	r16, r17
    2c28:	11 f0       	breq	.+4      	; 0x2c2e <__DATA_REGION_LENGTH__+0xc2e>
    2c2a:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
					{
						char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2c2e:	8e 2d       	mov	r24, r14
    2c30:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
    2c34:	18 2f       	mov	r17, r24

						if (ConsoleFunctionData[Module]&ON_LED)
    2c36:	f6 01       	movw	r30, r12
    2c38:	e0 56       	subi	r30, 0x60	; 96
    2c3a:	fd 4d       	sbci	r31, 0xDD	; 221
    2c3c:	80 81       	ld	r24, Z
    2c3e:	85 ff       	sbrs	r24, 5
    2c40:	86 c0       	rjmp	.+268    	; 0x2d4e <__DATA_REGION_LENGTH__+0xd4e>
						{
							char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2c42:	8e 2d       	mov	r24, r14
    2c44:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
    2c48:	18 2f       	mov	r17, r24
							if ((TelcoNr>=0) && (TelcoNr<4))
    2c4a:	84 30       	cpi	r24, 0x04	; 4
    2c4c:	50 f5       	brcc	.+84     	; 0x2ca2 <__DATA_REGION_LENGTH__+0xca2>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2c4e:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2c52:	e1 e0       	ldi	r30, 0x01	; 1
    2c54:	ea 0f       	add	r30, r26
    2c56:	b0 e0       	ldi	r27, 0x00	; 0
    2c58:	ab 53       	subi	r26, 0x3B	; 59
    2c5a:	bc 4d       	sbci	r27, 0xDC	; 220
    2c5c:	82 ec       	ldi	r24, 0xC2	; 194
    2c5e:	8c 93       	st	X, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2c60:	a1 e0       	ldi	r26, 0x01	; 1
    2c62:	ae 0f       	add	r26, r30
    2c64:	f0 e0       	ldi	r31, 0x00	; 0
    2c66:	eb 53       	subi	r30, 0x3B	; 59
    2c68:	fc 4d       	sbci	r31, 0xDC	; 220
    2c6a:	10 83       	st	Z, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2c6c:	e1 e0       	ldi	r30, 0x01	; 1
    2c6e:	ea 0f       	add	r30, r26
    2c70:	b0 e0       	ldi	r27, 0x00	; 0
    2c72:	ab 53       	subi	r26, 0x3B	; 59
    2c74:	bc 4d       	sbci	r27, 0xDC	; 220
    2c76:	1c 92       	st	X, r1

								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    2c78:	a1 e0       	ldi	r26, 0x01	; 1
    2c7a:	ae 0f       	add	r26, r30
    2c7c:	f0 e0       	ldi	r31, 0x00	; 0
    2c7e:	eb 53       	subi	r30, 0x3B	; 59
    2c80:	fc 4d       	sbci	r31, 0xDC	; 220
    2c82:	83 ec       	ldi	r24, 0xC3	; 195
    2c84:	80 83       	st	Z, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2c86:	e1 e0       	ldi	r30, 0x01	; 1
    2c88:	ea 0f       	add	r30, r26
    2c8a:	b0 e0       	ldi	r27, 0x00	; 0
    2c8c:	ab 53       	subi	r26, 0x3B	; 59
    2c8e:	bc 4d       	sbci	r27, 0xDC	; 220
    2c90:	1c 93       	st	X, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2c92:	81 e0       	ldi	r24, 0x01	; 1
    2c94:	8e 0f       	add	r24, r30
    2c96:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2c9a:	f0 e0       	ldi	r31, 0x00	; 0
    2c9c:	eb 53       	subi	r30, 0x3B	; 59
    2c9e:	fc 4d       	sbci	r31, 0xDC	; 220
    2ca0:	10 82       	st	Z, r1
							}

							ConsoleFunctionData[Module] &= ON_LED^0xFF;
    2ca2:	f6 01       	movw	r30, r12
    2ca4:	e0 56       	subi	r30, 0x60	; 96
    2ca6:	fd 4d       	sbci	r31, 0xDD	; 221
    2ca8:	80 81       	ld	r24, Z
    2caa:	8f 7d       	andi	r24, 0xDF	; 223
							ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    2cac:	80 61       	ori	r24, 0x10	; 16
							ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2cae:	82 7f       	andi	r24, 0xF2	; 242
    2cb0:	80 83       	st	Z, r24
//							ConsoleFunctionData[Module] &= START_FUNCTION^0xFF;			
							cntStartFunction[Module] = DELAY;
    2cb2:	f6 01       	movw	r30, r12
    2cb4:	ee 54       	subi	r30, 0x4E	; 78
    2cb6:	fd 4d       	sbci	r31, 0xDD	; 221
    2cb8:	8a e0       	ldi	r24, 0x0A	; 10
    2cba:	80 83       	st	Z, r24
				
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_STOP;
    2cbc:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2cc0:	a1 e0       	ldi	r26, 0x01	; 1
    2cc2:	ae 0f       	add	r26, r30
    2cc4:	f0 e0       	ldi	r31, 0x00	; 0
    2cc6:	eb 53       	subi	r30, 0x3B	; 59
    2cc8:	fc 4d       	sbci	r31, 0xDC	; 220
    2cca:	83 e8       	ldi	r24, 0x83	; 131
    2ccc:	80 83       	st	Z, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    2cce:	e1 e0       	ldi	r30, 0x01	; 1
    2cd0:	ea 0f       	add	r30, r26
    2cd2:	b0 e0       	ldi	r27, 0x00	; 0
    2cd4:	ab 53       	subi	r26, 0x3B	; 59
    2cd6:	bc 4d       	sbci	r27, 0xDC	; 220
    2cd8:	ec 92       	st	X, r14
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2cda:	81 e0       	ldi	r24, 0x01	; 1
    2cdc:	8e 0f       	add	r24, r30
    2cde:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2ce2:	f0 e0       	ldi	r31, 0x00	; 0
    2ce4:	eb 53       	subi	r30, 0x3B	; 59
    2ce6:	fc 4d       	sbci	r31, 0xDC	; 220
    2ce8:	81 e0       	ldi	r24, 0x01	; 1
    2cea:	80 83       	st	Z, r24

							CueControl();
    2cec:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>

							if ((ModuleData[Module][FADERON]&0x80))
    2cf0:	f6 01       	movw	r30, r12
    2cf2:	ee 0f       	add	r30, r30
    2cf4:	ff 1f       	adc	r31, r31
    2cf6:	ee 0f       	add	r30, r30
    2cf8:	ff 1f       	adc	r31, r31
    2cfa:	ee 0f       	add	r30, r30
    2cfc:	ff 1f       	adc	r31, r31
    2cfe:	e5 5f       	subi	r30, 0xF5	; 245
    2d00:	f4 4d       	sbci	r31, 0xD4	; 212
    2d02:	81 81       	ldd	r24, Z+1	; 0x01
    2d04:	88 23       	and	r24, r24
    2d06:	2c f4       	brge	.+10     	; 0x2d12 <__DATA_REGION_LENGTH__+0xd12>
							{	 // !JB
								//Timer-Control
								TimerControl(Module);
    2d08:	8e 2d       	mov	r24, r14
    2d0a:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
				
								//OnAir Control
								OnAirControl();
    2d0e:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>
							}

							if ((TelcoNr>=0) && (TelcoNr<4))
    2d12:	14 30       	cpi	r17, 0x04	; 4
    2d14:	b8 f4       	brcc	.+46     	; 0x2d44 <__DATA_REGION_LENGTH__+0xd44>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    2d16:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2d1a:	a1 e0       	ldi	r26, 0x01	; 1
    2d1c:	ae 0f       	add	r26, r30
    2d1e:	f0 e0       	ldi	r31, 0x00	; 0
    2d20:	eb 53       	subi	r30, 0x3B	; 59
    2d22:	fc 4d       	sbci	r31, 0xDC	; 220
    2d24:	80 ec       	ldi	r24, 0xC0	; 192
    2d26:	80 83       	st	Z, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2d28:	e1 e0       	ldi	r30, 0x01	; 1
    2d2a:	ea 0f       	add	r30, r26
    2d2c:	b0 e0       	ldi	r27, 0x00	; 0
    2d2e:	ab 53       	subi	r26, 0x3B	; 59
    2d30:	bc 4d       	sbci	r27, 0xDC	; 220
    2d32:	1c 93       	st	X, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	8e 0f       	add	r24, r30
    2d38:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	eb 53       	subi	r30, 0x3B	; 59
    2d40:	fc 4d       	sbci	r31, 0xDC	; 220
    2d42:	10 82       	st	Z, r1
							}
							SendSerialData = 1;
    2d44:	81 e0       	ldi	r24, 0x01	; 1
    2d46:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2d4a:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
						}
						else
						{
							ConsoleFunctionData[Module] |= ON_LED;
    2d4e:	f6 01       	movw	r30, r12
    2d50:	e0 56       	subi	r30, 0x60	; 96
    2d52:	fd 4d       	sbci	r31, 0xDD	; 221
							ConsoleFunctionData[Module] |= START_FUNCTION;			
							ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    2d54:	83 62       	ori	r24, 0x23	; 35
    2d56:	80 83       	st	Z, r24
				
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
    2d58:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2d5c:	a1 e0       	ldi	r26, 0x01	; 1
    2d5e:	ae 0f       	add	r26, r30
    2d60:	f0 e0       	ldi	r31, 0x00	; 0
    2d62:	eb 53       	subi	r30, 0x3B	; 59
    2d64:	fc 4d       	sbci	r31, 0xDC	; 220
    2d66:	82 e8       	ldi	r24, 0x82	; 130
    2d68:	80 83       	st	Z, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    2d6a:	e1 e0       	ldi	r30, 0x01	; 1
    2d6c:	ea 0f       	add	r30, r26
    2d6e:	b0 e0       	ldi	r27, 0x00	; 0
    2d70:	ab 53       	subi	r26, 0x3B	; 59
    2d72:	bc 4d       	sbci	r27, 0xDC	; 220
    2d74:	ec 92       	st	X, r14
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2d76:	81 e0       	ldi	r24, 0x01	; 1
    2d78:	8e 0f       	add	r24, r30
    2d7a:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2d7e:	f0 e0       	ldi	r31, 0x00	; 0
    2d80:	eb 53       	subi	r30, 0x3B	; 59
    2d82:	fc 4d       	sbci	r31, 0xDC	; 220
    2d84:	81 e0       	ldi	r24, 0x01	; 1
    2d86:	80 83       	st	Z, r24
							
							if ((ModuleData[Module][FADERON]&0x80))
    2d88:	f6 01       	movw	r30, r12
    2d8a:	ee 0f       	add	r30, r30
    2d8c:	ff 1f       	adc	r31, r31
    2d8e:	ee 0f       	add	r30, r30
    2d90:	ff 1f       	adc	r31, r31
    2d92:	ee 0f       	add	r30, r30
    2d94:	ff 1f       	adc	r31, r31
    2d96:	e5 5f       	subi	r30, 0xF5	; 245
    2d98:	f4 4d       	sbci	r31, 0xD4	; 212
    2d9a:	81 81       	ldd	r24, Z+1	; 0x01
    2d9c:	88 23       	and	r24, r24
    2d9e:	0c f0       	brlt	.+2      	; 0x2da2 <__DATA_REGION_LENGTH__+0xda2>
    2da0:	69 c0       	rjmp	.+210    	; 0x2e74 <__DATA_REGION_LENGTH__+0xe74>
							{	// !JB
								char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2da2:	8e 2d       	mov	r24, r14
    2da4:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
								if ((TelcoNr>=0) && (TelcoNr<4))
    2da8:	84 30       	cpi	r24, 0x04	; 4
    2daa:	b8 f4       	brcc	.+46     	; 0x2dda <__DATA_REGION_LENGTH__+0xdda>
								{
									SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2dac:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2db0:	a1 e0       	ldi	r26, 0x01	; 1
    2db2:	ae 0f       	add	r26, r30
    2db4:	f0 e0       	ldi	r31, 0x00	; 0
    2db6:	eb 53       	subi	r30, 0x3B	; 59
    2db8:	fc 4d       	sbci	r31, 0xDC	; 220
    2dba:	92 ec       	ldi	r25, 0xC2	; 194
    2dbc:	90 83       	st	Z, r25
									SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2dbe:	e1 e0       	ldi	r30, 0x01	; 1
    2dc0:	ea 0f       	add	r30, r26
    2dc2:	b0 e0       	ldi	r27, 0x00	; 0
    2dc4:	ab 53       	subi	r26, 0x3B	; 59
    2dc6:	bc 4d       	sbci	r27, 0xDC	; 220
    2dc8:	8c 93       	st	X, r24
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	8e 0f       	add	r24, r30
    2dce:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2dd2:	f0 e0       	ldi	r31, 0x00	; 0
    2dd4:	eb 53       	subi	r30, 0x3B	; 59
    2dd6:	fc 4d       	sbci	r31, 0xDC	; 220
    2dd8:	10 82       	st	Z, r1
								}

								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2dda:	f6 01       	movw	r30, r12
    2ddc:	e0 56       	subi	r30, 0x60	; 96
    2dde:	fd 4d       	sbci	r31, 0xDD	; 221
    2de0:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2de2:	83 7f       	andi	r24, 0xF3	; 243
    2de4:	80 83       	st	Z, r24
//								ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
								cntMuteFunction[Module] = DELAY;
    2de6:	9a e0       	ldi	r25, 0x0A	; 10
    2de8:	f6 01       	movw	r30, r12
    2dea:	ef 56       	subi	r30, 0x6F	; 111
    2dec:	f2 4d       	sbci	r31, 0xD2	; 210
    2dee:	90 83       	st	Z, r25

								//Cue-Control
								if (ConsoleMasterSettings[AUTOCUERESET])
    2df0:	90 91 8e 2b 	lds	r25, 0x2B8E	; 0x802b8e <ConsoleMasterSettings>
    2df4:	99 23       	and	r25, r25
    2df6:	b9 f1       	breq	.+110    	; 0x2e66 <__DATA_REGION_LENGTH__+0xe66>
								{
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2df8:	f6 01       	movw	r30, r12
    2dfa:	ee 0f       	add	r30, r30
    2dfc:	ff 1f       	adc	r31, r31
    2dfe:	ee 0f       	add	r30, r30
    2e00:	ff 1f       	adc	r31, r31
    2e02:	ee 0f       	add	r30, r30
    2e04:	ff 1f       	adc	r31, r31
    2e06:	e5 5f       	subi	r30, 0xF5	; 245
    2e08:	f4 4d       	sbci	r31, 0xD4	; 212
    2e0a:	91 81       	ldd	r25, Z+1	; 0x01
    2e0c:	99 23       	and	r25, r25
    2e0e:	5c f5       	brge	.+86     	; 0x2e66 <__DATA_REGION_LENGTH__+0xe66>
    2e10:	85 fd       	sbrc	r24, 5
    2e12:	26 c0       	rjmp	.+76     	; 0x2e60 <__DATA_REGION_LENGTH__+0xe60>
    2e14:	28 c0       	rjmp	.+80     	; 0x2e66 <__DATA_REGION_LENGTH__+0xe66>
									{		// !JB
										unsigned char cntModule;
										for (cntModule=0; cntModule<NROFMODULES; cntModule++)
										{
											char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    2e16:	80 2f       	mov	r24, r16
    2e18:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
											if ((TelcoNr>=0) && (TelcoNr<4))
    2e1c:	84 30       	cpi	r24, 0x04	; 4
    2e1e:	b8 f4       	brcc	.+46     	; 0x2e4e <__DATA_REGION_LENGTH__+0xe4e>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2e20:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2e24:	a1 e0       	ldi	r26, 0x01	; 1
    2e26:	ae 0f       	add	r26, r30
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	eb 53       	subi	r30, 0x3B	; 59
    2e2c:	fc 4d       	sbci	r31, 0xDC	; 220
    2e2e:	92 ec       	ldi	r25, 0xC2	; 194
    2e30:	90 83       	st	Z, r25
												SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2e32:	e1 e0       	ldi	r30, 0x01	; 1
    2e34:	ea 0f       	add	r30, r26
    2e36:	b0 e0       	ldi	r27, 0x00	; 0
    2e38:	ab 53       	subi	r26, 0x3B	; 59
    2e3a:	bc 4d       	sbci	r27, 0xDC	; 220
    2e3c:	8c 93       	st	X, r24
												SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	8e 0f       	add	r24, r30
    2e42:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2e46:	f0 e0       	ldi	r31, 0x00	; 0
    2e48:	eb 53       	subi	r30, 0x3B	; 59
    2e4a:	fc 4d       	sbci	r31, 0xDC	; 220
    2e4c:	10 82       	st	Z, r1
											}

											ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    2e4e:	e0 2f       	mov	r30, r16
    2e50:	f0 e0       	ldi	r31, 0x00	; 0
    2e52:	e0 56       	subi	r30, 0x60	; 96
    2e54:	fd 4d       	sbci	r31, 0xDD	; 221
    2e56:	80 81       	ld	r24, Z
											ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    2e58:	83 7f       	andi	r24, 0xF3	; 243
    2e5a:	80 83       	st	Z, r24
								if (ConsoleMasterSettings[AUTOCUERESET])
								{
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
									{		// !JB
										unsigned char cntModule;
										for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2e5c:	0f 5f       	subi	r16, 0xFF	; 255
    2e5e:	01 c0       	rjmp	.+2      	; 0x2e62 <__DATA_REGION_LENGTH__+0xe62>
    2e60:	00 e0       	ldi	r16, 0x00	; 0
    2e62:	00 31       	cpi	r16, 0x10	; 16
    2e64:	c0 f2       	brcs	.-80     	; 0x2e16 <__DATA_REGION_LENGTH__+0xe16>
											ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
											ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
										}
									}
								}
								CueControl();
    2e66:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
			
								//Timer-Control
								TimerControl(Module);
    2e6a:	8e 2d       	mov	r24, r14
    2e6c:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
			
								//OnAirControl
								OnAirControl();
    2e70:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>
							}

							if ((TelcoNr>=0) && (TelcoNr<4))
    2e74:	14 30       	cpi	r17, 0x04	; 4
    2e76:	c0 f4       	brcc	.+48     	; 0x2ea8 <__DATA_REGION_LENGTH__+0xea8>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    2e78:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2e7c:	a1 e0       	ldi	r26, 0x01	; 1
    2e7e:	ae 0f       	add	r26, r30
    2e80:	f0 e0       	ldi	r31, 0x00	; 0
    2e82:	eb 53       	subi	r30, 0x3B	; 59
    2e84:	fc 4d       	sbci	r31, 0xDC	; 220
    2e86:	80 ec       	ldi	r24, 0xC0	; 192
    2e88:	80 83       	st	Z, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2e8a:	e1 e0       	ldi	r30, 0x01	; 1
    2e8c:	ea 0f       	add	r30, r26
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	ab 53       	subi	r26, 0x3B	; 59
    2e92:	bc 4d       	sbci	r27, 0xDC	; 220
    2e94:	1c 93       	st	X, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2e96:	81 e0       	ldi	r24, 0x01	; 1
    2e98:	8e 0f       	add	r24, r30
    2e9a:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2e9e:	f0 e0       	ldi	r31, 0x00	; 0
    2ea0:	eb 53       	subi	r30, 0x3B	; 59
    2ea2:	fc 4d       	sbci	r31, 0xDC	; 220
    2ea4:	81 e0       	ldi	r24, 0x01	; 1
    2ea6:	80 83       	st	Z, r24
							}
							SendSerialData = 1;
    2ea8:	81 e0       	ldi	r24, 0x01	; 1
    2eaa:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    2eae:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case LINEB:
		{
			CheckStartCondition(Module);
    2eb2:	8e 2d       	mov	r24, r14
    2eb4:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>
			TimeAndDate.Hours = 0;
    2eb8:	e6 e1       	ldi	r30, 0x16	; 22
    2eba:	fa e3       	ldi	r31, 0x3A	; 58
    2ebc:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
    2ebe:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
    2ec0:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
    2ec2:	10 82       	st	Z, r1
			TimerControl(Module);
    2ec4:	8e 2d       	mov	r24, r14
    2ec6:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
			DJControl();
    2eca:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
			StudioMicControl();
    2ece:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>
			OnAirControl();
    2ed2:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>
		}
		break;
    2ed6:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
		case MIC_RING:
		{
			switch (ModuleType[Module])
    2eda:	ce 2c       	mov	r12, r14
    2edc:	d1 2c       	mov	r13, r1
    2ede:	f6 01       	movw	r30, r12
    2ee0:	e0 59       	subi	r30, 0x90	; 144
    2ee2:	fd 4d       	sbci	r31, 0xDD	; 221
    2ee4:	80 81       	ld	r24, Z
    2ee6:	81 30       	cpi	r24, 0x01	; 1
    2ee8:	21 f0       	breq	.+8      	; 0x2ef2 <__DATA_REGION_LENGTH__+0xef2>
    2eea:	82 30       	cpi	r24, 0x02	; 2
    2eec:	61 f1       	breq	.+88     	; 0x2f46 <__DATA_REGION_LENGTH__+0xf46>
    2eee:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			{
				case TRIPLE:
				{
					if (!(ModuleData[Module][MIC_RING]&0x80))
    2ef2:	f6 01       	movw	r30, r12
    2ef4:	ee 0f       	add	r30, r30
    2ef6:	ff 1f       	adc	r31, r31
    2ef8:	ee 0f       	add	r30, r30
    2efa:	ff 1f       	adc	r31, r31
    2efc:	ee 0f       	add	r30, r30
    2efe:	ff 1f       	adc	r31, r31
    2f00:	e5 5f       	subi	r30, 0xF5	; 245
    2f02:	f4 4d       	sbci	r31, 0xD4	; 212
    2f04:	87 81       	ldd	r24, Z+7	; 0x07
    2f06:	88 23       	and	r24, r24
    2f08:	54 f0       	brlt	.+20     	; 0x2f1e <__DATA_REGION_LENGTH__+0xf1e>
					{
						ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    2f0a:	e0 ea       	ldi	r30, 0xA0	; 160
    2f0c:	f2 e2       	ldi	r31, 0x22	; 34
    2f0e:	80 89       	ldd	r24, Z+16	; 0x10
    2f10:	87 7f       	andi	r24, 0xF7	; 247
    2f12:	80 8b       	std	Z+16, r24	; 0x10
						CheckTBMic();
    2f14:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
						SendSerialData = 1;
    2f18:	81 e0       	ldi	r24, 0x01	; 1
    2f1a:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
					}
		
					CheckStartCondition(Module);
    2f1e:	8e 2d       	mov	r24, r14
    2f20:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>
					TimeAndDate.Hours = 0;
    2f24:	e6 e1       	ldi	r30, 0x16	; 22
    2f26:	fa e3       	ldi	r31, 0x3A	; 58
    2f28:	13 82       	std	Z+3, r1	; 0x03
					TimeAndDate.Minutes = 0;
    2f2a:	12 82       	std	Z+2, r1	; 0x02
					TimeAndDate.Seconds = 0;
    2f2c:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Frames = 0;
    2f2e:	10 82       	st	Z, r1
					TimerControl(Module);
    2f30:	8e 2d       	mov	r24, r14
    2f32:	0e 94 96 02 	call	0x52c	; 0x52c <TimerControl>
					DJControl();
    2f36:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
					StudioMicControl();
    2f3a:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>
					OnAirControl();
    2f3e:	0e 94 9a 04 	call	0x934	; 0x934 <OnAirControl>
				}
				break;
    2f42:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
				case TELCO:
				{
					char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2f46:	8e 2d       	mov	r24, r14
    2f48:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
					
					if (EventOn)
    2f4c:	01 2b       	or	r16, r17
    2f4e:	09 f5       	brne	.+66     	; 0x2f92 <__DATA_REGION_LENGTH__+0xf92>
					{
						ConsoleFunctionData[Module]|=CUE_LED;
    2f50:	f6 01       	movw	r30, r12
    2f52:	e0 56       	subi	r30, 0x60	; 96
    2f54:	fd 4d       	sbci	r31, 0xDD	; 221
    2f56:	90 81       	ld	r25, Z
						ConsoleFunctionData[Module]|=REMOTE_FUNCTION;
    2f58:	99 60       	ori	r25, 0x09	; 9
    2f5a:	90 83       	st	Z, r25

						if ((TelcoNr>=0) && (TelcoNr<4))
    2f5c:	84 30       	cpi	r24, 0x04	; 4
    2f5e:	e8 f5       	brcc	.+122    	; 0x2fda <__DATA_REGION_LENGTH__+0xfda>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_RING;
    2f60:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2f64:	a1 e0       	ldi	r26, 0x01	; 1
    2f66:	ae 0f       	add	r26, r30
    2f68:	f0 e0       	ldi	r31, 0x00	; 0
    2f6a:	eb 53       	subi	r30, 0x3B	; 59
    2f6c:	fc 4d       	sbci	r31, 0xDC	; 220
    2f6e:	91 ec       	ldi	r25, 0xC1	; 193
    2f70:	90 83       	st	Z, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2f72:	e1 e0       	ldi	r30, 0x01	; 1
    2f74:	ea 0f       	add	r30, r26
    2f76:	b0 e0       	ldi	r27, 0x00	; 0
    2f78:	ab 53       	subi	r26, 0x3B	; 59
    2f7a:	bc 4d       	sbci	r27, 0xDC	; 220
    2f7c:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2f7e:	81 e0       	ldi	r24, 0x01	; 1
    2f80:	8e 0f       	add	r24, r30
    2f82:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2f86:	f0 e0       	ldi	r31, 0x00	; 0
    2f88:	eb 53       	subi	r30, 0x3B	; 59
    2f8a:	fc 4d       	sbci	r31, 0xDC	; 220
    2f8c:	81 e0       	ldi	r24, 0x01	; 1
    2f8e:	80 83       	st	Z, r24
    2f90:	24 c0       	rjmp	.+72     	; 0x2fda <__DATA_REGION_LENGTH__+0xfda>
						}
					}
					else
					{
						if (!(ConsoleFunctionData[Module]&START_FUNCTION))
    2f92:	f6 01       	movw	r30, r12
    2f94:	e0 56       	subi	r30, 0x60	; 96
    2f96:	fd 4d       	sbci	r31, 0xDD	; 221
    2f98:	90 81       	ld	r25, Z
    2f9a:	91 fd       	sbrc	r25, 1
    2f9c:	05 c0       	rjmp	.+10     	; 0x2fa8 <__DATA_REGION_LENGTH__+0xfa8>
						{
							ConsoleFunctionData[Module]&=CUE_LED^0xFF;
    2f9e:	f6 01       	movw	r30, r12
    2fa0:	e0 56       	subi	r30, 0x60	; 96
    2fa2:	fd 4d       	sbci	r31, 0xDD	; 221
							ConsoleFunctionData[Module]&=REMOTE_FUNCTION^0xFF;
    2fa4:	96 7f       	andi	r25, 0xF6	; 246
    2fa6:	90 83       	st	Z, r25
						}

						if ((TelcoNr>=0) && (TelcoNr<4))
    2fa8:	84 30       	cpi	r24, 0x04	; 4
    2faa:	b8 f4       	brcc	.+46     	; 0x2fda <__DATA_REGION_LENGTH__+0xfda>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_RING;
    2fac:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    2fb0:	a1 e0       	ldi	r26, 0x01	; 1
    2fb2:	ae 0f       	add	r26, r30
    2fb4:	f0 e0       	ldi	r31, 0x00	; 0
    2fb6:	eb 53       	subi	r30, 0x3B	; 59
    2fb8:	fc 4d       	sbci	r31, 0xDC	; 220
    2fba:	91 ec       	ldi	r25, 0xC1	; 193
    2fbc:	90 83       	st	Z, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2fbe:	e1 e0       	ldi	r30, 0x01	; 1
    2fc0:	ea 0f       	add	r30, r26
    2fc2:	b0 e0       	ldi	r27, 0x00	; 0
    2fc4:	ab 53       	subi	r26, 0x3B	; 59
    2fc6:	bc 4d       	sbci	r27, 0xDC	; 220
    2fc8:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2fca:	81 e0       	ldi	r24, 0x01	; 1
    2fcc:	8e 0f       	add	r24, r30
    2fce:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    2fd2:	f0 e0       	ldi	r31, 0x00	; 0
    2fd4:	eb 53       	subi	r30, 0x3B	; 59
    2fd6:	fc 4d       	sbci	r31, 0xDC	; 220
    2fd8:	10 82       	st	Z, r1
						}
					}
					SendSerialData = 1;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				}
				break;
    2fe0:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case ESCAPE:
		{
			SetLCD(0,"\xC0");
    2fe4:	6f e2       	ldi	r22, 0x2F	; 47
    2fe6:	70 e2       	ldi	r23, 0x20	; 32
    2fe8:	80 e0       	ldi	r24, 0x00	; 0
    2fea:	90 e0       	ldi	r25, 0x00	; 0
    2fec:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
			if (EventOn)
    2ff0:	01 2b       	or	r16, r17
    2ff2:	11 f0       	breq	.+4      	; 0x2ff8 <__DATA_REGION_LENGTH__+0xff8>
    2ff4:	0c 94 89 20 	jmp	0x4112	; 0x4112 <__stack+0x113>
 			{
				if (OperatingMode != NORMALMODE)
    2ff8:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    2ffc:	88 23       	and	r24, r24
    2ffe:	09 f4       	brne	.+2      	; 0x3002 <__DATA_REGION_LENGTH__+0x1002>
    3000:	a1 c0       	rjmp	.+322    	; 0x3144 <__DATA_REGION_LENGTH__+0x1144>
				{
					char TextBuffer[9];

					if (OperatingMode==MODULEMODE)
    3002:	81 30       	cpi	r24, 0x01	; 1
    3004:	f1 f4       	brne	.+60     	; 0x3042 <__DATA_REGION_LENGTH__+0x1042>
    3006:	19 c0       	rjmp	.+50     	; 0x303a <__DATA_REGION_LENGTH__+0x103a>
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
						{
							for (cntByte=0; cntByte<29; cntByte++)
							{
								ConsoleModuleSettings[cntModule][cntByte] = UndoConsoleModuleSettings[cntModule][cntByte];
    3008:	84 2f       	mov	r24, r20
    300a:	90 e0       	ldi	r25, 0x00	; 0
    300c:	fd e1       	ldi	r31, 0x1D	; 29
    300e:	6f 9f       	mul	r22, r31
    3010:	90 01       	movw	r18, r0
    3012:	11 24       	eor	r1, r1
    3014:	f9 01       	movw	r30, r18
    3016:	e5 5b       	subi	r30, 0xB5	; 181
    3018:	f9 4c       	sbci	r31, 0xC9	; 201
    301a:	e8 0f       	add	r30, r24
    301c:	f9 1f       	adc	r31, r25
    301e:	50 81       	ld	r21, Z
    3020:	25 5e       	subi	r18, 0xE5	; 229
    3022:	37 4c       	sbci	r19, 0xC7	; 199
    3024:	f9 01       	movw	r30, r18
    3026:	e8 0f       	add	r30, r24
    3028:	f9 1f       	adc	r31, r25
    302a:	50 83       	st	Z, r21
					if (OperatingMode==MODULEMODE)
					{
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
						{
							for (cntByte=0; cntByte<29; cntByte++)
    302c:	4f 5f       	subi	r20, 0xFF	; 255
    302e:	01 c0       	rjmp	.+2      	; 0x3032 <__DATA_REGION_LENGTH__+0x1032>
    3030:	40 e0       	ldi	r20, 0x00	; 0
    3032:	4d 31       	cpi	r20, 0x1D	; 29
    3034:	48 f3       	brcs	.-46     	; 0x3008 <__DATA_REGION_LENGTH__+0x1008>
					char TextBuffer[9];

					if (OperatingMode==MODULEMODE)
					{
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3036:	6f 5f       	subi	r22, 0xFF	; 255
    3038:	01 c0       	rjmp	.+2      	; 0x303c <__DATA_REGION_LENGTH__+0x103c>
    303a:	60 e0       	ldi	r22, 0x00	; 0
    303c:	60 31       	cpi	r22, 0x10	; 16
    303e:	c0 f3       	brcs	.-16     	; 0x3030 <__DATA_REGION_LENGTH__+0x1030>
    3040:	12 c0       	rjmp	.+36     	; 0x3066 <__DATA_REGION_LENGTH__+0x1066>
							{
								ConsoleModuleSettings[cntModule][cntByte] = UndoConsoleModuleSettings[cntModule][cntByte];
							}
						}
					}
					else if (OperatingMode==MASTERMODE)
    3042:	82 30       	cpi	r24, 0x02	; 2
    3044:	81 f4       	brne	.+32     	; 0x3066 <__DATA_REGION_LENGTH__+0x1066>
    3046:	0c c0       	rjmp	.+24     	; 0x3060 <__DATA_REGION_LENGTH__+0x1060>
					{
						unsigned char cntByte;
						for (cntByte=0; cntByte<5; cntByte++)
						{
								ConsoleMasterSettings[cntByte] = UndoConsoleMasterSettings[cntByte];
    3048:	82 2f       	mov	r24, r18
    304a:	90 e0       	ldi	r25, 0x00	; 0
    304c:	fc 01       	movw	r30, r24
    304e:	ea 5b       	subi	r30, 0xBA	; 186
    3050:	f9 4c       	sbci	r31, 0xC9	; 201
    3052:	30 81       	ld	r19, Z
    3054:	fc 01       	movw	r30, r24
    3056:	e2 57       	subi	r30, 0x72	; 114
    3058:	f4 4d       	sbci	r31, 0xD4	; 212
    305a:	30 83       	st	Z, r19
						}
					}
					else if (OperatingMode==MASTERMODE)
					{
						unsigned char cntByte;
						for (cntByte=0; cntByte<5; cntByte++)
    305c:	2f 5f       	subi	r18, 0xFF	; 255
    305e:	01 c0       	rjmp	.+2      	; 0x3062 <__DATA_REGION_LENGTH__+0x1062>
    3060:	20 e0       	ldi	r18, 0x00	; 0
    3062:	25 30       	cpi	r18, 0x05	; 5
    3064:	88 f3       	brcs	.-30     	; 0x3048 <__DATA_REGION_LENGTH__+0x1048>
						{
								ConsoleMasterSettings[cntByte] = UndoConsoleMasterSettings[cntByte];
						}
					}

					OperatingMode = NORMALMODE;
    3066:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
					TextStringPtr = 0;
    306a:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

					SetLCD(0,"\x80");
    306e:	61 e5       	ldi	r22, 0x51	; 81
    3070:	70 e2       	ldi	r23, 0x20	; 32
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	90 e0       	ldi	r25, 0x00	; 0
    3076:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1,"                ");
    307a:	64 e6       	ldi	r22, 0x64	; 100
    307c:	70 e2       	ldi	r23, 0x20	; 32
    307e:	81 e0       	ldi	r24, 0x01	; 1
    3080:	90 e0       	ldi	r25, 0x00	; 0
    3082:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(0,"\xC0");
    3086:	6f e2       	ldi	r22, 0x2F	; 47
    3088:	70 e2       	ldi	r23, 0x20	; 32
    308a:	80 e0       	ldi	r24, 0x00	; 0
    308c:	90 e0       	ldi	r25, 0x00	; 0
    308e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    3092:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3096:	31 e1       	ldi	r19, 0x11	; 17
    3098:	63 9f       	mul	r22, r19
    309a:	b0 01       	movw	r22, r0
    309c:	11 24       	eor	r1, r1
    309e:	6a 5d       	subi	r22, 0xDA	; 218
    30a0:	7d 4d       	sbci	r23, 0xDD	; 221
    30a2:	81 e0       	ldi	r24, 0x01	; 1
    30a4:	90 e0       	ldi	r25, 0x00	; 0
    30a6:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    30aa:	e6 e1       	ldi	r30, 0x16	; 22
    30ac:	fa e3       	ldi	r31, 0x3A	; 58
    30ae:	23 81       	ldd	r18, Z+3	; 0x03
    30b0:	8d ec       	ldi	r24, 0xCD	; 205
    30b2:	28 9f       	mul	r18, r24
    30b4:	91 2d       	mov	r25, r1
    30b6:	11 24       	eor	r1, r1
    30b8:	96 95       	lsr	r25
    30ba:	96 95       	lsr	r25
    30bc:	96 95       	lsr	r25
    30be:	30 e3       	ldi	r19, 0x30	; 48
    30c0:	39 0f       	add	r19, r25
    30c2:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    30c4:	99 0f       	add	r25, r25
    30c6:	39 2f       	mov	r19, r25
    30c8:	33 0f       	add	r19, r19
    30ca:	33 0f       	add	r19, r19
    30cc:	93 0f       	add	r25, r19
    30ce:	29 1b       	sub	r18, r25
    30d0:	20 5d       	subi	r18, 0xD0	; 208
    30d2:	2a 83       	std	Y+2, r18	; 0x02
					TextBuffer[2] = ':';
    30d4:	4a e3       	ldi	r20, 0x3A	; 58
    30d6:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    30d8:	22 81       	ldd	r18, Z+2	; 0x02
    30da:	28 9f       	mul	r18, r24
    30dc:	91 2d       	mov	r25, r1
    30de:	11 24       	eor	r1, r1
    30e0:	96 95       	lsr	r25
    30e2:	96 95       	lsr	r25
    30e4:	96 95       	lsr	r25
    30e6:	30 e3       	ldi	r19, 0x30	; 48
    30e8:	39 0f       	add	r19, r25
    30ea:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    30ec:	99 0f       	add	r25, r25
    30ee:	39 2f       	mov	r19, r25
    30f0:	33 0f       	add	r19, r19
    30f2:	33 0f       	add	r19, r19
    30f4:	93 0f       	add	r25, r19
    30f6:	29 1b       	sub	r18, r25
    30f8:	20 5d       	subi	r18, 0xD0	; 208
    30fa:	2d 83       	std	Y+5, r18	; 0x05
					TextBuffer[5] = ':';
    30fc:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    30fe:	91 81       	ldd	r25, Z+1	; 0x01
    3100:	98 9f       	mul	r25, r24
    3102:	81 2d       	mov	r24, r1
    3104:	11 24       	eor	r1, r1
    3106:	86 95       	lsr	r24
    3108:	86 95       	lsr	r24
    310a:	86 95       	lsr	r24
    310c:	20 e3       	ldi	r18, 0x30	; 48
    310e:	28 0f       	add	r18, r24
    3110:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    3112:	88 0f       	add	r24, r24
    3114:	28 2f       	mov	r18, r24
    3116:	22 0f       	add	r18, r18
    3118:	22 0f       	add	r18, r18
    311a:	82 0f       	add	r24, r18
    311c:	98 1b       	sub	r25, r24
    311e:	90 5d       	subi	r25, 0xD0	; 208
    3120:	98 87       	std	Y+8, r25	; 0x08
/*				TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    3122:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    3124:	65 e7       	ldi	r22, 0x75	; 117
    3126:	70 e2       	ldi	r23, 0x20	; 32
    3128:	80 e0       	ldi	r24, 0x00	; 0
    312a:	90 e0       	ldi	r25, 0x00	; 0
    312c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1,TextBuffer);
    3130:	be 01       	movw	r22, r28
    3132:	6f 5f       	subi	r22, 0xFF	; 255
    3134:	7f 4f       	sbci	r23, 0xFF	; 255
    3136:	81 e0       	ldi	r24, 0x01	; 1
    3138:	90 e0       	ldi	r25, 0x00	; 0
    313a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetConsoleData();
    313e:	0e 94 90 07 	call	0xf20	; 0xf20 <SetConsoleData>
    3142:	e7 c7       	rjmp	.+4046   	; 0x4112 <__stack+0x113>
				}
				else if (TextStringPtr==0)
    3144:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3148:	81 11       	cpse	r24, r1
    314a:	07 c0       	rjmp	.+14     	; 0x315a <__DATA_REGION_LENGTH__+0x115a>
				{
					TimeAndDate.Hours = 0;
    314c:	e6 e1       	ldi	r30, 0x16	; 22
    314e:	fa e3       	ldi	r31, 0x3A	; 58
    3150:	13 82       	std	Z+3, r1	; 0x03
					TimeAndDate.Minutes = 0;
    3152:	12 82       	std	Z+2, r1	; 0x02
					TimeAndDate.Seconds = 0;
    3154:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Frames = 0;
    3156:	10 82       	st	Z, r1
    3158:	dc c7       	rjmp	.+4024   	; 0x4112 <__stack+0x113>
				}
				else
				{
					char TextBuffer[9];
					//New in v1.12
					SetupLCD();
    315a:	0e 94 9b 20 	call	0x4136	; 0x4136 <SetupLCD>
	 				SetLCD(0,"\xC0");
    315e:	6f e2       	ldi	r22, 0x2F	; 47
    3160:	70 e2       	ldi	r23, 0x20	; 32
    3162:	80 e0       	ldi	r24, 0x00	; 0
    3164:	90 e0       	ldi	r25, 0x00	; 0
    3166:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

					SetLCD(0,"\x80");
    316a:	61 e5       	ldi	r22, 0x51	; 81
    316c:	70 e2       	ldi	r23, 0x20	; 32
    316e:	80 e0       	ldi	r24, 0x00	; 0
    3170:	90 e0       	ldi	r25, 0x00	; 0
    3172:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1,"                ");
    3176:	64 e6       	ldi	r22, 0x64	; 100
    3178:	70 e2       	ldi	r23, 0x20	; 32
    317a:	81 e0       	ldi	r24, 0x01	; 1
    317c:	90 e0       	ldi	r25, 0x00	; 0
    317e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(0,"\xC0");
    3182:	6f e2       	ldi	r22, 0x2F	; 47
    3184:	70 e2       	ldi	r23, 0x20	; 32
    3186:	80 e0       	ldi	r24, 0x00	; 0
    3188:	90 e0       	ldi	r25, 0x00	; 0
    318a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    318e:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3192:	51 e1       	ldi	r21, 0x11	; 17
    3194:	65 9f       	mul	r22, r21
    3196:	b0 01       	movw	r22, r0
    3198:	11 24       	eor	r1, r1
    319a:	6a 5d       	subi	r22, 0xDA	; 218
    319c:	7d 4d       	sbci	r23, 0xDD	; 221
    319e:	81 e0       	ldi	r24, 0x01	; 1
    31a0:	90 e0       	ldi	r25, 0x00	; 0
    31a2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    31a6:	e6 e1       	ldi	r30, 0x16	; 22
    31a8:	fa e3       	ldi	r31, 0x3A	; 58
    31aa:	23 81       	ldd	r18, Z+3	; 0x03
    31ac:	8d ec       	ldi	r24, 0xCD	; 205
    31ae:	28 9f       	mul	r18, r24
    31b0:	91 2d       	mov	r25, r1
    31b2:	11 24       	eor	r1, r1
    31b4:	96 95       	lsr	r25
    31b6:	96 95       	lsr	r25
    31b8:	96 95       	lsr	r25
    31ba:	30 e3       	ldi	r19, 0x30	; 48
    31bc:	39 0f       	add	r19, r25
    31be:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    31c0:	99 0f       	add	r25, r25
    31c2:	39 2f       	mov	r19, r25
    31c4:	33 0f       	add	r19, r19
    31c6:	33 0f       	add	r19, r19
    31c8:	93 0f       	add	r25, r19
    31ca:	29 1b       	sub	r18, r25
    31cc:	20 5d       	subi	r18, 0xD0	; 208
    31ce:	2a 83       	std	Y+2, r18	; 0x02
					TextBuffer[2] = ':';
    31d0:	4a e3       	ldi	r20, 0x3A	; 58
    31d2:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    31d4:	22 81       	ldd	r18, Z+2	; 0x02
    31d6:	28 9f       	mul	r18, r24
    31d8:	91 2d       	mov	r25, r1
    31da:	11 24       	eor	r1, r1
    31dc:	96 95       	lsr	r25
    31de:	96 95       	lsr	r25
    31e0:	96 95       	lsr	r25
    31e2:	30 e3       	ldi	r19, 0x30	; 48
    31e4:	39 0f       	add	r19, r25
    31e6:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    31e8:	99 0f       	add	r25, r25
    31ea:	39 2f       	mov	r19, r25
    31ec:	33 0f       	add	r19, r19
    31ee:	33 0f       	add	r19, r19
    31f0:	93 0f       	add	r25, r19
    31f2:	29 1b       	sub	r18, r25
    31f4:	20 5d       	subi	r18, 0xD0	; 208
    31f6:	2d 83       	std	Y+5, r18	; 0x05
					TextBuffer[5] = ':';
    31f8:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    31fa:	91 81       	ldd	r25, Z+1	; 0x01
    31fc:	98 9f       	mul	r25, r24
    31fe:	81 2d       	mov	r24, r1
    3200:	11 24       	eor	r1, r1
    3202:	86 95       	lsr	r24
    3204:	86 95       	lsr	r24
    3206:	86 95       	lsr	r24
    3208:	20 e3       	ldi	r18, 0x30	; 48
    320a:	28 0f       	add	r18, r24
    320c:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    320e:	88 0f       	add	r24, r24
    3210:	28 2f       	mov	r18, r24
    3212:	22 0f       	add	r18, r18
    3214:	22 0f       	add	r18, r18
    3216:	82 0f       	add	r24, r18
    3218:	98 1b       	sub	r25, r24
    321a:	90 5d       	subi	r25, 0xD0	; 208
    321c:	98 87       	std	Y+8, r25	; 0x08
/*				TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    321e:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    3220:	65 e7       	ldi	r22, 0x75	; 117
    3222:	70 e2       	ldi	r23, 0x20	; 32
    3224:	80 e0       	ldi	r24, 0x00	; 0
    3226:	90 e0       	ldi	r25, 0x00	; 0
    3228:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1,TextBuffer);
    322c:	be 01       	movw	r22, r28
    322e:	6f 5f       	subi	r22, 0xFF	; 255
    3230:	7f 4f       	sbci	r23, 0xFF	; 255
    3232:	81 e0       	ldi	r24, 0x01	; 1
    3234:	90 e0       	ldi	r25, 0x00	; 0
    3236:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetConsoleData();
    323a:	0e 94 90 07 	call	0xf20	; 0xf20 <SetConsoleData>
    323e:	69 c7       	rjmp	.+3794   	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case ENTER:
		{
			if (EventOn)
    3240:	01 2b       	or	r16, r17
    3242:	09 f0       	breq	.+2      	; 0x3246 <__DATA_REGION_LENGTH__+0x1246>
    3244:	66 c7       	rjmp	.+3788   	; 0x4112 <__stack+0x113>
			{
				switch (OperatingMode)
    3246:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    324a:	88 23       	and	r24, r24
    324c:	21 f0       	breq	.+8      	; 0x3256 <__DATA_REGION_LENGTH__+0x1256>
    324e:	83 30       	cpi	r24, 0x03	; 3
    3250:	09 f4       	brne	.+2      	; 0x3254 <__DATA_REGION_LENGTH__+0x1254>
    3252:	b7 c0       	rjmp	.+366    	; 0x33c2 <__DATA_REGION_LENGTH__+0x13c2>
    3254:	a9 c2       	rjmp	.+1362   	; 0x37a8 <__DATA_REGION_LENGTH__+0x17a8>
				{
					case NORMALMODE:
					{
						switch (TextStringPtr)
    3256:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    325a:	81 30       	cpi	r24, 0x01	; 1
    325c:	59 f1       	breq	.+86     	; 0x32b4 <__DATA_REGION_LENGTH__+0x12b4>
    325e:	38 f0       	brcs	.+14     	; 0x326e <__DATA_REGION_LENGTH__+0x126e>
    3260:	82 30       	cpi	r24, 0x02	; 2
    3262:	09 f4       	brne	.+2      	; 0x3266 <__DATA_REGION_LENGTH__+0x1266>
    3264:	5e c0       	rjmp	.+188    	; 0x3322 <__DATA_REGION_LENGTH__+0x1322>
    3266:	83 30       	cpi	r24, 0x03	; 3
    3268:	09 f4       	brne	.+2      	; 0x326c <__DATA_REGION_LENGTH__+0x126c>
    326a:	91 c0       	rjmp	.+290    	; 0x338e <__DATA_REGION_LENGTH__+0x138e>
    326c:	52 c7       	rjmp	.+3748   	; 0x4112 <__stack+0x113>
						{
							case 0:
							{
								TimeAndDate.Hours = 0;
    326e:	e6 e1       	ldi	r30, 0x16	; 22
    3270:	fa e3       	ldi	r31, 0x3A	; 58
    3272:	13 82       	std	Z+3, r1	; 0x03
								TimeAndDate.Minutes = 0;
    3274:	12 82       	std	Z+2, r1	; 0x02
								TimeAndDate.Seconds = 0;
    3276:	11 82       	std	Z+1, r1	; 0x01
								TimeAndDate.Frames = 0;
    3278:	10 82       	st	Z, r1
								GlobalTimerActive = 1;
    327a:	81 e0       	ldi	r24, 0x01	; 1
    327c:	80 93 1b 3a 	sts	0x3A1B, r24	; 0x803a1b <GlobalTimerActive>
							}
							break;
    3280:	48 c7       	rjmp	.+3728   	; 0x4112 <__stack+0x113>
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									for (cntByte=0; cntByte<29; cntByte++)
									{
										UndoConsoleModuleSettings[cntModule][cntByte] = ConsoleModuleSettings[cntModule][cntByte];
    3282:	84 2f       	mov	r24, r20
    3284:	90 e0       	ldi	r25, 0x00	; 0
    3286:	ed e1       	ldi	r30, 0x1D	; 29
    3288:	6e 9f       	mul	r22, r30
    328a:	90 01       	movw	r18, r0
    328c:	11 24       	eor	r1, r1
    328e:	f9 01       	movw	r30, r18
    3290:	e5 5e       	subi	r30, 0xE5	; 229
    3292:	f7 4c       	sbci	r31, 0xC7	; 199
    3294:	e8 0f       	add	r30, r24
    3296:	f9 1f       	adc	r31, r25
    3298:	50 81       	ld	r21, Z
    329a:	25 5b       	subi	r18, 0xB5	; 181
    329c:	39 4c       	sbci	r19, 0xC9	; 201
    329e:	f9 01       	movw	r30, r18
    32a0:	e8 0f       	add	r30, r24
    32a2:	f9 1f       	adc	r31, r25
    32a4:	50 83       	st	Z, r21
							case 1:
							{
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									for (cntByte=0; cntByte<29; cntByte++)
    32a6:	4f 5f       	subi	r20, 0xFF	; 255
    32a8:	01 c0       	rjmp	.+2      	; 0x32ac <__DATA_REGION_LENGTH__+0x12ac>
    32aa:	40 e0       	ldi	r20, 0x00	; 0
    32ac:	4d 31       	cpi	r20, 0x1D	; 29
    32ae:	48 f3       	brcs	.-46     	; 0x3282 <__DATA_REGION_LENGTH__+0x1282>
							}
							break;
							case 1:
							{
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    32b0:	6f 5f       	subi	r22, 0xFF	; 255
    32b2:	01 c0       	rjmp	.+2      	; 0x32b6 <__DATA_REGION_LENGTH__+0x12b6>
			{
				switch (OperatingMode)
				{
					case NORMALMODE:
					{
						switch (TextStringPtr)
    32b4:	60 e0       	ldi	r22, 0x00	; 0
							}
							break;
							case 1:
							{
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    32b6:	60 31       	cpi	r22, 0x10	; 16
    32b8:	c0 f3       	brcs	.-16     	; 0x32aa <__DATA_REGION_LENGTH__+0x12aa>
									for (cntByte=0; cntByte<29; cntByte++)
									{
										UndoConsoleModuleSettings[cntModule][cntByte] = ConsoleModuleSettings[cntModule][cntByte];
									}
								}
								OperatingMode = MODULEMODE;
    32ba:	81 e0       	ldi	r24, 0x01	; 1
    32bc:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <OperatingMode>
								TextStringPtr = 0;
    32c0:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
								SetLCD(0,"\x80");
    32c4:	61 e5       	ldi	r22, 0x51	; 81
    32c6:	70 e2       	ldi	r23, 0x20	; 32
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(1,ModuleTextString[TextStringPtr]);
    32d0:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    32d4:	f1 e1       	ldi	r31, 0x11	; 17
    32d6:	6f 9f       	mul	r22, r31
    32d8:	b0 01       	movw	r22, r0
    32da:	11 24       	eor	r1, r1
    32dc:	6c 55       	subi	r22, 0x5C	; 92
    32de:	74 4d       	sbci	r23, 0xD4	; 212
    32e0:	81 e0       	ldi	r24, 0x01	; 1
    32e2:	90 e0       	ldi	r25, 0x00	; 0
    32e4:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(0,"\xC0");
    32e8:	6f e2       	ldi	r22, 0x2F	; 47
    32ea:	70 e2       	ldi	r23, 0x20	; 32
    32ec:	80 e0       	ldi	r24, 0x00	; 0
    32ee:	90 e0       	ldi	r25, 0x00	; 0
    32f0:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
//								SetLCD(1,"Select Module   ");
								SetLCD(1,"Toggle by SELECT");
    32f4:	67 e7       	ldi	r22, 0x77	; 119
    32f6:	70 e2       	ldi	r23, 0x20	; 32
    32f8:	81 e0       	ldi	r24, 0x01	; 1
    32fa:	90 e0       	ldi	r25, 0x00	; 0
    32fc:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								ShowFunction(TextStringPtr);
    3300:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3304:	0e 94 17 03 	call	0x62e	; 0x62e <ShowFunction>
							}
							break;
    3308:	04 c7       	rjmp	.+3592   	; 0x4112 <__stack+0x113>
							case 2:
							{
								unsigned char cntByte;
								for (cntByte=0; cntByte<5; cntByte++)
								{
										UndoConsoleMasterSettings[cntByte] = ConsoleMasterSettings[cntByte];
    330a:	82 2f       	mov	r24, r18
    330c:	90 e0       	ldi	r25, 0x00	; 0
    330e:	fc 01       	movw	r30, r24
    3310:	e2 57       	subi	r30, 0x72	; 114
    3312:	f4 4d       	sbci	r31, 0xD4	; 212
    3314:	30 81       	ld	r19, Z
    3316:	fc 01       	movw	r30, r24
    3318:	ea 5b       	subi	r30, 0xBA	; 186
    331a:	f9 4c       	sbci	r31, 0xC9	; 201
    331c:	30 83       	st	Z, r19
							}
							break;
							case 2:
							{
								unsigned char cntByte;
								for (cntByte=0; cntByte<5; cntByte++)
    331e:	2f 5f       	subi	r18, 0xFF	; 255
    3320:	01 c0       	rjmp	.+2      	; 0x3324 <__DATA_REGION_LENGTH__+0x1324>
			{
				switch (OperatingMode)
				{
					case NORMALMODE:
					{
						switch (TextStringPtr)
    3322:	20 e0       	ldi	r18, 0x00	; 0
							}
							break;
							case 2:
							{
								unsigned char cntByte;
								for (cntByte=0; cntByte<5; cntByte++)
    3324:	25 30       	cpi	r18, 0x05	; 5
    3326:	88 f3       	brcs	.-30     	; 0x330a <__DATA_REGION_LENGTH__+0x130a>
								{
										UndoConsoleMasterSettings[cntByte] = ConsoleMasterSettings[cntByte];
								}

								OperatingMode = MASTERMODE;
    3328:	82 e0       	ldi	r24, 0x02	; 2
    332a:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <OperatingMode>
								TextStringPtr = 0;
    332e:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
								SetLCD(0,"\x80");
    3332:	61 e5       	ldi	r22, 0x51	; 81
    3334:	70 e2       	ldi	r23, 0x20	; 32
    3336:	80 e0       	ldi	r24, 0x00	; 0
    3338:	90 e0       	ldi	r25, 0x00	; 0
    333a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(1,MasterTextString[TextStringPtr]);
    333e:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3342:	31 e1       	ldi	r19, 0x11	; 17
    3344:	63 9f       	mul	r22, r19
    3346:	b0 01       	movw	r22, r0
    3348:	11 24       	eor	r1, r1
    334a:	6b 53       	subi	r22, 0x3B	; 59
    334c:	7b 4d       	sbci	r23, 0xDB	; 219
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	90 e0       	ldi	r25, 0x00	; 0
    3352:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

								SetLCD(0,"\xC0");
    3356:	6f e2       	ldi	r22, 0x2F	; 47
    3358:	70 e2       	ldi	r23, 0x20	; 32
    335a:	80 e0       	ldi	r24, 0x00	; 0
    335c:	90 e0       	ldi	r25, 0x00	; 0
    335e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								if (ConsoleMasterSettings[TextStringPtr])
    3362:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    3366:	f0 e0       	ldi	r31, 0x00	; 0
    3368:	e2 57       	subi	r30, 0x72	; 114
    336a:	f4 4d       	sbci	r31, 0xD4	; 212
    336c:	80 81       	ld	r24, Z
    336e:	88 23       	and	r24, r24
    3370:	39 f0       	breq	.+14     	; 0x3380 <__DATA_REGION_LENGTH__+0x1380>
								{
									SetLCD(1,"Yes             ");
    3372:	68 e8       	ldi	r22, 0x88	; 136
    3374:	70 e2       	ldi	r23, 0x20	; 32
    3376:	81 e0       	ldi	r24, 0x01	; 1
    3378:	90 e0       	ldi	r25, 0x00	; 0
    337a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
    337e:	c9 c6       	rjmp	.+3474   	; 0x4112 <__stack+0x113>
								}
								else
								{
									SetLCD(1," No             ");
    3380:	69 e9       	ldi	r22, 0x99	; 153
    3382:	70 e2       	ldi	r23, 0x20	; 32
    3384:	81 e0       	ldi	r24, 0x01	; 1
    3386:	90 e0       	ldi	r25, 0x00	; 0
    3388:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
    338c:	c2 c6       	rjmp	.+3460   	; 0x4112 <__stack+0x113>
								}
							}
							break;
							case 3:
							{
								OperatingMode = SYSTEMMODE;
    338e:	83 e0       	ldi	r24, 0x03	; 3
    3390:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <OperatingMode>
								TextStringPtr = 0;
    3394:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
								SetLCD(0,"\x80");
    3398:	61 e5       	ldi	r22, 0x51	; 81
    339a:	70 e2       	ldi	r23, 0x20	; 32
    339c:	80 e0       	ldi	r24, 0x00	; 0
    339e:	90 e0       	ldi	r25, 0x00	; 0
    33a0:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(1,SystemTextString[TextStringPtr]);
    33a4:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    33a8:	51 e1       	ldi	r21, 0x11	; 17
    33aa:	65 9f       	mul	r22, r21
    33ac:	b0 01       	movw	r22, r0
    33ae:	11 24       	eor	r1, r1
    33b0:	6f 55       	subi	r22, 0x5F	; 95
    33b2:	72 4d       	sbci	r23, 0xD2	; 210
    33b4:	81 e0       	ldi	r24, 0x01	; 1
    33b6:	90 e0       	ldi	r25, 0x00	; 0
    33b8:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								ShowConfig();
    33bc:	0e 94 51 24 	call	0x48a2	; 0x48a2 <ShowConfig>
							}
							break;
    33c0:	a8 c6       	rjmp	.+3408   	; 0x4112 <__stack+0x113>
					}
					break;
					case SYSTEMMODE:
					{
						char TextBuffer[9];
						switch (TextStringPtr)
    33c2:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    33c6:	83 30       	cpi	r24, 0x03	; 3
    33c8:	09 f4       	brne	.+2      	; 0x33cc <__DATA_REGION_LENGTH__+0x13cc>
    33ca:	a8 c0       	rjmp	.+336    	; 0x351c <__DATA_REGION_LENGTH__+0x151c>
    33cc:	84 30       	cpi	r24, 0x04	; 4
    33ce:	09 f4       	brne	.+2      	; 0x33d2 <__DATA_REGION_LENGTH__+0x13d2>
    33d0:	72 c1       	rjmp	.+740    	; 0x36b6 <__DATA_REGION_LENGTH__+0x16b6>
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <__DATA_REGION_LENGTH__+0x13d8>
    33d6:	7b c1       	rjmp	.+758    	; 0x36ce <__DATA_REGION_LENGTH__+0x16ce>
							{	// EEPROM Load
								unsigned char cntModule;
								unsigned int Address = 0x0000;

								Address = 0x0000;
							  ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
    33d8:	20 e1       	ldi	r18, 0x10	; 16
    33da:	40 e7       	ldi	r20, 0x70	; 112
    33dc:	52 e2       	ldi	r21, 0x22	; 34
    33de:	60 e0       	ldi	r22, 0x00	; 0
    33e0:	70 e0       	ldi	r23, 0x00	; 0
    33e2:	80 e7       	ldi	r24, 0x70	; 112
    33e4:	0e 94 9a 20 	call	0x4134	; 0x4134 <ReadData>
							  Address += NROFMODULES;
    33e8:	68 94       	set
    33ea:	ee 24       	eor	r14, r14
    33ec:	e4 f8       	bld	r14, 4
    33ee:	f1 2c       	mov	r15, r1
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    33f0:	10 e0       	ldi	r17, 0x00	; 0
    33f2:	0f c0       	rjmp	.+30     	; 0x3412 <__DATA_REGION_LENGTH__+0x1412>
								{
									ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    33f4:	8d e1       	ldi	r24, 0x1D	; 29
    33f6:	18 9f       	mul	r17, r24
    33f8:	a0 01       	movw	r20, r0
    33fa:	11 24       	eor	r1, r1
    33fc:	45 5e       	subi	r20, 0xE5	; 229
    33fe:	57 4c       	sbci	r21, 0xC7	; 199
    3400:	2d e1       	ldi	r18, 0x1D	; 29
    3402:	b7 01       	movw	r22, r14
    3404:	80 e7       	ldi	r24, 0x70	; 112
    3406:	0e 94 9a 20 	call	0x4134	; 0x4134 <ReadData>
								  Address += 29;
    340a:	9d e1       	ldi	r25, 0x1D	; 29
    340c:	e9 0e       	add	r14, r25
    340e:	f1 1c       	adc	r15, r1
								unsigned int Address = 0x0000;

								Address = 0x0000;
							  ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
							  Address += NROFMODULES;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3410:	1f 5f       	subi	r17, 0xFF	; 255
    3412:	10 31       	cpi	r17, 0x10	; 16
    3414:	78 f3       	brcs	.-34     	; 0x33f4 <__DATA_REGION_LENGTH__+0x13f4>
								{
									ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
								  Address += 29;
								}
								ReadData(I2CAddressEEProm, Address, &(ConsoleMasterSettings[0]), 5);
    3416:	25 e0       	ldi	r18, 0x05	; 5
    3418:	4e e8       	ldi	r20, 0x8E	; 142
    341a:	5b e2       	ldi	r21, 0x2B	; 43
    341c:	b7 01       	movw	r22, r14
    341e:	80 e7       	ldi	r24, 0x70	; 112
    3420:	0e 94 9a 20 	call	0x4134	; 0x4134 <ReadData>


								{//Reload
									unsigned char cntByte, cntChannel;

									for (cntChannel=0; cntChannel<16; cntChannel++)
    3424:	40 e0       	ldi	r20, 0x00	; 0
    3426:	50 c0       	rjmp	.+160    	; 0x34c8 <__DATA_REGION_LENGTH__+0x14c8>
									{
										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
    3428:	24 2f       	mov	r18, r20
    342a:	30 e0       	ldi	r19, 0x00	; 0
    342c:	f9 01       	movw	r30, r18
    342e:	e0 59       	subi	r30, 0x90	; 144
    3430:	fd 4d       	sbci	r31, 0xDD	; 221
    3432:	80 81       	ld	r24, Z
    3434:	81 50       	subi	r24, 0x01	; 1
    3436:	82 30       	cpi	r24, 0x02	; 2
    3438:	60 f5       	brcc	.+88     	; 0x3492 <__DATA_REGION_LENGTH__+0x1492>
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    343a:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    343e:	e1 e0       	ldi	r30, 0x01	; 1
    3440:	ea 0f       	add	r30, r26
    3442:	b0 e0       	ldi	r27, 0x00	; 0
    3444:	ab 53       	subi	r26, 0x3B	; 59
    3446:	bc 4d       	sbci	r27, 0xDC	; 220
    3448:	83 e9       	ldi	r24, 0x93	; 147
    344a:	8c 93       	st	X, r24
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    344c:	81 e0       	ldi	r24, 0x01	; 1
    344e:	8e 0f       	add	r24, r30
    3450:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3454:	f0 e0       	ldi	r31, 0x00	; 0
    3456:	eb 53       	subi	r30, 0x3B	; 59
    3458:	fc 4d       	sbci	r31, 0xDC	; 220
    345a:	40 83       	st	Z, r20
											for (cntByte=0; cntByte<29; cntByte++)
    345c:	80 e0       	ldi	r24, 0x00	; 0
    345e:	17 c0       	rjmp	.+46     	; 0x348e <__DATA_REGION_LENGTH__+0x148e>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
    3460:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3464:	91 e0       	ldi	r25, 0x01	; 1
    3466:	9e 0f       	add	r25, r30
    3468:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    346c:	f0 e0       	ldi	r31, 0x00	; 0
												ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
    346e:	9d e1       	ldi	r25, 0x1D	; 29
    3470:	92 9f       	mul	r25, r18
    3472:	d0 01       	movw	r26, r0
    3474:	93 9f       	mul	r25, r19
    3476:	b0 0d       	add	r27, r0
    3478:	11 24       	eor	r1, r1
    347a:	a5 5e       	subi	r26, 0xE5	; 229
    347c:	b7 4c       	sbci	r27, 0xC7	; 199
    347e:	a8 0f       	add	r26, r24
    3480:	b1 1d       	adc	r27, r1
    3482:	9c 91       	ld	r25, X
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
											for (cntByte=0; cntByte<29; cntByte++)
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
    3484:	eb 53       	subi	r30, 0x3B	; 59
    3486:	fc 4d       	sbci	r31, 0xDC	; 220
    3488:	9f 77       	andi	r25, 0x7F	; 127
    348a:	90 83       	st	Z, r25
									{
										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
											for (cntByte=0; cntByte<29; cntByte++)
    348c:	8f 5f       	subi	r24, 0xFF	; 255
    348e:	8d 31       	cpi	r24, 0x1D	; 29
    3490:	38 f3       	brcs	.-50     	; 0x3460 <__DATA_REGION_LENGTH__+0x1460>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
												ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
								 		  }
										}
										if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    3492:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3496:	e0 91 93 2b 	lds	r30, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    349a:	8e 17       	cp	r24, r30
    349c:	81 f0       	breq	.+32     	; 0x34be <__DATA_REGION_LENGTH__+0x14be>
    349e:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    34a2:	88 23       	and	r24, r24
    34a4:	61 f0       	breq	.+24     	; 0x34be <__DATA_REGION_LENGTH__+0x14be>
										{
											USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    34a6:	81 e0       	ldi	r24, 0x01	; 1
    34a8:	8e 0f       	add	r24, r30
    34aa:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    34ae:	f0 e0       	ldi	r31, 0x00	; 0
    34b0:	eb 53       	subi	r30, 0x3B	; 59
    34b2:	fc 4d       	sbci	r31, 0xDC	; 220
    34b4:	80 81       	ld	r24, Z
    34b6:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
											SendSerialReady = 0;
    34ba:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
										}
										while(!SendSerialReady);
    34be:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    34c2:	88 23       	and	r24, r24
    34c4:	e1 f3       	breq	.-8      	; 0x34be <__DATA_REGION_LENGTH__+0x14be>


								{//Reload
									unsigned char cntByte, cntChannel;

									for (cntChannel=0; cntChannel<16; cntChannel++)
    34c6:	4f 5f       	subi	r20, 0xFF	; 255
    34c8:	40 31       	cpi	r20, 0x10	; 16
    34ca:	08 f4       	brcc	.+2      	; 0x34ce <__DATA_REGION_LENGTH__+0x14ce>
    34cc:	ad cf       	rjmp	.-166    	; 0x3428 <__DATA_REGION_LENGTH__+0x1428>
											SendSerialReady = 0;
										}
										while(!SendSerialReady);
									}

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    34ce:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    34d2:	e1 e0       	ldi	r30, 0x01	; 1
    34d4:	ea 0f       	add	r30, r26
    34d6:	b0 e0       	ldi	r27, 0x00	; 0
    34d8:	ab 53       	subi	r26, 0x3B	; 59
    34da:	bc 4d       	sbci	r27, 0xDC	; 220
    34dc:	84 e9       	ldi	r24, 0x94	; 148
    34de:	8c 93       	st	X, r24
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    34e0:	81 e0       	ldi	r24, 0x01	; 1
    34e2:	8e 0f       	add	r24, r30
    34e4:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    34e8:	f0 e0       	ldi	r31, 0x00	; 0
    34ea:	eb 53       	subi	r30, 0x3B	; 59
    34ec:	fc 4d       	sbci	r31, 0xDC	; 220
    34ee:	10 82       	st	Z, r1
									for (cntByte=0; cntByte<5; cntByte++)
    34f0:	80 e0       	ldi	r24, 0x00	; 0
    34f2:	11 c0       	rjmp	.+34     	; 0x3516 <__DATA_REGION_LENGTH__+0x1516>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    34f4:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    34f8:	91 e0       	ldi	r25, 0x01	; 1
    34fa:	9e 0f       	add	r25, r30
    34fc:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    3500:	f0 e0       	ldi	r31, 0x00	; 0
    3502:	a8 2f       	mov	r26, r24
    3504:	b0 e0       	ldi	r27, 0x00	; 0
    3506:	a2 57       	subi	r26, 0x72	; 114
    3508:	b4 4d       	sbci	r27, 0xD4	; 212
    350a:	9c 91       	ld	r25, X
    350c:	eb 53       	subi	r30, 0x3B	; 59
    350e:	fc 4d       	sbci	r31, 0xDC	; 220
    3510:	9f 77       	andi	r25, 0x7F	; 127
    3512:	90 83       	st	Z, r25
										while(!SendSerialReady);
									}

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
									for (cntByte=0; cntByte<5; cntByte++)
    3514:	8f 5f       	subi	r24, 0xFF	; 255
    3516:	85 30       	cpi	r24, 0x05	; 5
    3518:	68 f3       	brcs	.-38     	; 0x34f4 <__DATA_REGION_LENGTH__+0x14f4>
    351a:	d9 c0       	rjmp	.+434    	; 0x36ce <__DATA_REGION_LENGTH__+0x16ce>
								unsigned char ReadedModuleType[NROFMODULES];
								unsigned char cntModule;
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);
    351c:	20 e1       	ldi	r18, 0x10	; 16
    351e:	ae 01       	movw	r20, r28
    3520:	4f 5f       	subi	r20, 0xFF	; 255
    3522:	5f 4f       	sbci	r21, 0xFF	; 255
    3524:	60 e0       	ldi	r22, 0x00	; 0
    3526:	70 e0       	ldi	r23, 0x00	; 0
    3528:	80 e5       	ldi	r24, 0x50	; 80
    352a:	0e 94 9a 20 	call	0x4134	; 0x4134 <ReadData>
							case 3:
							{ // SmartCard Load
								unsigned char ReadedModuleType[NROFMODULES];
								unsigned char cntModule;
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;
    352e:	40 e0       	ldi	r20, 0x00	; 0

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);

								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3530:	20 e0       	ldi	r18, 0x00	; 0
    3532:	10 c0       	rjmp	.+32     	; 0x3554 <__DATA_REGION_LENGTH__+0x1554>
								{
									if (ModuleType[cntModule] != ReadedModuleType[cntModule])
    3534:	82 2f       	mov	r24, r18
    3536:	90 e0       	ldi	r25, 0x00	; 0
    3538:	fc 01       	movw	r30, r24
    353a:	e0 59       	subi	r30, 0x90	; 144
    353c:	fd 4d       	sbci	r31, 0xDD	; 221
    353e:	30 81       	ld	r19, Z
    3540:	e1 e0       	ldi	r30, 0x01	; 1
    3542:	f0 e0       	ldi	r31, 0x00	; 0
    3544:	ec 0f       	add	r30, r28
    3546:	fd 1f       	adc	r31, r29
    3548:	e8 0f       	add	r30, r24
    354a:	f9 1f       	adc	r31, r25
    354c:	80 81       	ld	r24, Z
    354e:	38 13       	cpse	r19, r24
									{
										DifferentConfiguration = 1;
    3550:	41 e0       	ldi	r20, 0x01	; 1
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);

								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3552:	2f 5f       	subi	r18, 0xFF	; 255
    3554:	20 31       	cpi	r18, 0x10	; 16
    3556:	70 f3       	brcs	.-36     	; 0x3534 <__DATA_REGION_LENGTH__+0x1534>
									{
										DifferentConfiguration = 1;
									}
								}

								if (!DifferentConfiguration)
    3558:	44 23       	and	r20, r20
    355a:	89 f0       	breq	.+34     	; 0x357e <__DATA_REGION_LENGTH__+0x157e>
    355c:	9b c0       	rjmp	.+310    	; 0x3694 <__DATA_REGION_LENGTH__+0x1694>
								{
									Address += NROFMODULES;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										ReadData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    355e:	ed e1       	ldi	r30, 0x1D	; 29
    3560:	1e 9f       	mul	r17, r30
    3562:	a0 01       	movw	r20, r0
    3564:	11 24       	eor	r1, r1
    3566:	45 5e       	subi	r20, 0xE5	; 229
    3568:	57 4c       	sbci	r21, 0xC7	; 199
    356a:	2d e1       	ldi	r18, 0x1D	; 29
    356c:	b7 01       	movw	r22, r14
    356e:	80 e5       	ldi	r24, 0x50	; 80
    3570:	0e 94 9a 20 	call	0x4134	; 0x4134 <ReadData>
										Address += 29;
    3574:	fd e1       	ldi	r31, 0x1D	; 29
    3576:	ef 0e       	add	r14, r31
    3578:	f1 1c       	adc	r15, r1
								}

								if (!DifferentConfiguration)
								{
									Address += NROFMODULES;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    357a:	1f 5f       	subi	r17, 0xFF	; 255
    357c:	05 c0       	rjmp	.+10     	; 0x3588 <__DATA_REGION_LENGTH__+0x1588>
    357e:	68 94       	set
    3580:	ee 24       	eor	r14, r14
    3582:	e4 f8       	bld	r14, 4
    3584:	f1 2c       	mov	r15, r1
    3586:	10 e0       	ldi	r17, 0x00	; 0
    3588:	10 31       	cpi	r17, 0x10	; 16
    358a:	48 f3       	brcs	.-46     	; 0x355e <__DATA_REGION_LENGTH__+0x155e>
									{
										ReadData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
										Address += 29;
									}
									ReadData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);
    358c:	25 e0       	ldi	r18, 0x05	; 5
    358e:	4e e8       	ldi	r20, 0x8E	; 142
    3590:	5b e2       	ldi	r21, 0x2B	; 43
    3592:	b7 01       	movw	r22, r14
    3594:	80 e5       	ldi	r24, 0x50	; 80
    3596:	0e 94 9a 20 	call	0x4134	; 0x4134 <ReadData>

									{//Reload
										unsigned char cntByte, cntChannel;

										for (cntChannel=0; cntChannel<16; cntChannel++)
    359a:	30 e0       	ldi	r19, 0x00	; 0
    359c:	51 c0       	rjmp	.+162    	; 0x3640 <__DATA_REGION_LENGTH__+0x1640>
										{
  										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
    359e:	43 2f       	mov	r20, r19
    35a0:	50 e0       	ldi	r21, 0x00	; 0
    35a2:	fa 01       	movw	r30, r20
    35a4:	e0 59       	subi	r30, 0x90	; 144
    35a6:	fd 4d       	sbci	r31, 0xDD	; 221
    35a8:	80 81       	ld	r24, Z
    35aa:	81 50       	subi	r24, 0x01	; 1
    35ac:	82 30       	cpi	r24, 0x02	; 2
    35ae:	68 f5       	brcc	.+90     	; 0x360a <__DATA_REGION_LENGTH__+0x160a>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    35b0:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    35b4:	e1 e0       	ldi	r30, 0x01	; 1
    35b6:	ea 0f       	add	r30, r26
    35b8:	b0 e0       	ldi	r27, 0x00	; 0
    35ba:	ab 53       	subi	r26, 0x3B	; 59
    35bc:	bc 4d       	sbci	r27, 0xDC	; 220
    35be:	83 e9       	ldi	r24, 0x93	; 147
    35c0:	8c 93       	st	X, r24
												SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    35c2:	81 e0       	ldi	r24, 0x01	; 1
    35c4:	8e 0f       	add	r24, r30
    35c6:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    35ca:	f0 e0       	ldi	r31, 0x00	; 0
    35cc:	eb 53       	subi	r30, 0x3B	; 59
    35ce:	fc 4d       	sbci	r31, 0xDC	; 220
    35d0:	30 83       	st	Z, r19
												for (cntByte=0; cntByte<29; cntByte++)
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	18 c0       	rjmp	.+48     	; 0x3606 <__DATA_REGION_LENGTH__+0x1606>
												{
													ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
    35d6:	8d e1       	ldi	r24, 0x1D	; 29
    35d8:	84 9f       	mul	r24, r20
    35da:	f0 01       	movw	r30, r0
    35dc:	85 9f       	mul	r24, r21
    35de:	f0 0d       	add	r31, r0
    35e0:	11 24       	eor	r1, r1
    35e2:	e5 5e       	subi	r30, 0xE5	; 229
    35e4:	f7 4c       	sbci	r31, 0xC7	; 199
    35e6:	e9 0f       	add	r30, r25
    35e8:	f1 1d       	adc	r31, r1
    35ea:	80 81       	ld	r24, Z
    35ec:	81 70       	andi	r24, 0x01	; 1
    35ee:	80 83       	st	Z, r24
													SerialBufferOut[SerialBufferOutPtrTop++] =
    35f0:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    35f4:	21 e0       	ldi	r18, 0x01	; 1
    35f6:	2e 0f       	add	r18, r30
    35f8:	20 93 82 22 	sts	0x2282, r18	; 0x802282 <SerialBufferOutPtrTop>
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	eb 53       	subi	r30, 0x3B	; 59
    3600:	fc 4d       	sbci	r31, 0xDC	; 220
    3602:	80 83       	st	Z, r24
										{
  										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
												SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
												for (cntByte=0; cntByte<29; cntByte++)
    3604:	9f 5f       	subi	r25, 0xFF	; 255
    3606:	9d 31       	cpi	r25, 0x1D	; 29
    3608:	30 f3       	brcs	.-52     	; 0x35d6 <__DATA_REGION_LENGTH__+0x15d6>
													ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
													SerialBufferOut[SerialBufferOutPtrTop++] =
													ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
									 		  }
											}
											if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    360a:	80 91 82 22 	lds	r24, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    360e:	e0 91 93 2b 	lds	r30, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    3612:	8e 17       	cp	r24, r30
    3614:	81 f0       	breq	.+32     	; 0x3636 <__DATA_REGION_LENGTH__+0x1636>
    3616:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    361a:	88 23       	and	r24, r24
    361c:	61 f0       	breq	.+24     	; 0x3636 <__DATA_REGION_LENGTH__+0x1636>
											{
												USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    361e:	81 e0       	ldi	r24, 0x01	; 1
    3620:	8e 0f       	add	r24, r30
    3622:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    3626:	f0 e0       	ldi	r31, 0x00	; 0
    3628:	eb 53       	subi	r30, 0x3B	; 59
    362a:	fc 4d       	sbci	r31, 0xDC	; 220
    362c:	80 81       	ld	r24, Z
    362e:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
												SendSerialReady = 0;
    3632:	10 92 6a 22 	sts	0x226A, r1	; 0x80226a <SendSerialReady>
											}
											while(!SendSerialReady);
    3636:	80 91 6a 22 	lds	r24, 0x226A	; 0x80226a <SendSerialReady>
    363a:	88 23       	and	r24, r24
    363c:	e1 f3       	breq	.-8      	; 0x3636 <__DATA_REGION_LENGTH__+0x1636>
									ReadData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);

									{//Reload
										unsigned char cntByte, cntChannel;

										for (cntChannel=0; cntChannel<16; cntChannel++)
    363e:	3f 5f       	subi	r19, 0xFF	; 255
    3640:	30 31       	cpi	r19, 0x10	; 16
    3642:	08 f4       	brcc	.+2      	; 0x3646 <__DATA_REGION_LENGTH__+0x1646>
    3644:	ac cf       	rjmp	.-168    	; 0x359e <__DATA_REGION_LENGTH__+0x159e>
												SendSerialReady = 0;
											}
											while(!SendSerialReady);
										}
	
										SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3646:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    364a:	e1 e0       	ldi	r30, 0x01	; 1
    364c:	ea 0f       	add	r30, r26
    364e:	b0 e0       	ldi	r27, 0x00	; 0
    3650:	ab 53       	subi	r26, 0x3B	; 59
    3652:	bc 4d       	sbci	r27, 0xDC	; 220
    3654:	84 e9       	ldi	r24, 0x94	; 148
    3656:	8c 93       	st	X, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3658:	81 e0       	ldi	r24, 0x01	; 1
    365a:	8e 0f       	add	r24, r30
    365c:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3660:	f0 e0       	ldi	r31, 0x00	; 0
    3662:	eb 53       	subi	r30, 0x3B	; 59
    3664:	fc 4d       	sbci	r31, 0xDC	; 220
    3666:	10 82       	st	Z, r1
										for (cntByte=0; cntByte<5; cntByte++)
    3668:	80 e0       	ldi	r24, 0x00	; 0
    366a:	11 c0       	rjmp	.+34     	; 0x368e <__DATA_REGION_LENGTH__+0x168e>
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    366c:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3670:	91 e0       	ldi	r25, 0x01	; 1
    3672:	9e 0f       	add	r25, r30
    3674:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    3678:	f0 e0       	ldi	r31, 0x00	; 0
    367a:	a8 2f       	mov	r26, r24
    367c:	b0 e0       	ldi	r27, 0x00	; 0
    367e:	a2 57       	subi	r26, 0x72	; 114
    3680:	b4 4d       	sbci	r27, 0xD4	; 212
    3682:	9c 91       	ld	r25, X
    3684:	eb 53       	subi	r30, 0x3B	; 59
    3686:	fc 4d       	sbci	r31, 0xDC	; 220
    3688:	9f 77       	andi	r25, 0x7F	; 127
    368a:	90 83       	st	Z, r25
											while(!SendSerialReady);
										}
	
										SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
										for (cntByte=0; cntByte<5; cntByte++)
    368c:	8f 5f       	subi	r24, 0xFF	; 255
    368e:	85 30       	cpi	r24, 0x05	; 5
    3690:	68 f3       	brcs	.-38     	; 0x366c <__DATA_REGION_LENGTH__+0x166c>
    3692:	1d c0       	rjmp	.+58     	; 0x36ce <__DATA_REGION_LENGTH__+0x16ce>
										}
									}
 							  }
								else
								{
									SetLCD(0,"\xC0");
    3694:	6f e2       	ldi	r22, 0x2F	; 47
    3696:	70 e2       	ldi	r23, 0x20	; 32
    3698:	80 e0       	ldi	r24, 0x00	; 0
    369a:	90 e0       	ldi	r25, 0x00	; 0
    369c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
									SetLCD(1,"Other Config.   ");
    36a0:	6a ea       	ldi	r22, 0xAA	; 170
    36a2:	70 e2       	ldi	r23, 0x20	; 32
    36a4:	81 e0       	ldi	r24, 0x01	; 1
    36a6:	90 e0       	ldi	r25, 0x00	; 0
    36a8:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
									Delay(100);
    36ac:	84 e6       	ldi	r24, 0x64	; 100
    36ae:	90 e0       	ldi	r25, 0x00	; 0
    36b0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>
								}
							}
							break;
    36b4:	0c c0       	rjmp	.+24     	; 0x36ce <__DATA_REGION_LENGTH__+0x16ce>
							case 4:
							{ // SmartCard Write
			 					unsigned char cntModule;
								unsigned int Address = 0x0000;

								SetLCD(0,"\x80");
    36b6:	61 e5       	ldi	r22, 0x51	; 81
    36b8:	70 e2       	ldi	r23, 0x20	; 32
    36ba:	80 e0       	ldi	r24, 0x00	; 0
    36bc:	90 e0       	ldi	r25, 0x00	; 0
    36be:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(1,"Saving...");
    36c2:	6b eb       	ldi	r22, 0xBB	; 187
    36c4:	70 e2       	ldi	r23, 0x20	; 32
    36c6:	81 e0       	ldi	r24, 0x01	; 1
    36c8:	90 e0       	ldi	r25, 0x00	; 0
    36ca:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
																//// Wait until data got transmitted
																//while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
							}
							break;
						}
						OperatingMode = NORMALMODE;
    36ce:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
						TextStringPtr = 0;
    36d2:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

						SetLCD(0,"\x80");
    36d6:	61 e5       	ldi	r22, 0x51	; 81
    36d8:	70 e2       	ldi	r23, 0x20	; 32
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,"                ");
    36e2:	64 e6       	ldi	r22, 0x64	; 100
    36e4:	70 e2       	ldi	r23, 0x20	; 32
    36e6:	81 e0       	ldi	r24, 0x01	; 1
    36e8:	90 e0       	ldi	r25, 0x00	; 0
    36ea:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(0,"\xC0");
    36ee:	6f e2       	ldi	r22, 0x2F	; 47
    36f0:	70 e2       	ldi	r23, 0x20	; 32
    36f2:	80 e0       	ldi	r24, 0x00	; 0
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1, TextString[TextStringPtr]);
    36fa:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    36fe:	31 e1       	ldi	r19, 0x11	; 17
    3700:	63 9f       	mul	r22, r19
    3702:	b0 01       	movw	r22, r0
    3704:	11 24       	eor	r1, r1
    3706:	6a 5d       	subi	r22, 0xDA	; 218
    3708:	7d 4d       	sbci	r23, 0xDD	; 221
    370a:	81 e0       	ldi	r24, 0x01	; 1
    370c:	90 e0       	ldi	r25, 0x00	; 0
    370e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

						TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    3712:	e6 e1       	ldi	r30, 0x16	; 22
    3714:	fa e3       	ldi	r31, 0x3A	; 58
    3716:	23 81       	ldd	r18, Z+3	; 0x03
    3718:	8d ec       	ldi	r24, 0xCD	; 205
    371a:	28 9f       	mul	r18, r24
    371c:	91 2d       	mov	r25, r1
    371e:	11 24       	eor	r1, r1
    3720:	96 95       	lsr	r25
    3722:	96 95       	lsr	r25
    3724:	96 95       	lsr	r25
    3726:	30 e3       	ldi	r19, 0x30	; 48
    3728:	39 0f       	add	r19, r25
    372a:	39 83       	std	Y+1, r19	; 0x01
						TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    372c:	99 0f       	add	r25, r25
    372e:	39 2f       	mov	r19, r25
    3730:	33 0f       	add	r19, r19
    3732:	33 0f       	add	r19, r19
    3734:	93 0f       	add	r25, r19
    3736:	29 1b       	sub	r18, r25
    3738:	20 5d       	subi	r18, 0xD0	; 208
    373a:	2a 83       	std	Y+2, r18	; 0x02
						TextBuffer[2] = ':';
    373c:	4a e3       	ldi	r20, 0x3A	; 58
    373e:	4b 83       	std	Y+3, r20	; 0x03
					  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    3740:	22 81       	ldd	r18, Z+2	; 0x02
    3742:	28 9f       	mul	r18, r24
    3744:	91 2d       	mov	r25, r1
    3746:	11 24       	eor	r1, r1
    3748:	96 95       	lsr	r25
    374a:	96 95       	lsr	r25
    374c:	96 95       	lsr	r25
    374e:	30 e3       	ldi	r19, 0x30	; 48
    3750:	39 0f       	add	r19, r25
    3752:	3c 83       	std	Y+4, r19	; 0x04
						TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    3754:	99 0f       	add	r25, r25
    3756:	39 2f       	mov	r19, r25
    3758:	33 0f       	add	r19, r19
    375a:	33 0f       	add	r19, r19
    375c:	93 0f       	add	r25, r19
    375e:	29 1b       	sub	r18, r25
    3760:	20 5d       	subi	r18, 0xD0	; 208
    3762:	2d 83       	std	Y+5, r18	; 0x05
						TextBuffer[5] = ':';
    3764:	4e 83       	std	Y+6, r20	; 0x06
						TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    3766:	91 81       	ldd	r25, Z+1	; 0x01
    3768:	98 9f       	mul	r25, r24
    376a:	81 2d       	mov	r24, r1
    376c:	11 24       	eor	r1, r1
    376e:	86 95       	lsr	r24
    3770:	86 95       	lsr	r24
    3772:	86 95       	lsr	r24
    3774:	20 e3       	ldi	r18, 0x30	; 48
    3776:	28 0f       	add	r18, r24
    3778:	2f 83       	std	Y+7, r18	; 0x07
						TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    377a:	88 0f       	add	r24, r24
    377c:	28 2f       	mov	r18, r24
    377e:	22 0f       	add	r18, r18
    3780:	22 0f       	add	r18, r18
    3782:	82 0f       	add	r24, r18
    3784:	98 1b       	sub	r25, r24
    3786:	90 5d       	subi	r25, 0xD0	; 208
    3788:	98 87       	std	Y+8, r25	; 0x08
/*						TextBuffer[8] = ':';
						TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
						TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
						TextBuffer[11] = 0;*/
						TextBuffer[8] = 0;
    378a:	19 86       	std	Y+9, r1	; 0x09
						SetLCD(0,"\x84");
    378c:	65 e7       	ldi	r22, 0x75	; 117
    378e:	70 e2       	ldi	r23, 0x20	; 32
    3790:	80 e0       	ldi	r24, 0x00	; 0
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,TextBuffer);
    3798:	be 01       	movw	r22, r28
    379a:	6f 5f       	subi	r22, 0xFF	; 255
    379c:	7f 4f       	sbci	r23, 0xFF	; 255
    379e:	81 e0       	ldi	r24, 0x01	; 1
    37a0:	90 e0       	ldi	r25, 0x00	; 0
    37a2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					}
					break;
    37a6:	b5 c4       	rjmp	.+2410   	; 0x4112 <__stack+0x113>
					default:
					{
						char TextBuffer[9];

						OperatingMode = NORMALMODE;
    37a8:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
						TextStringPtr = 0;
    37ac:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

						SetLCD(0,"\x80");
    37b0:	61 e5       	ldi	r22, 0x51	; 81
    37b2:	70 e2       	ldi	r23, 0x20	; 32
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,"                ");
    37bc:	64 e6       	ldi	r22, 0x64	; 100
    37be:	70 e2       	ldi	r23, 0x20	; 32
    37c0:	81 e0       	ldi	r24, 0x01	; 1
    37c2:	90 e0       	ldi	r25, 0x00	; 0
    37c4:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(0,"\xC0");
    37c8:	6f e2       	ldi	r22, 0x2F	; 47
    37ca:	70 e2       	ldi	r23, 0x20	; 32
    37cc:	80 e0       	ldi	r24, 0x00	; 0
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1, TextString[TextStringPtr]);
    37d4:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    37d8:	51 e1       	ldi	r21, 0x11	; 17
    37da:	65 9f       	mul	r22, r21
    37dc:	b0 01       	movw	r22, r0
    37de:	11 24       	eor	r1, r1
    37e0:	6a 5d       	subi	r22, 0xDA	; 218
    37e2:	7d 4d       	sbci	r23, 0xDD	; 221
    37e4:	81 e0       	ldi	r24, 0x01	; 1
    37e6:	90 e0       	ldi	r25, 0x00	; 0
    37e8:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

						TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    37ec:	e6 e1       	ldi	r30, 0x16	; 22
    37ee:	fa e3       	ldi	r31, 0x3A	; 58
    37f0:	23 81       	ldd	r18, Z+3	; 0x03
    37f2:	8d ec       	ldi	r24, 0xCD	; 205
    37f4:	28 9f       	mul	r18, r24
    37f6:	91 2d       	mov	r25, r1
    37f8:	11 24       	eor	r1, r1
    37fa:	96 95       	lsr	r25
    37fc:	96 95       	lsr	r25
    37fe:	96 95       	lsr	r25
    3800:	30 e3       	ldi	r19, 0x30	; 48
    3802:	39 0f       	add	r19, r25
    3804:	39 83       	std	Y+1, r19	; 0x01
						TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    3806:	99 0f       	add	r25, r25
    3808:	39 2f       	mov	r19, r25
    380a:	33 0f       	add	r19, r19
    380c:	33 0f       	add	r19, r19
    380e:	93 0f       	add	r25, r19
    3810:	29 1b       	sub	r18, r25
    3812:	20 5d       	subi	r18, 0xD0	; 208
    3814:	2a 83       	std	Y+2, r18	; 0x02
						TextBuffer[2] = ':';
    3816:	4a e3       	ldi	r20, 0x3A	; 58
    3818:	4b 83       	std	Y+3, r20	; 0x03
					  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    381a:	22 81       	ldd	r18, Z+2	; 0x02
    381c:	28 9f       	mul	r18, r24
    381e:	91 2d       	mov	r25, r1
    3820:	11 24       	eor	r1, r1
    3822:	96 95       	lsr	r25
    3824:	96 95       	lsr	r25
    3826:	96 95       	lsr	r25
    3828:	30 e3       	ldi	r19, 0x30	; 48
    382a:	39 0f       	add	r19, r25
    382c:	3c 83       	std	Y+4, r19	; 0x04
						TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    382e:	99 0f       	add	r25, r25
    3830:	39 2f       	mov	r19, r25
    3832:	33 0f       	add	r19, r19
    3834:	33 0f       	add	r19, r19
    3836:	93 0f       	add	r25, r19
    3838:	29 1b       	sub	r18, r25
    383a:	20 5d       	subi	r18, 0xD0	; 208
    383c:	2d 83       	std	Y+5, r18	; 0x05
						TextBuffer[5] = ':';
    383e:	4e 83       	std	Y+6, r20	; 0x06
						TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    3840:	91 81       	ldd	r25, Z+1	; 0x01
    3842:	98 9f       	mul	r25, r24
    3844:	81 2d       	mov	r24, r1
    3846:	11 24       	eor	r1, r1
    3848:	86 95       	lsr	r24
    384a:	86 95       	lsr	r24
    384c:	86 95       	lsr	r24
    384e:	20 e3       	ldi	r18, 0x30	; 48
    3850:	28 0f       	add	r18, r24
    3852:	2f 83       	std	Y+7, r18	; 0x07
						TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    3854:	88 0f       	add	r24, r24
    3856:	28 2f       	mov	r18, r24
    3858:	22 0f       	add	r18, r18
    385a:	22 0f       	add	r18, r18
    385c:	82 0f       	add	r24, r18
    385e:	98 1b       	sub	r25, r24
    3860:	90 5d       	subi	r25, 0xD0	; 208
    3862:	98 87       	std	Y+8, r25	; 0x08
/*						TextBuffer[8] = ':';
						TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
						TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
						TextBuffer[11] = 0;*/
						TextBuffer[8] = 0;
    3864:	19 86       	std	Y+9, r1	; 0x09
						SetLCD(0,"\x84");
    3866:	65 e7       	ldi	r22, 0x75	; 117
    3868:	70 e2       	ldi	r23, 0x20	; 32
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	90 e0       	ldi	r25, 0x00	; 0
    386e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,TextBuffer);
    3872:	be 01       	movw	r22, r28
    3874:	6f 5f       	subi	r22, 0xFF	; 255
    3876:	7f 4f       	sbci	r23, 0xFF	; 255
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	90 e0       	ldi	r25, 0x00	; 0
    387c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetConsoleData();
    3880:	0e 94 90 07 	call	0xf20	; 0xf20 <SetConsoleData>
					}
					break;
    3884:	46 c4       	rjmp	.+2188   	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case RIGHT:
		{
			if (EventOn)
    3886:	01 2b       	or	r16, r17
    3888:	09 f0       	breq	.+2      	; 0x388c <__DATA_REGION_LENGTH__+0x188c>
    388a:	43 c4       	rjmp	.+2182   	; 0x4112 <__stack+0x113>
			{
				switch (OperatingMode)
    388c:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    3890:	82 30       	cpi	r24, 0x02	; 2
    3892:	09 f0       	breq	.+2      	; 0x3896 <__DATA_REGION_LENGTH__+0x1896>
    3894:	3e c4       	rjmp	.+2172   	; 0x4112 <__stack+0x113>
					{
					}
					break;
					case MASTERMODE:
					{
						if (ConsoleMasterSettings[4])
    3896:	80 91 92 2b 	lds	r24, 0x2B92	; 0x802b92 <ConsoleMasterSettings+0x4>
    389a:	88 23       	and	r24, r24
    389c:	09 f4       	brne	.+2      	; 0x38a0 <__DATA_REGION_LENGTH__+0x18a0>
    389e:	39 c4       	rjmp	.+2162   	; 0x4112 <__stack+0x113>
						{
							unsigned char cntByte;

							ConsoleMasterSettings[TextStringPtr] = 1;
    38a0:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    38a4:	f0 e0       	ldi	r31, 0x00	; 0
    38a6:	e2 57       	subi	r30, 0x72	; 114
    38a8:	f4 4d       	sbci	r31, 0xD4	; 212
    38aa:	81 e0       	ldi	r24, 0x01	; 1
    38ac:	80 83       	st	Z, r24
							SetLCD(0,"\xC0");
    38ae:	6f e2       	ldi	r22, 0x2F	; 47
    38b0:	70 e2       	ldi	r23, 0x20	; 32
    38b2:	80 e0       	ldi	r24, 0x00	; 0
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
							SetLCD(1,"Yes             ");
    38ba:	68 e8       	ldi	r22, 0x88	; 136
    38bc:	70 e2       	ldi	r23, 0x20	; 32
    38be:	81 e0       	ldi	r24, 0x01	; 1
    38c0:	90 e0       	ldi	r25, 0x00	; 0
    38c2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    38c6:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    38ca:	e1 e0       	ldi	r30, 0x01	; 1
    38cc:	ea 0f       	add	r30, r26
    38ce:	b0 e0       	ldi	r27, 0x00	; 0
    38d0:	ab 53       	subi	r26, 0x3B	; 59
    38d2:	bc 4d       	sbci	r27, 0xDC	; 220
    38d4:	84 e9       	ldi	r24, 0x94	; 148
    38d6:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    38d8:	81 e0       	ldi	r24, 0x01	; 1
    38da:	8e 0f       	add	r24, r30
    38dc:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	eb 53       	subi	r30, 0x3B	; 59
    38e4:	fc 4d       	sbci	r31, 0xDC	; 220
    38e6:	10 82       	st	Z, r1
							for (cntByte=0; cntByte<5; cntByte++)
    38e8:	80 e0       	ldi	r24, 0x00	; 0
    38ea:	11 c0       	rjmp	.+34     	; 0x390e <__DATA_REGION_LENGTH__+0x190e>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    38ec:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    38f0:	91 e0       	ldi	r25, 0x01	; 1
    38f2:	9e 0f       	add	r25, r30
    38f4:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    38f8:	f0 e0       	ldi	r31, 0x00	; 0
    38fa:	a8 2f       	mov	r26, r24
    38fc:	b0 e0       	ldi	r27, 0x00	; 0
    38fe:	a2 57       	subi	r26, 0x72	; 114
    3900:	b4 4d       	sbci	r27, 0xD4	; 212
    3902:	9c 91       	ld	r25, X
    3904:	eb 53       	subi	r30, 0x3B	; 59
    3906:	fc 4d       	sbci	r31, 0xDC	; 220
    3908:	9f 77       	andi	r25, 0x7F	; 127
    390a:	90 83       	st	Z, r25
							SetLCD(0,"\xC0");
							SetLCD(1,"Yes             ");

							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
							for (cntByte=0; cntByte<5; cntByte++)
    390c:	8f 5f       	subi	r24, 0xFF	; 255
    390e:	85 30       	cpi	r24, 0x05	; 5
    3910:	68 f3       	brcs	.-38     	; 0x38ec <__DATA_REGION_LENGTH__+0x18ec>
    3912:	ff c3       	rjmp	.+2046   	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case UP:
		{
			if (EventOn)
    3914:	01 2b       	or	r16, r17
    3916:	09 f0       	breq	.+2      	; 0x391a <__DATA_REGION_LENGTH__+0x191a>
    3918:	fc c3       	rjmp	.+2040   	; 0x4112 <__stack+0x113>
			{		
				TextStringPtr--;
    391a:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    391e:	81 50       	subi	r24, 0x01	; 1
    3920:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
				switch (OperatingMode)
    3924:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <OperatingMode>
    3928:	91 30       	cpi	r25, 0x01	; 1
    392a:	01 f1       	breq	.+64     	; 0x396c <__DATA_REGION_LENGTH__+0x196c>
    392c:	38 f0       	brcs	.+14     	; 0x393c <__DATA_REGION_LENGTH__+0x193c>
    392e:	92 30       	cpi	r25, 0x02	; 2
    3930:	09 f4       	brne	.+2      	; 0x3934 <__DATA_REGION_LENGTH__+0x1934>
    3932:	44 c0       	rjmp	.+136    	; 0x39bc <__DATA_REGION_LENGTH__+0x19bc>
    3934:	93 30       	cpi	r25, 0x03	; 3
    3936:	09 f4       	brne	.+2      	; 0x393a <__DATA_REGION_LENGTH__+0x193a>
    3938:	74 c0       	rjmp	.+232    	; 0x3a22 <__DATA_REGION_LENGTH__+0x1a22>
    393a:	eb c3       	rjmp	.+2006   	; 0x4112 <__stack+0x113>
				{
					case NORMALMODE:
					{
						if (TextStringPtr>3)
    393c:	84 30       	cpi	r24, 0x04	; 4
    393e:	18 f0       	brcs	.+6      	; 0x3946 <__DATA_REGION_LENGTH__+0x1946>
							TextStringPtr=3;
    3940:	83 e0       	ldi	r24, 0x03	; 3
    3942:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
						SetLCD(0,"\xC0");					
    3946:	6f e2       	ldi	r22, 0x2F	; 47
    3948:	70 e2       	ldi	r23, 0x20	; 32
    394a:	80 e0       	ldi	r24, 0x00	; 0
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
		 				SetLCD(1,TextString[TextStringPtr]);
    3952:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3956:	81 e1       	ldi	r24, 0x11	; 17
    3958:	68 9f       	mul	r22, r24
    395a:	b0 01       	movw	r22, r0
    395c:	11 24       	eor	r1, r1
    395e:	6a 5d       	subi	r22, 0xDA	; 218
    3960:	7d 4d       	sbci	r23, 0xDD	; 221
    3962:	81 e0       	ldi	r24, 0x01	; 1
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					}
					break;
    396a:	d3 c3       	rjmp	.+1958   	; 0x4112 <__stack+0x113>
					case MODULEMODE:
					{
						if (TextStringPtr>28)
    396c:	8d 31       	cpi	r24, 0x1D	; 29
    396e:	18 f0       	brcs	.+6      	; 0x3976 <__DATA_REGION_LENGTH__+0x1976>
							TextStringPtr=28;
    3970:	8c e1       	ldi	r24, 0x1C	; 28
    3972:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>

						SetLCD(0,"\x80");					
    3976:	61 e5       	ldi	r22, 0x51	; 81
    3978:	70 e2       	ldi	r23, 0x20	; 32
    397a:	80 e0       	ldi	r24, 0x00	; 0
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,ModuleTextString[TextStringPtr]);
    3982:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3986:	91 e1       	ldi	r25, 0x11	; 17
    3988:	69 9f       	mul	r22, r25
    398a:	b0 01       	movw	r22, r0
    398c:	11 24       	eor	r1, r1
    398e:	6c 55       	subi	r22, 0x5C	; 92
    3990:	74 4d       	sbci	r23, 0xD4	; 212
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(0,"\xC0");							
    399a:	6f e2       	ldi	r22, 0x2F	; 47
    399c:	70 e2       	ldi	r23, 0x20	; 32
    399e:	80 e0       	ldi	r24, 0x00	; 0
    39a0:	90 e0       	ldi	r25, 0x00	; 0
    39a2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
//						SetLCD(1,"Select Module   ");
						SetLCD(1,"Toggle by SELECT");
    39a6:	67 e7       	ldi	r22, 0x77	; 119
    39a8:	70 e2       	ldi	r23, 0x20	; 32
    39aa:	81 e0       	ldi	r24, 0x01	; 1
    39ac:	90 e0       	ldi	r25, 0x00	; 0
    39ae:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						ShowFunction(TextStringPtr);
    39b2:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    39b6:	0e 94 17 03 	call	0x62e	; 0x62e <ShowFunction>
					}
					break;
    39ba:	ab c3       	rjmp	.+1878   	; 0x4112 <__stack+0x113>
					case MASTERMODE:
					{
						if (TextStringPtr>3)
    39bc:	84 30       	cpi	r24, 0x04	; 4
    39be:	18 f0       	brcs	.+6      	; 0x39c6 <__DATA_REGION_LENGTH__+0x19c6>
							TextStringPtr=3;
    39c0:	83 e0       	ldi	r24, 0x03	; 3
    39c2:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
						SetLCD(0,"\x80");										
    39c6:	61 e5       	ldi	r22, 0x51	; 81
    39c8:	70 e2       	ldi	r23, 0x20	; 32
    39ca:	80 e0       	ldi	r24, 0x00	; 0
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,MasterTextString[TextStringPtr]);
    39d2:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    39d6:	e1 e1       	ldi	r30, 0x11	; 17
    39d8:	6e 9f       	mul	r22, r30
    39da:	b0 01       	movw	r22, r0
    39dc:	11 24       	eor	r1, r1
    39de:	6b 53       	subi	r22, 0x3B	; 59
    39e0:	7b 4d       	sbci	r23, 0xDB	; 219
    39e2:	81 e0       	ldi	r24, 0x01	; 1
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(0,"\xC0");
    39ea:	6f e2       	ldi	r22, 0x2F	; 47
    39ec:	70 e2       	ldi	r23, 0x20	; 32
    39ee:	80 e0       	ldi	r24, 0x00	; 0
    39f0:	90 e0       	ldi	r25, 0x00	; 0
    39f2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						if (ConsoleMasterSettings[TextStringPtr])
    39f6:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    39fa:	f0 e0       	ldi	r31, 0x00	; 0
    39fc:	e2 57       	subi	r30, 0x72	; 114
    39fe:	f4 4d       	sbci	r31, 0xD4	; 212
    3a00:	80 81       	ld	r24, Z
    3a02:	88 23       	and	r24, r24
    3a04:	39 f0       	breq	.+14     	; 0x3a14 <__DATA_REGION_LENGTH__+0x1a14>
						{
							SetLCD(1,"Yes             ");
    3a06:	68 e8       	ldi	r22, 0x88	; 136
    3a08:	70 e2       	ldi	r23, 0x20	; 32
    3a0a:	81 e0       	ldi	r24, 0x01	; 1
    3a0c:	90 e0       	ldi	r25, 0x00	; 0
    3a0e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
    3a12:	7f c3       	rjmp	.+1790   	; 0x4112 <__stack+0x113>
						}
						else
						{
							SetLCD(1," No             ");
    3a14:	69 e9       	ldi	r22, 0x99	; 153
    3a16:	70 e2       	ldi	r23, 0x20	; 32
    3a18:	81 e0       	ldi	r24, 0x01	; 1
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
    3a20:	78 c3       	rjmp	.+1776   	; 0x4112 <__stack+0x113>
						}
					}
					break;
					case SYSTEMMODE:
					{
						if (TextStringPtr>5)
    3a22:	86 30       	cpi	r24, 0x06	; 6
    3a24:	18 f0       	brcs	.+6      	; 0x3a2c <__DATA_REGION_LENGTH__+0x1a2c>
							TextStringPtr=5;
    3a26:	85 e0       	ldi	r24, 0x05	; 5
    3a28:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>

						if (!CardInserted)
    3a2c:	80 91 6d 22 	lds	r24, 0x226D	; 0x80226d <CardInserted>
    3a30:	81 11       	cpse	r24, r1
    3a32:	07 c0       	rjmp	.+14     	; 0x3a42 <__DATA_REGION_LENGTH__+0x1a42>
						{
							if (TextStringPtr==4)
    3a34:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3a38:	84 30       	cpi	r24, 0x04	; 4
    3a3a:	19 f4       	brne	.+6      	; 0x3a42 <__DATA_REGION_LENGTH__+0x1a42>
								TextStringPtr=2;
    3a3c:	82 e0       	ldi	r24, 0x02	; 2
    3a3e:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
						}
						SetLCD(0,"\x80");										
    3a42:	61 e5       	ldi	r22, 0x51	; 81
    3a44:	70 e2       	ldi	r23, 0x20	; 32
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,SystemTextString[TextStringPtr]);
    3a4e:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3a52:	f1 e1       	ldi	r31, 0x11	; 17
    3a54:	6f 9f       	mul	r22, r31
    3a56:	b0 01       	movw	r22, r0
    3a58:	11 24       	eor	r1, r1
    3a5a:	6f 55       	subi	r22, 0x5F	; 95
    3a5c:	72 4d       	sbci	r23, 0xD2	; 210
    3a5e:	81 e0       	ldi	r24, 0x01	; 1
    3a60:	90 e0       	ldi	r25, 0x00	; 0
    3a62:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

						switch (TextStringPtr)
    3a66:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3a6a:	88 23       	and	r24, r24
    3a6c:	19 f0       	breq	.+6      	; 0x3a74 <__DATA_REGION_LENGTH__+0x1a74>
    3a6e:	85 30       	cpi	r24, 0x05	; 5
    3a70:	21 f0       	breq	.+8      	; 0x3a7a <__DATA_REGION_LENGTH__+0x1a7a>
    3a72:	10 c0       	rjmp	.+32     	; 0x3a94 <__DATA_REGION_LENGTH__+0x1a94>
						{
							case 0:
							{
								ShowConfig();
    3a74:	0e 94 51 24 	call	0x48a2	; 0x48a2 <ShowConfig>
							}
							break;
    3a78:	4c c3       	rjmp	.+1688   	; 0x4112 <__stack+0x113>
							case 5:
							{
								SetLCD(0,"\xC0");
    3a7a:	6f e2       	ldi	r22, 0x2F	; 47
    3a7c:	70 e2       	ldi	r23, 0x20	; 32
    3a7e:	80 e0       	ldi	r24, 0x00	; 0
    3a80:	90 e0       	ldi	r25, 0x00	; 0
    3a82:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(1,IDString);
    3a86:	60 e0       	ldi	r22, 0x00	; 0
    3a88:	70 e2       	ldi	r23, 0x20	; 32
    3a8a:	81 e0       	ldi	r24, 0x01	; 1
    3a8c:	90 e0       	ldi	r25, 0x00	; 0
    3a8e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
							}
							break;
    3a92:	3f c3       	rjmp	.+1662   	; 0x4112 <__stack+0x113>
							default:
							{
								SetLCD(0,"\xC0");
    3a94:	6f e2       	ldi	r22, 0x2F	; 47
    3a96:	70 e2       	ldi	r23, 0x20	; 32
    3a98:	80 e0       	ldi	r24, 0x00	; 0
    3a9a:	90 e0       	ldi	r25, 0x00	; 0
    3a9c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(1,"Press Enter/Esc ");
    3aa0:	65 ec       	ldi	r22, 0xC5	; 197
    3aa2:	70 e2       	ldi	r23, 0x20	; 32
    3aa4:	81 e0       	ldi	r24, 0x01	; 1
    3aa6:	90 e0       	ldi	r25, 0x00	; 0
    3aa8:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
							}
							break;
    3aac:	32 c3       	rjmp	.+1636   	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case DOWN:
		{
			if (EventOn)
    3aae:	01 2b       	or	r16, r17
    3ab0:	09 f0       	breq	.+2      	; 0x3ab4 <__DATA_REGION_LENGTH__+0x1ab4>
    3ab2:	2f c3       	rjmp	.+1630   	; 0x4112 <__stack+0x113>
			{
				TextStringPtr++;
    3ab4:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3ab8:	8f 5f       	subi	r24, 0xFF	; 255
    3aba:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
				switch (OperatingMode)
    3abe:	90 91 23 21 	lds	r25, 0x2123	; 0x802123 <OperatingMode>
    3ac2:	91 30       	cpi	r25, 0x01	; 1
    3ac4:	f9 f0       	breq	.+62     	; 0x3b04 <__DATA_REGION_LENGTH__+0x1b04>
    3ac6:	38 f0       	brcs	.+14     	; 0x3ad6 <__DATA_REGION_LENGTH__+0x1ad6>
    3ac8:	92 30       	cpi	r25, 0x02	; 2
    3aca:	09 f4       	brne	.+2      	; 0x3ace <__DATA_REGION_LENGTH__+0x1ace>
    3acc:	42 c0       	rjmp	.+132    	; 0x3b52 <__DATA_REGION_LENGTH__+0x1b52>
    3ace:	93 30       	cpi	r25, 0x03	; 3
    3ad0:	09 f4       	brne	.+2      	; 0x3ad4 <__DATA_REGION_LENGTH__+0x1ad4>
    3ad2:	71 c0       	rjmp	.+226    	; 0x3bb6 <__DATA_REGION_LENGTH__+0x1bb6>
    3ad4:	1e c3       	rjmp	.+1596   	; 0x4112 <__stack+0x113>
				{
					case NORMALMODE:
					{
						if (TextStringPtr>3)
    3ad6:	84 30       	cpi	r24, 0x04	; 4
    3ad8:	10 f0       	brcs	.+4      	; 0x3ade <__DATA_REGION_LENGTH__+0x1ade>
							TextStringPtr=0;
    3ada:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
						SetLCD(0,"\xC0");			
    3ade:	6f e2       	ldi	r22, 0x2F	; 47
    3ae0:	70 e2       	ldi	r23, 0x20	; 32
    3ae2:	80 e0       	ldi	r24, 0x00	; 0
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
		 				SetLCD(1,TextString[TextStringPtr]);
    3aea:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3aee:	31 e1       	ldi	r19, 0x11	; 17
    3af0:	63 9f       	mul	r22, r19
    3af2:	b0 01       	movw	r22, r0
    3af4:	11 24       	eor	r1, r1
    3af6:	6a 5d       	subi	r22, 0xDA	; 218
    3af8:	7d 4d       	sbci	r23, 0xDD	; 221
    3afa:	81 e0       	ldi	r24, 0x01	; 1
    3afc:	90 e0       	ldi	r25, 0x00	; 0
    3afe:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					}
					break;
    3b02:	07 c3       	rjmp	.+1550   	; 0x4112 <__stack+0x113>
					case MODULEMODE:
					{
						if (TextStringPtr>28)
    3b04:	8d 31       	cpi	r24, 0x1D	; 29
    3b06:	10 f0       	brcs	.+4      	; 0x3b0c <__DATA_REGION_LENGTH__+0x1b0c>
							TextStringPtr=0;
    3b08:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

						SetLCD(0,"\x80");							
    3b0c:	61 e5       	ldi	r22, 0x51	; 81
    3b0e:	70 e2       	ldi	r23, 0x20	; 32
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,ModuleTextString[TextStringPtr]);
    3b18:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3b1c:	51 e1       	ldi	r21, 0x11	; 17
    3b1e:	65 9f       	mul	r22, r21
    3b20:	b0 01       	movw	r22, r0
    3b22:	11 24       	eor	r1, r1
    3b24:	6c 55       	subi	r22, 0x5C	; 92
    3b26:	74 4d       	sbci	r23, 0xD4	; 212
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(0,"\xC0");							
    3b30:	6f e2       	ldi	r22, 0x2F	; 47
    3b32:	70 e2       	ldi	r23, 0x20	; 32
    3b34:	80 e0       	ldi	r24, 0x00	; 0
    3b36:	90 e0       	ldi	r25, 0x00	; 0
    3b38:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
//						SetLCD(1,"Select Module   ");
						SetLCD(1,"Toggle by SELECT");
    3b3c:	67 e7       	ldi	r22, 0x77	; 119
    3b3e:	70 e2       	ldi	r23, 0x20	; 32
    3b40:	81 e0       	ldi	r24, 0x01	; 1
    3b42:	90 e0       	ldi	r25, 0x00	; 0
    3b44:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						ShowFunction(TextStringPtr);
    3b48:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3b4c:	0e 94 17 03 	call	0x62e	; 0x62e <ShowFunction>
					}
					break;
    3b50:	e0 c2       	rjmp	.+1472   	; 0x4112 <__stack+0x113>
					case MASTERMODE:
					{
						if (TextStringPtr>3)
    3b52:	84 30       	cpi	r24, 0x04	; 4
    3b54:	10 f0       	brcs	.+4      	; 0x3b5a <__DATA_REGION_LENGTH__+0x1b5a>
							TextStringPtr=0;
    3b56:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>
						SetLCD(0,"\x80");					
    3b5a:	61 e5       	ldi	r22, 0x51	; 81
    3b5c:	70 e2       	ldi	r23, 0x20	; 32
    3b5e:	80 e0       	ldi	r24, 0x00	; 0
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,MasterTextString[TextStringPtr]);
    3b66:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3b6a:	81 e1       	ldi	r24, 0x11	; 17
    3b6c:	68 9f       	mul	r22, r24
    3b6e:	b0 01       	movw	r22, r0
    3b70:	11 24       	eor	r1, r1
    3b72:	6b 53       	subi	r22, 0x3B	; 59
    3b74:	7b 4d       	sbci	r23, 0xDB	; 219
    3b76:	81 e0       	ldi	r24, 0x01	; 1
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(0,"\xC0");
    3b7e:	6f e2       	ldi	r22, 0x2F	; 47
    3b80:	70 e2       	ldi	r23, 0x20	; 32
    3b82:	80 e0       	ldi	r24, 0x00	; 0
    3b84:	90 e0       	ldi	r25, 0x00	; 0
    3b86:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						if (ConsoleMasterSettings[TextStringPtr])
    3b8a:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    3b8e:	f0 e0       	ldi	r31, 0x00	; 0
    3b90:	e2 57       	subi	r30, 0x72	; 114
    3b92:	f4 4d       	sbci	r31, 0xD4	; 212
    3b94:	80 81       	ld	r24, Z
    3b96:	88 23       	and	r24, r24
    3b98:	39 f0       	breq	.+14     	; 0x3ba8 <__DATA_REGION_LENGTH__+0x1ba8>
						{
							SetLCD(1,"Yes             ");
    3b9a:	68 e8       	ldi	r22, 0x88	; 136
    3b9c:	70 e2       	ldi	r23, 0x20	; 32
    3b9e:	81 e0       	ldi	r24, 0x01	; 1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
    3ba6:	b5 c2       	rjmp	.+1386   	; 0x4112 <__stack+0x113>
						}
						else
						{
							SetLCD(1," No             ");
    3ba8:	69 e9       	ldi	r22, 0x99	; 153
    3baa:	70 e2       	ldi	r23, 0x20	; 32
    3bac:	81 e0       	ldi	r24, 0x01	; 1
    3bae:	90 e0       	ldi	r25, 0x00	; 0
    3bb0:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
    3bb4:	ae c2       	rjmp	.+1372   	; 0x4112 <__stack+0x113>
						}
					}
					break;
					case SYSTEMMODE:
					{
						if (TextStringPtr>5)
    3bb6:	86 30       	cpi	r24, 0x06	; 6
    3bb8:	10 f0       	brcs	.+4      	; 0x3bbe <__DATA_REGION_LENGTH__+0x1bbe>
							TextStringPtr=0;
    3bba:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

						if (!CardInserted)
    3bbe:	80 91 6d 22 	lds	r24, 0x226D	; 0x80226d <CardInserted>
    3bc2:	81 11       	cpse	r24, r1
    3bc4:	07 c0       	rjmp	.+14     	; 0x3bd4 <__DATA_REGION_LENGTH__+0x1bd4>
						{
							if (TextStringPtr==3)
    3bc6:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3bca:	83 30       	cpi	r24, 0x03	; 3
    3bcc:	19 f4       	brne	.+6      	; 0x3bd4 <__DATA_REGION_LENGTH__+0x1bd4>
								TextStringPtr=5;
    3bce:	85 e0       	ldi	r24, 0x05	; 5
    3bd0:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
						}
						SetLCD(0,"\x80");										
    3bd4:	61 e5       	ldi	r22, 0x51	; 81
    3bd6:	70 e2       	ldi	r23, 0x20	; 32
    3bd8:	80 e0       	ldi	r24, 0x00	; 0
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						SetLCD(1,SystemTextString[TextStringPtr]);
    3be0:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3be4:	91 e1       	ldi	r25, 0x11	; 17
    3be6:	69 9f       	mul	r22, r25
    3be8:	b0 01       	movw	r22, r0
    3bea:	11 24       	eor	r1, r1
    3bec:	6f 55       	subi	r22, 0x5F	; 95
    3bee:	72 4d       	sbci	r23, 0xD2	; 210
    3bf0:	81 e0       	ldi	r24, 0x01	; 1
    3bf2:	90 e0       	ldi	r25, 0x00	; 0
    3bf4:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
						switch (TextStringPtr)
    3bf8:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3bfc:	88 23       	and	r24, r24
    3bfe:	19 f0       	breq	.+6      	; 0x3c06 <__DATA_REGION_LENGTH__+0x1c06>
    3c00:	85 30       	cpi	r24, 0x05	; 5
    3c02:	21 f0       	breq	.+8      	; 0x3c0c <__DATA_REGION_LENGTH__+0x1c0c>
    3c04:	10 c0       	rjmp	.+32     	; 0x3c26 <__DATA_REGION_LENGTH__+0x1c26>
						{
							case 0:
							{
								ShowConfig();
    3c06:	0e 94 51 24 	call	0x48a2	; 0x48a2 <ShowConfig>
							}
							break;
    3c0a:	83 c2       	rjmp	.+1286   	; 0x4112 <__stack+0x113>
							case 5:
							{
								SetLCD(0,"\xC0");
    3c0c:	6f e2       	ldi	r22, 0x2F	; 47
    3c0e:	70 e2       	ldi	r23, 0x20	; 32
    3c10:	80 e0       	ldi	r24, 0x00	; 0
    3c12:	90 e0       	ldi	r25, 0x00	; 0
    3c14:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(1,IDString);
    3c18:	60 e0       	ldi	r22, 0x00	; 0
    3c1a:	70 e2       	ldi	r23, 0x20	; 32
    3c1c:	81 e0       	ldi	r24, 0x01	; 1
    3c1e:	90 e0       	ldi	r25, 0x00	; 0
    3c20:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
							}
							break;
    3c24:	76 c2       	rjmp	.+1260   	; 0x4112 <__stack+0x113>
							default:
							{
								SetLCD(0,"\xC0");
    3c26:	6f e2       	ldi	r22, 0x2F	; 47
    3c28:	70 e2       	ldi	r23, 0x20	; 32
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
								SetLCD(1,"Press Enter/Esc ");
    3c32:	65 ec       	ldi	r22, 0xC5	; 197
    3c34:	70 e2       	ldi	r23, 0x20	; 32
    3c36:	81 e0       	ldi	r24, 0x01	; 1
    3c38:	90 e0       	ldi	r25, 0x00	; 0
    3c3a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
							}
							break;
    3c3e:	69 c2       	rjmp	.+1234   	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case LEFT:
		{
			if (EventOn)
    3c40:	01 2b       	or	r16, r17
    3c42:	09 f0       	breq	.+2      	; 0x3c46 <__DATA_REGION_LENGTH__+0x1c46>
    3c44:	66 c2       	rjmp	.+1228   	; 0x4112 <__stack+0x113>
			{
				switch (OperatingMode)
    3c46:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    3c4a:	82 30       	cpi	r24, 0x02	; 2
    3c4c:	09 f0       	breq	.+2      	; 0x3c50 <__DATA_REGION_LENGTH__+0x1c50>
    3c4e:	61 c2       	rjmp	.+1218   	; 0x4112 <__stack+0x113>
					{
					}
					break;
					case MASTERMODE:
					{
						if (ConsoleMasterSettings[4])
    3c50:	80 91 92 2b 	lds	r24, 0x2B92	; 0x802b92 <ConsoleMasterSettings+0x4>
    3c54:	88 23       	and	r24, r24
    3c56:	09 f4       	brne	.+2      	; 0x3c5a <__DATA_REGION_LENGTH__+0x1c5a>
    3c58:	5c c2       	rjmp	.+1208   	; 0x4112 <__stack+0x113>
						{
							unsigned char cntByte;

							ConsoleMasterSettings[TextStringPtr] = 0;
    3c5a:	e0 91 81 22 	lds	r30, 0x2281	; 0x802281 <TextStringPtr>
    3c5e:	f0 e0       	ldi	r31, 0x00	; 0
    3c60:	e2 57       	subi	r30, 0x72	; 114
    3c62:	f4 4d       	sbci	r31, 0xD4	; 212
    3c64:	10 82       	st	Z, r1
							SetLCD(0,"\xC0");
    3c66:	6f e2       	ldi	r22, 0x2F	; 47
    3c68:	70 e2       	ldi	r23, 0x20	; 32
    3c6a:	80 e0       	ldi	r24, 0x00	; 0
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
							SetLCD(1," No             ");
    3c72:	69 e9       	ldi	r22, 0x99	; 153
    3c74:	70 e2       	ldi	r23, 0x20	; 32
    3c76:	81 e0       	ldi	r24, 0x01	; 1
    3c78:	90 e0       	ldi	r25, 0x00	; 0
    3c7a:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
							switch (TextStringPtr)
    3c7e:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3c82:	82 30       	cpi	r24, 0x02	; 2
    3c84:	18 f0       	brcs	.+6      	; 0x3c8c <__DATA_REGION_LENGTH__+0x1c8c>
    3c86:	82 30       	cpi	r24, 0x02	; 2
    3c88:	21 f0       	breq	.+8      	; 0x3c92 <__DATA_REGION_LENGTH__+0x1c92>
    3c8a:	33 c0       	rjmp	.+102    	; 0x3cf2 <__DATA_REGION_LENGTH__+0x1cf2>
							{
								case AUTOCUERESET:
								case CUETOCRM:
								{
									CueControl();
    3c8c:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
								}
								break;
    3c90:	30 c0       	rjmp	.+96     	; 0x3cf2 <__DATA_REGION_LENGTH__+0x1cf2>
								case AUTOCOM:
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    3c92:	e0 ea       	ldi	r30, 0xA0	; 160
    3c94:	f2 e2       	ldi	r31, 0x22	; 34
    3c96:	80 89       	ldd	r24, Z+16	; 0x10
    3c98:	87 7f       	andi	r24, 0xF7	; 247
    3c9a:	80 8b       	std	Z+16, r24	; 0x10
									if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    3c9c:	4e 2d       	mov	r20, r14
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	fa 01       	movw	r30, r20
    3ca2:	ee 0f       	add	r30, r30
    3ca4:	ff 1f       	adc	r31, r31
    3ca6:	ee 0f       	add	r30, r30
    3ca8:	ff 1f       	adc	r31, r31
    3caa:	ee 0f       	add	r30, r30
    3cac:	ff 1f       	adc	r31, r31
    3cae:	e5 5f       	subi	r30, 0xF5	; 245
    3cb0:	f4 4d       	sbci	r31, 0xD4	; 212
    3cb2:	97 81       	ldd	r25, Z+7	; 0x07
    3cb4:	99 23       	and	r25, r25
    3cb6:	c4 f4       	brge	.+48     	; 0x3ce8 <__DATA_REGION_LENGTH__+0x1ce8>
    3cb8:	9d e1       	ldi	r25, 0x1D	; 29
    3cba:	94 9f       	mul	r25, r20
    3cbc:	f0 01       	movw	r30, r0
    3cbe:	95 9f       	mul	r25, r21
    3cc0:	f0 0d       	add	r31, r0
    3cc2:	11 24       	eor	r1, r1
    3cc4:	e5 5e       	subi	r30, 0xE5	; 229
    3cc6:	f7 4c       	sbci	r31, 0xC7	; 199
    3cc8:	96 85       	ldd	r25, Z+14	; 0x0e
    3cca:	99 23       	and	r25, r25
    3ccc:	69 f0       	breq	.+26     	; 0x3ce8 <__DATA_REGION_LENGTH__+0x1ce8>
    3cce:	fa 01       	movw	r30, r20
    3cd0:	e0 56       	subi	r30, 0x60	; 96
    3cd2:	fd 4d       	sbci	r31, 0xDD	; 221
    3cd4:	90 81       	ld	r25, Z
    3cd6:	94 ff       	sbrs	r25, 4
    3cd8:	07 c0       	rjmp	.+14     	; 0x3ce8 <__DATA_REGION_LENGTH__+0x1ce8>
    3cda:	90 91 90 2b 	lds	r25, 0x2B90	; 0x802b90 <ConsoleMasterSettings+0x2>
    3cde:	99 23       	and	r25, r25
    3ce0:	19 f0       	breq	.+6      	; 0x3ce8 <__DATA_REGION_LENGTH__+0x1ce8>
									{
										ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    3ce2:	88 60       	ori	r24, 0x08	; 8
    3ce4:	80 93 b0 22 	sts	0x22B0, r24	; 0x8022b0 <ConsoleFunctionData+0x10>
									}
   								CheckTBMic();
    3ce8:	0e 94 41 03 	call	0x682	; 0x682 <CheckTBMic>
									SendSerialData = 1;
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
								}
								break;
							}
	
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3cf2:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3cf6:	e1 e0       	ldi	r30, 0x01	; 1
    3cf8:	ea 0f       	add	r30, r26
    3cfa:	b0 e0       	ldi	r27, 0x00	; 0
    3cfc:	ab 53       	subi	r26, 0x3B	; 59
    3cfe:	bc 4d       	sbci	r27, 0xDC	; 220
    3d00:	84 e9       	ldi	r24, 0x94	; 148
    3d02:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3d04:	81 e0       	ldi	r24, 0x01	; 1
    3d06:	8e 0f       	add	r24, r30
    3d08:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	eb 53       	subi	r30, 0x3B	; 59
    3d10:	fc 4d       	sbci	r31, 0xDC	; 220
    3d12:	10 82       	st	Z, r1
							for (cntByte=0; cntByte<5; cntByte++)
    3d14:	80 e0       	ldi	r24, 0x00	; 0
    3d16:	11 c0       	rjmp	.+34     	; 0x3d3a <__DATA_REGION_LENGTH__+0x1d3a>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3d18:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3d1c:	91 e0       	ldi	r25, 0x01	; 1
    3d1e:	9e 0f       	add	r25, r30
    3d20:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    3d24:	f0 e0       	ldi	r31, 0x00	; 0
    3d26:	a8 2f       	mov	r26, r24
    3d28:	b0 e0       	ldi	r27, 0x00	; 0
    3d2a:	a2 57       	subi	r26, 0x72	; 114
    3d2c:	b4 4d       	sbci	r27, 0xD4	; 212
    3d2e:	9c 91       	ld	r25, X
    3d30:	eb 53       	subi	r30, 0x3B	; 59
    3d32:	fc 4d       	sbci	r31, 0xDC	; 220
    3d34:	9f 77       	andi	r25, 0x7F	; 127
    3d36:	90 83       	st	Z, r25
								break;
							}
	
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
							for (cntByte=0; cntByte<5; cntByte++)
    3d38:	8f 5f       	subi	r24, 0xFF	; 255
    3d3a:	85 30       	cpi	r24, 0x05	; 5
    3d3c:	68 f3       	brcs	.-38     	; 0x3d18 <__DATA_REGION_LENGTH__+0x1d18>
    3d3e:	e9 c1       	rjmp	.+978    	; 0x4112 <__stack+0x113>
		{
			unsigned char cntModule;

			for (cntModule=0; cntModule<NROFMODULES; cntModule++)
			{
				ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    3d40:	81 2f       	mov	r24, r17
    3d42:	90 e0       	ldi	r25, 0x00	; 0
    3d44:	fc 01       	movw	r30, r24
    3d46:	e0 56       	subi	r30, 0x60	; 96
    3d48:	fd 4d       	sbci	r31, 0xDD	; 221
    3d4a:	20 81       	ld	r18, Z
				ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    3d4c:	23 7f       	andi	r18, 0xF3	; 243
    3d4e:	20 83       	st	Z, r18

				if (ModuleType[cntModule] == TELCO)
    3d50:	fc 01       	movw	r30, r24
    3d52:	e0 59       	subi	r30, 0x90	; 144
    3d54:	fd 4d       	sbci	r31, 0xDD	; 221
    3d56:	80 81       	ld	r24, Z
    3d58:	82 30       	cpi	r24, 0x02	; 2
    3d5a:	e1 f4       	brne	.+56     	; 0x3d94 <__DATA_REGION_LENGTH__+0x1d94>
				{
					char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    3d5c:	81 2f       	mov	r24, r17
    3d5e:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
					if ((TelcoNr>=0) && (TelcoNr<4))
    3d62:	84 30       	cpi	r24, 0x04	; 4
    3d64:	b8 f4       	brcc	.+46     	; 0x3d94 <__DATA_REGION_LENGTH__+0x1d94>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    3d66:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3d6a:	a1 e0       	ldi	r26, 0x01	; 1
    3d6c:	ae 0f       	add	r26, r30
    3d6e:	f0 e0       	ldi	r31, 0x00	; 0
    3d70:	eb 53       	subi	r30, 0x3B	; 59
    3d72:	fc 4d       	sbci	r31, 0xDC	; 220
    3d74:	92 ec       	ldi	r25, 0xC2	; 194
    3d76:	90 83       	st	Z, r25
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    3d78:	e1 e0       	ldi	r30, 0x01	; 1
    3d7a:	ea 0f       	add	r30, r26
    3d7c:	b0 e0       	ldi	r27, 0x00	; 0
    3d7e:	ab 53       	subi	r26, 0x3B	; 59
    3d80:	bc 4d       	sbci	r27, 0xDC	; 220
    3d82:	8c 93       	st	X, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3d84:	81 e0       	ldi	r24, 0x01	; 1
    3d86:	8e 0f       	add	r24, r30
    3d88:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3d8c:	f0 e0       	ldi	r31, 0x00	; 0
    3d8e:	eb 53       	subi	r30, 0x3B	; 59
    3d90:	fc 4d       	sbci	r31, 0xDC	; 220
    3d92:	10 82       	st	Z, r1
		break;
		case CUERESET:
		{
			unsigned char cntModule;

			for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3d94:	1f 5f       	subi	r17, 0xFF	; 255
    3d96:	01 c0       	rjmp	.+2      	; 0x3d9a <__DATA_REGION_LENGTH__+0x1d9a>
	if ((Event&0x287) == EXT_MUTE)
	{
		EventType = MUTE;
	}

	switch (EventType)
    3d98:	10 e0       	ldi	r17, 0x00	; 0
		break;
		case CUERESET:
		{
			unsigned char cntModule;

			for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3d9a:	10 31       	cpi	r17, 0x10	; 16
    3d9c:	88 f2       	brcs	.-94     	; 0x3d40 <__DATA_REGION_LENGTH__+0x1d40>
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
					}
				}
			}
			CueControl();
    3d9e:	0e 94 ab 08 	call	0x1156	; 0x1156 <CueControl>
			DJControl();
    3da2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <DJControl>
			StudioMicControl();
    3da6:	0e 94 47 03 	call	0x68e	; 0x68e <StudioMicControl>
			CheckStartCondition(cntModule);
    3daa:	81 2f       	mov	r24, r17
    3dac:	0e 94 a8 06 	call	0xd50	; 0xd50 <CheckStartCondition>

			SendSerialData = 1;
    3db0:	81 e0       	ldi	r24, 0x01	; 1
    3db2:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
 		}
		break;
    3db6:	ad c1       	rjmp	.+858    	; 0x4112 <__stack+0x113>
		case SW_CC:
		{
			if (EventOn)
    3db8:	01 2b       	or	r16, r17
    3dba:	09 f0       	breq	.+2      	; 0x3dbe <__DATA_REGION_LENGTH__+0x1dbe>
    3dbc:	8d c0       	rjmp	.+282    	; 0x3ed8 <__DATA_REGION_LENGTH__+0x1ed8>
			{
				ConsoleFunctionData[16] &= NOT_POWER_ON_CC^0xFF;
    3dbe:	e0 ea       	ldi	r30, 0xA0	; 160
    3dc0:	f2 e2       	ldi	r31, 0x22	; 34
    3dc2:	80 89       	ldd	r24, Z+16	; 0x10
    3dc4:	8f 7b       	andi	r24, 0xBF	; 191
    3dc6:	80 8b       	std	Z+16, r24	; 0x10
				SetConsoleData();
    3dc8:	0e 94 90 07 	call	0xf20	; 0xf20 <SetConsoleData>
				Delay(5);
    3dcc:	85 e0       	ldi	r24, 0x05	; 5
    3dce:	90 e0       	ldi	r25, 0x00	; 0
    3dd0:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>
				// CS_CC = 0xFF;   // willem
				Delay(5);
    3dd4:	85 e0       	ldi	r24, 0x05	; 5
    3dd6:	90 e0       	ldi	r25, 0x00	; 0
    3dd8:	0e 94 45 0e 	call	0x1c8a	; 0x1c8a <Delay>
				CardInserted = 1;
    3ddc:	81 e0       	ldi	r24, 0x01	; 1
    3dde:	80 93 6d 22 	sts	0x226D, r24	; 0x80226d <CardInserted>
				SetAddress(I2CAddressSmartCard, 0x00);
    3de2:	60 e0       	ldi	r22, 0x00	; 0
    3de4:	70 e0       	ldi	r23, 0x00	; 0
    3de6:	80 e5       	ldi	r24, 0x50	; 80
    3de8:	0e 94 99 20 	call	0x4132	; 0x4132 <SetAddress>
				if (CardInserted)
    3dec:	80 91 6d 22 	lds	r24, 0x226D	; 0x80226d <CardInserted>
    3df0:	88 23       	and	r24, r24
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <__DATA_REGION_LENGTH__+0x1df6>
    3df4:	6d c0       	rjmp	.+218    	; 0x3ed0 <__DATA_REGION_LENGTH__+0x1ed0>
				{
					unsigned int Address;
					unsigned char cntByte;

					OperatingMode = SYSTEMMODE;
    3df6:	83 e0       	ldi	r24, 0x03	; 3
    3df8:	80 93 23 21 	sts	0x2123, r24	; 0x802123 <OperatingMode>
					TextStringPtr = 3;
    3dfc:	80 93 81 22 	sts	0x2281, r24	; 0x802281 <TextStringPtr>
					SetLCD(0,"\x80");
    3e00:	61 e5       	ldi	r22, 0x51	; 81
    3e02:	70 e2       	ldi	r23, 0x20	; 32
    3e04:	80 e0       	ldi	r24, 0x00	; 0
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1,SystemTextString[TextStringPtr]);
    3e0c:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3e10:	e1 e1       	ldi	r30, 0x11	; 17
    3e12:	6e 9f       	mul	r22, r30
    3e14:	b0 01       	movw	r22, r0
    3e16:	11 24       	eor	r1, r1
    3e18:	6f 55       	subi	r22, 0x5F	; 95
    3e1a:	72 4d       	sbci	r23, 0xD2	; 210
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(0,"\xC0");
    3e24:	6f e2       	ldi	r22, 0x2F	; 47
    3e26:	70 e2       	ldi	r23, 0x20	; 32
    3e28:	80 e0       	ldi	r24, 0x00	; 0
    3e2a:	90 e0       	ldi	r25, 0x00	; 0
    3e2c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1,"Press Enter/Esc ");
    3e30:	65 ec       	ldi	r22, 0xC5	; 197
    3e32:	70 e2       	ldi	r23, 0x20	; 32
    3e34:	81 e0       	ldi	r24, 0x01	; 1
    3e36:	90 e0       	ldi	r25, 0x00	; 0
    3e38:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

					SerialBufferOut[SerialBufferOutPtrTop++] = CARD_INSERTED;
    3e3c:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3e40:	a1 e0       	ldi	r26, 0x01	; 1
    3e42:	ae 0f       	add	r26, r30
    3e44:	f0 e0       	ldi	r31, 0x00	; 0
    3e46:	eb 53       	subi	r30, 0x3B	; 59
    3e48:	fc 4d       	sbci	r31, 0xDC	; 220
    3e4a:	88 e9       	ldi	r24, 0x98	; 152
    3e4c:	80 83       	st	Z, r24
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3e4e:	e1 e0       	ldi	r30, 0x01	; 1
    3e50:	ea 0f       	add	r30, r26
    3e52:	b0 e0       	ldi	r27, 0x00	; 0
    3e54:	ab 53       	subi	r26, 0x3B	; 59
    3e56:	bc 4d       	sbci	r27, 0xDC	; 220
    3e58:	1c 92       	st	X, r1
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    3e5a:	81 e0       	ldi	r24, 0x01	; 1
    3e5c:	8e 0f       	add	r24, r30
    3e5e:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3e62:	f0 e0       	ldi	r31, 0x00	; 0
    3e64:	eb 53       	subi	r30, 0x3B	; 59
    3e66:	fc 4d       	sbci	r31, 0xDC	; 220
    3e68:	81 e0       	ldi	r24, 0x01	; 1
    3e6a:	80 83       	st	Z, r24
				
					TempEnableSetup = ConsoleMasterSettings[4];
    3e6c:	80 91 92 2b 	lds	r24, 0x2B92	; 0x802b92 <ConsoleMasterSettings+0x4>
    3e70:	80 93 0a 27 	sts	0x270A, r24	; 0x80270a <TempEnableSetup>
					Address = NROFMODULES + (NROFMODULES*29) + 4;
					ReadData(I2CAddressSmartCard, Address, &(ConsoleMasterSettings[4]), 1);
    3e74:	21 e0       	ldi	r18, 0x01	; 1
    3e76:	42 e9       	ldi	r20, 0x92	; 146
    3e78:	5b e2       	ldi	r21, 0x2B	; 43
    3e7a:	64 ee       	ldi	r22, 0xE4	; 228
    3e7c:	71 e0       	ldi	r23, 0x01	; 1
    3e7e:	80 e5       	ldi	r24, 0x50	; 80
    3e80:	0e 94 9a 20 	call	0x4134	; 0x4134 <ReadData>

					SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3e84:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3e88:	e1 e0       	ldi	r30, 0x01	; 1
    3e8a:	ea 0f       	add	r30, r26
    3e8c:	b0 e0       	ldi	r27, 0x00	; 0
    3e8e:	ab 53       	subi	r26, 0x3B	; 59
    3e90:	bc 4d       	sbci	r27, 0xDC	; 220
    3e92:	84 e9       	ldi	r24, 0x94	; 148
    3e94:	8c 93       	st	X, r24
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3e96:	81 e0       	ldi	r24, 0x01	; 1
    3e98:	8e 0f       	add	r24, r30
    3e9a:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	eb 53       	subi	r30, 0x3B	; 59
    3ea2:	fc 4d       	sbci	r31, 0xDC	; 220
    3ea4:	10 82       	st	Z, r1
					for (cntByte=0; cntByte<5; cntByte++)
    3ea6:	80 e0       	ldi	r24, 0x00	; 0
    3ea8:	11 c0       	rjmp	.+34     	; 0x3ecc <__DATA_REGION_LENGTH__+0x1ecc>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3eaa:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3eae:	91 e0       	ldi	r25, 0x01	; 1
    3eb0:	9e 0f       	add	r25, r30
    3eb2:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    3eb6:	f0 e0       	ldi	r31, 0x00	; 0
    3eb8:	a8 2f       	mov	r26, r24
    3eba:	b0 e0       	ldi	r27, 0x00	; 0
    3ebc:	a2 57       	subi	r26, 0x72	; 114
    3ebe:	b4 4d       	sbci	r27, 0xD4	; 212
    3ec0:	9c 91       	ld	r25, X
    3ec2:	eb 53       	subi	r30, 0x3B	; 59
    3ec4:	fc 4d       	sbci	r31, 0xDC	; 220
    3ec6:	9f 77       	andi	r25, 0x7F	; 127
    3ec8:	90 83       	st	Z, r25
					Address = NROFMODULES + (NROFMODULES*29) + 4;
					ReadData(I2CAddressSmartCard, Address, &(ConsoleMasterSettings[4]), 1);

					SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
					for (cntByte=0; cntByte<5; cntByte++)
    3eca:	8f 5f       	subi	r24, 0xFF	; 255
    3ecc:	85 30       	cpi	r24, 0x05	; 5
    3ece:	68 f3       	brcs	.-38     	; 0x3eaa <__DATA_REGION_LENGTH__+0x1eaa>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
					}
				}
				SendSerialData = 1;
    3ed0:	81 e0       	ldi	r24, 0x01	; 1
    3ed2:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    3ed6:	1d c1       	rjmp	.+570    	; 0x4112 <__stack+0x113>
			}
			else
			{
				unsigned char cntByte;

				CardInserted = 0;
    3ed8:	10 92 6d 22 	sts	0x226D, r1	; 0x80226d <CardInserted>

				SerialBufferOut[SerialBufferOutPtrTop++] = CARD_INSERTED;
    3edc:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3ee0:	a1 e0       	ldi	r26, 0x01	; 1
    3ee2:	ae 0f       	add	r26, r30
    3ee4:	f0 e0       	ldi	r31, 0x00	; 0
    3ee6:	eb 53       	subi	r30, 0x3B	; 59
    3ee8:	fc 4d       	sbci	r31, 0xDC	; 220
    3eea:	88 e9       	ldi	r24, 0x98	; 152
    3eec:	80 83       	st	Z, r24
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3eee:	e1 e0       	ldi	r30, 0x01	; 1
    3ef0:	ea 0f       	add	r30, r26
    3ef2:	b0 e0       	ldi	r27, 0x00	; 0
    3ef4:	ab 53       	subi	r26, 0x3B	; 59
    3ef6:	bc 4d       	sbci	r27, 0xDC	; 220
    3ef8:	1c 92       	st	X, r1
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3efa:	a1 e0       	ldi	r26, 0x01	; 1
    3efc:	ae 0f       	add	r26, r30
    3efe:	f0 e0       	ldi	r31, 0x00	; 0
    3f00:	eb 53       	subi	r30, 0x3B	; 59
    3f02:	fc 4d       	sbci	r31, 0xDC	; 220
    3f04:	10 82       	st	Z, r1

				ConsoleMasterSettings[4] = TempEnableSetup; 
    3f06:	80 91 0a 27 	lds	r24, 0x270A	; 0x80270a <TempEnableSetup>
    3f0a:	80 93 92 2b 	sts	0x2B92, r24	; 0x802b92 <ConsoleMasterSettings+0x4>

				SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3f0e:	e1 e0       	ldi	r30, 0x01	; 1
    3f10:	ea 0f       	add	r30, r26
    3f12:	b0 e0       	ldi	r27, 0x00	; 0
    3f14:	ab 53       	subi	r26, 0x3B	; 59
    3f16:	bc 4d       	sbci	r27, 0xDC	; 220
    3f18:	84 e9       	ldi	r24, 0x94	; 148
    3f1a:	8c 93       	st	X, r24
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3f1c:	81 e0       	ldi	r24, 0x01	; 1
    3f1e:	8e 0f       	add	r24, r30
    3f20:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	eb 53       	subi	r30, 0x3B	; 59
    3f28:	fc 4d       	sbci	r31, 0xDC	; 220
    3f2a:	10 82       	st	Z, r1
				for (cntByte=0; cntByte<5; cntByte++)
    3f2c:	80 e0       	ldi	r24, 0x00	; 0
    3f2e:	11 c0       	rjmp	.+34     	; 0x3f52 <__DATA_REGION_LENGTH__+0x1f52>
				{
					SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3f30:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    3f34:	91 e0       	ldi	r25, 0x01	; 1
    3f36:	9e 0f       	add	r25, r30
    3f38:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    3f3c:	f0 e0       	ldi	r31, 0x00	; 0
    3f3e:	a8 2f       	mov	r26, r24
    3f40:	b0 e0       	ldi	r27, 0x00	; 0
    3f42:	a2 57       	subi	r26, 0x72	; 114
    3f44:	b4 4d       	sbci	r27, 0xD4	; 212
    3f46:	9c 91       	ld	r25, X
    3f48:	eb 53       	subi	r30, 0x3B	; 59
    3f4a:	fc 4d       	sbci	r31, 0xDC	; 220
    3f4c:	9f 77       	andi	r25, 0x7F	; 127
    3f4e:	90 83       	st	Z, r25

				ConsoleMasterSettings[4] = TempEnableSetup; 

				SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
				for (cntByte=0; cntByte<5; cntByte++)
    3f50:	8f 5f       	subi	r24, 0xFF	; 255
    3f52:	85 30       	cpi	r24, 0x05	; 5
    3f54:	68 f3       	brcs	.-38     	; 0x3f30 <__DATA_REGION_LENGTH__+0x1f30>
				{
					SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
				}

				ConsoleFunctionData[16] |= NOT_POWER_ON_CC;
    3f56:	e0 ea       	ldi	r30, 0xA0	; 160
    3f58:	f2 e2       	ldi	r31, 0x22	; 34
    3f5a:	80 89       	ldd	r24, Z+16	; 0x10
    3f5c:	80 64       	ori	r24, 0x40	; 64
    3f5e:	80 8b       	std	Z+16, r24	; 0x10
				SendSerialData = 1;
    3f60:	81 e0       	ldi	r24, 0x01	; 1
    3f62:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				// CS_CC = 0x00;   willem
				if ((OperatingMode == SYSTEMMODE) && ((TextStringPtr==3) || ((TextStringPtr==4))))
    3f66:	80 91 23 21 	lds	r24, 0x2123	; 0x802123 <OperatingMode>
    3f6a:	83 30       	cpi	r24, 0x03	; 3
    3f6c:	09 f0       	breq	.+2      	; 0x3f70 <__DATA_REGION_LENGTH__+0x1f70>
    3f6e:	d1 c0       	rjmp	.+418    	; 0x4112 <__stack+0x113>
    3f70:	80 91 81 22 	lds	r24, 0x2281	; 0x802281 <TextStringPtr>
    3f74:	83 50       	subi	r24, 0x03	; 3
    3f76:	82 30       	cpi	r24, 0x02	; 2
    3f78:	08 f0       	brcs	.+2      	; 0x3f7c <__DATA_REGION_LENGTH__+0x1f7c>
    3f7a:	cb c0       	rjmp	.+406    	; 0x4112 <__stack+0x113>
				{
					char TextBuffer[9];

					OperatingMode = NORMALMODE;
    3f7c:	10 92 23 21 	sts	0x2123, r1	; 0x802123 <OperatingMode>
					TextStringPtr = 0;
    3f80:	10 92 81 22 	sts	0x2281, r1	; 0x802281 <TextStringPtr>

					SetLCD(0,"\x80");
    3f84:	61 e5       	ldi	r22, 0x51	; 81
    3f86:	70 e2       	ldi	r23, 0x20	; 32
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1,"                ");
    3f90:	64 e6       	ldi	r22, 0x64	; 100
    3f92:	70 e2       	ldi	r23, 0x20	; 32
    3f94:	81 e0       	ldi	r24, 0x01	; 1
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(0,"\xC0");
    3f9c:	6f e2       	ldi	r22, 0x2F	; 47
    3f9e:	70 e2       	ldi	r23, 0x20	; 32
    3fa0:	80 e0       	ldi	r24, 0x00	; 0
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    3fa8:	60 91 81 22 	lds	r22, 0x2281	; 0x802281 <TextStringPtr>
    3fac:	f1 e1       	ldi	r31, 0x11	; 17
    3fae:	6f 9f       	mul	r22, r31
    3fb0:	b0 01       	movw	r22, r0
    3fb2:	11 24       	eor	r1, r1
    3fb4:	6a 5d       	subi	r22, 0xDA	; 218
    3fb6:	7d 4d       	sbci	r23, 0xDD	; 221
    3fb8:	81 e0       	ldi	r24, 0x01	; 1
    3fba:	90 e0       	ldi	r25, 0x00	; 0
    3fbc:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    3fc0:	e6 e1       	ldi	r30, 0x16	; 22
    3fc2:	fa e3       	ldi	r31, 0x3A	; 58
    3fc4:	23 81       	ldd	r18, Z+3	; 0x03
    3fc6:	8d ec       	ldi	r24, 0xCD	; 205
    3fc8:	28 9f       	mul	r18, r24
    3fca:	91 2d       	mov	r25, r1
    3fcc:	11 24       	eor	r1, r1
    3fce:	96 95       	lsr	r25
    3fd0:	96 95       	lsr	r25
    3fd2:	96 95       	lsr	r25
    3fd4:	30 e3       	ldi	r19, 0x30	; 48
    3fd6:	39 0f       	add	r19, r25
    3fd8:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    3fda:	99 0f       	add	r25, r25
    3fdc:	39 2f       	mov	r19, r25
    3fde:	33 0f       	add	r19, r19
    3fe0:	33 0f       	add	r19, r19
    3fe2:	93 0f       	add	r25, r19
    3fe4:	29 1b       	sub	r18, r25
    3fe6:	92 2f       	mov	r25, r18
    3fe8:	90 5d       	subi	r25, 0xD0	; 208
    3fea:	9a 83       	std	Y+2, r25	; 0x02
					TextBuffer[2] = ':';
    3fec:	4a e3       	ldi	r20, 0x3A	; 58
    3fee:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    3ff0:	22 81       	ldd	r18, Z+2	; 0x02
    3ff2:	28 9f       	mul	r18, r24
    3ff4:	91 2d       	mov	r25, r1
    3ff6:	11 24       	eor	r1, r1
    3ff8:	96 95       	lsr	r25
    3ffa:	96 95       	lsr	r25
    3ffc:	96 95       	lsr	r25
    3ffe:	30 e3       	ldi	r19, 0x30	; 48
    4000:	39 0f       	add	r19, r25
    4002:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    4004:	99 0f       	add	r25, r25
    4006:	39 2f       	mov	r19, r25
    4008:	33 0f       	add	r19, r19
    400a:	33 0f       	add	r19, r19
    400c:	93 0f       	add	r25, r19
    400e:	29 1b       	sub	r18, r25
    4010:	92 2f       	mov	r25, r18
    4012:	90 5d       	subi	r25, 0xD0	; 208
    4014:	9d 83       	std	Y+5, r25	; 0x05
					TextBuffer[5] = ':';
    4016:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    4018:	91 81       	ldd	r25, Z+1	; 0x01
    401a:	98 9f       	mul	r25, r24
    401c:	81 2d       	mov	r24, r1
    401e:	11 24       	eor	r1, r1
    4020:	86 95       	lsr	r24
    4022:	86 95       	lsr	r24
    4024:	86 95       	lsr	r24
    4026:	20 e3       	ldi	r18, 0x30	; 48
    4028:	28 0f       	add	r18, r24
    402a:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    402c:	88 0f       	add	r24, r24
    402e:	28 2f       	mov	r18, r24
    4030:	22 0f       	add	r18, r18
    4032:	22 0f       	add	r18, r18
    4034:	82 0f       	add	r24, r18
    4036:	98 1b       	sub	r25, r24
    4038:	89 2f       	mov	r24, r25
    403a:	80 5d       	subi	r24, 0xD0	; 208
    403c:	88 87       	std	Y+8, r24	; 0x08
/*					TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    403e:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    4040:	65 e7       	ldi	r22, 0x75	; 117
    4042:	70 e2       	ldi	r23, 0x20	; 32
    4044:	80 e0       	ldi	r24, 0x00	; 0
    4046:	90 e0       	ldi	r25, 0x00	; 0
    4048:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
					SetLCD(1,TextBuffer);
    404c:	be 01       	movw	r22, r28
    404e:	6f 5f       	subi	r22, 0xFF	; 255
    4050:	7f 4f       	sbci	r23, 0xFF	; 255
    4052:	81 e0       	ldi	r24, 0x01	; 1
    4054:	90 e0       	ldi	r25, 0x00	; 0
    4056:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
    405a:	5b c0       	rjmp	.+182    	; 0x4112 <__stack+0x113>
			}
		}
		break;
		case MUTE:
		{
			char TelcoNr = GetTelcoNrFromModuleNr(Module);
    405c:	8e 2d       	mov	r24, r14
    405e:	0e 94 3a 03 	call	0x674	; 0x674 <GetTelcoNrFromModuleNr>
			
			if (ConsoleFunctionData[Module]&ON_LED)
    4062:	4e 2d       	mov	r20, r14
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	fa 01       	movw	r30, r20
    4068:	e0 56       	subi	r30, 0x60	; 96
    406a:	fd 4d       	sbci	r31, 0xDD	; 221
    406c:	90 81       	ld	r25, Z
    406e:	95 ff       	sbrs	r25, 5
    4070:	50 c0       	rjmp	.+160    	; 0x4112 <__stack+0x113>
			{
				if (EventOn)
    4072:	01 2b       	or	r16, r17
    4074:	39 f5       	brne	.+78     	; 0x40c4 <__stack+0xc5>
				{
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    4076:	fa 01       	movw	r30, r20
    4078:	e0 56       	subi	r30, 0x60	; 96
    407a:	fd 4d       	sbci	r31, 0xDD	; 221
    407c:	90 61       	ori	r25, 0x10	; 16
    407e:	90 83       	st	Z, r25
						cntMuteFunction[Module] = 0;
    4080:	fa 01       	movw	r30, r20
    4082:	ef 56       	subi	r30, 0x6F	; 111
    4084:	f2 4d       	sbci	r31, 0xD2	; 210
    4086:	10 82       	st	Z, r1
	
						if ((TelcoNr>=0) && (TelcoNr<4))
    4088:	84 30       	cpi	r24, 0x04	; 4
    408a:	c0 f4       	brcc	.+48     	; 0x40bc <__stack+0xbd>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    408c:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4090:	a1 e0       	ldi	r26, 0x01	; 1
    4092:	ae 0f       	add	r26, r30
    4094:	f0 e0       	ldi	r31, 0x00	; 0
    4096:	eb 53       	subi	r30, 0x3B	; 59
    4098:	fc 4d       	sbci	r31, 0xDC	; 220
    409a:	93 ec       	ldi	r25, 0xC3	; 195
    409c:	90 83       	st	Z, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    409e:	e1 e0       	ldi	r30, 0x01	; 1
    40a0:	ea 0f       	add	r30, r26
    40a2:	b0 e0       	ldi	r27, 0x00	; 0
    40a4:	ab 53       	subi	r26, 0x3B	; 59
    40a6:	bc 4d       	sbci	r27, 0xDC	; 220
    40a8:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    40aa:	81 e0       	ldi	r24, 0x01	; 1
    40ac:	8e 0f       	add	r24, r30
    40ae:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    40b2:	f0 e0       	ldi	r31, 0x00	; 0
    40b4:	eb 53       	subi	r30, 0x3B	; 59
    40b6:	fc 4d       	sbci	r31, 0xDC	; 220
    40b8:	81 e0       	ldi	r24, 0x01	; 1
    40ba:	80 83       	st	Z, r24
						}
	
						SendSerialData = 1;
    40bc:	81 e0       	ldi	r24, 0x01	; 1
    40be:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
    40c2:	27 c0       	rjmp	.+78     	; 0x4112 <__stack+0x113>
				}
				else
				{
					if (cntMuteFunction[Module] == 0)
    40c4:	fa 01       	movw	r30, r20
    40c6:	ef 56       	subi	r30, 0x6F	; 111
    40c8:	f2 4d       	sbci	r31, 0xD2	; 210
    40ca:	20 81       	ld	r18, Z
    40cc:	21 11       	cpse	r18, r1
    40ce:	21 c0       	rjmp	.+66     	; 0x4112 <__stack+0x113>
					{
							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    40d0:	fa 01       	movw	r30, r20
    40d2:	e0 56       	subi	r30, 0x60	; 96
    40d4:	fd 4d       	sbci	r31, 0xDD	; 221
    40d6:	9f 7e       	andi	r25, 0xEF	; 239
    40d8:	90 83       	st	Z, r25
	
							if ((TelcoNr>=0) && (TelcoNr<4))
    40da:	84 30       	cpi	r24, 0x04	; 4
    40dc:	b8 f4       	brcc	.+46     	; 0x410c <__stack+0x10d>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    40de:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    40e2:	a1 e0       	ldi	r26, 0x01	; 1
    40e4:	ae 0f       	add	r26, r30
    40e6:	f0 e0       	ldi	r31, 0x00	; 0
    40e8:	eb 53       	subi	r30, 0x3B	; 59
    40ea:	fc 4d       	sbci	r31, 0xDC	; 220
    40ec:	93 ec       	ldi	r25, 0xC3	; 195
    40ee:	90 83       	st	Z, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    40f0:	e1 e0       	ldi	r30, 0x01	; 1
    40f2:	ea 0f       	add	r30, r26
    40f4:	b0 e0       	ldi	r27, 0x00	; 0
    40f6:	ab 53       	subi	r26, 0x3B	; 59
    40f8:	bc 4d       	sbci	r27, 0xDC	; 220
    40fa:	8c 93       	st	X, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    40fc:	81 e0       	ldi	r24, 0x01	; 1
    40fe:	8e 0f       	add	r24, r30
    4100:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    4104:	f0 e0       	ldi	r31, 0x00	; 0
    4106:	eb 53       	subi	r30, 0x3B	; 59
    4108:	fc 4d       	sbci	r31, 0xDC	; 220
    410a:	10 82       	st	Z, r1
							}
						  SendSerialData = 1;
    410c:	81 e0       	ldi	r24, 0x01	; 1
    410e:	80 93 6f 22 	sts	0x226F, r24	; 0x80226f <SendSerialData>
				}
			}
		}
		break;
	}
}
    4112:	61 96       	adiw	r28, 0x11	; 17
    4114:	cd bf       	out	0x3d, r28	; 61
    4116:	de bf       	out	0x3e, r29	; 62
    4118:	df 91       	pop	r29
    411a:	cf 91       	pop	r28
    411c:	1f 91       	pop	r17
    411e:	0f 91       	pop	r16
    4120:	ff 90       	pop	r15
    4122:	ef 90       	pop	r14
    4124:	df 90       	pop	r13
    4126:	cf 90       	pop	r12
    4128:	bf 90       	pop	r11
    412a:	af 90       	pop	r10
    412c:	9f 90       	pop	r9
    412e:	8f 90       	pop	r8
    4130:	08 95       	ret

00004132 <SetAddress>:
	//PS1 = 1;
}


void SetAddress(unsigned char I2CAddress, unsigned int StartAddress)
{
    4132:	08 95       	ret

00004134 <ReadData>:

/***************************************************************
* READ_DATA_I2C                                                    *
***************************************************************/
void ReadData(unsigned char I2CAddress, unsigned int StartAddress, unsigned char *Buffer, unsigned char NrOfBytes)
{
    4134:	08 95       	ret

00004136 <SetupLCD>:
#define		LCD_E   0x20
//#define		STRB1   0x80


void SetupLCD()
{
    4136:	cf 93       	push	r28
    4138:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    413a:	80 ea       	ldi	r24, 0xA0	; 160
    413c:	8a 95       	dec	r24
    413e:	f1 f7       	brne	.-4      	; 0x413c <SetupLCD+0x6>


	// Wait minimal 15 ms
	_delay_us(15);

	PORTA_OUTCLR = LCD_E;
    4140:	e6 e0       	ldi	r30, 0x06	; 6
    4142:	f6 e0       	ldi	r31, 0x06	; 6
    4144:	80 e2       	ldi	r24, 0x20	; 32
    4146:	80 83       	st	Z, r24
	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    4148:	20 e4       	ldi	r18, 0x40	; 64
    414a:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    414c:	98 e0       	ldi	r25, 0x08	; 8
    414e:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    4150:	30 e1       	ldi	r19, 0x10	; 16
    4152:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    4154:	64 e0       	ldi	r22, 0x04	; 4
    4156:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;
    4158:	a5 e0       	ldi	r26, 0x05	; 5
    415a:	b6 e0       	ldi	r27, 0x06	; 6
    415c:	52 e0       	ldi	r21, 0x02	; 2
    415e:	5c 93       	st	X, r21
	PORTA_OUTSET = LCD_D4;
    4160:	41 e0       	ldi	r20, 0x01	; 1
    4162:	4c 93       	st	X, r20
	PORTA_OUTSET = LCD_E;
    4164:	8c 93       	st	X, r24
	PORTA_OUTCLR = LCD_E;
    4166:	80 83       	st	Z, r24
    4168:	cf eb       	ldi	r28, 0xBF	; 191
    416a:	d3 e0       	ldi	r29, 0x03	; 3
    416c:	21 97       	sbiw	r28, 0x01	; 1
    416e:	f1 f7       	brne	.-4      	; 0x416c <SetupLCD+0x36>
    4170:	00 c0       	rjmp	.+0      	; 0x4172 <SetupLCD+0x3c>
    4172:	00 00       	nop
	// Wait minimal 4.1 ms
	_delay_us(Wait*3);

	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    4174:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    4176:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    4178:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    417a:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;
    417c:	5c 93       	st	X, r21
	PORTA_OUTSET = LCD_D4;
    417e:	4c 93       	st	X, r20
	PORTA_OUTSET = LCD_E * 1;
    4180:	8c 93       	st	X, r24
    4182:	cf e3       	ldi	r28, 0x3F	; 63
    4184:	d1 e0       	ldi	r29, 0x01	; 1
    4186:	21 97       	sbiw	r28, 0x01	; 1
    4188:	f1 f7       	brne	.-4      	; 0x4186 <SetupLCD+0x50>
    418a:	00 c0       	rjmp	.+0      	; 0x418c <SetupLCD+0x56>
    418c:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    418e:	80 83       	st	Z, r24
	// Wait minimal 100 us

	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    4190:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    4192:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    4194:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    4196:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;
    4198:	5c 93       	st	X, r21
	PORTA_OUTSET = LCD_D4;
    419a:	4c 93       	st	X, r20
	PORTA_OUTSET = LCD_E ;
    419c:	8c 93       	st	X, r24
    419e:	cf e3       	ldi	r28, 0x3F	; 63
    41a0:	d1 e0       	ldi	r29, 0x01	; 1
    41a2:	21 97       	sbiw	r28, 0x01	; 1
    41a4:	f1 f7       	brne	.-4      	; 0x41a2 <SetupLCD+0x6c>
    41a6:	00 c0       	rjmp	.+0      	; 0x41a8 <SetupLCD+0x72>
    41a8:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    41aa:	80 83       	st	Z, r24
    41ac:	cf e3       	ldi	r28, 0x3F	; 63
    41ae:	d1 e0       	ldi	r29, 0x01	; 1
    41b0:	21 97       	sbiw	r28, 0x01	; 1
    41b2:	f1 f7       	brne	.-4      	; 0x41b0 <SetupLCD+0x7a>
    41b4:	00 c0       	rjmp	.+0      	; 0x41b6 <SetupLCD+0x80>
    41b6:	00 00       	nop

	// Busy cannot be checked
	_delay_us(Wait);

	// Setup/Reset Display to 4 bit mode
	PORTA_OUTCLR = LCD_RS;
    41b8:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    41ba:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    41bc:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    41be:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;
    41c0:	5c 93       	st	X, r21
	PORTA_OUTCLR = LCD_D4;
    41c2:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    41c4:	8c 93       	st	X, r24
    41c6:	cf e3       	ldi	r28, 0x3F	; 63
    41c8:	d1 e0       	ldi	r29, 0x01	; 1
    41ca:	21 97       	sbiw	r28, 0x01	; 1
    41cc:	f1 f7       	brne	.-4      	; 0x41ca <SetupLCD+0x94>
    41ce:	00 c0       	rjmp	.+0      	; 0x41d0 <SetupLCD+0x9a>
    41d0:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    41d2:	80 83       	st	Z, r24

	// Set number of lines etc...
	PORTA_OUTCLR = LCD_RS;
    41d4:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    41d6:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		// Function set
    41d8:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;		// Function set
    41da:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;		// Function set
    41dc:	5c 93       	st	X, r21
	PORTA_OUTCLR = LCD_D4;		// 4 bit
    41de:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    41e0:	8c 93       	st	X, r24
    41e2:	cf e3       	ldi	r28, 0x3F	; 63
    41e4:	d1 e0       	ldi	r29, 0x01	; 1
    41e6:	21 97       	sbiw	r28, 0x01	; 1
    41e8:	f1 f7       	brne	.-4      	; 0x41e6 <SetupLCD+0xb0>
    41ea:	00 c0       	rjmp	.+0      	; 0x41ec <SetupLCD+0xb6>
    41ec:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    41ee:	80 83       	st	Z, r24

	PORTA_OUTCLR = LCD_RS;
    41f0:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    41f2:	90 83       	st	Z, r25
	PORTA_OUTSET = LCD_D7;		// 2 lines
    41f4:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_D6;		// 5x7 dots chars
    41f6:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;		// *
    41f8:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;		// *
    41fa:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    41fc:	8c 93       	st	X, r24
    41fe:	cf e3       	ldi	r28, 0x3F	; 63
    4200:	d1 e0       	ldi	r29, 0x01	; 1
    4202:	21 97       	sbiw	r28, 0x01	; 1
    4204:	f1 f7       	brne	.-4      	; 0x4202 <SetupLCD+0xcc>
    4206:	00 c0       	rjmp	.+0      	; 0x4208 <SetupLCD+0xd2>
    4208:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    420a:	80 83       	st	Z, r24

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    420c:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_RS;
    420e:	20 83       	st	Z, r18
	PORTA_OUTSET = LCD_RW;
    4210:	9c 93       	st	X, r25
	PORTA_OUTSET = LCD_E;
    4212:	8c 93       	st	X, r24
    4214:	cf e3       	ldi	r28, 0x3F	; 63
    4216:	d1 e0       	ldi	r29, 0x01	; 1
    4218:	21 97       	sbiw	r28, 0x01	; 1
    421a:	f1 f7       	brne	.-4      	; 0x4218 <SetupLCD+0xe2>
    421c:	00 c0       	rjmp	.+0      	; 0x421e <SetupLCD+0xe8>
    421e:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4220:	80 83       	st	Z, r24
	PORTA_OUTSET = LCD_E;
    4222:	8c 93       	st	X, r24
	PORTA_OUTCLR = LCD_D4;		// *
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;

	TimeOut = 0x0F;
    4224:	8f e0       	ldi	r24, 0x0F	; 15
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    4226:	0c c0       	rjmp	.+24     	; 0x4240 <SetupLCD+0x10a>
	{
		PORTA_OUTCLR = LCD_E;
    4228:	80 e2       	ldi	r24, 0x20	; 32
    422a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    422e:	ef e3       	ldi	r30, 0x3F	; 63
    4230:	f1 e0       	ldi	r31, 0x01	; 1
    4232:	31 97       	sbiw	r30, 0x01	; 1
    4234:	f1 f7       	brne	.-4      	; 0x4232 <SetupLCD+0xfc>
    4236:	00 c0       	rjmp	.+0      	; 0x4238 <SetupLCD+0x102>
    4238:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
    423a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    423e:	89 2f       	mov	r24, r25
    4240:	9f ef       	ldi	r25, 0xFF	; 255
    4242:	98 0f       	add	r25, r24
    4244:	81 11       	cpse	r24, r1
    4246:	f0 cf       	rjmp	.-32     	; 0x4228 <SetupLCD+0xf2>
	{
		PORTA_OUTCLR = LCD_E;
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    4248:	e6 e0       	ldi	r30, 0x06	; 6
    424a:	f6 e0       	ldi	r31, 0x06	; 6
    424c:	80 e2       	ldi	r24, 0x20	; 32
    424e:	80 83       	st	Z, r24

	// Display Off
	PORTA_OUTCLR = LCD_RS;
    4250:	20 e4       	ldi	r18, 0x40	; 64
    4252:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    4254:	98 e0       	ldi	r25, 0x08	; 8
    4256:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		// Function set
    4258:	30 e1       	ldi	r19, 0x10	; 16
    425a:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;		// Function set
    425c:	64 e0       	ldi	r22, 0x04	; 4
    425e:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;		// Function set
    4260:	52 e0       	ldi	r21, 0x02	; 2
    4262:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;		
    4264:	41 e0       	ldi	r20, 0x01	; 1
    4266:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    4268:	a5 e0       	ldi	r26, 0x05	; 5
    426a:	b6 e0       	ldi	r27, 0x06	; 6
    426c:	8c 93       	st	X, r24
    426e:	cf e3       	ldi	r28, 0x3F	; 63
    4270:	d1 e0       	ldi	r29, 0x01	; 1
    4272:	21 97       	sbiw	r28, 0x01	; 1
    4274:	f1 f7       	brne	.-4      	; 0x4272 <SetupLCD+0x13c>
    4276:	00 c0       	rjmp	.+0      	; 0x4278 <SetupLCD+0x142>
    4278:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    427a:	80 83       	st	Z, r24

	PORTA_OUTCLR = LCD_RS;
    427c:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    427e:	90 83       	st	Z, r25
	PORTA_OUTSET = LCD_D7;		// Display off
    4280:	3c 93       	st	X, r19
	PORTA_OUTSET = LCD_D6;		
    4282:	6c 93       	st	X, r22
	PORTA_OUTCLR = LCD_D5;	 	// Cursor on
    4284:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;	 	// Cursor Blink
    4286:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    4288:	8c 93       	st	X, r24
    428a:	cf e3       	ldi	r28, 0x3F	; 63
    428c:	d1 e0       	ldi	r29, 0x01	; 1
    428e:	21 97       	sbiw	r28, 0x01	; 1
    4290:	f1 f7       	brne	.-4      	; 0x428e <SetupLCD+0x158>
    4292:	00 c0       	rjmp	.+0      	; 0x4294 <SetupLCD+0x15e>
    4294:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4296:	80 83       	st	Z, r24

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    4298:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_RS;
    429a:	20 83       	st	Z, r18
	PORTA_OUTSET = LCD_RW;
    429c:	9c 93       	st	X, r25
	PORTA_OUTSET = LCD_E;
    429e:	8c 93       	st	X, r24
    42a0:	cf e3       	ldi	r28, 0x3F	; 63
    42a2:	d1 e0       	ldi	r29, 0x01	; 1
    42a4:	21 97       	sbiw	r28, 0x01	; 1
    42a6:	f1 f7       	brne	.-4      	; 0x42a4 <SetupLCD+0x16e>
    42a8:	00 c0       	rjmp	.+0      	; 0x42aa <SetupLCD+0x174>
    42aa:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    42ac:	80 83       	st	Z, r24
	PORTA_OUTSET = LCD_E;
    42ae:	8c 93       	st	X, r24
	PORTA_OUTCLR = LCD_D4;	 	// Cursor Blink
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;

	TimeOut = 0x0F;
    42b0:	8f e0       	ldi	r24, 0x0F	; 15
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    42b2:	0c c0       	rjmp	.+24     	; 0x42cc <SetupLCD+0x196>
	{
		PORTA_OUTCLR = LCD_E;
    42b4:	80 e2       	ldi	r24, 0x20	; 32
    42b6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    42ba:	ef e3       	ldi	r30, 0x3F	; 63
    42bc:	f1 e0       	ldi	r31, 0x01	; 1
    42be:	31 97       	sbiw	r30, 0x01	; 1
    42c0:	f1 f7       	brne	.-4      	; 0x42be <SetupLCD+0x188>
    42c2:	00 c0       	rjmp	.+0      	; 0x42c4 <SetupLCD+0x18e>
    42c4:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
    42c6:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    42ca:	89 2f       	mov	r24, r25
    42cc:	9f ef       	ldi	r25, 0xFF	; 255
    42ce:	98 0f       	add	r25, r24
    42d0:	81 11       	cpse	r24, r1
    42d2:	f0 cf       	rjmp	.-32     	; 0x42b4 <SetupLCD+0x17e>
	{
		PORTA_OUTCLR = LCD_E;
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    42d4:	e6 e0       	ldi	r30, 0x06	; 6
    42d6:	f6 e0       	ldi	r31, 0x06	; 6
    42d8:	80 e2       	ldi	r24, 0x20	; 32
    42da:	80 83       	st	Z, r24

	// Display Clear
	PORTA_OUTCLR = LCD_RS;
    42dc:	20 e4       	ldi	r18, 0x40	; 64
    42de:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    42e0:	98 e0       	ldi	r25, 0x08	; 8
    42e2:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		// Function set
    42e4:	30 e1       	ldi	r19, 0x10	; 16
    42e6:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;		// Function set
    42e8:	64 e0       	ldi	r22, 0x04	; 4
    42ea:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;		// Function set
    42ec:	52 e0       	ldi	r21, 0x02	; 2
    42ee:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;		
    42f0:	41 e0       	ldi	r20, 0x01	; 1
    42f2:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    42f4:	a5 e0       	ldi	r26, 0x05	; 5
    42f6:	b6 e0       	ldi	r27, 0x06	; 6
    42f8:	8c 93       	st	X, r24
    42fa:	cf e3       	ldi	r28, 0x3F	; 63
    42fc:	d1 e0       	ldi	r29, 0x01	; 1
    42fe:	21 97       	sbiw	r28, 0x01	; 1
    4300:	f1 f7       	brne	.-4      	; 0x42fe <SetupLCD+0x1c8>
    4302:	00 c0       	rjmp	.+0      	; 0x4304 <SetupLCD+0x1ce>
    4304:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4306:	80 83       	st	Z, r24

	PORTA_OUTCLR = LCD_RS;
    4308:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    430a:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		
    430c:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;		
    430e:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;	 
    4310:	50 83       	st	Z, r21
	PORTA_OUTSET = LCD_D4;		
    4312:	4c 93       	st	X, r20
	PORTA_OUTSET = LCD_E;
    4314:	8c 93       	st	X, r24
    4316:	cf e3       	ldi	r28, 0x3F	; 63
    4318:	d1 e0       	ldi	r29, 0x01	; 1
    431a:	21 97       	sbiw	r28, 0x01	; 1
    431c:	f1 f7       	brne	.-4      	; 0x431a <SetupLCD+0x1e4>
    431e:	00 c0       	rjmp	.+0      	; 0x4320 <SetupLCD+0x1ea>
    4320:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4322:	80 83       	st	Z, r24

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    4324:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_RS;
    4326:	20 83       	st	Z, r18
	PORTA_OUTSET = LCD_RW;
    4328:	9c 93       	st	X, r25
	PORTA_OUTSET = LCD_E;
    432a:	8c 93       	st	X, r24
    432c:	cf e3       	ldi	r28, 0x3F	; 63
    432e:	d1 e0       	ldi	r29, 0x01	; 1
    4330:	21 97       	sbiw	r28, 0x01	; 1
    4332:	f1 f7       	brne	.-4      	; 0x4330 <SetupLCD+0x1fa>
    4334:	00 c0       	rjmp	.+0      	; 0x4336 <SetupLCD+0x200>
    4336:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4338:	80 83       	st	Z, r24
	PORTA_OUTSET = LCD_E;
    433a:	8c 93       	st	X, r24
	PORTA_OUTSET = LCD_D4;		
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;

	TimeOut = 0x0F;
    433c:	8f e0       	ldi	r24, 0x0F	; 15
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    433e:	0c c0       	rjmp	.+24     	; 0x4358 <SetupLCD+0x222>
	{
		PORTA_OUTCLR = LCD_E;
    4340:	80 e2       	ldi	r24, 0x20	; 32
    4342:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    4346:	ef e3       	ldi	r30, 0x3F	; 63
    4348:	f1 e0       	ldi	r31, 0x01	; 1
    434a:	31 97       	sbiw	r30, 0x01	; 1
    434c:	f1 f7       	brne	.-4      	; 0x434a <SetupLCD+0x214>
    434e:	00 c0       	rjmp	.+0      	; 0x4350 <SetupLCD+0x21a>
    4350:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
    4352:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    4356:	89 2f       	mov	r24, r25
    4358:	9f ef       	ldi	r25, 0xFF	; 255
    435a:	98 0f       	add	r25, r24
    435c:	81 11       	cpse	r24, r1
    435e:	f0 cf       	rjmp	.-32     	; 0x4340 <SetupLCD+0x20a>
	{
		PORTA_OUTCLR = LCD_E;
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    4360:	e6 e0       	ldi	r30, 0x06	; 6
    4362:	f6 e0       	ldi	r31, 0x06	; 6
    4364:	80 e2       	ldi	r24, 0x20	; 32
    4366:	80 83       	st	Z, r24

	// Entry mode
	PORTA_OUTCLR = LCD_RS;
    4368:	20 e4       	ldi	r18, 0x40	; 64
    436a:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    436c:	98 e0       	ldi	r25, 0x08	; 8
    436e:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    4370:	30 e1       	ldi	r19, 0x10	; 16
    4372:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    4374:	64 e0       	ldi	r22, 0x04	; 4
    4376:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;
    4378:	52 e0       	ldi	r21, 0x02	; 2
    437a:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;		
    437c:	41 e0       	ldi	r20, 0x01	; 1
    437e:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    4380:	a5 e0       	ldi	r26, 0x05	; 5
    4382:	b6 e0       	ldi	r27, 0x06	; 6
    4384:	8c 93       	st	X, r24
    4386:	cf e3       	ldi	r28, 0x3F	; 63
    4388:	d1 e0       	ldi	r29, 0x01	; 1
    438a:	21 97       	sbiw	r28, 0x01	; 1
    438c:	f1 f7       	brne	.-4      	; 0x438a <SetupLCD+0x254>
    438e:	00 c0       	rjmp	.+0      	; 0x4390 <SetupLCD+0x25a>
    4390:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4392:	80 83       	st	Z, r24

	PORTA_OUTCLR = LCD_RS;
    4394:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    4396:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		
    4398:	30 83       	st	Z, r19
	PORTA_OUTSET = LCD_D6;
    439a:	6c 93       	st	X, r22
	PORTA_OUTSET = LCD_D5;		// Position increment after char
    439c:	5c 93       	st	X, r21
	PORTA_OUTCLR = LCD_D4;		// No shift
    439e:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    43a0:	8c 93       	st	X, r24
    43a2:	cf e3       	ldi	r28, 0x3F	; 63
    43a4:	d1 e0       	ldi	r29, 0x01	; 1
    43a6:	21 97       	sbiw	r28, 0x01	; 1
    43a8:	f1 f7       	brne	.-4      	; 0x43a6 <SetupLCD+0x270>
    43aa:	00 c0       	rjmp	.+0      	; 0x43ac <SetupLCD+0x276>
    43ac:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    43ae:	80 83       	st	Z, r24

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    43b0:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_RS;
    43b2:	20 83       	st	Z, r18
	PORTA_OUTSET = LCD_RW;
    43b4:	9c 93       	st	X, r25
	PORTA_OUTSET = LCD_E;
    43b6:	8c 93       	st	X, r24
	PORTA_OUTCLR = LCD_D4;		// No shift
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;

	TimeOut = 0x0F;
    43b8:	8f e0       	ldi	r24, 0x0F	; 15
	PORTA_OUTSET = LCD_D7;
	PORTA_OUTCLR = LCD_RS;
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    43ba:	0c c0       	rjmp	.+24     	; 0x43d4 <SetupLCD+0x29e>
	{
		PORTA_OUTCLR = LCD_E;
    43bc:	80 e2       	ldi	r24, 0x20	; 32
    43be:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    43c2:	ef e3       	ldi	r30, 0x3F	; 63
    43c4:	f1 e0       	ldi	r31, 0x01	; 1
    43c6:	31 97       	sbiw	r30, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <SetupLCD+0x290>
    43ca:	00 c0       	rjmp	.+0      	; 0x43cc <SetupLCD+0x296>
    43cc:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
    43ce:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
	PORTA_OUTCLR = LCD_RS;
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    43d2:	89 2f       	mov	r24, r25
    43d4:	9f ef       	ldi	r25, 0xFF	; 255
    43d6:	98 0f       	add	r25, r24
    43d8:	81 11       	cpse	r24, r1
    43da:	f0 cf       	rjmp	.-32     	; 0x43bc <SetupLCD+0x286>
	{
		PORTA_OUTCLR = LCD_E;
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    43dc:	80 e2       	ldi	r24, 0x20	; 32
    43de:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
}
    43e2:	df 91       	pop	r29
    43e4:	cf 91       	pop	r28
    43e6:	08 95       	ret

000043e8 <SetLCD>:
/****************************************
* place data on LCD	RS = 0:	Instruction *
*					RS = 1:	Data        *
****************************************/
void SetLCD( int RS, char Buffer[] )
{
    43e8:	cf 93       	push	r28
    43ea:	df 93       	push	r29
    43ec:	ac 01       	movw	r20, r24
	unsigned char cntBuffer = 0;
    43ee:	20 e0       	ldi	r18, 0x00	; 0
//#define		LCD_D7  0x10
//#define		LCD_RW  0x8
//#define		LCD_RS  0x40
//#define		LCD_E   0x20	
	
	while (Buffer[cntBuffer] != 0)
    43f0:	89 c0       	rjmp	.+274    	; 0x4504 <SetLCD+0x11c>
	{
		
		//Buffer[cntBuffer]=0xff;
		

		PORTA_OUTCLR = LCD_RS;   //PORTA_OUT |= LCD_RS * RS;
    43f2:	c6 e0       	ldi	r28, 0x06	; 6
    43f4:	d6 e0       	ldi	r29, 0x06	; 6
    43f6:	80 e4       	ldi	r24, 0x40	; 64
    43f8:	88 83       	st	Y, r24
		PORTA_OUTSET = LCD_RW;
    43fa:	a5 e0       	ldi	r26, 0x05	; 5
    43fc:	b6 e0       	ldi	r27, 0x06	; 6
    43fe:	88 e0       	ldi	r24, 0x08	; 8
    4400:	8c 93       	st	X, r24
			
		PORTA_OUTSET = LCD_E;
    4402:	90 e2       	ldi	r25, 0x20	; 32
    4404:	9c 93       	st	X, r25
		PORTA_OUTCLR = LCD_E;			// 20
    4406:	98 83       	st	Y, r25
		PORTA_OUTSET = LCD_E;
    4408:	9c 93       	st	X, r25
			
//		PORTA_OUT = PORTA_OUT & 0xf0;
//		PORTA_OUT = PORTA_OUT | ((( char)Buffer[cntBuffer] & 0xF0) >> 4);					
		
	//	PORTA_OUT &= 0b11101000;		
		outb = ( char)Buffer[cntBuffer];
    440a:	90 81       	ld	r25, Z
		
		if(outb & 0x10)
    440c:	94 ff       	sbrs	r25, 4
    440e:	04 c0       	rjmp	.+8      	; 0x4418 <SetLCD+0x30>
			PORTA_OUTSET = LCD_D4;
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    4416:	03 c0       	rjmp	.+6      	; 0x441e <SetLCD+0x36>
		else
			PORTA_OUTCLR = LCD_D4;
    4418:	81 e0       	ldi	r24, 0x01	; 1
    441a:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
			
		if(outb & 0x20)
    441e:	95 ff       	sbrs	r25, 5
    4420:	04 c0       	rjmp	.+8      	; 0x442a <SetLCD+0x42>
			PORTA_OUTSET = LCD_D5;
    4422:	82 e0       	ldi	r24, 0x02	; 2
    4424:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    4428:	03 c0       	rjmp	.+6      	; 0x4430 <SetLCD+0x48>
		else
			PORTA_OUTCLR = LCD_D5;		
    442a:	82 e0       	ldi	r24, 0x02	; 2
    442c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
			
		if(outb & 0x40)
    4430:	96 ff       	sbrs	r25, 6
    4432:	04 c0       	rjmp	.+8      	; 0x443c <SetLCD+0x54>
			PORTA_OUTSET = LCD_D6;
    4434:	84 e0       	ldi	r24, 0x04	; 4
    4436:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    443a:	03 c0       	rjmp	.+6      	; 0x4442 <SetLCD+0x5a>
		else
			PORTA_OUTCLR = LCD_D6;
    443c:	84 e0       	ldi	r24, 0x04	; 4
    443e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
					
		if(outb & 0x80)
    4442:	99 23       	and	r25, r25
    4444:	24 f4       	brge	.+8      	; 0x444e <SetLCD+0x66>
			PORTA_OUTSET = LCD_D7;
    4446:	80 e1       	ldi	r24, 0x10	; 16
    4448:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    444c:	03 c0       	rjmp	.+6      	; 0x4454 <SetLCD+0x6c>
		else
			PORTA_OUTCLR = LCD_D7;
    444e:	80 e1       	ldi	r24, 0x10	; 16
    4450:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    4454:	8f e3       	ldi	r24, 0x3F	; 63
    4456:	91 e0       	ldi	r25, 0x01	; 1
    4458:	01 97       	sbiw	r24, 0x01	; 1
    445a:	f1 f7       	brne	.-4      	; 0x4458 <SetLCD+0x70>
    445c:	00 c0       	rjmp	.+0      	; 0x445e <SetLCD+0x76>
    445e:	00 00       	nop



		_delay_us(Wait);		
		
		if(RS==0)
    4460:	41 15       	cp	r20, r1
    4462:	51 05       	cpc	r21, r1
    4464:	21 f4       	brne	.+8      	; 0x446e <SetLCD+0x86>
			PORTA_OUTCLR = LCD_RS;   //PORTA_OUT |= LCD_RS * RS;
    4466:	80 e4       	ldi	r24, 0x40	; 64
    4468:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    446c:	06 c0       	rjmp	.+12     	; 0x447a <SetLCD+0x92>
		else if(RS==1)
    446e:	41 30       	cpi	r20, 0x01	; 1
    4470:	51 05       	cpc	r21, r1
    4472:	19 f4       	brne	.+6      	; 0x447a <SetLCD+0x92>
			PORTA_OUTSET = LCD_RS;		
    4474:	80 e4       	ldi	r24, 0x40	; 64
    4476:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
		
		PORTA_OUTCLR = LCD_RW;		
    447a:	a6 e0       	ldi	r26, 0x06	; 6
    447c:	b6 e0       	ldi	r27, 0x06	; 6
    447e:	88 e0       	ldi	r24, 0x08	; 8
    4480:	8c 93       	st	X, r24
		
		PORTA_OUTSET = LCD_E;
    4482:	90 e2       	ldi	r25, 0x20	; 32
    4484:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    4488:	cf e3       	ldi	r28, 0x3F	; 63
    448a:	d1 e0       	ldi	r29, 0x01	; 1
    448c:	21 97       	sbiw	r28, 0x01	; 1
    448e:	f1 f7       	brne	.-4      	; 0x448c <SetLCD+0xa4>
    4490:	00 c0       	rjmp	.+0      	; 0x4492 <SetLCD+0xaa>
    4492:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTCLR = LCD_E;
    4494:	9c 93       	st	X, r25
		
//		PORTA_OUT &= 0xf0;
//		PORTA_OUT |= ( ( char)Buffer[cntBuffer] & 0x0F );

		//PORTA_OUT &= 0b11101000;
		outb = ( char)Buffer[cntBuffer];
    4496:	90 81       	ld	r25, Z

		if(outb & 0x1)
    4498:	90 ff       	sbrs	r25, 0
    449a:	04 c0       	rjmp	.+8      	; 0x44a4 <SetLCD+0xbc>
			PORTA_OUTSET = LCD_D4;
    449c:	81 e0       	ldi	r24, 0x01	; 1
    449e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    44a2:	03 c0       	rjmp	.+6      	; 0x44aa <SetLCD+0xc2>
		else
			PORTA_OUTCLR = LCD_D4;
    44a4:	81 e0       	ldi	r24, 0x01	; 1
    44a6:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
		
		if(outb & 0x2)
    44aa:	91 ff       	sbrs	r25, 1
    44ac:	04 c0       	rjmp	.+8      	; 0x44b6 <SetLCD+0xce>
			PORTA_OUTSET = LCD_D5;
    44ae:	82 e0       	ldi	r24, 0x02	; 2
    44b0:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    44b4:	03 c0       	rjmp	.+6      	; 0x44bc <SetLCD+0xd4>
		else
			PORTA_OUTCLR = LCD_D5;
    44b6:	82 e0       	ldi	r24, 0x02	; 2
    44b8:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
		
		if(outb & 0x4)
    44bc:	92 ff       	sbrs	r25, 2
    44be:	04 c0       	rjmp	.+8      	; 0x44c8 <SetLCD+0xe0>
			PORTA_OUTSET = LCD_D6;
    44c0:	84 e0       	ldi	r24, 0x04	; 4
    44c2:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    44c6:	03 c0       	rjmp	.+6      	; 0x44ce <SetLCD+0xe6>
		else
			PORTA_OUTCLR = LCD_D6;
    44c8:	84 e0       	ldi	r24, 0x04	; 4
    44ca:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
		
		if(outb & 0x8)
    44ce:	93 ff       	sbrs	r25, 3
    44d0:	04 c0       	rjmp	.+8      	; 0x44da <SetLCD+0xf2>
			PORTA_OUTSET = LCD_D7;
    44d2:	80 e1       	ldi	r24, 0x10	; 16
    44d4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    44d8:	03 c0       	rjmp	.+6      	; 0x44e0 <SetLCD+0xf8>
		else
			PORTA_OUTCLR = LCD_D7;
    44da:	80 e1       	ldi	r24, 0x10	; 16
    44dc:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    44e0:	ef e3       	ldi	r30, 0x3F	; 63
    44e2:	f1 e0       	ldi	r31, 0x01	; 1
    44e4:	31 97       	sbiw	r30, 0x01	; 1
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <SetLCD+0xfc>
    44e8:	00 c0       	rjmp	.+0      	; 0x44ea <SetLCD+0x102>
    44ea:	00 00       	nop
		//PORTA_OUT |= outb | outc;
		
		
		_delay_us(Wait);
		
		PORTA_OUTSET = LCD_E;
    44ec:	90 e2       	ldi	r25, 0x20	; 32
    44ee:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    44f2:	cf e3       	ldi	r28, 0x3F	; 63
    44f4:	d1 e0       	ldi	r29, 0x01	; 1
    44f6:	21 97       	sbiw	r28, 0x01	; 1
    44f8:	f1 f7       	brne	.-4      	; 0x44f6 <SetLCD+0x10e>
    44fa:	00 c0       	rjmp	.+0      	; 0x44fc <SetLCD+0x114>
    44fc:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTCLR = LCD_E;		
    44fe:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>

		cntBuffer++;
    4502:	2f 5f       	subi	r18, 0xFF	; 255
//#define		LCD_D7  0x10
//#define		LCD_RW  0x8
//#define		LCD_RS  0x40
//#define		LCD_E   0x20	
	
	while (Buffer[cntBuffer] != 0)
    4504:	fb 01       	movw	r30, r22
    4506:	e2 0f       	add	r30, r18
    4508:	f1 1d       	adc	r31, r1
    450a:	80 81       	ld	r24, Z
    450c:	81 11       	cpse	r24, r1
    450e:	71 cf       	rjmp	.-286    	; 0x43f2 <SetLCD+0xa>
		_delay_us(Wait);
		PORTA_OUTCLR = LCD_E;		

		cntBuffer++;
	}
}
    4510:	df 91       	pop	r29
    4512:	cf 91       	pop	r28
    4514:	08 95       	ret

00004516 <ReadMasterSwitches>:

void ReadMasterSwitches()
{
	unsigned char cntByte;

	PORTB_OUTCLR = P10; //read master
    4516:	e6 e2       	ldi	r30, 0x26	; 38
    4518:	f6 e0       	ldi	r31, 0x06	; 6
    451a:	84 e0       	ldi	r24, 0x04	; 4
    451c:	80 83       	st	Z, r24
	PORTB_OUTCLR = P11; 
    451e:	92 e0       	ldi	r25, 0x02	; 2
    4520:	90 83       	st	Z, r25
	PORTC_OUTCLR = P12; 
    4522:	91 e0       	ldi	r25, 0x01	; 1
    4524:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
	PORTB_OUTCLR = P13; 
    4528:	98 e0       	ldi	r25, 0x08	; 8
    452a:	90 83       	st	Z, r25
	PORTC_OUTSET = P14; 
    452c:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>

	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    4530:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <Wait>
    4534:	03 c0       	rjmp	.+6      	; 0x453c <ReadMasterSwitches+0x26>
    4536:	8f 5f       	subi	r24, 0xFF	; 255
    4538:	80 93 09 25 	sts	0x2509, r24	; 0x802509 <Wait>
    453c:	80 91 09 25 	lds	r24, 0x2509	; 0x802509 <Wait>
    4540:	82 33       	cpi	r24, 0x32	; 50
    4542:	c8 f3       	brcs	.-14     	; 0x4536 <ReadMasterSwitches+0x20>
    4544:	20 e0       	ldi	r18, 0x00	; 0
    4546:	4b c0       	rjmp	.+150    	; 0x45de <ReadMasterSwitches+0xc8>
	for (cntByte=0; cntByte<8; cntByte++)
	{
		// If bit set and switch isn't ON send event is necessery, else reset counter
		unsigned char Bits;                                                                   // = P5;
		//Bits = PORTC_IN;
		Bits = PORTR_IN;  // willem
    4548:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7de7e8>
		Bits &=0x3;
    454c:	83 70       	andi	r24, 0x03	; 3
		if ((!(Bits&(0x01<<cntByte))) && (!(MasterData[cntByte]&0x80)))
    454e:	42 2f       	mov	r20, r18
    4550:	50 e0       	ldi	r21, 0x00	; 0
    4552:	90 e0       	ldi	r25, 0x00	; 0
    4554:	02 2e       	mov	r0, r18
    4556:	02 c0       	rjmp	.+4      	; 0x455c <ReadMasterSwitches+0x46>
    4558:	95 95       	asr	r25
    455a:	87 95       	ror	r24
    455c:	0a 94       	dec	r0
    455e:	e2 f7       	brpl	.-8      	; 0x4558 <ReadMasterSwitches+0x42>
    4560:	bc 01       	movw	r22, r24
    4562:	61 70       	andi	r22, 0x01	; 1
    4564:	77 27       	eor	r23, r23
    4566:	80 fd       	sbrc	r24, 0
    4568:	1e c0       	rjmp	.+60     	; 0x45a6 <ReadMasterSwitches+0x90>
    456a:	fa 01       	movw	r30, r20
    456c:	e5 50       	subi	r30, 0x05	; 5
    456e:	f6 4c       	sbci	r31, 0xC6	; 198
    4570:	80 81       	ld	r24, Z
    4572:	88 23       	and	r24, r24
    4574:	c4 f0       	brlt	.+48     	; 0x45a6 <ReadMasterSwitches+0x90>
		{
			if ((--MasterData[cntByte])&0x80)
    4576:	81 50       	subi	r24, 0x01	; 1
    4578:	fa 01       	movw	r30, r20
    457a:	e5 50       	subi	r30, 0x05	; 5
    457c:	f6 4c       	sbci	r31, 0xC6	; 198
    457e:	80 83       	st	Z, r24
    4580:	88 23       	and	r24, r24
    4582:	64 f5       	brge	.+88     	; 0x45dc <ReadMasterSwitches+0xc6>
			{
				EventBuffer[EventBufferPtrTop++] = 0x80 | cntByte;
    4584:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4588:	81 e0       	ldi	r24, 0x01	; 1
    458a:	8e 0f       	add	r24, r30
    458c:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    4590:	f0 e0       	ldi	r31, 0x00	; 0
    4592:	ee 0f       	add	r30, r30
    4594:	ff 1f       	adc	r31, r31
    4596:	e6 5f       	subi	r30, 0xF6	; 246
    4598:	fa 4d       	sbci	r31, 0xDA	; 218
    459a:	82 2f       	mov	r24, r18
    459c:	80 68       	ori	r24, 0x80	; 128
    459e:	90 e0       	ldi	r25, 0x00	; 0
    45a0:	80 83       	st	Z, r24
    45a2:	91 83       	std	Z+1, r25	; 0x01
    45a4:	1b c0       	rjmp	.+54     	; 0x45dc <ReadMasterSwitches+0xc6>
			}
		}
		else if ((Bits&(0x01<<cntByte))&& (MasterData[cntByte]&0x80))
    45a6:	67 2b       	or	r22, r23
    45a8:	c9 f0       	breq	.+50     	; 0x45dc <ReadMasterSwitches+0xc6>
    45aa:	fa 01       	movw	r30, r20
    45ac:	e5 50       	subi	r30, 0x05	; 5
    45ae:	f6 4c       	sbci	r31, 0xC6	; 198
    45b0:	80 81       	ld	r24, Z
    45b2:	88 23       	and	r24, r24
    45b4:	9c f4       	brge	.+38     	; 0x45dc <ReadMasterSwitches+0xc6>
		{
			MasterData[cntByte]=ATTACK;
    45b6:	fa 01       	movw	r30, r20
    45b8:	e5 50       	subi	r30, 0x05	; 5
    45ba:	f6 4c       	sbci	r31, 0xC6	; 198
    45bc:	81 e0       	ldi	r24, 0x01	; 1
    45be:	80 83       	st	Z, r24
			EventBuffer[EventBufferPtrTop++] = 0x180 | cntByte;
    45c0:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    45c4:	8e 0f       	add	r24, r30
    45c6:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    45ca:	f0 e0       	ldi	r31, 0x00	; 0
    45cc:	40 68       	ori	r20, 0x80	; 128
    45ce:	51 60       	ori	r21, 0x01	; 1
    45d0:	ee 0f       	add	r30, r30
    45d2:	ff 1f       	adc	r31, r31
    45d4:	e6 5f       	subi	r30, 0xF6	; 246
    45d6:	fa 4d       	sbci	r31, 0xDA	; 218
    45d8:	40 83       	st	Z, r20
    45da:	51 83       	std	Z+1, r21	; 0x01
	PORTB_OUTCLR = P13; 
	PORTC_OUTSET = P14; 

	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);

	for (cntByte=0; cntByte<8; cntByte++)
    45dc:	2f 5f       	subi	r18, 0xFF	; 255
    45de:	28 30       	cpi	r18, 0x08	; 8
    45e0:	08 f4       	brcc	.+2      	; 0x45e4 <ReadMasterSwitches+0xce>
    45e2:	b2 cf       	rjmp	.-156    	; 0x4548 <ReadMasterSwitches+0x32>
		{
			MasterData[cntByte]=ATTACK;
			EventBuffer[EventBufferPtrTop++] = 0x180 | cntByte;
		}
	}
}
    45e4:	08 95       	ret

000045e6 <ReadModuleSwitches>:




void ReadModuleSwitches(unsigned char High)
{
    45e6:	cf 93       	push	r28
    45e8:	df 93       	push	r29


	
	//P13 = High;  // AS3
	
	if (High==1)
    45ea:	81 30       	cpi	r24, 0x01	; 1
    45ec:	21 f4       	brne	.+8      	; 0x45f6 <ReadModuleSwitches+0x10>
		PORTB_OUTSET = P13;
    45ee:	98 e0       	ldi	r25, 0x08	; 8
    45f0:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
    45f4:	03 c0       	rjmp	.+6      	; 0x45fc <ReadModuleSwitches+0x16>
	else
		PORTB_OUTCLR = P13;
    45f6:	98 e0       	ldi	r25, 0x08	; 8
    45f8:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
	
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;
    45fc:	94 e0       	ldi	r25, 0x04	; 4
    45fe:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>

	for (cntByte=0; cntByte<8; cntByte++)
    4602:	50 e0       	ldi	r21, 0x00	; 0
    4604:	36 c1       	rjmp	.+620    	; 0x4872 <ReadModuleSwitches+0x28c>
			//PORTD_OUT |= cntByte&0x01;  // AS0
			//PORTD_OUT |= cntByte&0x02;  // AS1
			//PORTD_OUT |= cntByte&0x04;  // AS2
			
			
			if(cntByte&0x01)
    4606:	50 ff       	sbrs	r21, 0
    4608:	04 c0       	rjmp	.+8      	; 0x4612 <ReadModuleSwitches+0x2c>
			{	
				PORTB_OUTSET = P10;
    460a:	94 e0       	ldi	r25, 0x04	; 4
    460c:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
    4610:	03 c0       	rjmp	.+6      	; 0x4618 <ReadModuleSwitches+0x32>
			}
			else
			{
				PORTB_OUTCLR = P10;
    4612:	94 e0       	ldi	r25, 0x04	; 4
    4614:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
			}
			
			
			if(cntByte&0x02)
    4618:	51 ff       	sbrs	r21, 1
    461a:	04 c0       	rjmp	.+8      	; 0x4624 <ReadModuleSwitches+0x3e>
			{
				PORTB_OUTSET = P11;
    461c:	92 e0       	ldi	r25, 0x02	; 2
    461e:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
    4622:	03 c0       	rjmp	.+6      	; 0x462a <ReadModuleSwitches+0x44>
			}
			else
			{
				PORTB_OUTCLR = P11;
    4624:	92 e0       	ldi	r25, 0x02	; 2
    4626:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
			}
			
			
			if(cntByte&0x04)
    462a:	52 ff       	sbrs	r21, 2
    462c:	04 c0       	rjmp	.+8      	; 0x4636 <ReadModuleSwitches+0x50>
			{
				PORTC_OUTSET = P12;
    462e:	91 e0       	ldi	r25, 0x01	; 1
    4630:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    4634:	03 c0       	rjmp	.+6      	; 0x463c <ReadModuleSwitches+0x56>
			}
			else
			{
				PORTC_OUTCLR = P12;
    4636:	91 e0       	ldi	r25, 0x01	; 1
    4638:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
			//PORTD_OUT |= 0x2;
			//PORTD_OUT &= ~0x4;
			//PORTD_OUT &= ~0x8;
			//PORTD_OUT &= ~0x10;					

			for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    463c:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <Wait>
    4640:	03 c0       	rjmp	.+6      	; 0x4648 <ReadModuleSwitches+0x62>
    4642:	9f 5f       	subi	r25, 0xFF	; 255
    4644:	90 93 09 25 	sts	0x2509, r25	; 0x802509 <Wait>
    4648:	90 91 09 25 	lds	r25, 0x2509	; 0x802509 <Wait>
    464c:	92 33       	cpi	r25, 0x32	; 50
    464e:	c8 f3       	brcs	.-14     	; 0x4642 <ReadModuleSwitches+0x5c>

			// If bit set and switch isn't ON send event is necessery, else reset counter
			//Bits = P5;
			//Bits &=0x3;  // willem
			
			if ( (PORTR_IN&0x2)&0x2 ) // SW1 PR1
    4650:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7de7e8>
    4654:	91 ff       	sbrs	r25, 1
    4656:	06 c0       	rjmp	.+12     	; 0x4664 <ReadModuleSwitches+0x7e>
				Bits |= 0x1;
    4658:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    465c:	91 60       	ori	r25, 0x01	; 1
    465e:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
    4662:	05 c0       	rjmp	.+10     	; 0x466e <ReadModuleSwitches+0x88>
			else
				Bits  &= ~0x1;
    4664:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    4668:	9e 7f       	andi	r25, 0xFE	; 254
    466a:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
			
			if ( (PORTR_IN&0x1)&0x1 ) // SW2 PR0
    466e:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7de7e8>
    4672:	90 ff       	sbrs	r25, 0
    4674:	06 c0       	rjmp	.+12     	; 0x4682 <ReadModuleSwitches+0x9c>
				Bits |= 0x2;
    4676:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    467a:	92 60       	ori	r25, 0x02	; 2
    467c:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
    4680:	05 c0       	rjmp	.+10     	; 0x468c <ReadModuleSwitches+0xa6>
			else
				Bits &= ~0x2;
    4682:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    4686:	9d 7f       	andi	r25, 0xFD	; 253
    4688:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
			
				
			if ( (PORTD_IN&0x8)&0x8 )  // SW3 PD3 
    468c:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    4690:	93 ff       	sbrs	r25, 3
    4692:	06 c0       	rjmp	.+12     	; 0x46a0 <ReadModuleSwitches+0xba>
				Bits |= 0x4;
    4694:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    4698:	94 60       	ori	r25, 0x04	; 4
    469a:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
    469e:	05 c0       	rjmp	.+10     	; 0x46aa <ReadModuleSwitches+0xc4>
			else
				Bits &= ~0x4;
    46a0:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    46a4:	9b 7f       	andi	r25, 0xFB	; 251
    46a6:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
			
			if ( (PORTD_IN&0x4)&0x4 )  // SW4 PD2
    46aa:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    46ae:	92 ff       	sbrs	r25, 2
    46b0:	06 c0       	rjmp	.+12     	; 0x46be <ReadModuleSwitches+0xd8>
				Bits |= 0x8;
    46b2:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    46b6:	98 60       	ori	r25, 0x08	; 8
    46b8:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
    46bc:	05 c0       	rjmp	.+10     	; 0x46c8 <ReadModuleSwitches+0xe2>
			else
				Bits  &= ~0x8;		
    46be:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    46c2:	97 7f       	andi	r25, 0xF7	; 247
    46c4:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
				
				
			if ( (PORTD_IN&0x80)&0x80 )  // SW5 PD7
    46c8:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    46cc:	99 23       	and	r25, r25
    46ce:	34 f4       	brge	.+12     	; 0x46dc <ReadModuleSwitches+0xf6>
			Bits |= 0x10;
    46d0:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    46d4:	90 61       	ori	r25, 0x10	; 16
    46d6:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
    46da:	05 c0       	rjmp	.+10     	; 0x46e6 <ReadModuleSwitches+0x100>
			else
			Bits &= ~0x10;
    46dc:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    46e0:	9f 7e       	andi	r25, 0xEF	; 239
    46e2:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
			
			if ( (PORTD_IN&0x40)&0x40 )  // SW6 PD6
    46e6:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    46ea:	96 ff       	sbrs	r25, 6
    46ec:	06 c0       	rjmp	.+12     	; 0x46fa <ReadModuleSwitches+0x114>
			Bits |= 0x20;
    46ee:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    46f2:	90 62       	ori	r25, 0x20	; 32
    46f4:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
    46f8:	05 c0       	rjmp	.+10     	; 0x4704 <ReadModuleSwitches+0x11e>
			else
			Bits  &= ~0x20;		
    46fa:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    46fe:	9f 7d       	andi	r25, 0xDF	; 223
    4700:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
			
			
			if ( (PORTD_IN&0x20)&0x20 )  // SW7 PD5
    4704:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    4708:	95 ff       	sbrs	r25, 5
    470a:	06 c0       	rjmp	.+12     	; 0x4718 <ReadModuleSwitches+0x132>
			Bits |= 0x40;
    470c:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    4710:	90 64       	ori	r25, 0x40	; 64
    4712:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
    4716:	05 c0       	rjmp	.+10     	; 0x4722 <ReadModuleSwitches+0x13c>
			else
			Bits &= ~0x40;
    4718:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    471c:	9f 7b       	andi	r25, 0xBF	; 191
    471e:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
			
			if ( (PORTD_IN&0x10)&0x10 )  // SW8 PD4
    4722:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    4726:	94 ff       	sbrs	r25, 4
    4728:	06 c0       	rjmp	.+12     	; 0x4736 <ReadModuleSwitches+0x150>
			Bits |= 0x80;
    472a:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    472e:	90 68       	ori	r25, 0x80	; 128
    4730:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
    4734:	05 c0       	rjmp	.+10     	; 0x4740 <ReadModuleSwitches+0x15a>
			else
			Bits  &= ~0x80;							
    4736:	90 91 20 3a 	lds	r25, 0x3A20	; 0x803a20 <Bits>
    473a:	9f 77       	andi	r25, 0x7F	; 127
    473c:	90 93 20 3a 	sts	0x3A20, r25	; 0x803a20 <Bits>
			

			
			
			for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    4740:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <Wait>
    4744:	03 c0       	rjmp	.+6      	; 0x474c <ReadModuleSwitches+0x166>
    4746:	9f 5f       	subi	r25, 0xFF	; 255
    4748:	90 93 09 25 	sts	0x2509, r25	; 0x802509 <Wait>
    474c:	90 91 09 25 	lds	r25, 0x2509	; 0x802509 <Wait>
    4750:	92 33       	cpi	r25, 0x32	; 50
    4752:	c8 f3       	brcs	.-14     	; 0x4746 <ReadModuleSwitches+0x160>
			
			if ((!(Bits&(0x01<<cntModule))) && (!(ModuleData[cntModule+(8*High)][cntByte]&0x80)))
    4754:	64 2f       	mov	r22, r20
    4756:	70 e0       	ldi	r23, 0x00	; 0
    4758:	20 91 20 3a 	lds	r18, 0x3A20	; 0x803a20 <Bits>
    475c:	30 e0       	ldi	r19, 0x00	; 0
    475e:	04 2e       	mov	r0, r20
    4760:	02 c0       	rjmp	.+4      	; 0x4766 <ReadModuleSwitches+0x180>
    4762:	35 95       	asr	r19
    4764:	27 95       	ror	r18
    4766:	0a 94       	dec	r0
    4768:	e2 f7       	brpl	.-8      	; 0x4762 <ReadModuleSwitches+0x17c>
    476a:	e9 01       	movw	r28, r18
    476c:	c1 70       	andi	r28, 0x01	; 1
    476e:	dd 27       	eor	r29, r29
    4770:	20 fd       	sbrc	r18, 0
    4772:	40 c0       	rjmp	.+128    	; 0x47f4 <ReadModuleSwitches+0x20e>
    4774:	28 2f       	mov	r18, r24
    4776:	30 e0       	ldi	r19, 0x00	; 0
    4778:	22 0f       	add	r18, r18
    477a:	33 1f       	adc	r19, r19
    477c:	22 0f       	add	r18, r18
    477e:	33 1f       	adc	r19, r19
    4780:	22 0f       	add	r18, r18
    4782:	33 1f       	adc	r19, r19
    4784:	26 0f       	add	r18, r22
    4786:	37 1f       	adc	r19, r23
    4788:	a5 2f       	mov	r26, r21
    478a:	b0 e0       	ldi	r27, 0x00	; 0
    478c:	f9 01       	movw	r30, r18
    478e:	ee 0f       	add	r30, r30
    4790:	ff 1f       	adc	r31, r31
    4792:	ee 0f       	add	r30, r30
    4794:	ff 1f       	adc	r31, r31
    4796:	ee 0f       	add	r30, r30
    4798:	ff 1f       	adc	r31, r31
    479a:	e5 5f       	subi	r30, 0xF5	; 245
    479c:	f4 4d       	sbci	r31, 0xD4	; 212
    479e:	ea 0f       	add	r30, r26
    47a0:	fb 1f       	adc	r31, r27
    47a2:	90 81       	ld	r25, Z
    47a4:	99 23       	and	r25, r25
    47a6:	34 f1       	brlt	.+76     	; 0x47f4 <ReadModuleSwitches+0x20e>
			{
				if ((--ModuleData[cntModule+(8*High)][cntByte])&0x80)
    47a8:	91 50       	subi	r25, 0x01	; 1
    47aa:	f9 01       	movw	r30, r18
    47ac:	ee 0f       	add	r30, r30
    47ae:	ff 1f       	adc	r31, r31
    47b0:	ee 0f       	add	r30, r30
    47b2:	ff 1f       	adc	r31, r31
    47b4:	ee 0f       	add	r30, r30
    47b6:	ff 1f       	adc	r31, r31
    47b8:	e5 5f       	subi	r30, 0xF5	; 245
    47ba:	f4 4d       	sbci	r31, 0xD4	; 212
    47bc:	ea 0f       	add	r30, r26
    47be:	fb 1f       	adc	r31, r27
    47c0:	90 83       	st	Z, r25
    47c2:	99 23       	and	r25, r25
    47c4:	0c f0       	brlt	.+2      	; 0x47c8 <ReadModuleSwitches+0x1e2>
    47c6:	4e c0       	rjmp	.+156    	; 0x4864 <ReadModuleSwitches+0x27e>
				{
					EventBuffer[EventBufferPtrTop++] = ((cntModule+(8*High))<<3) | cntByte;
    47c8:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    47cc:	91 e0       	ldi	r25, 0x01	; 1
    47ce:	9e 0f       	add	r25, r30
    47d0:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    47d4:	f0 e0       	ldi	r31, 0x00	; 0
    47d6:	22 0f       	add	r18, r18
    47d8:	33 1f       	adc	r19, r19
    47da:	22 0f       	add	r18, r18
    47dc:	33 1f       	adc	r19, r19
    47de:	22 0f       	add	r18, r18
    47e0:	33 1f       	adc	r19, r19
    47e2:	a2 2b       	or	r26, r18
    47e4:	b3 2b       	or	r27, r19
    47e6:	ee 0f       	add	r30, r30
    47e8:	ff 1f       	adc	r31, r31
    47ea:	e6 5f       	subi	r30, 0xF6	; 246
    47ec:	fa 4d       	sbci	r31, 0xDA	; 218
    47ee:	a0 83       	st	Z, r26
    47f0:	b1 83       	std	Z+1, r27	; 0x01
    47f2:	38 c0       	rjmp	.+112    	; 0x4864 <ReadModuleSwitches+0x27e>
				}
			}
			else if ((Bits&(0x01<<cntModule)) && (ModuleData[cntModule+(8*High)][cntByte]&0x80))
    47f4:	cd 2b       	or	r28, r29
    47f6:	b1 f1       	breq	.+108    	; 0x4864 <ReadModuleSwitches+0x27e>
    47f8:	28 2f       	mov	r18, r24
    47fa:	30 e0       	ldi	r19, 0x00	; 0
    47fc:	22 0f       	add	r18, r18
    47fe:	33 1f       	adc	r19, r19
    4800:	22 0f       	add	r18, r18
    4802:	33 1f       	adc	r19, r19
    4804:	22 0f       	add	r18, r18
    4806:	33 1f       	adc	r19, r19
    4808:	26 0f       	add	r18, r22
    480a:	37 1f       	adc	r19, r23
    480c:	65 2f       	mov	r22, r21
    480e:	70 e0       	ldi	r23, 0x00	; 0
    4810:	f9 01       	movw	r30, r18
    4812:	ee 0f       	add	r30, r30
    4814:	ff 1f       	adc	r31, r31
    4816:	ee 0f       	add	r30, r30
    4818:	ff 1f       	adc	r31, r31
    481a:	ee 0f       	add	r30, r30
    481c:	ff 1f       	adc	r31, r31
    481e:	e5 5f       	subi	r30, 0xF5	; 245
    4820:	f4 4d       	sbci	r31, 0xD4	; 212
    4822:	e6 0f       	add	r30, r22
    4824:	f7 1f       	adc	r31, r23
    4826:	90 81       	ld	r25, Z
    4828:	99 23       	and	r25, r25
    482a:	e4 f4       	brge	.+56     	; 0x4864 <ReadModuleSwitches+0x27e>
			{
				ModuleData[cntModule+(8*High)][cntByte]=ATTACK;
    482c:	22 0f       	add	r18, r18
    482e:	33 1f       	adc	r19, r19
    4830:	22 0f       	add	r18, r18
    4832:	33 1f       	adc	r19, r19
    4834:	22 0f       	add	r18, r18
    4836:	33 1f       	adc	r19, r19
    4838:	f9 01       	movw	r30, r18
    483a:	e5 5f       	subi	r30, 0xF5	; 245
    483c:	f4 4d       	sbci	r31, 0xD4	; 212
    483e:	e6 0f       	add	r30, r22
    4840:	f7 1f       	adc	r31, r23
    4842:	91 e0       	ldi	r25, 0x01	; 1
    4844:	90 83       	st	Z, r25
				EventBuffer[EventBufferPtrTop++] = 0x100 | ((cntModule+(8*High))<<3) | cntByte;
    4846:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    484a:	9e 0f       	add	r25, r30
    484c:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4850:	f0 e0       	ldi	r31, 0x00	; 0
    4852:	31 60       	ori	r19, 0x01	; 1
    4854:	26 2b       	or	r18, r22
    4856:	37 2b       	or	r19, r23
    4858:	ee 0f       	add	r30, r30
    485a:	ff 1f       	adc	r31, r31
    485c:	e6 5f       	subi	r30, 0xF6	; 246
    485e:	fa 4d       	sbci	r31, 0xDA	; 218
    4860:	20 83       	st	Z, r18
    4862:	31 83       	std	Z+1, r19	; 0x01
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;

	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntModule=0; cntModule<8; cntModule++)
    4864:	4f 5f       	subi	r20, 0xFF	; 255
    4866:	01 c0       	rjmp	.+2      	; 0x486a <ReadModuleSwitches+0x284>
    4868:	40 e0       	ldi	r20, 0x00	; 0
    486a:	48 30       	cpi	r20, 0x08	; 8
    486c:	08 f4       	brcc	.+2      	; 0x4870 <ReadModuleSwitches+0x28a>
    486e:	cb ce       	rjmp	.-618    	; 0x4606 <ReadModuleSwitches+0x20>
		PORTB_OUTCLR = P13;
	
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;

	for (cntByte=0; cntByte<8; cntByte++)
    4870:	5f 5f       	subi	r21, 0xFF	; 255
    4872:	58 30       	cpi	r21, 0x08	; 8
    4874:	c8 f3       	brcs	.-14     	; 0x4868 <ReadModuleSwitches+0x282>
				ModuleData[cntModule+(8*High)][cntByte]=ATTACK;
				EventBuffer[EventBufferPtrTop++] = 0x100 | ((cntModule+(8*High))<<3) | cntByte;
			}
		}
	}
}
    4876:	df 91       	pop	r29
    4878:	cf 91       	pop	r28
    487a:	08 95       	ret

0000487c <ReadConsole>:

unsigned char Bits;

void ReadConsole()
{
	ReadMasterSwitches();
    487c:	0e 94 8b 22 	call	0x4516	; 0x4516 <ReadMasterSwitches>
	//PORTB_OUTCLR = P10;
	//PORTB_OUTCLR = P11;
	//PORTC_OUTCLR = P12;
	//PORTB_OUTCLR = P13;
	//PORTC_OUTSET = P14;
	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    4880:	10 92 09 25 	sts	0x2509, r1	; 0x802509 <Wait>
    4884:	03 c0       	rjmp	.+6      	; 0x488c <ReadConsole+0x10>
    4886:	8f 5f       	subi	r24, 0xFF	; 255
    4888:	80 93 09 25 	sts	0x2509, r24	; 0x802509 <Wait>
    488c:	80 91 09 25 	lds	r24, 0x2509	; 0x802509 <Wait>
    4890:	82 33       	cpi	r24, 0x32	; 50
    4892:	c8 f3       	brcs	.-14     	; 0x4886 <ReadConsole+0xa>
	ReadModuleSwitches(MODULE1_8);
    4894:	80 e0       	ldi	r24, 0x00	; 0
    4896:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <ReadModuleSwitches>
	ReadModuleSwitches(MODULE9_16);
    489a:	81 e0       	ldi	r24, 0x01	; 1
    489c:	0e 94 f3 22 	call	0x45e6	; 0x45e6 <ReadModuleSwitches>
    48a0:	08 95       	ret

000048a2 <ShowConfig>:
	}
}


void ShowConfig()
{
    48a2:	cf 93       	push	r28
    48a4:	df 93       	push	r29
    48a6:	cd b7       	in	r28, 0x3d	; 61
    48a8:	de b7       	in	r29, 0x3e	; 62
    48aa:	61 97       	sbiw	r28, 0x11	; 17
    48ac:	cd bf       	out	0x3d, r28	; 61
    48ae:	de bf       	out	0x3e, r29	; 62
	char TextBuffer[17];
	unsigned char Ptr=0;

	
	TextBuffer[Ptr++] = 'S'; //"StMod:x Telco:xx"
    48b0:	83 e5       	ldi	r24, 0x53	; 83
    48b2:	89 83       	std	Y+1, r24	; 0x01
	TextBuffer[Ptr++] = 't'; //"StMod:xx Telco:x"
    48b4:	84 e7       	ldi	r24, 0x74	; 116
    48b6:	8a 83       	std	Y+2, r24	; 0x02
	TextBuffer[Ptr++] = 'M';
    48b8:	8d e4       	ldi	r24, 0x4D	; 77
    48ba:	8b 83       	std	Y+3, r24	; 0x03
	TextBuffer[Ptr++] = 'o';
    48bc:	8f e6       	ldi	r24, 0x6F	; 111
    48be:	8c 83       	std	Y+4, r24	; 0x04
	TextBuffer[Ptr++] = 'd';
    48c0:	84 e6       	ldi	r24, 0x64	; 100
    48c2:	8d 83       	std	Y+5, r24	; 0x05
	TextBuffer[Ptr++] = ':';
    48c4:	8a e3       	ldi	r24, 0x3A	; 58
    48c6:	8e 83       	std	Y+6, r24	; 0x06
	
	if ((NrOfTriples/10)!=0)
    48c8:	20 91 c2 22 	lds	r18, 0x22C2	; 0x8022c2 <NrOfTriples>
    48cc:	2a 30       	cpi	r18, 0x0A	; 10
    48ce:	58 f0       	brcs	.+22     	; 0x48e6 <ShowConfig+0x44>
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTriples/10);
    48d0:	8d ec       	ldi	r24, 0xCD	; 205
    48d2:	28 9f       	mul	r18, r24
    48d4:	81 2d       	mov	r24, r1
    48d6:	11 24       	eor	r1, r1
    48d8:	86 95       	lsr	r24
    48da:	86 95       	lsr	r24
    48dc:	86 95       	lsr	r24
    48de:	80 5d       	subi	r24, 0xD0	; 208
    48e0:	8f 83       	std	Y+7, r24	; 0x07
    48e2:	87 e0       	ldi	r24, 0x07	; 7
    48e4:	01 c0       	rjmp	.+2      	; 0x48e8 <ShowConfig+0x46>
	TextBuffer[Ptr++] = 'S'; //"StMod:x Telco:xx"
	TextBuffer[Ptr++] = 't'; //"StMod:xx Telco:x"
	TextBuffer[Ptr++] = 'M';
	TextBuffer[Ptr++] = 'o';
	TextBuffer[Ptr++] = 'd';
	TextBuffer[Ptr++] = ':';
    48e6:	86 e0       	ldi	r24, 0x06	; 6
	if ((NrOfTriples/10)!=0)
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTriples/10);
	}

	TextBuffer[Ptr++] = 0x30+(NrOfTriples%10);
    48e8:	e1 e0       	ldi	r30, 0x01	; 1
    48ea:	f0 e0       	ldi	r31, 0x00	; 0
    48ec:	ec 0f       	add	r30, r28
    48ee:	fd 1f       	adc	r31, r29
    48f0:	e8 0f       	add	r30, r24
    48f2:	f1 1d       	adc	r31, r1
    48f4:	9d ec       	ldi	r25, 0xCD	; 205
    48f6:	29 9f       	mul	r18, r25
    48f8:	91 2d       	mov	r25, r1
    48fa:	11 24       	eor	r1, r1
    48fc:	96 95       	lsr	r25
    48fe:	96 95       	lsr	r25
    4900:	96 95       	lsr	r25
    4902:	99 0f       	add	r25, r25
    4904:	39 2f       	mov	r19, r25
    4906:	33 0f       	add	r19, r19
    4908:	33 0f       	add	r19, r19
    490a:	93 0f       	add	r25, r19
    490c:	29 1b       	sub	r18, r25
    490e:	20 5d       	subi	r18, 0xD0	; 208
    4910:	20 83       	st	Z, r18
	
	TextBuffer[Ptr++] = ' ';
    4912:	91 e0       	ldi	r25, 0x01	; 1
    4914:	98 0f       	add	r25, r24
    4916:	e1 e0       	ldi	r30, 0x01	; 1
    4918:	f0 e0       	ldi	r31, 0x00	; 0
    491a:	ec 0f       	add	r30, r28
    491c:	fd 1f       	adc	r31, r29
    491e:	e9 0f       	add	r30, r25
    4920:	f1 1d       	adc	r31, r1
    4922:	90 e2       	ldi	r25, 0x20	; 32
    4924:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'T';
    4926:	92 e0       	ldi	r25, 0x02	; 2
    4928:	98 0f       	add	r25, r24
    492a:	e1 e0       	ldi	r30, 0x01	; 1
    492c:	f0 e0       	ldi	r31, 0x00	; 0
    492e:	ec 0f       	add	r30, r28
    4930:	fd 1f       	adc	r31, r29
    4932:	e9 0f       	add	r30, r25
    4934:	f1 1d       	adc	r31, r1
    4936:	94 e5       	ldi	r25, 0x54	; 84
    4938:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'e';
    493a:	93 e0       	ldi	r25, 0x03	; 3
    493c:	98 0f       	add	r25, r24
    493e:	e1 e0       	ldi	r30, 0x01	; 1
    4940:	f0 e0       	ldi	r31, 0x00	; 0
    4942:	ec 0f       	add	r30, r28
    4944:	fd 1f       	adc	r31, r29
    4946:	e9 0f       	add	r30, r25
    4948:	f1 1d       	adc	r31, r1
    494a:	95 e6       	ldi	r25, 0x65	; 101
    494c:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'l';
    494e:	94 e0       	ldi	r25, 0x04	; 4
    4950:	98 0f       	add	r25, r24
    4952:	e1 e0       	ldi	r30, 0x01	; 1
    4954:	f0 e0       	ldi	r31, 0x00	; 0
    4956:	ec 0f       	add	r30, r28
    4958:	fd 1f       	adc	r31, r29
    495a:	e9 0f       	add	r30, r25
    495c:	f1 1d       	adc	r31, r1
    495e:	9c e6       	ldi	r25, 0x6C	; 108
    4960:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'c';
    4962:	95 e0       	ldi	r25, 0x05	; 5
    4964:	98 0f       	add	r25, r24
    4966:	e1 e0       	ldi	r30, 0x01	; 1
    4968:	f0 e0       	ldi	r31, 0x00	; 0
    496a:	ec 0f       	add	r30, r28
    496c:	fd 1f       	adc	r31, r29
    496e:	e9 0f       	add	r30, r25
    4970:	f1 1d       	adc	r31, r1
    4972:	93 e6       	ldi	r25, 0x63	; 99
    4974:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'o';
    4976:	96 e0       	ldi	r25, 0x06	; 6
    4978:	98 0f       	add	r25, r24
    497a:	e1 e0       	ldi	r30, 0x01	; 1
    497c:	f0 e0       	ldi	r31, 0x00	; 0
    497e:	ec 0f       	add	r30, r28
    4980:	fd 1f       	adc	r31, r29
    4982:	e9 0f       	add	r30, r25
    4984:	f1 1d       	adc	r31, r1
    4986:	9f e6       	ldi	r25, 0x6F	; 111
    4988:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = ':';
    498a:	28 e0       	ldi	r18, 0x08	; 8
    498c:	28 0f       	add	r18, r24
    498e:	97 e0       	ldi	r25, 0x07	; 7
    4990:	98 0f       	add	r25, r24
    4992:	e1 e0       	ldi	r30, 0x01	; 1
    4994:	f0 e0       	ldi	r31, 0x00	; 0
    4996:	ec 0f       	add	r30, r28
    4998:	fd 1f       	adc	r31, r29
    499a:	e9 0f       	add	r30, r25
    499c:	f1 1d       	adc	r31, r1
    499e:	9a e3       	ldi	r25, 0x3A	; 58
    49a0:	90 83       	st	Z, r25
	
	if ((NrOfTelcos/10)!=0)
    49a2:	90 91 c3 22 	lds	r25, 0x22C3	; 0x8022c3 <NrOfTelcos>
    49a6:	9a 30       	cpi	r25, 0x0A	; 10
    49a8:	88 f0       	brcs	.+34     	; 0x49cc <ShowConfig+0x12a>
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTelcos/10);
    49aa:	e1 e0       	ldi	r30, 0x01	; 1
    49ac:	f0 e0       	ldi	r31, 0x00	; 0
    49ae:	ec 0f       	add	r30, r28
    49b0:	fd 1f       	adc	r31, r29
    49b2:	e2 0f       	add	r30, r18
    49b4:	f1 1d       	adc	r31, r1
    49b6:	2d ec       	ldi	r18, 0xCD	; 205
    49b8:	92 9f       	mul	r25, r18
    49ba:	21 2d       	mov	r18, r1
    49bc:	11 24       	eor	r1, r1
    49be:	26 95       	lsr	r18
    49c0:	26 95       	lsr	r18
    49c2:	26 95       	lsr	r18
    49c4:	20 5d       	subi	r18, 0xD0	; 208
    49c6:	20 83       	st	Z, r18
    49c8:	29 e0       	ldi	r18, 0x09	; 9
    49ca:	28 0f       	add	r18, r24
	////	else
	////	{
	////		TextBuffer[Ptr++] = ' ';
	////	}
	
	TextBuffer[Ptr++] = 0x30+(NrOfTelcos%10);
    49cc:	31 e0       	ldi	r19, 0x01	; 1
    49ce:	32 0f       	add	r19, r18
    49d0:	e1 e0       	ldi	r30, 0x01	; 1
    49d2:	f0 e0       	ldi	r31, 0x00	; 0
    49d4:	ec 0f       	add	r30, r28
    49d6:	fd 1f       	adc	r31, r29
    49d8:	e2 0f       	add	r30, r18
    49da:	f1 1d       	adc	r31, r1
    49dc:	8d ec       	ldi	r24, 0xCD	; 205
    49de:	98 9f       	mul	r25, r24
    49e0:	81 2d       	mov	r24, r1
    49e2:	11 24       	eor	r1, r1
    49e4:	86 95       	lsr	r24
    49e6:	86 95       	lsr	r24
    49e8:	86 95       	lsr	r24
    49ea:	88 0f       	add	r24, r24
    49ec:	28 2f       	mov	r18, r24
    49ee:	22 0f       	add	r18, r18
    49f0:	22 0f       	add	r18, r18
    49f2:	82 0f       	add	r24, r18
    49f4:	98 1b       	sub	r25, r24
    49f6:	90 5d       	subi	r25, 0xD0	; 208
    49f8:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 0;
    49fa:	e1 e0       	ldi	r30, 0x01	; 1
    49fc:	f0 e0       	ldi	r31, 0x00	; 0
    49fe:	ec 0f       	add	r30, r28
    4a00:	fd 1f       	adc	r31, r29
    4a02:	e3 0f       	add	r30, r19
    4a04:	f1 1d       	adc	r31, r1
    4a06:	10 82       	st	Z, r1
	
	SetLCD(0,"\xC0");
    4a08:	6f e2       	ldi	r22, 0x2F	; 47
    4a0a:	70 e2       	ldi	r23, 0x20	; 32
    4a0c:	80 e0       	ldi	r24, 0x00	; 0
    4a0e:	90 e0       	ldi	r25, 0x00	; 0
    4a10:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>
	SetLCD(1,TextBuffer);
    4a14:	be 01       	movw	r22, r28
    4a16:	6f 5f       	subi	r22, 0xFF	; 255
    4a18:	7f 4f       	sbci	r23, 0xFF	; 255
    4a1a:	81 e0       	ldi	r24, 0x01	; 1
    4a1c:	90 e0       	ldi	r25, 0x00	; 0
    4a1e:	0e 94 f4 21 	call	0x43e8	; 0x43e8 <SetLCD>

}
    4a22:	61 96       	adiw	r28, 0x11	; 17
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	de bf       	out	0x3e, r29	; 62
    4a28:	df 91       	pop	r29
    4a2a:	cf 91       	pop	r28
    4a2c:	08 95       	ret

00004a2e <DoSerial>:
uint16_t wacht;
	
char IDString[30]= "D&R Airlab v2.04 - 08/2006";

void DoSerial()
{
    4a2e:	cf 93       	push	r28
    4a30:	df 93       	push	r29

	
	unsigned char Event = SerialBufferIn[SerialBufferInPtrBottom++];
    4a32:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <SerialBufferInPtrBottom>
    4a36:	c1 e0       	ldi	r28, 0x01	; 1
    4a38:	ce 0f       	add	r28, r30
    4a3a:	f0 e0       	ldi	r31, 0x00	; 0
    4a3c:	ea 5d       	subi	r30, 0xDA	; 218
    4a3e:	fe 4d       	sbci	r31, 0xDE	; 222
    4a40:	e0 81       	ld	r30, Z
	unsigned char Channel = SerialBufferIn[SerialBufferInPtrBottom++];
    4a42:	a1 e0       	ldi	r26, 0x01	; 1
    4a44:	ac 0f       	add	r26, r28
    4a46:	d0 e0       	ldi	r29, 0x00	; 0
    4a48:	ca 5d       	subi	r28, 0xDA	; 218
    4a4a:	de 4d       	sbci	r29, 0xDE	; 222
    4a4c:	28 81       	ld	r18, Y
	unsigned char Data = SerialBufferIn[SerialBufferInPtrBottom++];
    4a4e:	81 e0       	ldi	r24, 0x01	; 1
    4a50:	8a 0f       	add	r24, r26
    4a52:	80 93 24 21 	sts	0x2124, r24	; 0x802124 <SerialBufferInPtrBottom>
    4a56:	b0 e0       	ldi	r27, 0x00	; 0
    4a58:	aa 5d       	subi	r26, 0xDA	; 218
    4a5a:	be 4d       	sbci	r27, 0xDE	; 222
    4a5c:	cc 91       	ld	r28, X
	
	//unsigned char EEread[16], wr[16], Address;

	switch (Event)
    4a5e:	8e 2f       	mov	r24, r30
    4a60:	90 e0       	ldi	r25, 0x00	; 0
    4a62:	fc 01       	movw	r30, r24
    4a64:	e0 58       	subi	r30, 0x80	; 128
    4a66:	f1 09       	sbc	r31, r1
    4a68:	e3 36       	cpi	r30, 0x63	; 99
    4a6a:	f1 05       	cpc	r31, r1
    4a6c:	08 f0       	brcs	.+2      	; 0x4a70 <DoSerial+0x42>
    4a6e:	0a c2       	rjmp	.+1044   	; 0x4e84 <DoSerial+0x456>
    4a70:	88 27       	eor	r24, r24
    4a72:	e9 54       	subi	r30, 0x49	; 73
    4a74:	fe 4f       	sbci	r31, 0xFE	; 254
    4a76:	8f 4f       	sbci	r24, 0xFF	; 255
    4a78:	0c 94 33 29 	jmp	0x5266	; 0x5266 <__tablejump2__>
	{
		case SERIAL_ON:
		{
			EventBuffer[EventBufferPtrTop++] = (unsigned int)ON | (Channel<<3);
    4a7c:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4a80:	81 e0       	ldi	r24, 0x01	; 1
    4a82:	8e 0f       	add	r24, r30
    4a84:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    4a88:	f0 e0       	ldi	r31, 0x00	; 0
    4a8a:	30 e0       	ldi	r19, 0x00	; 0
    4a8c:	22 0f       	add	r18, r18
    4a8e:	33 1f       	adc	r19, r19
    4a90:	22 0f       	add	r18, r18
    4a92:	33 1f       	adc	r19, r19
    4a94:	22 0f       	add	r18, r18
    4a96:	33 1f       	adc	r19, r19
    4a98:	23 60       	ori	r18, 0x03	; 3
    4a9a:	ee 0f       	add	r30, r30
    4a9c:	ff 1f       	adc	r31, r31
    4a9e:	e6 5f       	subi	r30, 0xF6	; 246
    4aa0:	fa 4d       	sbci	r31, 0xDA	; 218
    4aa2:	20 83       	st	Z, r18
    4aa4:	31 83       	std	Z+1, r19	; 0x01
		}
		break;
    4aa6:	ee c1       	rjmp	.+988    	; 0x4e84 <DoSerial+0x456>
		case SERIAL_CUE:
		{
			EventBuffer[EventBufferPtrTop++] = (unsigned int)PFL | (Channel<<3);
    4aa8:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4aac:	81 e0       	ldi	r24, 0x01	; 1
    4aae:	8e 0f       	add	r24, r30
    4ab0:	80 93 8b 2b 	sts	0x2B8B, r24	; 0x802b8b <EventBufferPtrTop>
    4ab4:	f0 e0       	ldi	r31, 0x00	; 0
    4ab6:	30 e0       	ldi	r19, 0x00	; 0
    4ab8:	22 0f       	add	r18, r18
    4aba:	33 1f       	adc	r19, r19
    4abc:	22 0f       	add	r18, r18
    4abe:	33 1f       	adc	r19, r19
    4ac0:	22 0f       	add	r18, r18
    4ac2:	33 1f       	adc	r19, r19
    4ac4:	22 60       	ori	r18, 0x02	; 2
    4ac6:	ee 0f       	add	r30, r30
    4ac8:	ff 1f       	adc	r31, r31
    4aca:	e6 5f       	subi	r30, 0xF6	; 246
    4acc:	fa 4d       	sbci	r31, 0xDA	; 218
    4ace:	20 83       	st	Z, r18
    4ad0:	31 83       	std	Z+1, r19	; 0x01
		}
		break;
    4ad2:	d8 c1       	rjmp	.+944    	; 0x4e84 <DoSerial+0x456>
		case TIMER_START:
		{
			GlobalTimerActive = 1;
    4ad4:	81 e0       	ldi	r24, 0x01	; 1
    4ad6:	80 93 1b 3a 	sts	0x3A1B, r24	; 0x803a1b <GlobalTimerActive>
		}
		break;
    4ada:	d4 c1       	rjmp	.+936    	; 0x4e84 <DoSerial+0x456>
		case TIMER_STOP:
		{
			GlobalTimerActive = 0;
    4adc:	10 92 1b 3a 	sts	0x3A1B, r1	; 0x803a1b <GlobalTimerActive>
		}
		break;
    4ae0:	d1 c1       	rjmp	.+930    	; 0x4e84 <DoSerial+0x456>
		case TIMER_RESET:
		{
			TimeAndDate.Hours = 0;
    4ae2:	e6 e1       	ldi	r30, 0x16	; 22
    4ae4:	fa e3       	ldi	r31, 0x3A	; 58
    4ae6:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
    4ae8:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
    4aea:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
    4aec:	10 82       	st	Z, r1
		}
		break;
    4aee:	ca c1       	rjmp	.+916    	; 0x4e84 <DoSerial+0x456>
		case SERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;
			ConsoleModuleSettings[Channel][0] = Data;
    4af0:	42 2f       	mov	r20, r18
    4af2:	50 e0       	ldi	r21, 0x00	; 0
    4af4:	8d e1       	ldi	r24, 0x1D	; 29
    4af6:	84 9f       	mul	r24, r20
    4af8:	f0 01       	movw	r30, r0
    4afa:	85 9f       	mul	r24, r21
    4afc:	f0 0d       	add	r31, r0
    4afe:	11 24       	eor	r1, r1
    4b00:	e5 5e       	subi	r30, 0xE5	; 229
    4b02:	f7 4c       	sbci	r31, 0xC7	; 199
    4b04:	c0 83       	st	Z, r28
			for (cntByte=1; cntByte<29; cntByte++)
    4b06:	81 e0       	ldi	r24, 0x01	; 1
    4b08:	16 c0       	rjmp	.+44     	; 0x4b36 <DoSerial+0x108>
			{
				ConsoleModuleSettings[Channel][cntByte] = SerialBufferIn[SerialBufferInPtrBottom++];
    4b0a:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <SerialBufferInPtrBottom>
    4b0e:	91 e0       	ldi	r25, 0x01	; 1
    4b10:	9e 0f       	add	r25, r30
    4b12:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <SerialBufferInPtrBottom>
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	ea 5d       	subi	r30, 0xDA	; 218
    4b1a:	fe 4d       	sbci	r31, 0xDE	; 222
    4b1c:	90 81       	ld	r25, Z
    4b1e:	3d e1       	ldi	r19, 0x1D	; 29
    4b20:	34 9f       	mul	r19, r20
    4b22:	f0 01       	movw	r30, r0
    4b24:	35 9f       	mul	r19, r21
    4b26:	f0 0d       	add	r31, r0
    4b28:	11 24       	eor	r1, r1
    4b2a:	e5 5e       	subi	r30, 0xE5	; 229
    4b2c:	f7 4c       	sbci	r31, 0xC7	; 199
    4b2e:	e8 0f       	add	r30, r24
    4b30:	f1 1d       	adc	r31, r1
    4b32:	90 83       	st	Z, r25
		break;
		case SERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;
			ConsoleModuleSettings[Channel][0] = Data;
			for (cntByte=1; cntByte<29; cntByte++)
    4b34:	8f 5f       	subi	r24, 0xFF	; 255
    4b36:	8d 31       	cpi	r24, 0x1D	; 29
    4b38:	40 f3       	brcs	.-48     	; 0x4b0a <DoSerial+0xdc>
    4b3a:	a4 c1       	rjmp	.+840    	; 0x4e84 <DoSerial+0x456>
		}
		break;
		case SERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;
			ConsoleMasterSettings[0] = Data;
    4b3c:	c0 93 8e 2b 	sts	0x2B8E, r28	; 0x802b8e <ConsoleMasterSettings>
			for (cntByte=1; cntByte<5; cntByte++)
    4b40:	81 e0       	ldi	r24, 0x01	; 1
    4b42:	11 c0       	rjmp	.+34     	; 0x4b66 <DoSerial+0x138>
			{
				ConsoleMasterSettings[cntByte] = SerialBufferIn[SerialBufferInPtrBottom++];
    4b44:	28 2f       	mov	r18, r24
    4b46:	30 e0       	ldi	r19, 0x00	; 0
    4b48:	e0 91 24 21 	lds	r30, 0x2124	; 0x802124 <SerialBufferInPtrBottom>
    4b4c:	91 e0       	ldi	r25, 0x01	; 1
    4b4e:	9e 0f       	add	r25, r30
    4b50:	90 93 24 21 	sts	0x2124, r25	; 0x802124 <SerialBufferInPtrBottom>
    4b54:	f0 e0       	ldi	r31, 0x00	; 0
    4b56:	ea 5d       	subi	r30, 0xDA	; 218
    4b58:	fe 4d       	sbci	r31, 0xDE	; 222
    4b5a:	90 81       	ld	r25, Z
    4b5c:	f9 01       	movw	r30, r18
    4b5e:	e2 57       	subi	r30, 0x72	; 114
    4b60:	f4 4d       	sbci	r31, 0xD4	; 212
    4b62:	90 83       	st	Z, r25
		break;
		case SERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;
			ConsoleMasterSettings[0] = Data;
			for (cntByte=1; cntByte<5; cntByte++)
    4b64:	8f 5f       	subi	r24, 0xFF	; 255
    4b66:	85 30       	cpi	r24, 0x05	; 5
    4b68:	68 f3       	brcs	.-38     	; 0x4b44 <DoSerial+0x116>
    4b6a:	8c c1       	rjmp	.+792    	; 0x4e84 <DoSerial+0x456>
		}
		break;
		case GETSERIAL_IDSTRING:
		{
			unsigned char cntByte;
			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_IDSTRING;
    4b6c:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4b70:	e1 e0       	ldi	r30, 0x01	; 1
    4b72:	ea 0f       	add	r30, r26
    4b74:	b0 e0       	ldi	r27, 0x00	; 0
    4b76:	ab 53       	subi	r26, 0x3B	; 59
    4b78:	bc 4d       	sbci	r27, 0xDC	; 220
    4b7a:	8a e9       	ldi	r24, 0x9A	; 154
    4b7c:	8c 93       	st	X, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4b7e:	81 e0       	ldi	r24, 0x01	; 1
    4b80:	8e 0f       	add	r24, r30
    4b82:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    4b86:	f0 e0       	ldi	r31, 0x00	; 0
    4b88:	eb 53       	subi	r30, 0x3B	; 59
    4b8a:	fc 4d       	sbci	r31, 0xDC	; 220
    4b8c:	10 82       	st	Z, r1
			for (cntByte=0; cntByte<30; cntByte++)
    4b8e:	80 e0       	ldi	r24, 0x00	; 0
    4b90:	11 c0       	rjmp	.+34     	; 0x4bb4 <DoSerial+0x186>
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = IDString[cntByte]&0x7F;
    4b92:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4b96:	91 e0       	ldi	r25, 0x01	; 1
    4b98:	9e 0f       	add	r25, r30
    4b9a:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    4b9e:	f0 e0       	ldi	r31, 0x00	; 0
    4ba0:	a8 2f       	mov	r26, r24
    4ba2:	b0 e0       	ldi	r27, 0x00	; 0
    4ba4:	a0 50       	subi	r26, 0x00	; 0
    4ba6:	b0 4e       	sbci	r27, 0xE0	; 224
    4ba8:	9c 91       	ld	r25, X
    4baa:	eb 53       	subi	r30, 0x3B	; 59
    4bac:	fc 4d       	sbci	r31, 0xDC	; 220
    4bae:	9f 77       	andi	r25, 0x7F	; 127
    4bb0:	90 83       	st	Z, r25
		case GETSERIAL_IDSTRING:
		{
			unsigned char cntByte;
			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_IDSTRING;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<30; cntByte++)
    4bb2:	8f 5f       	subi	r24, 0xFF	; 255
    4bb4:	8e 31       	cpi	r24, 0x1E	; 30
    4bb6:	68 f3       	brcs	.-38     	; 0x4b92 <DoSerial+0x164>
    4bb8:	65 c1       	rjmp	.+714    	; 0x4e84 <DoSerial+0x456>
		break;
		case GETSERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    4bba:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4bbe:	e1 e0       	ldi	r30, 0x01	; 1
    4bc0:	ea 0f       	add	r30, r26
    4bc2:	b0 e0       	ldi	r27, 0x00	; 0
    4bc4:	ab 53       	subi	r26, 0x3B	; 59
    4bc6:	bc 4d       	sbci	r27, 0xDC	; 220
    4bc8:	83 e9       	ldi	r24, 0x93	; 147
    4bca:	8c 93       	st	X, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = Channel;
    4bcc:	81 e0       	ldi	r24, 0x01	; 1
    4bce:	8e 0f       	add	r24, r30
    4bd0:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    4bd4:	f0 e0       	ldi	r31, 0x00	; 0
    4bd6:	eb 53       	subi	r30, 0x3B	; 59
    4bd8:	fc 4d       	sbci	r31, 0xDC	; 220
    4bda:	20 83       	st	Z, r18
			for (cntByte=0; cntByte<29; cntByte++)
    4bdc:	80 e0       	ldi	r24, 0x00	; 0
    4bde:	15 c0       	rjmp	.+42     	; 0x4c0a <DoSerial+0x1dc>
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[Channel][cntByte]&0x7F;
    4be0:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4be4:	91 e0       	ldi	r25, 0x01	; 1
    4be6:	9e 0f       	add	r25, r30
    4be8:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    4bec:	f0 e0       	ldi	r31, 0x00	; 0
    4bee:	9d e1       	ldi	r25, 0x1D	; 29
    4bf0:	29 9f       	mul	r18, r25
    4bf2:	d0 01       	movw	r26, r0
    4bf4:	11 24       	eor	r1, r1
    4bf6:	a5 5e       	subi	r26, 0xE5	; 229
    4bf8:	b7 4c       	sbci	r27, 0xC7	; 199
    4bfa:	a8 0f       	add	r26, r24
    4bfc:	b1 1d       	adc	r27, r1
    4bfe:	9c 91       	ld	r25, X
    4c00:	eb 53       	subi	r30, 0x3B	; 59
    4c02:	fc 4d       	sbci	r31, 0xDC	; 220
    4c04:	9f 77       	andi	r25, 0x7F	; 127
    4c06:	90 83       	st	Z, r25
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
			SerialBufferOut[SerialBufferOutPtrTop++] = Channel;
			for (cntByte=0; cntByte<29; cntByte++)
    4c08:	8f 5f       	subi	r24, 0xFF	; 255
    4c0a:	8d 31       	cpi	r24, 0x1D	; 29
    4c0c:	48 f3       	brcs	.-46     	; 0x4be0 <DoSerial+0x1b2>
    4c0e:	3a c1       	rjmp	.+628    	; 0x4e84 <DoSerial+0x456>
		break;
		case GETSERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    4c10:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4c14:	e1 e0       	ldi	r30, 0x01	; 1
    4c16:	ea 0f       	add	r30, r26
    4c18:	b0 e0       	ldi	r27, 0x00	; 0
    4c1a:	ab 53       	subi	r26, 0x3B	; 59
    4c1c:	bc 4d       	sbci	r27, 0xDC	; 220
    4c1e:	84 e9       	ldi	r24, 0x94	; 148
    4c20:	8c 93       	st	X, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4c22:	81 e0       	ldi	r24, 0x01	; 1
    4c24:	8e 0f       	add	r24, r30
    4c26:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    4c2a:	f0 e0       	ldi	r31, 0x00	; 0
    4c2c:	eb 53       	subi	r30, 0x3B	; 59
    4c2e:	fc 4d       	sbci	r31, 0xDC	; 220
    4c30:	10 82       	st	Z, r1
			for (cntByte=0; cntByte<5; cntByte++)
    4c32:	80 e0       	ldi	r24, 0x00	; 0
    4c34:	11 c0       	rjmp	.+34     	; 0x4c58 <DoSerial+0x22a>
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    4c36:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4c3a:	91 e0       	ldi	r25, 0x01	; 1
    4c3c:	9e 0f       	add	r25, r30
    4c3e:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    4c42:	f0 e0       	ldi	r31, 0x00	; 0
    4c44:	a8 2f       	mov	r26, r24
    4c46:	b0 e0       	ldi	r27, 0x00	; 0
    4c48:	a2 57       	subi	r26, 0x72	; 114
    4c4a:	b4 4d       	sbci	r27, 0xD4	; 212
    4c4c:	9c 91       	ld	r25, X
    4c4e:	eb 53       	subi	r30, 0x3B	; 59
    4c50:	fc 4d       	sbci	r31, 0xDC	; 220
    4c52:	9f 77       	andi	r25, 0x7F	; 127
    4c54:	90 83       	st	Z, r25
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<5; cntByte++)
    4c56:	8f 5f       	subi	r24, 0xFF	; 255
    4c58:	85 30       	cpi	r24, 0x05	; 5
    4c5a:	68 f3       	brcs	.-38     	; 0x4c36 <DoSerial+0x208>
    4c5c:	13 c1       	rjmp	.+550    	; 0x4e84 <DoSerial+0x456>
		break;
		case GETSERIAL_CONFIG:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_CONFIG;
    4c5e:	a0 91 82 22 	lds	r26, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4c62:	e1 e0       	ldi	r30, 0x01	; 1
    4c64:	ea 0f       	add	r30, r26
    4c66:	b0 e0       	ldi	r27, 0x00	; 0
    4c68:	ab 53       	subi	r26, 0x3B	; 59
    4c6a:	bc 4d       	sbci	r27, 0xDC	; 220
    4c6c:	85 e9       	ldi	r24, 0x95	; 149
    4c6e:	8c 93       	st	X, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4c70:	81 e0       	ldi	r24, 0x01	; 1
    4c72:	8e 0f       	add	r24, r30
    4c74:	80 93 82 22 	sts	0x2282, r24	; 0x802282 <SerialBufferOutPtrTop>
    4c78:	f0 e0       	ldi	r31, 0x00	; 0
    4c7a:	eb 53       	subi	r30, 0x3B	; 59
    4c7c:	fc 4d       	sbci	r31, 0xDC	; 220
    4c7e:	10 82       	st	Z, r1
			for (cntByte=0; cntByte<16; cntByte++)
    4c80:	80 e0       	ldi	r24, 0x00	; 0
    4c82:	11 c0       	rjmp	.+34     	; 0x4ca6 <DoSerial+0x278>
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ModuleType[cntByte]&0x7F;
    4c84:	e0 91 82 22 	lds	r30, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4c88:	91 e0       	ldi	r25, 0x01	; 1
    4c8a:	9e 0f       	add	r25, r30
    4c8c:	90 93 82 22 	sts	0x2282, r25	; 0x802282 <SerialBufferOutPtrTop>
    4c90:	f0 e0       	ldi	r31, 0x00	; 0
    4c92:	a8 2f       	mov	r26, r24
    4c94:	b0 e0       	ldi	r27, 0x00	; 0
    4c96:	a0 59       	subi	r26, 0x90	; 144
    4c98:	bd 4d       	sbci	r27, 0xDD	; 221
    4c9a:	9c 91       	ld	r25, X
    4c9c:	eb 53       	subi	r30, 0x3B	; 59
    4c9e:	fc 4d       	sbci	r31, 0xDC	; 220
    4ca0:	9f 77       	andi	r25, 0x7F	; 127
    4ca2:	90 83       	st	Z, r25
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_CONFIG;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<16; cntByte++)
    4ca4:	8f 5f       	subi	r24, 0xFF	; 255
    4ca6:	80 31       	cpi	r24, 0x10	; 16
    4ca8:	68 f3       	brcs	.-38     	; 0x4c84 <DoSerial+0x256>
    4caa:	ec c0       	rjmp	.+472    	; 0x4e84 <DoSerial+0x456>
		case STORE_EEPROM:
		{			
			unsigned char cntModule;
			unsigned int Address = 0x0000;
			
			TWIM_Transmit(I2CAddressEEProm, Address, ModuleType, NROFMODULES);
    4cac:	20 e1       	ldi	r18, 0x10	; 16
    4cae:	40 e7       	ldi	r20, 0x70	; 112
    4cb0:	52 e2       	ldi	r21, 0x22	; 34
    4cb2:	60 e0       	ldi	r22, 0x00	; 0
    4cb4:	80 e7       	ldi	r24, 0x70	; 112
    4cb6:	0e 94 83 28 	call	0x5106	; 0x5106 <TWIM_Transmit>
			while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
    4cba:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    4cbe:	84 30       	cpi	r24, 0x04	; 4
    4cc0:	21 f0       	breq	.+8      	; 0x4cca <DoSerial+0x29c>
    4cc2:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    4cc6:	8f 3f       	cpi	r24, 0xFF	; 255
    4cc8:	c1 f7       	brne	.-16     	; 0x4cba <DoSerial+0x28c>
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_CONFIG;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<16; cntByte++)
    4cca:	80 e0       	ldi	r24, 0x00	; 0
    4ccc:	90 e0       	ldi	r25, 0x00	; 0
    4cce:	09 c0       	rjmp	.+18     	; 0x4ce2 <DoSerial+0x2b4>
			
			
			//--------------------------------------------------------------------
			for (int t=0; t<29; t++)
			{
				wr[t]=ConsoleModuleSettings[0][t];
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	e5 5e       	subi	r30, 0xE5	; 229
    4cd4:	f7 4c       	sbci	r31, 0xC7	; 199
    4cd6:	20 81       	ld	r18, Z
    4cd8:	fc 01       	movw	r30, r24
    4cda:	e7 5e       	subi	r30, 0xE7	; 231
    4cdc:	fd 4c       	sbci	r31, 0xCD	; 205
    4cde:	20 83       	st	Z, r18

			Address += NROFMODULES;
			
			
			//--------------------------------------------------------------------
			for (int t=0; t<29; t++)
    4ce0:	01 96       	adiw	r24, 0x01	; 1
    4ce2:	8d 31       	cpi	r24, 0x1D	; 29
    4ce4:	91 05       	cpc	r25, r1
    4ce6:	a4 f3       	brlt	.-24     	; 0x4cd0 <DoSerial+0x2a2>
    4ce8:	c0 e0       	ldi	r28, 0x00	; 0
    4cea:	d0 e0       	ldi	r29, 0x00	; 0
    4cec:	21 e0       	ldi	r18, 0x01	; 1
    4cee:	30 e0       	ldi	r19, 0x00	; 0
    4cf0:	2c c0       	rjmp	.+88     	; 0x4d4a <DoSerial+0x31c>
			int vlag=1;
			int bufsize = sizeof(wr);
			
			for (int tm=0; tm<bufsize; tm++)
			{
				if ( (tm < 16) & (vlag==1) )
    4cf2:	91 e0       	ldi	r25, 0x01	; 1
    4cf4:	c0 31       	cpi	r28, 0x10	; 16
    4cf6:	d1 05       	cpc	r29, r1
    4cf8:	0c f0       	brlt	.+2      	; 0x4cfc <DoSerial+0x2ce>
    4cfa:	90 e0       	ldi	r25, 0x00	; 0
    4cfc:	81 e0       	ldi	r24, 0x01	; 1
    4cfe:	21 30       	cpi	r18, 0x01	; 1
    4d00:	31 05       	cpc	r19, r1
    4d02:	09 f0       	breq	.+2      	; 0x4d06 <DoSerial+0x2d8>
    4d04:	80 e0       	ldi	r24, 0x00	; 0
    4d06:	89 23       	and	r24, r25
    4d08:	a1 f0       	breq	.+40     	; 0x4d32 <DoSerial+0x304>
				{
					vlag=2;
					TWIM_Transmit(I2CAddressEEProm, 0x10, wr, 16);
    4d0a:	20 e1       	ldi	r18, 0x10	; 16
    4d0c:	49 e1       	ldi	r20, 0x19	; 25
    4d0e:	52 e3       	ldi	r21, 0x32	; 50
    4d10:	60 e1       	ldi	r22, 0x10	; 16
    4d12:	80 e7       	ldi	r24, 0x70	; 112
    4d14:	0e 94 83 28 	call	0x5106	; 0x5106 <TWIM_Transmit>
					while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
    4d18:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    4d1c:	84 30       	cpi	r24, 0x04	; 4
    4d1e:	39 f0       	breq	.+14     	; 0x4d2e <DoSerial+0x300>
    4d20:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    4d24:	8f 3f       	cpi	r24, 0xFF	; 255
    4d26:	c1 f7       	brne	.-16     	; 0x4d18 <DoSerial+0x2ea>
			
			for (int tm=0; tm<bufsize; tm++)
			{
				if ( (tm < 16) & (vlag==1) )
				{
					vlag=2;
    4d28:	22 e0       	ldi	r18, 0x02	; 2
    4d2a:	30 e0       	ldi	r19, 0x00	; 0
    4d2c:	02 c0       	rjmp	.+4      	; 0x4d32 <DoSerial+0x304>
    4d2e:	22 e0       	ldi	r18, 0x02	; 2
    4d30:	30 e0       	ldi	r19, 0x00	; 0
					TWIM_Transmit(I2CAddressEEProm, 0x10, wr, 16);
					while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
				}
				
				if ( tm > 15 )
    4d32:	c0 31       	cpi	r28, 0x10	; 16
    4d34:	d1 05       	cpc	r29, r1
    4d36:	44 f0       	brlt	.+16     	; 0x4d48 <DoSerial+0x31a>
				{
					wr[tm-16]=wr[tm];
    4d38:	fe 01       	movw	r30, r28
    4d3a:	e7 5e       	subi	r30, 0xE7	; 231
    4d3c:	fd 4c       	sbci	r31, 0xCD	; 205
    4d3e:	80 81       	ld	r24, Z
    4d40:	fe 01       	movw	r30, r28
    4d42:	e7 5f       	subi	r30, 0xF7	; 247
    4d44:	fd 4c       	sbci	r31, 0xCD	; 205
    4d46:	80 83       	st	Z, r24
				
			//----------------
			int vlag=1;
			int bufsize = sizeof(wr);
			
			for (int tm=0; tm<bufsize; tm++)
    4d48:	21 96       	adiw	r28, 0x01	; 1
    4d4a:	cd 31       	cpi	r28, 0x1D	; 29
    4d4c:	d1 05       	cpc	r29, r1
    4d4e:	8c f2       	brlt	.-94     	; 0x4cf2 <DoSerial+0x2c4>
					wr[tm-16]=wr[tm];
				}
			}
			

			TWIM_Transmit(I2CAddressEEProm, 32, wr, 13);
    4d50:	2d e0       	ldi	r18, 0x0D	; 13
    4d52:	49 e1       	ldi	r20, 0x19	; 25
    4d54:	52 e3       	ldi	r21, 0x32	; 50
    4d56:	60 e2       	ldi	r22, 0x20	; 32
    4d58:	80 e7       	ldi	r24, 0x70	; 112
    4d5a:	0e 94 83 28 	call	0x5106	; 0x5106 <TWIM_Transmit>
			while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
    4d5e:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    4d62:	84 30       	cpi	r24, 0x04	; 4
    4d64:	21 f0       	breq	.+8      	; 0x4d6e <DoSerial+0x340>
    4d66:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    4d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    4d6c:	c1 f7       	brne	.-16     	; 0x4d5e <DoSerial+0x330>
			//------------------------------------------------------------------------------------------
					
			Address += 29;
			
			TWIM_Transmit(I2CAddressEEProm, Address, ConsoleMasterSettings, 5);
    4d6e:	25 e0       	ldi	r18, 0x05	; 5
    4d70:	4e e8       	ldi	r20, 0x8E	; 142
    4d72:	5b e2       	ldi	r21, 0x2B	; 43
    4d74:	6d e2       	ldi	r22, 0x2D	; 45
    4d76:	80 e7       	ldi	r24, 0x70	; 112
    4d78:	0e 94 83 28 	call	0x5106	; 0x5106 <TWIM_Transmit>
			while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
    4d7c:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    4d80:	84 30       	cpi	r24, 0x04	; 4
    4d82:	21 f0       	breq	.+8      	; 0x4d8c <DoSerial+0x35e>
    4d84:	0e 94 d5 28 	call	0x51aa	; 0x51aa <TWIM_Status>
    4d88:	8f 3f       	cpi	r24, 0xFF	; 255
    4d8a:	c1 f7       	brne	.-16     	; 0x4d7c <DoSerial+0x34e>
			for (wacht=0; wacht<65000; wacht++);
    4d8c:	10 92 a1 3a 	sts	0x3AA1, r1	; 0x803aa1 <wacht>
    4d90:	10 92 a2 3a 	sts	0x3AA2, r1	; 0x803aa2 <wacht+0x1>
    4d94:	05 c0       	rjmp	.+10     	; 0x4da0 <DoSerial+0x372>
    4d96:	01 96       	adiw	r24, 0x01	; 1
    4d98:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <wacht>
    4d9c:	90 93 a2 3a 	sts	0x3AA2, r25	; 0x803aa2 <wacht+0x1>
    4da0:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    4da4:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    4da8:	88 3e       	cpi	r24, 0xE8	; 232
    4daa:	2d ef       	ldi	r18, 0xFD	; 253
    4dac:	92 07       	cpc	r25, r18
    4dae:	98 f3       	brcs	.-26     	; 0x4d96 <DoSerial+0x368>
    4db0:	69 c0       	rjmp	.+210    	; 0x4e84 <DoSerial+0x456>
		//}
		//break;
		
		case FROMDIRECTOR_TELCO_ON_CONNECT:
		{
			if (Data)
    4db2:	cc 23       	and	r28, r28
    4db4:	09 f4       	brne	.+2      	; 0x4db8 <DoSerial+0x38a>
    4db6:	66 c0       	rjmp	.+204    	; 0x4e84 <DoSerial+0x456>
			{
				char ModuleNr;
			
				ModuleNr = GetModuleNrFromTelcoNr(Channel);
    4db8:	82 2f       	mov	r24, r18
    4dba:	0e 94 a4 08 	call	0x1148	; 0x1148 <GetModuleNrFromTelcoNr>

				if (ModuleNr != -1)
				{
					EventBuffer[EventBufferPtrTop++] = (ModuleNr<<3) | ON;
    4dbe:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4dc2:	91 e0       	ldi	r25, 0x01	; 1
    4dc4:	9e 0f       	add	r25, r30
    4dc6:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4dca:	f0 e0       	ldi	r31, 0x00	; 0
    4dcc:	90 e0       	ldi	r25, 0x00	; 0
    4dce:	88 0f       	add	r24, r24
    4dd0:	99 1f       	adc	r25, r25
    4dd2:	88 0f       	add	r24, r24
    4dd4:	99 1f       	adc	r25, r25
    4dd6:	88 0f       	add	r24, r24
    4dd8:	99 1f       	adc	r25, r25
    4dda:	83 60       	ori	r24, 0x03	; 3
    4ddc:	ee 0f       	add	r30, r30
    4dde:	ff 1f       	adc	r31, r31
    4de0:	e6 5f       	subi	r30, 0xF6	; 246
    4de2:	fa 4d       	sbci	r31, 0xDA	; 218
    4de4:	80 83       	st	Z, r24
    4de6:	91 83       	std	Z+1, r25	; 0x01
    4de8:	4d c0       	rjmp	.+154    	; 0x4e84 <DoSerial+0x456>
		break;
		case FROMDIRECTOR_TELCO_MUTE:
		{
			char ModuleNr;
			
			ModuleNr = GetModuleNrFromTelcoNr(Channel);
    4dea:	82 2f       	mov	r24, r18
    4dec:	0e 94 a4 08 	call	0x1148	; 0x1148 <GetModuleNrFromTelcoNr>

			if (ModuleNr != -1)
			{
				if (Data)
    4df0:	cc 23       	and	r28, r28
    4df2:	b9 f0       	breq	.+46     	; 0x4e22 <DoSerial+0x3f4>
				{
					EventBuffer[EventBufferPtrTop++] = (unsigned int)(ModuleNr<<3) | EXT_MUTE;
    4df4:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4df8:	91 e0       	ldi	r25, 0x01	; 1
    4dfa:	9e 0f       	add	r25, r30
    4dfc:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4e00:	f0 e0       	ldi	r31, 0x00	; 0
    4e02:	90 e0       	ldi	r25, 0x00	; 0
    4e04:	88 0f       	add	r24, r24
    4e06:	99 1f       	adc	r25, r25
    4e08:	88 0f       	add	r24, r24
    4e0a:	99 1f       	adc	r25, r25
    4e0c:	88 0f       	add	r24, r24
    4e0e:	99 1f       	adc	r25, r25
    4e10:	87 68       	ori	r24, 0x87	; 135
    4e12:	92 60       	ori	r25, 0x02	; 2
    4e14:	ee 0f       	add	r30, r30
    4e16:	ff 1f       	adc	r31, r31
    4e18:	e6 5f       	subi	r30, 0xF6	; 246
    4e1a:	fa 4d       	sbci	r31, 0xDA	; 218
    4e1c:	80 83       	st	Z, r24
    4e1e:	91 83       	std	Z+1, r25	; 0x01
    4e20:	31 c0       	rjmp	.+98     	; 0x4e84 <DoSerial+0x456>
				}
				else
				{
					EventBuffer[EventBufferPtrTop++] = (unsigned int)(ModuleNr<<3) | EXT_MUTE | 0x100;
    4e22:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4e26:	91 e0       	ldi	r25, 0x01	; 1
    4e28:	9e 0f       	add	r25, r30
    4e2a:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4e2e:	f0 e0       	ldi	r31, 0x00	; 0
    4e30:	90 e0       	ldi	r25, 0x00	; 0
    4e32:	88 0f       	add	r24, r24
    4e34:	99 1f       	adc	r25, r25
    4e36:	88 0f       	add	r24, r24
    4e38:	99 1f       	adc	r25, r25
    4e3a:	88 0f       	add	r24, r24
    4e3c:	99 1f       	adc	r25, r25
    4e3e:	87 68       	ori	r24, 0x87	; 135
    4e40:	93 60       	ori	r25, 0x03	; 3
    4e42:	ee 0f       	add	r30, r30
    4e44:	ff 1f       	adc	r31, r31
    4e46:	e6 5f       	subi	r30, 0xF6	; 246
    4e48:	fa 4d       	sbci	r31, 0xDA	; 218
    4e4a:	80 83       	st	Z, r24
    4e4c:	91 83       	std	Z+1, r25	; 0x01
    4e4e:	1a c0       	rjmp	.+52     	; 0x4e84 <DoSerial+0x456>
			}
		}
		break;
		case FROMDIRECTOR_TELCO_TB:
		{
			if (Data)
    4e50:	cc 23       	and	r28, r28
    4e52:	c1 f0       	breq	.+48     	; 0x4e84 <DoSerial+0x456>
			{
				char ModuleNr;
			
				ModuleNr = GetModuleNrFromTelcoNr(Channel);
    4e54:	82 2f       	mov	r24, r18
    4e56:	0e 94 a4 08 	call	0x1148	; 0x1148 <GetModuleNrFromTelcoNr>
	
				if (ModuleNr != -1)
				{
					EventBuffer[EventBufferPtrTop++] = (ModuleNr<<3) | PFL;
    4e5a:	e0 91 8b 2b 	lds	r30, 0x2B8B	; 0x802b8b <EventBufferPtrTop>
    4e5e:	91 e0       	ldi	r25, 0x01	; 1
    4e60:	9e 0f       	add	r25, r30
    4e62:	90 93 8b 2b 	sts	0x2B8B, r25	; 0x802b8b <EventBufferPtrTop>
    4e66:	f0 e0       	ldi	r31, 0x00	; 0
    4e68:	90 e0       	ldi	r25, 0x00	; 0
    4e6a:	88 0f       	add	r24, r24
    4e6c:	99 1f       	adc	r25, r25
    4e6e:	88 0f       	add	r24, r24
    4e70:	99 1f       	adc	r25, r25
    4e72:	88 0f       	add	r24, r24
    4e74:	99 1f       	adc	r25, r25
    4e76:	82 60       	ori	r24, 0x02	; 2
    4e78:	ee 0f       	add	r30, r30
    4e7a:	ff 1f       	adc	r31, r31
    4e7c:	e6 5f       	subi	r30, 0xF6	; 246
    4e7e:	fa 4d       	sbci	r31, 0xDA	; 218
    4e80:	80 83       	st	Z, r24
    4e82:	91 83       	std	Z+1, r25	; 0x01
			//}
			//CueControl();
		//}
		//break;
	}
}
    4e84:	df 91       	pop	r29
    4e86:	cf 91       	pop	r28
    4e88:	08 95       	ret

00004e8a <SetupSIO0>:

void SetupSIO0()
{
			

	cli();
    4e8a:	f8 94       	cli

		PORTE_OUTSET = 0x8;
    4e8c:	88 e0       	ldi	r24, 0x08	; 8
    4e8e:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7de685>
					
		// Communication mode: Asynchronous USART on PORTE
		// Data bits: 8
		// Stop bits: 1
		// Parity: Disabled
		USARTE0_CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    4e92:	83 e0       	ldi	r24, 0x03	; 3
    4e94:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7deaa5>

		// Receive complete interrupt: Medium Level
		// Transmit complete interrupt: Medium Level
		// Data register empty interrupt: Disabled
		USARTE0.CTRLA=(USARTE0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
    4e98:	e0 ea       	ldi	r30, 0xA0	; 160
    4e9a:	fa e0       	ldi	r31, 0x0A	; 10
    4e9c:	83 81       	ldd	r24, Z+3	; 0x03
    4e9e:	80 7c       	andi	r24, 0xC0	; 192
    4ea0:	88 62       	ori	r24, 0x28	; 40
    4ea2:	83 83       	std	Z+3, r24	; 0x03
		//USARTE0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x04;
		
		// Bij een interne OSC van 9 MHz
		// Required Baud rate: 57600
		// Real Baud Rate: 57600,0 (x1 Mode), Error: 0,0 %
		USARTE0.BAUDCTRLA=0x62;
    4ea4:	82 e6       	ldi	r24, 0x62	; 98
    4ea6:	86 83       	std	Z+6, r24	; 0x06
		USARTE0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x04;		
    4ea8:	84 e9       	ldi	r24, 0x94	; 148
    4eaa:	87 83       	std	Z+7, r24	; 0x07

		// Receiver: On
		// Transmitter: On
		// Double transmission speed mode: Off
		// Multi-processor communication mode: Off
		USARTE0.CTRLB=(USARTE0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
    4eac:	84 81       	ldd	r24, Z+4	; 0x04
    4eae:	80 7e       	andi	r24, 0xE0	; 224
    4eb0:	88 61       	ori	r24, 0x18	; 24
    4eb2:	84 83       	std	Z+4, r24	; 0x04
		USART_RXEN_bm | USART_TXEN_bm;

				
		sei();
    4eb4:	78 94       	sei
    4eb6:	08 95       	ret

00004eb8 <__vector_58>:
}


ISR(USARTE0_RXC_vect)
{
    4eb8:	1f 92       	push	r1
    4eba:	0f 92       	push	r0
    4ebc:	0f b6       	in	r0, 0x3f	; 63
    4ebe:	0f 92       	push	r0
    4ec0:	11 24       	eor	r1, r1
    4ec2:	08 b6       	in	r0, 0x38	; 56
    4ec4:	0f 92       	push	r0
    4ec6:	18 be       	out	0x38, r1	; 56
    4ec8:	09 b6       	in	r0, 0x39	; 57
    4eca:	0f 92       	push	r0
    4ecc:	19 be       	out	0x39, r1	; 57
    4ece:	0b b6       	in	r0, 0x3b	; 59
    4ed0:	0f 92       	push	r0
    4ed2:	1b be       	out	0x3b, r1	; 59
    4ed4:	2f 93       	push	r18
    4ed6:	8f 93       	push	r24
    4ed8:	9f 93       	push	r25
    4eda:	af 93       	push	r26
    4edc:	bf 93       	push	r27
    4ede:	ef 93       	push	r30
    4ee0:	ff 93       	push	r31
	SerialByte = USARTE0.DATA;
    4ee2:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
    4ee6:	80 93 b1 22 	sts	0x22B1, r24	; 0x8022b1 <SerialByte>

	if (SerialByte&0x80)
    4eea:	88 23       	and	r24, r24
    4eec:	94 f4       	brge	.+36     	; 0x4f12 <__vector_58+0x5a>
	{

		SerialCnt = 0;
    4eee:	10 92 c4 23 	sts	0x23C4, r1	; 0x8023c4 <SerialCnt>
		switch (SerialByte)
    4ef2:	83 39       	cpi	r24, 0x93	; 147
    4ef4:	19 f0       	breq	.+6      	; 0x4efc <__vector_58+0x44>
    4ef6:	84 39       	cpi	r24, 0x94	; 148
    4ef8:	29 f0       	breq	.+10     	; 0x4f04 <__vector_58+0x4c>
    4efa:	08 c0       	rjmp	.+16     	; 0x4f0c <__vector_58+0x54>
		{
			case SERIAL_MODULESETUPDATA:
			{

				SerialLength = 31;
    4efc:	9f e1       	ldi	r25, 0x1F	; 31
    4efe:	90 93 6e 22 	sts	0x226E, r25	; 0x80226e <SerialLength>
				
			}
			break;
    4f02:	07 c0       	rjmp	.+14     	; 0x4f12 <__vector_58+0x5a>
			case SERIAL_MASTERSETUPDATA:
			{

				SerialLength = 7;
    4f04:	97 e0       	ldi	r25, 0x07	; 7
    4f06:	90 93 6e 22 	sts	0x226E, r25	; 0x80226e <SerialLength>
			}
			break;
    4f0a:	03 c0       	rjmp	.+6      	; 0x4f12 <__vector_58+0x5a>
			default:
			{

				SerialLength = 3;
    4f0c:	93 e0       	ldi	r25, 0x03	; 3
    4f0e:	90 93 6e 22 	sts	0x226E, r25	; 0x80226e <SerialLength>
			}
			break;
		}	
	}
		
	DummySerialBuffer[SerialCnt++] = SerialByte;
    4f12:	e0 91 c4 23 	lds	r30, 0x23C4	; 0x8023c4 <SerialCnt>
    4f16:	91 e0       	ldi	r25, 0x01	; 1
    4f18:	9e 0f       	add	r25, r30
    4f1a:	90 93 c4 23 	sts	0x23C4, r25	; 0x8023c4 <SerialCnt>
    4f1e:	f0 e0       	ldi	r31, 0x00	; 0
    4f20:	ec 53       	subi	r30, 0x3C	; 60
    4f22:	fd 4d       	sbci	r31, 0xDD	; 221
    4f24:	80 83       	st	Z, r24
	if (SerialCnt >= SerialLength)
    4f26:	20 91 6e 22 	lds	r18, 0x226E	; 0x80226e <SerialLength>
    4f2a:	92 17       	cp	r25, r18
    4f2c:	90 f4       	brcc	.+36     	; 0x4f52 <__vector_58+0x9a>
    4f2e:	14 c0       	rjmp	.+40     	; 0x4f58 <__vector_58+0xa0>
		{
							//PORTB_OUTSET = 1;  // TEST LED
							//Delay(1000);
							//PORTB_OUTCLR = 1;
							//Delay(1000);
			SerialBufferIn[SerialBufferInPtrTop++] = DummySerialBuffer[cnt];
    4f30:	e0 91 15 3a 	lds	r30, 0x3A15	; 0x803a15 <SerialBufferInPtrTop>
    4f34:	91 e0       	ldi	r25, 0x01	; 1
    4f36:	9e 0f       	add	r25, r30
    4f38:	90 93 15 3a 	sts	0x3A15, r25	; 0x803a15 <SerialBufferInPtrTop>
    4f3c:	f0 e0       	ldi	r31, 0x00	; 0
    4f3e:	a8 2f       	mov	r26, r24
    4f40:	b0 e0       	ldi	r27, 0x00	; 0
    4f42:	ac 53       	subi	r26, 0x3C	; 60
    4f44:	bd 4d       	sbci	r27, 0xDD	; 221
    4f46:	9c 91       	ld	r25, X
    4f48:	ea 5d       	subi	r30, 0xDA	; 218
    4f4a:	fe 4d       	sbci	r31, 0xDE	; 222
    4f4c:	90 83       	st	Z, r25
		
	DummySerialBuffer[SerialCnt++] = SerialByte;
	if (SerialCnt >= SerialLength)
	{
		unsigned char cnt;
		for (cnt=0; cnt<SerialLength; cnt++)
    4f4e:	8f 5f       	subi	r24, 0xFF	; 255
    4f50:	01 c0       	rjmp	.+2      	; 0x4f54 <__vector_58+0x9c>
    4f52:	80 e0       	ldi	r24, 0x00	; 0
    4f54:	82 17       	cp	r24, r18
    4f56:	60 f3       	brcs	.-40     	; 0x4f30 <__vector_58+0x78>
							//PORTB_OUTCLR = 1;
							//Delay(1000);
			SerialBufferIn[SerialBufferInPtrTop++] = DummySerialBuffer[cnt];
		}
	}
}
    4f58:	ff 91       	pop	r31
    4f5a:	ef 91       	pop	r30
    4f5c:	bf 91       	pop	r27
    4f5e:	af 91       	pop	r26
    4f60:	9f 91       	pop	r25
    4f62:	8f 91       	pop	r24
    4f64:	2f 91       	pop	r18
    4f66:	0f 90       	pop	r0
    4f68:	0b be       	out	0x3b, r0	; 59
    4f6a:	0f 90       	pop	r0
    4f6c:	09 be       	out	0x39, r0	; 57
    4f6e:	0f 90       	pop	r0
    4f70:	08 be       	out	0x38, r0	; 56
    4f72:	0f 90       	pop	r0
    4f74:	0f be       	out	0x3f, r0	; 63
    4f76:	0f 90       	pop	r0
    4f78:	1f 90       	pop	r1
    4f7a:	18 95       	reti

00004f7c <__vector_60>:

ISR(USARTE0_TXC_vect)
{
    4f7c:	1f 92       	push	r1
    4f7e:	0f 92       	push	r0
    4f80:	0f b6       	in	r0, 0x3f	; 63
    4f82:	0f 92       	push	r0
    4f84:	11 24       	eor	r1, r1
    4f86:	08 b6       	in	r0, 0x38	; 56
    4f88:	0f 92       	push	r0
    4f8a:	18 be       	out	0x38, r1	; 56
    4f8c:	0b b6       	in	r0, 0x3b	; 59
    4f8e:	0f 92       	push	r0
    4f90:	1b be       	out	0x3b, r1	; 59
    4f92:	8f 93       	push	r24
    4f94:	9f 93       	push	r25
    4f96:	ef 93       	push	r30
    4f98:	ff 93       	push	r31
	//USARTE0_DATA = (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80));
	//USARTE0_DATA = SerialBufferOutPtrTop;
	//while ( !( USARTE0.STATUS & USART_DREIF_bm) );
	//USARTE0_DATA = SerialBufferOutPtrBottom;
	//while ( !( USARTE0.STATUS & USART_DREIF_bm) );
	if ((SerialBufferOutPtrBottom != SerialBufferOutPtrTop) &&  (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80)))
    4f9a:	80 91 93 2b 	lds	r24, 0x2B93	; 0x802b93 <SerialBufferOutPtrBottom>
    4f9e:	90 91 82 22 	lds	r25, 0x2282	; 0x802282 <SerialBufferOutPtrTop>
    4fa2:	89 17       	cp	r24, r25
    4fa4:	69 f0       	breq	.+26     	; 0x4fc0 <__vector_60+0x44>
    4fa6:	e8 2f       	mov	r30, r24
    4fa8:	f0 e0       	ldi	r31, 0x00	; 0
    4faa:	eb 53       	subi	r30, 0x3B	; 59
    4fac:	fc 4d       	sbci	r31, 0xDC	; 220
    4fae:	90 81       	ld	r25, Z
    4fb0:	99 23       	and	r25, r25
    4fb2:	34 f0       	brlt	.+12     	; 0x4fc0 <__vector_60+0x44>
	//if (SerialBufferOutPtrBottom != SerialBufferOutPtrTop)
	//if (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80))
	{
		USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    4fb4:	8f 5f       	subi	r24, 0xFF	; 255
    4fb6:	80 93 93 2b 	sts	0x2B93, r24	; 0x802b93 <SerialBufferOutPtrBottom>
    4fba:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
    4fbe:	03 c0       	rjmp	.+6      	; 0x4fc6 <__vector_60+0x4a>
	}
	else
	{
		SendSerialReady = 1;
    4fc0:	81 e0       	ldi	r24, 0x01	; 1
    4fc2:	80 93 6a 22 	sts	0x226A, r24	; 0x80226a <SendSerialReady>
	}
}
    4fc6:	ff 91       	pop	r31
    4fc8:	ef 91       	pop	r30
    4fca:	9f 91       	pop	r25
    4fcc:	8f 91       	pop	r24
    4fce:	0f 90       	pop	r0
    4fd0:	0b be       	out	0x3b, r0	; 59
    4fd2:	0f 90       	pop	r0
    4fd4:	08 be       	out	0x38, r0	; 56
    4fd6:	0f 90       	pop	r0
    4fd8:	0f be       	out	0x3f, r0	; 63
    4fda:	0f 90       	pop	r0
    4fdc:	1f 90       	pop	r1
    4fde:	18 95       	reti

00004fe0 <TWIM_ErrorHandler>:

	// Start the transmission by writing the address
	Message.Device->MASTER.ADDR = TWI_READ(Message.DeviceAddress);
	
	for (wacht=0; wacht<20000; wacht++);
}
    4fe0:	e8 ee       	ldi	r30, 0xE8	; 232
    4fe2:	f0 e2       	ldi	r31, 0x20	; 32
    4fe4:	8f ef       	ldi	r24, 0xFF	; 255
    4fe6:	84 87       	std	Z+12, r24	; 0x0c
    4fe8:	01 90       	ld	r0, Z+
    4fea:	f0 81       	ld	r31, Z
    4fec:	e0 2d       	mov	r30, r0
    4fee:	83 e0       	ldi	r24, 0x03	; 3
    4ff0:	83 83       	std	Z+3, r24	; 0x03
    4ff2:	08 95       	ret

00004ff4 <TWIM_ArbitrationLostHandler>:
    4ff4:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <TWIM_ErrorHandler>
    4ff8:	08 95       	ret

00004ffa <TWIM_WriteHandler>:
    4ffa:	cf 93       	push	r28
    4ffc:	df 93       	push	r29
    4ffe:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <__data_end>
    5002:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <__data_end+0x1>
    5006:	84 81       	ldd	r24, Z+4	; 0x04
    5008:	84 ff       	sbrs	r24, 4
    500a:	03 c0       	rjmp	.+6      	; 0x5012 <TWIM_WriteHandler+0x18>
    500c:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <TWIM_ErrorHandler>
    5010:	42 c0       	rjmp	.+132    	; 0x5096 <TWIM_WriteHandler+0x9c>
    5012:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <__data_end+0xc>
    5016:	81 11       	cpse	r24, r1
    5018:	12 c0       	rjmp	.+36     	; 0x503e <TWIM_WriteHandler+0x44>
    501a:	a8 ee       	ldi	r26, 0xE8	; 232
    501c:	b0 e2       	ldi	r27, 0x20	; 32
    501e:	13 96       	adiw	r26, 0x03	; 3
    5020:	8c 91       	ld	r24, X
    5022:	13 97       	sbiw	r26, 0x03	; 3
    5024:	87 83       	std	Z+7, r24	; 0x07
    5026:	16 96       	adiw	r26, 0x06	; 6
    5028:	8c 91       	ld	r24, X
    502a:	88 23       	and	r24, r24
    502c:	21 f0       	breq	.+8      	; 0x5036 <TWIM_WriteHandler+0x3c>
    502e:	81 e0       	ldi	r24, 0x01	; 1
    5030:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__data_end+0xc>
    5034:	30 c0       	rjmp	.+96     	; 0x5096 <TWIM_WriteHandler+0x9c>
    5036:	82 e0       	ldi	r24, 0x02	; 2
    5038:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__data_end+0xc>
    503c:	2c c0       	rjmp	.+88     	; 0x5096 <TWIM_WriteHandler+0x9c>
    503e:	81 30       	cpi	r24, 0x01	; 1
    5040:	71 f4       	brne	.+28     	; 0x505e <TWIM_WriteHandler+0x64>
    5042:	a8 ee       	ldi	r26, 0xE8	; 232
    5044:	b0 e2       	ldi	r27, 0x20	; 32
    5046:	12 96       	adiw	r26, 0x02	; 2
    5048:	8c 91       	ld	r24, X
    504a:	12 97       	sbiw	r26, 0x02	; 2
    504c:	90 e0       	ldi	r25, 0x00	; 0
    504e:	88 0f       	add	r24, r24
    5050:	99 1f       	adc	r25, r25
    5052:	81 60       	ori	r24, 0x01	; 1
    5054:	86 83       	std	Z+6, r24	; 0x06
    5056:	83 e0       	ldi	r24, 0x03	; 3
    5058:	1c 96       	adiw	r26, 0x0c	; 12
    505a:	8c 93       	st	X, r24
    505c:	1c c0       	rjmp	.+56     	; 0x5096 <TWIM_WriteHandler+0x9c>
    505e:	82 30       	cpi	r24, 0x02	; 2
    5060:	d1 f4       	brne	.+52     	; 0x5096 <TWIM_WriteHandler+0x9c>
    5062:	a8 ee       	ldi	r26, 0xE8	; 232
    5064:	b0 e2       	ldi	r27, 0x20	; 32
    5066:	15 96       	adiw	r26, 0x05	; 5
    5068:	8c 91       	ld	r24, X
    506a:	15 97       	sbiw	r26, 0x05	; 5
    506c:	14 96       	adiw	r26, 0x04	; 4
    506e:	9c 91       	ld	r25, X
    5070:	14 97       	sbiw	r26, 0x04	; 4
    5072:	89 17       	cp	r24, r25
    5074:	58 f4       	brcc	.+22     	; 0x508c <TWIM_WriteHandler+0x92>
    5076:	ed 01       	movw	r28, r26
    5078:	a8 85       	ldd	r26, Y+8	; 0x08
    507a:	b9 85       	ldd	r27, Y+9	; 0x09
    507c:	91 e0       	ldi	r25, 0x01	; 1
    507e:	98 0f       	add	r25, r24
    5080:	9d 83       	std	Y+5, r25	; 0x05
    5082:	a8 0f       	add	r26, r24
    5084:	b1 1d       	adc	r27, r1
    5086:	8c 91       	ld	r24, X
    5088:	87 83       	std	Z+7, r24	; 0x07
    508a:	05 c0       	rjmp	.+10     	; 0x5096 <TWIM_WriteHandler+0x9c>
    508c:	83 e0       	ldi	r24, 0x03	; 3
    508e:	83 83       	std	Z+3, r24	; 0x03
    5090:	84 e0       	ldi	r24, 0x04	; 4
    5092:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__data_end+0xc>
    5096:	df 91       	pop	r29
    5098:	cf 91       	pop	r28
    509a:	08 95       	ret

0000509c <TWIM_ReadHandler>:
    509c:	cf 93       	push	r28
    509e:	df 93       	push	r29
    50a0:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <__data_end+0xc>
    50a4:	83 30       	cpi	r24, 0x03	; 3
    50a6:	d1 f4       	brne	.+52     	; 0x50dc <TWIM_ReadHandler+0x40>
    50a8:	e8 ee       	ldi	r30, 0xE8	; 232
    50aa:	f0 e2       	ldi	r31, 0x20	; 32
    50ac:	a2 85       	ldd	r26, Z+10	; 0x0a
    50ae:	b3 85       	ldd	r27, Z+11	; 0x0b
    50b0:	97 81       	ldd	r25, Z+7	; 0x07
    50b2:	81 e0       	ldi	r24, 0x01	; 1
    50b4:	89 0f       	add	r24, r25
    50b6:	87 83       	std	Z+7, r24	; 0x07
    50b8:	a9 0f       	add	r26, r25
    50ba:	b1 1d       	adc	r27, r1
    50bc:	c0 81       	ld	r28, Z
    50be:	d1 81       	ldd	r29, Z+1	; 0x01
    50c0:	9f 81       	ldd	r25, Y+7	; 0x07
    50c2:	9c 93       	st	X, r25
    50c4:	96 81       	ldd	r25, Z+6	; 0x06
    50c6:	89 17       	cp	r24, r25
    50c8:	18 f4       	brcc	.+6      	; 0x50d0 <TWIM_ReadHandler+0x34>
    50ca:	82 e0       	ldi	r24, 0x02	; 2
    50cc:	8b 83       	std	Y+3, r24	; 0x03
    50ce:	08 c0       	rjmp	.+16     	; 0x50e0 <TWIM_ReadHandler+0x44>
    50d0:	87 e0       	ldi	r24, 0x07	; 7
    50d2:	8b 83       	std	Y+3, r24	; 0x03
    50d4:	85 e0       	ldi	r24, 0x05	; 5
    50d6:	80 93 f4 20 	sts	0x20F4, r24	; 0x8020f4 <__data_end+0xc>
    50da:	02 c0       	rjmp	.+4      	; 0x50e0 <TWIM_ReadHandler+0x44>
    50dc:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <TWIM_ErrorHandler>
    50e0:	df 91       	pop	r29
    50e2:	cf 91       	pop	r28
    50e4:	08 95       	ret

000050e6 <TWIM_InitInterrupt>:
    50e6:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7de4a0>
    50ea:	88 e2       	ldi	r24, 0x28	; 40
    50ec:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7de4a5>
    50f0:	88 e7       	ldi	r24, 0x78	; 120
    50f2:	80 93 a1 04 	sts	0x04A1, r24	; 0x8004a1 <__TEXT_REGION_LENGTH__+0x7de4a1>
    50f6:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <__TEXT_REGION_LENGTH__+0x7de4a2>
    50fa:	e4 ea       	ldi	r30, 0xA4	; 164
    50fc:	f4 e0       	ldi	r31, 0x04	; 4
    50fe:	80 81       	ld	r24, Z
    5100:	81 60       	ori	r24, 0x01	; 1
    5102:	80 83       	st	Z, r24
    5104:	08 95       	ret

00005106 <TWIM_Transmit>:
    5106:	e8 ee       	ldi	r30, 0xE8	; 232
    5108:	f0 e2       	ldi	r31, 0x20	; 32
    510a:	12 86       	std	Z+10, r1	; 0x0a
    510c:	13 86       	std	Z+11, r1	; 0x0b
    510e:	16 82       	std	Z+6, r1	; 0x06
    5110:	15 82       	std	Z+5, r1	; 0x05
    5112:	40 87       	std	Z+8, r20	; 0x08
    5114:	51 87       	std	Z+9, r21	; 0x09
    5116:	24 83       	std	Z+4, r18	; 0x04
    5118:	a0 ea       	ldi	r26, 0xA0	; 160
    511a:	b4 e0       	ldi	r27, 0x04	; 4
    511c:	a0 83       	st	Z, r26
    511e:	b1 83       	std	Z+1, r27	; 0x01
    5120:	82 83       	std	Z+2, r24	; 0x02
    5122:	63 83       	std	Z+3, r22	; 0x03
    5124:	14 86       	std	Z+12, r1	; 0x0c
    5126:	88 0f       	add	r24, r24
    5128:	16 96       	adiw	r26, 0x06	; 6
    512a:	8c 93       	st	X, r24
    512c:	10 92 a1 3a 	sts	0x3AA1, r1	; 0x803aa1 <wacht>
    5130:	10 92 a2 3a 	sts	0x3AA2, r1	; 0x803aa2 <wacht+0x1>
    5134:	09 c0       	rjmp	.+18     	; 0x5148 <TWIM_Transmit+0x42>
    5136:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    513a:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    513e:	01 96       	adiw	r24, 0x01	; 1
    5140:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <wacht>
    5144:	90 93 a2 3a 	sts	0x3AA2, r25	; 0x803aa2 <wacht+0x1>
    5148:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    514c:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    5150:	88 39       	cpi	r24, 0x98	; 152
    5152:	9a 43       	sbci	r25, 0x3A	; 58
    5154:	80 f3       	brcs	.-32     	; 0x5136 <TWIM_Transmit+0x30>
    5156:	08 95       	ret

00005158 <TWIM_Receive>:

//void TWIM_Receive(uint8_t DeviceAddress, uint8_t Register, uint8_t Bytes, uint8_t* Data)
void TWIM_Receive(uint8_t DeviceAddress, uint8_t Register, unsigned char* Data, uint8_t Bytes)
{
	Message.BufferWrite = 0x00;
    5158:	e8 ee       	ldi	r30, 0xE8	; 232
    515a:	f0 e2       	ldi	r31, 0x20	; 32
    515c:	10 86       	std	Z+8, r1	; 0x08
    515e:	11 86       	std	Z+9, r1	; 0x09
	Message.BytesWrite = 0x00;
    5160:	14 82       	std	Z+4, r1	; 0x04

	Message.IndexRead = 0x00;
    5162:	17 82       	std	Z+7, r1	; 0x07
	Message.BufferRead = Data;
    5164:	42 87       	std	Z+10, r20	; 0x0a
    5166:	53 87       	std	Z+11, r21	; 0x0b
	Message.BytesRead = Bytes;
    5168:	26 83       	std	Z+6, r18	; 0x06
	Message.Device = &TWIE;
    516a:	a0 ea       	ldi	r26, 0xA0	; 160
    516c:	b4 e0       	ldi	r27, 0x04	; 4
    516e:	a0 83       	st	Z, r26
    5170:	b1 83       	std	Z+1, r27	; 0x01
	Message.DeviceAddress = DeviceAddress;
    5172:	82 83       	std	Z+2, r24	; 0x02
	Message.Register = Register;
    5174:	63 83       	std	Z+3, r22	; 0x03
	Message.Status = TWI_MASTER_REGISTER;
    5176:	14 86       	std	Z+12, r1	; 0x0c

	// Start the transmission by writing the address
	Message.Device->MASTER.ADDR = TWI_WRITE(Message.DeviceAddress);
    5178:	88 0f       	add	r24, r24
    517a:	16 96       	adiw	r26, 0x06	; 6
    517c:	8c 93       	st	X, r24
	
	for (wacht=0; wacht<20000; wacht++);
    517e:	10 92 a1 3a 	sts	0x3AA1, r1	; 0x803aa1 <wacht>
    5182:	10 92 a2 3a 	sts	0x3AA2, r1	; 0x803aa2 <wacht+0x1>
    5186:	09 c0       	rjmp	.+18     	; 0x519a <TWIM_Receive+0x42>
    5188:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    518c:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    5190:	01 96       	adiw	r24, 0x01	; 1
    5192:	80 93 a1 3a 	sts	0x3AA1, r24	; 0x803aa1 <wacht>
    5196:	90 93 a2 3a 	sts	0x3AA2, r25	; 0x803aa2 <wacht+0x1>
    519a:	80 91 a1 3a 	lds	r24, 0x3AA1	; 0x803aa1 <wacht>
    519e:	90 91 a2 3a 	lds	r25, 0x3AA2	; 0x803aa2 <wacht+0x1>
    51a2:	80 32       	cpi	r24, 0x20	; 32
    51a4:	9e 44       	sbci	r25, 0x4E	; 78
    51a6:	80 f3       	brcs	.-32     	; 0x5188 <TWIM_Receive+0x30>
}
    51a8:	08 95       	ret

000051aa <TWIM_Status>:

TWI_MasterStatus_t TWIM_Status(void)
{
	return Message.Status;
}
    51aa:	80 91 f4 20 	lds	r24, 0x20F4	; 0x8020f4 <__data_end+0xc>
    51ae:	08 95       	ret

000051b0 <__vector_46>:

ISR(TWIE_TWIM_vect)
{
    51b0:	1f 92       	push	r1
    51b2:	0f 92       	push	r0
    51b4:	0f b6       	in	r0, 0x3f	; 63
    51b6:	0f 92       	push	r0
    51b8:	11 24       	eor	r1, r1
    51ba:	08 b6       	in	r0, 0x38	; 56
    51bc:	0f 92       	push	r0
    51be:	18 be       	out	0x38, r1	; 56
    51c0:	09 b6       	in	r0, 0x39	; 57
    51c2:	0f 92       	push	r0
    51c4:	19 be       	out	0x39, r1	; 57
    51c6:	0b b6       	in	r0, 0x3b	; 59
    51c8:	0f 92       	push	r0
    51ca:	1b be       	out	0x3b, r1	; 59
    51cc:	2f 93       	push	r18
    51ce:	3f 93       	push	r19
    51d0:	4f 93       	push	r20
    51d2:	5f 93       	push	r21
    51d4:	6f 93       	push	r22
    51d6:	7f 93       	push	r23
    51d8:	8f 93       	push	r24
    51da:	9f 93       	push	r25
    51dc:	af 93       	push	r26
    51de:	bf 93       	push	r27
    51e0:	ef 93       	push	r30
    51e2:	ff 93       	push	r31
	uint8_t Status = Message.Device->MASTER.STATUS;
    51e4:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <__data_end>
    51e8:	f0 91 e9 20 	lds	r31, 0x20E9	; 0x8020e9 <__data_end+0x1>
    51ec:	84 81       	ldd	r24, Z+4	; 0x04

	/*
		Arbitration lost
	*/
	if(Status & TWI_MASTER_ARBLOST_bm)
    51ee:	83 ff       	sbrs	r24, 3
    51f0:	03 c0       	rjmp	.+6      	; 0x51f8 <__vector_46+0x48>
	{
		TWIM_ArbitrationLostHandler();
    51f2:	0e 94 fa 27 	call	0x4ff4	; 0x4ff4 <TWIM_ArbitrationLostHandler>
    51f6:	0c c0       	rjmp	.+24     	; 0x5210 <__vector_46+0x60>
	}
	/*
		Write interrupt
	*/
	else if(Status & TWI_MASTER_WIF_bm)
    51f8:	86 ff       	sbrs	r24, 6
    51fa:	03 c0       	rjmp	.+6      	; 0x5202 <__vector_46+0x52>
	{	
		TWIM_WriteHandler();
    51fc:	0e 94 fd 27 	call	0x4ffa	; 0x4ffa <TWIM_WriteHandler>
    5200:	07 c0       	rjmp	.+14     	; 0x5210 <__vector_46+0x60>
	}
	/*
		Read interrupt
	*/
	else if(Status & TWI_MASTER_RIF_bm)
    5202:	88 23       	and	r24, r24
    5204:	1c f4       	brge	.+6      	; 0x520c <__vector_46+0x5c>
	{
		TWIM_ReadHandler();
    5206:	0e 94 4e 28 	call	0x509c	; 0x509c <TWIM_ReadHandler>
    520a:	02 c0       	rjmp	.+4      	; 0x5210 <__vector_46+0x60>
	/*
		Error
	*/
	else
	{
		TWIM_ErrorHandler();
    520c:	0e 94 f0 27 	call	0x4fe0	; 0x4fe0 <TWIM_ErrorHandler>
	}
    5210:	ff 91       	pop	r31
    5212:	ef 91       	pop	r30
    5214:	bf 91       	pop	r27
    5216:	af 91       	pop	r26
    5218:	9f 91       	pop	r25
    521a:	8f 91       	pop	r24
    521c:	7f 91       	pop	r23
    521e:	6f 91       	pop	r22
    5220:	5f 91       	pop	r21
    5222:	4f 91       	pop	r20
    5224:	3f 91       	pop	r19
    5226:	2f 91       	pop	r18
    5228:	0f 90       	pop	r0
    522a:	0b be       	out	0x3b, r0	; 59
    522c:	0f 90       	pop	r0
    522e:	09 be       	out	0x39, r0	; 57
    5230:	0f 90       	pop	r0
    5232:	08 be       	out	0x38, r0	; 56
    5234:	0f 90       	pop	r0
    5236:	0f be       	out	0x3f, r0	; 63
    5238:	0f 90       	pop	r0
    523a:	1f 90       	pop	r1
    523c:	18 95       	reti

0000523e <__divmodhi4>:
    523e:	97 fb       	bst	r25, 7
    5240:	07 2e       	mov	r0, r23
    5242:	16 f4       	brtc	.+4      	; 0x5248 <__divmodhi4+0xa>
    5244:	00 94       	com	r0
    5246:	07 d0       	rcall	.+14     	; 0x5256 <__divmodhi4_neg1>
    5248:	77 fd       	sbrc	r23, 7
    524a:	09 d0       	rcall	.+18     	; 0x525e <__divmodhi4_neg2>
    524c:	0e 94 3c 29 	call	0x5278	; 0x5278 <__udivmodhi4>
    5250:	07 fc       	sbrc	r0, 7
    5252:	05 d0       	rcall	.+10     	; 0x525e <__divmodhi4_neg2>
    5254:	3e f4       	brtc	.+14     	; 0x5264 <__divmodhi4_exit>

00005256 <__divmodhi4_neg1>:
    5256:	90 95       	com	r25
    5258:	81 95       	neg	r24
    525a:	9f 4f       	sbci	r25, 0xFF	; 255
    525c:	08 95       	ret

0000525e <__divmodhi4_neg2>:
    525e:	70 95       	com	r23
    5260:	61 95       	neg	r22
    5262:	7f 4f       	sbci	r23, 0xFF	; 255

00005264 <__divmodhi4_exit>:
    5264:	08 95       	ret

00005266 <__tablejump2__>:
    5266:	ee 0f       	add	r30, r30
    5268:	ff 1f       	adc	r31, r31
    526a:	88 1f       	adc	r24, r24
    526c:	8b bf       	out	0x3b, r24	; 59
    526e:	07 90       	elpm	r0, Z+
    5270:	f6 91       	elpm	r31, Z
    5272:	e0 2d       	mov	r30, r0
    5274:	1b be       	out	0x3b, r1	; 59
    5276:	19 94       	eijmp

00005278 <__udivmodhi4>:
    5278:	aa 1b       	sub	r26, r26
    527a:	bb 1b       	sub	r27, r27
    527c:	51 e1       	ldi	r21, 0x11	; 17
    527e:	07 c0       	rjmp	.+14     	; 0x528e <__udivmodhi4_ep>

00005280 <__udivmodhi4_loop>:
    5280:	aa 1f       	adc	r26, r26
    5282:	bb 1f       	adc	r27, r27
    5284:	a6 17       	cp	r26, r22
    5286:	b7 07       	cpc	r27, r23
    5288:	10 f0       	brcs	.+4      	; 0x528e <__udivmodhi4_ep>
    528a:	a6 1b       	sub	r26, r22
    528c:	b7 0b       	sbc	r27, r23

0000528e <__udivmodhi4_ep>:
    528e:	88 1f       	adc	r24, r24
    5290:	99 1f       	adc	r25, r25
    5292:	5a 95       	dec	r21
    5294:	a9 f7       	brne	.-22     	; 0x5280 <__udivmodhi4_loop>
    5296:	80 95       	com	r24
    5298:	90 95       	com	r25
    529a:	bc 01       	movw	r22, r24
    529c:	cd 01       	movw	r24, r26
    529e:	08 95       	ret

000052a0 <_exit>:
    52a0:	f8 94       	cli

000052a2 <__stop_program>:
    52a2:	ff cf       	rjmp	.-2      	; 0x52a2 <__stop_program>
