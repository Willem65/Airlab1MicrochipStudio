
Airlab1MicrochipStudio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000535c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000e8  00802000  0000535c  000053f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00001724  008020e8  008020e8  000054d8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000054d8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00005508  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001d8  00000000  00000000  00005548  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00007382  00000000  00000000  00005720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003165  00000000  00000000  0000caa2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000045bc  00000000  00000000  0000fc07  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000438  00000000  00000000  000141c4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002c1d  00000000  00000000  000145fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002417  00000000  00000000  00017219  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002a8  00000000  00000000  00019630  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 80 02 	jmp	0x500	; 0x500 <__ctors_end>
       4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
       8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
       c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      10:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      14:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      18:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      1c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      20:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      24:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      28:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      2c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      30:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      34:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      38:	0c 94 cb 0d 	jmp	0x1b96	; 0x1b96 <__vector_14>
      3c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      40:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      44:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      48:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      4c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      50:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      54:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      58:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      5c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      60:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      64:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      68:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      6c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      70:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      74:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      78:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      7c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      80:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      84:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      88:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      8c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      90:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      94:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      98:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      9c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      a0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      a4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      a8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      ac:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      b0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      b4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      b8:	0c 94 e7 21 	jmp	0x43ce	; 0x43ce <__vector_46>
      bc:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      c0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      c4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      c8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      cc:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      d0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      d4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      d8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      dc:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      e0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      e4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      e8:	0c 94 e7 28 	jmp	0x51ce	; 0x51ce <__vector_58>
      ec:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      f0:	0c 94 49 29 	jmp	0x5292	; 0x5292 <__vector_60>
      f4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      f8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
      fc:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     100:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     104:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     108:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     10c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     110:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     114:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     118:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     11c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     120:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     124:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     128:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     12c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     130:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     134:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     138:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     13c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     140:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     144:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     148:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     14c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     150:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     154:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     158:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     15c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     160:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     164:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     168:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     16c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     170:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     174:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     178:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     17c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     180:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     184:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     188:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     18c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     190:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     194:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     198:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     19c:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1a0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1a4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1a8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1ac:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1b0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1b4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1b8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1bc:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1c0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1c4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1c8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1cc:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1d0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1d4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1d8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1dc:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1e0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1e4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1e8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1ec:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1f0:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1f4:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1f8:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__bad_interrupt>
     1fc:	57 0e       	add	r5, r23
     1fe:	5d 11       	cpse	r21, r13
     200:	9e 12       	cpse	r9, r30
     202:	10 15       	cp	r17, r0
     204:	7d 20       	and	r7, r13
     206:	7d 20       	and	r7, r13
     208:	25 17       	cp	r18, r21
     20a:	39 17       	cp	r19, r25
     20c:	7d 20       	and	r7, r13
     20e:	7d 20       	and	r7, r13
     210:	7d 20       	and	r7, r13
     212:	7d 20       	and	r7, r13
     214:	7d 20       	and	r7, r13
     216:	7d 20       	and	r7, r13
     218:	7d 20       	and	r7, r13
     21a:	7d 20       	and	r7, r13
     21c:	7d 20       	and	r7, r13
     21e:	7d 20       	and	r7, r13
     220:	7d 20       	and	r7, r13
     222:	7d 20       	and	r7, r13
     224:	7d 20       	and	r7, r13
     226:	7d 20       	and	r7, r13
     228:	7d 20       	and	r7, r13
     22a:	7d 20       	and	r7, r13
     22c:	7d 20       	and	r7, r13
     22e:	7d 20       	and	r7, r13
     230:	7d 20       	and	r7, r13
     232:	7d 20       	and	r7, r13
     234:	7d 20       	and	r7, r13
     236:	7d 20       	and	r7, r13
     238:	7d 20       	and	r7, r13
     23a:	7d 20       	and	r7, r13
     23c:	7d 20       	and	r7, r13
     23e:	7d 20       	and	r7, r13
     240:	7d 20       	and	r7, r13
     242:	7d 20       	and	r7, r13
     244:	7d 20       	and	r7, r13
     246:	7d 20       	and	r7, r13
     248:	7d 20       	and	r7, r13
     24a:	7d 20       	and	r7, r13
     24c:	7d 20       	and	r7, r13
     24e:	7d 20       	and	r7, r13
     250:	7d 20       	and	r7, r13
     252:	7d 20       	and	r7, r13
     254:	7d 20       	and	r7, r13
     256:	7d 20       	and	r7, r13
     258:	7d 20       	and	r7, r13
     25a:	7d 20       	and	r7, r13
     25c:	7d 20       	and	r7, r13
     25e:	7d 20       	and	r7, r13
     260:	7d 20       	and	r7, r13
     262:	7d 20       	and	r7, r13
     264:	7d 20       	and	r7, r13
     266:	7d 20       	and	r7, r13
     268:	7d 20       	and	r7, r13
     26a:	7d 20       	and	r7, r13
     26c:	7d 20       	and	r7, r13
     26e:	7d 20       	and	r7, r13
     270:	7d 20       	and	r7, r13
     272:	7d 20       	and	r7, r13
     274:	7d 20       	and	r7, r13
     276:	7d 20       	and	r7, r13
     278:	7d 20       	and	r7, r13
     27a:	7d 20       	and	r7, r13
     27c:	7d 20       	and	r7, r13
     27e:	7d 20       	and	r7, r13
     280:	7d 20       	and	r7, r13
     282:	7d 20       	and	r7, r13
     284:	7d 20       	and	r7, r13
     286:	7d 20       	and	r7, r13
     288:	7d 20       	and	r7, r13
     28a:	7d 20       	and	r7, r13
     28c:	7d 20       	and	r7, r13
     28e:	7d 20       	and	r7, r13
     290:	7d 20       	and	r7, r13
     292:	7d 20       	and	r7, r13
     294:	7d 20       	and	r7, r13
     296:	7d 20       	and	r7, r13
     298:	7d 20       	and	r7, r13
     29a:	7d 20       	and	r7, r13
     29c:	7d 20       	and	r7, r13
     29e:	7d 20       	and	r7, r13
     2a0:	7d 20       	and	r7, r13
     2a2:	7d 20       	and	r7, r13
     2a4:	7d 20       	and	r7, r13
     2a6:	7d 20       	and	r7, r13
     2a8:	7d 20       	and	r7, r13
     2aa:	7d 20       	and	r7, r13
     2ac:	7d 20       	and	r7, r13
     2ae:	7d 20       	and	r7, r13
     2b0:	7d 20       	and	r7, r13
     2b2:	7d 20       	and	r7, r13
     2b4:	7d 20       	and	r7, r13
     2b6:	7d 20       	and	r7, r13
     2b8:	7d 20       	and	r7, r13
     2ba:	7d 20       	and	r7, r13
     2bc:	7d 20       	and	r7, r13
     2be:	7d 20       	and	r7, r13
     2c0:	7d 20       	and	r7, r13
     2c2:	7d 20       	and	r7, r13
     2c4:	7d 20       	and	r7, r13
     2c6:	7d 20       	and	r7, r13
     2c8:	7d 20       	and	r7, r13
     2ca:	7d 20       	and	r7, r13
     2cc:	7d 20       	and	r7, r13
     2ce:	7d 20       	and	r7, r13
     2d0:	7d 20       	and	r7, r13
     2d2:	7d 20       	and	r7, r13
     2d4:	7d 20       	and	r7, r13
     2d6:	7d 20       	and	r7, r13
     2d8:	7d 20       	and	r7, r13
     2da:	7d 20       	and	r7, r13
     2dc:	7d 20       	and	r7, r13
     2de:	7d 20       	and	r7, r13
     2e0:	7d 20       	and	r7, r13
     2e2:	7d 20       	and	r7, r13
     2e4:	7d 20       	and	r7, r13
     2e6:	7d 20       	and	r7, r13
     2e8:	7d 20       	and	r7, r13
     2ea:	7d 20       	and	r7, r13
     2ec:	7d 20       	and	r7, r13
     2ee:	7d 20       	and	r7, r13
     2f0:	7d 20       	and	r7, r13
     2f2:	7d 20       	and	r7, r13
     2f4:	7d 20       	and	r7, r13
     2f6:	7d 20       	and	r7, r13
     2f8:	7d 20       	and	r7, r13
     2fa:	7d 20       	and	r7, r13
     2fc:	be 17       	cp	r27, r30
     2fe:	ee 18       	sub	r14, r14
     300:	37 1c       	adc	r3, r7
     302:	4b 1d       	adc	r20, r11
     304:	7e 1c       	adc	r7, r14
     306:	14 1e       	adc	r1, r20
     308:	c0 1e       	adc	r12, r16
     30a:	d0 1e       	adc	r13, r16
     30c:	22 20       	and	r2, r2
     30e:	f4 12       	cpse	r15, r20
     310:	00 13       	cpse	r16, r16
     312:	00 13       	cpse	r16, r16
     314:	f4 12       	cpse	r15, r20
     316:	f4 12       	cpse	r15, r20
     318:	00 13       	cpse	r16, r16
     31a:	00 13       	cpse	r16, r16
     31c:	f4 12       	cpse	r15, r20
     31e:	0c 13       	cpse	r16, r28
     320:	0c 13       	cpse	r16, r28
     322:	f4 12       	cpse	r15, r20
     324:	f4 12       	cpse	r15, r20
     326:	f4 12       	cpse	r15, r20
     328:	f4 12       	cpse	r15, r20
     32a:	0c 13       	cpse	r16, r28
     32c:	0c 13       	cpse	r16, r28
     32e:	f4 12       	cpse	r15, r20
     330:	0c 13       	cpse	r16, r28
     332:	0c 13       	cpse	r16, r28
     334:	f4 12       	cpse	r15, r20
     336:	0c 13       	cpse	r16, r28
     338:	f4 12       	cpse	r15, r20
     33a:	f4 12       	cpse	r15, r20
     33c:	f4 12       	cpse	r15, r20
     33e:	f4 12       	cpse	r15, r20
     340:	f4 12       	cpse	r15, r20
     342:	22 13       	cpse	r18, r18
     344:	22 13       	cpse	r18, r18
     346:	22 13       	cpse	r18, r18
     348:	22 13       	cpse	r18, r18
     34a:	22 13       	cpse	r18, r18
     34c:	22 13       	cpse	r18, r18
     34e:	22 13       	cpse	r18, r18
     350:	4a 13       	cpse	r20, r26
     352:	4a 13       	cpse	r20, r26
     354:	4a 13       	cpse	r20, r26
     356:	27 13       	cpse	r18, r23
     358:	2f 13       	cpse	r18, r31
     35a:	45 13       	cpse	r20, r21
     35c:	48 13       	cpse	r20, r24
     35e:	48 13       	cpse	r20, r24
     360:	48 13       	cpse	r20, r24
     362:	48 13       	cpse	r20, r24
     364:	48 13       	cpse	r20, r24
     366:	48 13       	cpse	r20, r24
     368:	4a 13       	cpse	r20, r26
     36a:	2a 13       	cpse	r18, r26
     36c:	2a 13       	cpse	r18, r26
     36e:	da 26       	eor	r13, r26
     370:	f0 26       	eor	r15, r16
     372:	cb 28       	or	r12, r11
     374:	cb 28       	or	r12, r11
     376:	cb 28       	or	r12, r11
     378:	cb 28       	or	r12, r11
     37a:	cb 28       	or	r12, r11
     37c:	cb 28       	or	r12, r11
     37e:	cb 28       	or	r12, r11
     380:	cb 28       	or	r12, r11
     382:	cb 28       	or	r12, r11
     384:	cb 28       	or	r12, r11
     386:	cb 28       	or	r12, r11
     388:	cb 28       	or	r12, r11
     38a:	cb 28       	or	r12, r11
     38c:	cb 28       	or	r12, r11
     38e:	06 27       	eor	r16, r22
     390:	0a 27       	eor	r16, r26
     392:	0d 27       	eor	r16, r29
     394:	14 27       	eor	r17, r20
     396:	3a 27       	eor	r19, r26
     398:	cb 28       	or	r12, r11
     39a:	f2 27       	eor	r31, r18
     39c:	1c 28       	or	r1, r12
     39e:	cb 28       	or	r12, r11
     3a0:	cb 28       	or	r12, r11
     3a2:	cb 28       	or	r12, r11
     3a4:	cb 28       	or	r12, r11
     3a6:	cb 28       	or	r12, r11
     3a8:	cb 28       	or	r12, r11
     3aa:	cb 28       	or	r12, r11
     3ac:	cb 28       	or	r12, r11
     3ae:	cb 28       	or	r12, r11
     3b0:	cb 28       	or	r12, r11
     3b2:	cb 28       	or	r12, r11
     3b4:	cb 28       	or	r12, r11
     3b6:	cb 28       	or	r12, r11
     3b8:	cb 28       	or	r12, r11
     3ba:	cb 28       	or	r12, r11
     3bc:	cb 28       	or	r12, r11
     3be:	cb 28       	or	r12, r11
     3c0:	cb 28       	or	r12, r11
     3c2:	cb 28       	or	r12, r11
     3c4:	cb 28       	or	r12, r11
     3c6:	cb 28       	or	r12, r11
     3c8:	cb 28       	or	r12, r11
     3ca:	cb 28       	or	r12, r11
     3cc:	cb 28       	or	r12, r11
     3ce:	cb 28       	or	r12, r11
     3d0:	cb 28       	or	r12, r11
     3d2:	cb 28       	or	r12, r11
     3d4:	79 27       	eor	r23, r25
     3d6:	a4 27       	eor	r26, r20
     3d8:	cb 27       	eor	r28, r27
     3da:	cb 28       	or	r12, r11
     3dc:	cb 28       	or	r12, r11
     3de:	cb 28       	or	r12, r11
     3e0:	cb 28       	or	r12, r11
     3e2:	52 27       	eor	r21, r18
     3e4:	cb 28       	or	r12, r11
     3e6:	cb 28       	or	r12, r11
     3e8:	cb 28       	or	r12, r11
     3ea:	cb 28       	or	r12, r11
     3ec:	cb 28       	or	r12, r11
     3ee:	cb 28       	or	r12, r11
     3f0:	cb 28       	or	r12, r11
     3f2:	cb 28       	or	r12, r11
     3f4:	cb 28       	or	r12, r11
     3f6:	cb 28       	or	r12, r11
     3f8:	cb 28       	or	r12, r11
     3fa:	cb 28       	or	r12, r11
     3fc:	cb 28       	or	r12, r11
     3fe:	cb 28       	or	r12, r11
     400:	cb 28       	or	r12, r11
     402:	cb 28       	or	r12, r11
     404:	cb 28       	or	r12, r11
     406:	cb 28       	or	r12, r11
     408:	cb 28       	or	r12, r11
     40a:	cb 28       	or	r12, r11
     40c:	cb 28       	or	r12, r11
     40e:	cb 28       	or	r12, r11
     410:	cb 28       	or	r12, r11
     412:	cb 28       	or	r12, r11
     414:	cb 28       	or	r12, r11
     416:	cb 28       	or	r12, r11
     418:	cb 28       	or	r12, r11
     41a:	cb 28       	or	r12, r11
     41c:	cb 28       	or	r12, r11
     41e:	cb 28       	or	r12, r11
     420:	cb 28       	or	r12, r11
     422:	cb 28       	or	r12, r11
     424:	cb 28       	or	r12, r11
     426:	cb 28       	or	r12, r11
     428:	cb 28       	or	r12, r11
     42a:	cb 28       	or	r12, r11
     42c:	cb 28       	or	r12, r11
     42e:	4a 28       	or	r4, r10
     430:	66 28       	or	r6, r6
     432:	99 28       	or	r9, r9
     434:	cb 28       	or	r12, r11
     436:	cb 28       	or	r12, r11
     438:	cb 28       	or	r12, r11
     43a:	cb 28       	or	r12, r11
     43c:	cb 28       	or	r12, r11
     43e:	cb 28       	or	r12, r11
     440:	cb 28       	or	r12, r11
     442:	cb 28       	or	r12, r11
     444:	cb 28       	or	r12, r11
     446:	cb 28       	or	r12, r11
     448:	cb 28       	or	r12, r11
     44a:	cb 28       	or	r12, r11
     44c:	cb 28       	or	r12, r11
     44e:	b4 28       	or	r11, r4

00000450 <__trampolines_start>:
     450:	0c 94 0c 13 	jmp	0x2618	; 0x2618 <__DATA_REGION_LENGTH__+0x618>
     454:	0c 94 3a 27 	jmp	0x4e74	; 0x4e74 <DoSerial+0x112>
     458:	0c 94 39 17 	jmp	0x2e72	; 0x2e72 <__DATA_REGION_LENGTH__+0xe72>
     45c:	0c 94 79 27 	jmp	0x4ef2	; 0x4ef2 <DoSerial+0x190>
     460:	0c 94 5d 11 	jmp	0x22ba	; 0x22ba <__DATA_REGION_LENGTH__+0x2ba>
     464:	0c 94 4a 13 	jmp	0x2694	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
     468:	0c 94 ee 18 	jmp	0x31dc	; 0x31dc <__DATA_REGION_LENGTH__+0x11dc>
     46c:	0c 94 be 17 	jmp	0x2f7c	; 0x2f7c <__DATA_REGION_LENGTH__+0xf7c>
     470:	0c 94 48 13 	jmp	0x2690	; 0x2690 <__DATA_REGION_LENGTH__+0x690>
     474:	0c 94 14 27 	jmp	0x4e28	; 0x4e28 <DoSerial+0xc6>
     478:	0c 94 00 13 	jmp	0x2600	; 0x2600 <__DATA_REGION_LENGTH__+0x600>
     47c:	0c 94 66 28 	jmp	0x50cc	; 0x50cc <DoSerial+0x36a>
     480:	0c 94 d0 1e 	jmp	0x3da0	; 0x3da0 <__DATA_REGION_LENGTH__+0x1da0>
     484:	0c 94 7e 1c 	jmp	0x38fc	; 0x38fc <__DATA_REGION_LENGTH__+0x18fc>
     488:	0c 94 37 1c 	jmp	0x386e	; 0x386e <__DATA_REGION_LENGTH__+0x186e>
     48c:	0c 94 f2 27 	jmp	0x4fe4	; 0x4fe4 <DoSerial+0x282>
     490:	0c 94 45 13 	jmp	0x268a	; 0x268a <__DATA_REGION_LENGTH__+0x68a>
     494:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
     498:	0c 94 22 20 	jmp	0x4044	; 0x4044 <__stack+0x45>
     49c:	0c 94 0d 27 	jmp	0x4e1a	; 0x4e1a <DoSerial+0xb8>
     4a0:	0c 94 14 1e 	jmp	0x3c28	; 0x3c28 <__DATA_REGION_LENGTH__+0x1c28>
     4a4:	0c 94 f0 26 	jmp	0x4de0	; 0x4de0 <DoSerial+0x7e>
     4a8:	0c 94 52 27 	jmp	0x4ea4	; 0x4ea4 <DoSerial+0x142>
     4ac:	0c 94 06 27 	jmp	0x4e0c	; 0x4e0c <DoSerial+0xaa>
     4b0:	0c 94 b4 28 	jmp	0x5168	; 0x5168 <DoSerial+0x406>
     4b4:	0c 94 4a 28 	jmp	0x5094	; 0x5094 <DoSerial+0x332>
     4b8:	0c 94 57 0e 	jmp	0x1cae	; 0x1cae <DoEvent+0x68>
     4bc:	0c 94 10 15 	jmp	0x2a20	; 0x2a20 <__DATA_REGION_LENGTH__+0xa20>
     4c0:	0c 94 cb 27 	jmp	0x4f96	; 0x4f96 <DoSerial+0x234>
     4c4:	0c 94 cb 28 	jmp	0x5196	; 0x5196 <DoSerial+0x434>
     4c8:	0c 94 f4 12 	jmp	0x25e8	; 0x25e8 <__DATA_REGION_LENGTH__+0x5e8>
     4cc:	0c 94 0a 27 	jmp	0x4e14	; 0x4e14 <DoSerial+0xb2>
     4d0:	0c 94 a4 27 	jmp	0x4f48	; 0x4f48 <DoSerial+0x1e6>
     4d4:	0c 94 4b 1d 	jmp	0x3a96	; 0x3a96 <__DATA_REGION_LENGTH__+0x1a96>
     4d8:	0c 94 1c 28 	jmp	0x5038	; 0x5038 <DoSerial+0x2d6>
     4dc:	0c 94 2f 13 	jmp	0x265e	; 0x265e <__DATA_REGION_LENGTH__+0x65e>
     4e0:	0c 94 c0 1e 	jmp	0x3d80	; 0x3d80 <__DATA_REGION_LENGTH__+0x1d80>
     4e4:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__DATA_REGION_LENGTH__+0xe4a>
     4e8:	0c 94 27 13 	jmp	0x264e	; 0x264e <__DATA_REGION_LENGTH__+0x64e>
     4ec:	0c 94 99 28 	jmp	0x5132	; 0x5132 <DoSerial+0x3d0>
     4f0:	0c 94 9e 12 	jmp	0x253c	; 0x253c <__DATA_REGION_LENGTH__+0x53c>
     4f4:	0c 94 da 26 	jmp	0x4db4	; 0x4db4 <DoSerial+0x52>
     4f8:	0c 94 2a 13 	jmp	0x2654	; 0x2654 <__DATA_REGION_LENGTH__+0x654>
     4fc:	0c 94 22 13 	jmp	0x2644	; 0x2644 <__DATA_REGION_LENGTH__+0x644>

00000500 <__ctors_end>:
     500:	11 24       	eor	r1, r1
     502:	1f be       	out	0x3f, r1	; 63
     504:	cf ef       	ldi	r28, 0xFF	; 255
     506:	cd bf       	out	0x3d, r28	; 61
     508:	df e3       	ldi	r29, 0x3F	; 63
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	00 e0       	ldi	r16, 0x00	; 0
     50e:	0c bf       	out	0x3c, r16	; 60
     510:	18 be       	out	0x38, r1	; 56
     512:	19 be       	out	0x39, r1	; 57
     514:	1a be       	out	0x3a, r1	; 58
     516:	1b be       	out	0x3b, r1	; 59

00000518 <__do_copy_data>:
     518:	10 e2       	ldi	r17, 0x20	; 32
     51a:	a0 e0       	ldi	r26, 0x00	; 0
     51c:	b0 e2       	ldi	r27, 0x20	; 32
     51e:	ec e5       	ldi	r30, 0x5C	; 92
     520:	f3 e5       	ldi	r31, 0x53	; 83
     522:	00 e0       	ldi	r16, 0x00	; 0
     524:	0b bf       	out	0x3b, r16	; 59
     526:	02 c0       	rjmp	.+4      	; 0x52c <__do_copy_data+0x14>
     528:	07 90       	elpm	r0, Z+
     52a:	0d 92       	st	X+, r0
     52c:	a8 3e       	cpi	r26, 0xE8	; 232
     52e:	b1 07       	cpc	r27, r17
     530:	d9 f7       	brne	.-10     	; 0x528 <__do_copy_data+0x10>
     532:	1b be       	out	0x3b, r1	; 59

00000534 <__do_clear_bss>:
     534:	28 e3       	ldi	r18, 0x38	; 56
     536:	a8 ee       	ldi	r26, 0xE8	; 232
     538:	b0 e2       	ldi	r27, 0x20	; 32
     53a:	01 c0       	rjmp	.+2      	; 0x53e <.do_clear_bss_start>

0000053c <.do_clear_bss_loop>:
     53c:	1d 92       	st	X+, r1

0000053e <.do_clear_bss_start>:
     53e:	ac 30       	cpi	r26, 0x0C	; 12
     540:	b2 07       	cpc	r27, r18
     542:	e1 f7       	brne	.-8      	; 0x53c <.do_clear_bss_loop>
     544:	0e 94 ba 0b 	call	0x1774	; 0x1774 <main>
     548:	0c 94 ac 29 	jmp	0x5358	; 0x5358 <_exit>

0000054c <__bad_interrupt>:
     54c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000550 <TimerControl>:
void TimerControl(unsigned char Module)
{
	unsigned char SetTimerOn = 0;
	unsigned char cntModule;

	if (ModuleData[Module][MIC_RING]&0x80)
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	fc 01       	movw	r30, r24
     554:	ee 0f       	add	r30, r30
     556:	ff 1f       	adc	r31, r31
     558:	ee 0f       	add	r30, r30
     55a:	ff 1f       	adc	r31, r31
     55c:	ee 0f       	add	r30, r30
     55e:	ff 1f       	adc	r31, r31
     560:	e8 54       	subi	r30, 0x48	; 72
     562:	f7 4d       	sbci	r31, 0xD7	; 215
     564:	27 81       	ldd	r18, Z+7	; 0x07
     566:	22 23       	and	r18, r18
     568:	64 f4       	brge	.+24     	; 0x582 <TimerControl+0x32>
	{
		if (ConsoleModuleSettings[Module][TIMERMIC])
     56a:	2d e1       	ldi	r18, 0x1D	; 29
     56c:	28 9f       	mul	r18, r24
     56e:	f0 01       	movw	r30, r0
     570:	29 9f       	mul	r18, r25
     572:	f0 0d       	add	r31, r0
     574:	11 24       	eor	r1, r1
     576:	e1 56       	subi	r30, 0x61	; 97
     578:	f0 4d       	sbci	r31, 0xD0	; 208
     57a:	22 81       	ldd	r18, Z+2	; 0x02
     57c:	21 11       	cpse	r18, r1
     57e:	27 c0       	rjmp	.+78     	; 0x5ce <TimerControl+0x7e>
     580:	2d c0       	rjmp	.+90     	; 0x5dc <TimerControl+0x8c>
		SetTimerOn = 1;
	}
	else if (!(ModuleData[Module][LINEB]&0x80))
     582:	fc 01       	movw	r30, r24
     584:	ee 0f       	add	r30, r30
     586:	ff 1f       	adc	r31, r31
     588:	ee 0f       	add	r30, r30
     58a:	ff 1f       	adc	r31, r31
     58c:	ee 0f       	add	r30, r30
     58e:	ff 1f       	adc	r31, r31
     590:	e8 54       	subi	r30, 0x48	; 72
     592:	f7 4d       	sbci	r31, 0xD7	; 215
     594:	26 81       	ldd	r18, Z+6	; 0x06
     596:	22 23       	and	r18, r18
     598:	64 f0       	brlt	.+24     	; 0x5b2 <TimerControl+0x62>
	{
		if (ConsoleModuleSettings[Module][TIMERLINEA])
     59a:	2d e1       	ldi	r18, 0x1D	; 29
     59c:	28 9f       	mul	r18, r24
     59e:	f0 01       	movw	r30, r0
     5a0:	29 9f       	mul	r18, r25
     5a2:	f0 0d       	add	r31, r0
     5a4:	11 24       	eor	r1, r1
     5a6:	e1 56       	subi	r30, 0x61	; 97
     5a8:	f0 4d       	sbci	r31, 0xD0	; 208
     5aa:	20 81       	ld	r18, Z
     5ac:	21 11       	cpse	r18, r1
     5ae:	11 c0       	rjmp	.+34     	; 0x5d2 <TimerControl+0x82>
     5b0:	15 c0       	rjmp	.+42     	; 0x5dc <TimerControl+0x8c>
		SetTimerOn = 1;
	}
	else if (ModuleData[Module][LINEB]&0x80)
     5b2:	22 23       	and	r18, r18
     5b4:	84 f4       	brge	.+32     	; 0x5d6 <TimerControl+0x86>
	{
		if (ConsoleModuleSettings[Module][TIMERLINEB])
     5b6:	2d e1       	ldi	r18, 0x1D	; 29
     5b8:	28 9f       	mul	r18, r24
     5ba:	f0 01       	movw	r30, r0
     5bc:	29 9f       	mul	r18, r25
     5be:	f0 0d       	add	r31, r0
     5c0:	11 24       	eor	r1, r1
     5c2:	e1 56       	subi	r30, 0x61	; 97
     5c4:	f0 4d       	sbci	r31, 0xD0	; 208
     5c6:	21 81       	ldd	r18, Z+1	; 0x01
     5c8:	21 11       	cpse	r18, r1
     5ca:	07 c0       	rjmp	.+14     	; 0x5da <TimerControl+0x8a>
     5cc:	07 c0       	rjmp	.+14     	; 0x5dc <TimerControl+0x8c>
	unsigned char cntModule;

	if (ModuleData[Module][MIC_RING]&0x80)
	{
		if (ConsoleModuleSettings[Module][TIMERMIC])
		SetTimerOn = 1;
     5ce:	21 e0       	ldi	r18, 0x01	; 1
     5d0:	05 c0       	rjmp	.+10     	; 0x5dc <TimerControl+0x8c>
	}
	else if (!(ModuleData[Module][LINEB]&0x80))
	{
		if (ConsoleModuleSettings[Module][TIMERLINEA])
		SetTimerOn = 1;
     5d2:	21 e0       	ldi	r18, 0x01	; 1
     5d4:	03 c0       	rjmp	.+6      	; 0x5dc <TimerControl+0x8c>
//unsigned char I2CModule;


void TimerControl(unsigned char Module)
{
	unsigned char SetTimerOn = 0;
     5d6:	20 e0       	ldi	r18, 0x00	; 0
     5d8:	01 c0       	rjmp	.+2      	; 0x5dc <TimerControl+0x8c>
		SetTimerOn = 1;
	}
	else if (ModuleData[Module][LINEB]&0x80)
	{
		if (ConsoleModuleSettings[Module][TIMERLINEB])
		SetTimerOn = 1;
     5da:	21 e0       	ldi	r18, 0x01	; 1
	}

	if (SetTimerOn)
     5dc:	22 23       	and	r18, r18
     5de:	19 f1       	breq	.+70     	; 0x626 <TimerControl+0xd6>
	{
		if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
     5e0:	fc 01       	movw	r30, r24
     5e2:	ee 0f       	add	r30, r30
     5e4:	ff 1f       	adc	r31, r31
     5e6:	ee 0f       	add	r30, r30
     5e8:	ff 1f       	adc	r31, r31
     5ea:	ee 0f       	add	r30, r30
     5ec:	ff 1f       	adc	r31, r31
     5ee:	e8 54       	subi	r30, 0x48	; 72
     5f0:	f7 4d       	sbci	r31, 0xD7	; 215
     5f2:	21 81       	ldd	r18, Z+1	; 0x01
     5f4:	22 23       	and	r18, r18
     5f6:	94 f4       	brge	.+36     	; 0x61c <TimerControl+0xcc>
     5f8:	fc 01       	movw	r30, r24
     5fa:	e3 5b       	subi	r30, 0xB3	; 179
     5fc:	fb 4d       	sbci	r31, 0xDB	; 219
     5fe:	20 81       	ld	r18, Z
     600:	25 ff       	sbrs	r18, 5
     602:	0c c0       	rjmp	.+24     	; 0x61c <TimerControl+0xcc>
		{// !JB
			TimeAndDate.Hours = 0;
     604:	ea e9       	ldi	r30, 0x9A	; 154
     606:	f1 e3       	ldi	r31, 0x31	; 49
     608:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
     60a:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
     60c:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
     60e:	10 82       	st	Z, r1
			TimerActive[Module] = 1;
     610:	fc 01       	movw	r30, r24
     612:	e6 54       	subi	r30, 0x46	; 70
     614:	f2 4d       	sbci	r31, 0xD2	; 210
     616:	21 e0       	ldi	r18, 0x01	; 1
     618:	20 83       	st	Z, r18
     61a:	09 c0       	rjmp	.+18     	; 0x62e <TimerControl+0xde>
		}
		else
		{
			TimerActive[Module] = 0;
     61c:	fc 01       	movw	r30, r24
     61e:	e6 54       	subi	r30, 0x46	; 70
     620:	f2 4d       	sbci	r31, 0xD2	; 210
     622:	10 82       	st	Z, r1
     624:	04 c0       	rjmp	.+8      	; 0x62e <TimerControl+0xde>
		}
	}
	else
	{
		TimerActive[Module] = 0;
     626:	fc 01       	movw	r30, r24
     628:	e6 54       	subi	r30, 0x46	; 70
     62a:	f2 4d       	sbci	r31, 0xD2	; 210
     62c:	10 82       	st	Z, r1
	}

	GlobalTimerActive = 0;
     62e:	10 92 9f 31 	sts	0x319F, r1	; 0x80319f <GlobalTimerActive>
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	0b c0       	rjmp	.+22     	; 0x64c <TimerControl+0xfc>
	{
		if (TimerActive[cntModule])
     636:	e8 2f       	mov	r30, r24
     638:	f0 e0       	ldi	r31, 0x00	; 0
     63a:	e6 54       	subi	r30, 0x46	; 70
     63c:	f2 4d       	sbci	r31, 0xD2	; 210
     63e:	90 81       	ld	r25, Z
     640:	99 23       	and	r25, r25
     642:	19 f0       	breq	.+6      	; 0x64a <TimerControl+0xfa>
		GlobalTimerActive = 1;
     644:	91 e0       	ldi	r25, 0x01	; 1
     646:	90 93 9f 31 	sts	0x319F, r25	; 0x80319f <GlobalTimerActive>
	{
		TimerActive[Module] = 0;
	}

	GlobalTimerActive = 0;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     64a:	8f 5f       	subi	r24, 0xFF	; 255
     64c:	80 31       	cpi	r24, 0x10	; 16
     64e:	98 f3       	brcs	.-26     	; 0x636 <TimerControl+0xe6>
	{
		if (TimerActive[cntModule])
		GlobalTimerActive = 1;
	}
}
     650:	08 95       	ret

00000652 <ShowFunction>:


void ShowFunction(unsigned char Function)
{
	unsigned char cnt;
	for (cnt=0; cnt<NROFMODULES; cnt++)
     652:	40 e0       	ldi	r20, 0x00	; 0
     654:	1b c0       	rjmp	.+54     	; 0x68c <ShowFunction+0x3a>
	{
		ShowFunctionData[cnt] &= CUE_LED^0xFF;
     656:	24 2f       	mov	r18, r20
     658:	30 e0       	ldi	r19, 0x00	; 0
     65a:	f9 01       	movw	r30, r18
     65c:	e8 57       	subi	r30, 0x78	; 120
     65e:	fe 4c       	sbci	r31, 0xCE	; 206
     660:	90 81       	ld	r25, Z
     662:	97 7f       	andi	r25, 0xF7	; 247
     664:	90 83       	st	Z, r25
		if (ConsoleModuleSettings[cnt][Function])
     666:	5d e1       	ldi	r21, 0x1D	; 29
     668:	52 9f       	mul	r21, r18
     66a:	f0 01       	movw	r30, r0
     66c:	53 9f       	mul	r21, r19
     66e:	f0 0d       	add	r31, r0
     670:	11 24       	eor	r1, r1
     672:	e1 56       	subi	r30, 0x61	; 97
     674:	f0 4d       	sbci	r31, 0xD0	; 208
     676:	e8 0f       	add	r30, r24
     678:	f1 1d       	adc	r31, r1
     67a:	50 81       	ld	r21, Z
     67c:	55 23       	and	r21, r21
     67e:	29 f0       	breq	.+10     	; 0x68a <ShowFunction+0x38>
		{
			ShowFunctionData[cnt] |= CUE_LED;
     680:	f9 01       	movw	r30, r18
     682:	e8 57       	subi	r30, 0x78	; 120
     684:	fe 4c       	sbci	r31, 0xCE	; 206
     686:	98 60       	ori	r25, 0x08	; 8
     688:	90 83       	st	Z, r25


void ShowFunction(unsigned char Function)
{
	unsigned char cnt;
	for (cnt=0; cnt<NROFMODULES; cnt++)
     68a:	4f 5f       	subi	r20, 0xFF	; 255
     68c:	40 31       	cpi	r20, 0x10	; 16
     68e:	18 f3       	brcs	.-58     	; 0x656 <ShowFunction+0x4>
		if (ConsoleModuleSettings[cnt][Function])
		{
			ShowFunctionData[cnt] |= CUE_LED;
		}
	}
	SendSerialData = 1;
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
     696:	08 95       	ret

00000698 <GetTelcoNrFromModuleNr>:
{
	char cntTelco = -1;
	char TelcoNr = -1;
	char cntModule;
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     698:	80 e0       	ldi	r24, 0x00	; 0
     69a:	01 c0       	rjmp	.+2      	; 0x69e <GetTelcoNrFromModuleNr+0x6>
     69c:	8f 5f       	subi	r24, 0xFF	; 255
     69e:	80 31       	cpi	r24, 0x10	; 16
     6a0:	e8 f3       	brcs	.-6      	; 0x69c <GetTelcoNrFromModuleNr+0x4>
			}
		}
	}

	return TelcoNr;
}
     6a2:	8f ef       	ldi	r24, 0xFF	; 255
     6a4:	08 95       	ret

000006a6 <CheckTBMic>:
void CheckTBMic()
{
	char TBByTelco = 0;
	char cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	01 c0       	rjmp	.+2      	; 0x6ac <CheckTBMic+0x6>
     6aa:	8f 5f       	subi	r24, 0xFF	; 255
     6ac:	80 31       	cpi	r24, 0x10	; 16
     6ae:	e8 f3       	brcs	.-6      	; 0x6aa <CheckTBMic+0x4>
	}
	else
	{
		//TBL_MUTE = 0xFF;   // willem
	}
}
     6b0:	08 95       	ret

000006b2 <StudioMicControl>:
void StudioMicControl()
{
	unsigned char cntModule;
	unsigned char StudioMicActive=0;

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
     6b2:	ed e4       	ldi	r30, 0x4D	; 77
     6b4:	f4 e2       	ldi	r31, 0x24	; 36
     6b6:	40 89       	ldd	r20, Z+16	; 0x10
     6b8:	4b 7f       	andi	r20, 0xFB	; 251
     6ba:	40 8b       	std	Z+16, r20	; 0x10
}

void StudioMicControl()
{
	unsigned char cntModule;
	unsigned char StudioMicActive=0;
     6bc:	50 e0       	ldi	r21, 0x00	; 0

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     6be:	80 e0       	ldi	r24, 0x00	; 0
     6c0:	64 c0       	rjmp	.+200    	; 0x78a <StudioMicControl+0xd8>
	{
		if (((ConsoleModuleSettings[cntModule][STUDIOMIC]) || (ConsoleModuleSettings[cntModule][ANNMIC])) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
     6c2:	28 2f       	mov	r18, r24
     6c4:	30 e0       	ldi	r19, 0x00	; 0
     6c6:	9d e1       	ldi	r25, 0x1D	; 29
     6c8:	92 9f       	mul	r25, r18
     6ca:	f0 01       	movw	r30, r0
     6cc:	93 9f       	mul	r25, r19
     6ce:	f0 0d       	add	r31, r0
     6d0:	11 24       	eor	r1, r1
     6d2:	e1 56       	subi	r30, 0x61	; 97
     6d4:	f0 4d       	sbci	r31, 0xD0	; 208
     6d6:	97 85       	ldd	r25, Z+15	; 0x0f
     6d8:	91 11       	cpse	r25, r1
     6da:	0c c0       	rjmp	.+24     	; 0x6f4 <StudioMicControl+0x42>
     6dc:	9d e1       	ldi	r25, 0x1D	; 29
     6de:	92 9f       	mul	r25, r18
     6e0:	f0 01       	movw	r30, r0
     6e2:	93 9f       	mul	r25, r19
     6e4:	f0 0d       	add	r31, r0
     6e6:	11 24       	eor	r1, r1
     6e8:	e1 56       	subi	r30, 0x61	; 97
     6ea:	f0 4d       	sbci	r31, 0xD0	; 208
     6ec:	96 85       	ldd	r25, Z+14	; 0x0e
     6ee:	99 23       	and	r25, r25
     6f0:	09 f4       	brne	.+2      	; 0x6f4 <StudioMicControl+0x42>
     6f2:	4a c0       	rjmp	.+148    	; 0x788 <StudioMicControl+0xd6>
     6f4:	f9 01       	movw	r30, r18
     6f6:	e6 5c       	subi	r30, 0xC6	; 198
     6f8:	fb 4d       	sbci	r31, 0xDB	; 219
     6fa:	90 81       	ld	r25, Z
     6fc:	91 50       	subi	r25, 0x01	; 1
     6fe:	92 30       	cpi	r25, 0x02	; 2
     700:	08 f0       	brcs	.+2      	; 0x704 <StudioMicControl+0x52>
     702:	42 c0       	rjmp	.+132    	; 0x788 <StudioMicControl+0xd6>
			else
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED)))
					StudioMicActive = 1; // !JB
			}*/
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     704:	f9 01       	movw	r30, r18
     706:	ee 0f       	add	r30, r30
     708:	ff 1f       	adc	r31, r31
     70a:	ee 0f       	add	r30, r30
     70c:	ff 1f       	adc	r31, r31
     70e:	ee 0f       	add	r30, r30
     710:	ff 1f       	adc	r31, r31
     712:	e8 54       	subi	r30, 0x48	; 72
     714:	f7 4d       	sbci	r31, 0xD7	; 215
     716:	97 81       	ldd	r25, Z+7	; 0x07
     718:	99 23       	and	r25, r25
     71a:	24 f1       	brlt	.+72     	; 0x764 <StudioMicControl+0xb2>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) ||
     71c:	f9 01       	movw	r30, r18
     71e:	ee 0f       	add	r30, r30
     720:	ff 1f       	adc	r31, r31
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	e8 54       	subi	r30, 0x48	; 72
     72c:	f7 4d       	sbci	r31, 0xD7	; 215
     72e:	96 81       	ldd	r25, Z+6	; 0x06
			else
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED)))
					StudioMicActive = 1; // !JB
			}*/
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     730:	99 23       	and	r25, r25
     732:	5c f0       	brlt	.+22     	; 0x74a <StudioMicControl+0x98>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) ||
     734:	6d e1       	ldi	r22, 0x1D	; 29
     736:	62 9f       	mul	r22, r18
     738:	f0 01       	movw	r30, r0
     73a:	63 9f       	mul	r22, r19
     73c:	f0 0d       	add	r31, r0
     73e:	11 24       	eor	r1, r1
     740:	e1 56       	subi	r30, 0x61	; 97
     742:	f0 4d       	sbci	r31, 0xD0	; 208
     744:	67 89       	ldd	r22, Z+23	; 0x17
     746:	61 11       	cpse	r22, r1
     748:	0d c0       	rjmp	.+26     	; 0x764 <StudioMicControl+0xb2>
     74a:	99 23       	and	r25, r25
     74c:	ec f4       	brge	.+58     	; 0x788 <StudioMicControl+0xd6>
				 (((ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEB])))
     74e:	9d e1       	ldi	r25, 0x1D	; 29
     750:	92 9f       	mul	r25, r18
     752:	f0 01       	movw	r30, r0
     754:	93 9f       	mul	r25, r19
     756:	f0 0d       	add	r31, r0
     758:	11 24       	eor	r1, r1
     75a:	e1 56       	subi	r30, 0x61	; 97
     75c:	f0 4d       	sbci	r31, 0xD0	; 208
     75e:	90 8d       	ldd	r25, Z+24	; 0x18
     760:	99 23       	and	r25, r25
     762:	91 f0       	breq	.+36     	; 0x788 <StudioMicControl+0xd6>
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED)))
     764:	f9 01       	movw	r30, r18
     766:	ee 0f       	add	r30, r30
     768:	ff 1f       	adc	r31, r31
     76a:	ee 0f       	add	r30, r30
     76c:	ff 1f       	adc	r31, r31
     76e:	ee 0f       	add	r30, r30
     770:	ff 1f       	adc	r31, r31
     772:	e8 54       	subi	r30, 0x48	; 72
     774:	f7 4d       	sbci	r31, 0xD7	; 215
     776:	91 81       	ldd	r25, Z+1	; 0x01
     778:	99 23       	and	r25, r25
     77a:	34 f4       	brge	.+12     	; 0x788 <StudioMicControl+0xd6>
     77c:	f9 01       	movw	r30, r18
     77e:	e3 5b       	subi	r30, 0xB3	; 179
     780:	fb 4d       	sbci	r31, 0xDB	; 219
     782:	90 81       	ld	r25, Z
     784:	95 fd       	sbrc	r25, 5
					StudioMicActive = 1; // !JB
     786:	51 e0       	ldi	r21, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char StudioMicActive=0;

	ConsoleFunctionData[16] &= STUDIOMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     788:	8f 5f       	subi	r24, 0xFF	; 255
     78a:	80 31       	cpi	r24, 0x10	; 16
     78c:	08 f4       	brcc	.+2      	; 0x790 <StudioMicControl+0xde>
     78e:	99 cf       	rjmp	.-206    	; 0x6c2 <StudioMicControl+0x10>
					StudioMicActive = 1; // !JB
			}
		}
	}

	if (StudioMicActive)
     790:	55 23       	and	r21, r21
     792:	19 f0       	breq	.+6      	; 0x79a <StudioMicControl+0xe8>
		ConsoleFunctionData[16] |= STUDIOMUTE_FUNCTION_LED;		
     794:	44 60       	ori	r20, 0x04	; 4
     796:	40 93 5d 24 	sts	0x245D, r20	; 0x80245d <ConsoleFunctionData+0x10>

	if (ConsoleFunctionData[16]&STUDIOMUTE_FUNCTION_LED)
     79a:	80 91 5d 24 	lds	r24, 0x245D	; 0x80245d <ConsoleFunctionData+0x10>
     79e:	82 ff       	sbrs	r24, 2
     7a0:	19 c0       	rjmp	.+50     	; 0x7d4 <StudioMicControl+0x122>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     7a2:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     7a6:	a1 e0       	ldi	r26, 0x01	; 1
     7a8:	ae 0f       	add	r26, r30
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	ee 58       	subi	r30, 0x8E	; 142
     7ae:	fa 4d       	sbci	r31, 0xDA	; 218
     7b0:	80 ed       	ldi	r24, 0xD0	; 208
     7b2:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_STUDIOMUTE;
     7b4:	e1 e0       	ldi	r30, 0x01	; 1
     7b6:	ea 0f       	add	r30, r26
     7b8:	b0 e0       	ldi	r27, 0x00	; 0
     7ba:	ae 58       	subi	r26, 0x8E	; 142
     7bc:	ba 4d       	sbci	r27, 0xDA	; 218
     7be:	81 e0       	ldi	r24, 0x01	; 1
     7c0:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	9e 0f       	add	r25, r30
     7c6:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	ee 58       	subi	r30, 0x8E	; 142
     7ce:	fa 4d       	sbci	r31, 0xDA	; 218
     7d0:	80 83       	st	Z, r24
     7d2:	17 c0       	rjmp	.+46     	; 0x802 <__EEPROM_REGION_LENGTH__+0x2>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     7d4:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     7d8:	a1 e0       	ldi	r26, 0x01	; 1
     7da:	ae 0f       	add	r26, r30
     7dc:	f0 e0       	ldi	r31, 0x00	; 0
     7de:	ee 58       	subi	r30, 0x8E	; 142
     7e0:	fa 4d       	sbci	r31, 0xDA	; 218
     7e2:	80 ed       	ldi	r24, 0xD0	; 208
     7e4:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_STUDIOMUTE;
     7e6:	e1 e0       	ldi	r30, 0x01	; 1
     7e8:	ea 0f       	add	r30, r26
     7ea:	b0 e0       	ldi	r27, 0x00	; 0
     7ec:	ae 58       	subi	r26, 0x8E	; 142
     7ee:	ba 4d       	sbci	r27, 0xDA	; 218
     7f0:	81 e0       	ldi	r24, 0x01	; 1
     7f2:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     7f4:	8e 0f       	add	r24, r30
     7f6:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     7fa:	f0 e0       	ldi	r31, 0x00	; 0
     7fc:	ee 58       	subi	r30, 0x8E	; 142
     7fe:	fa 4d       	sbci	r31, 0xDA	; 218
     800:	10 82       	st	Z, r1
	}

	SendSerialData = 1;
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
     808:	08 95       	ret

0000080a <DJControl>:
void DJControl()
{
	unsigned char cntModule;
	unsigned char DJMicActive=0;

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
     80a:	ed e4       	ldi	r30, 0x4D	; 77
     80c:	f4 e2       	ldi	r31, 0x24	; 36
     80e:	40 89       	ldd	r20, Z+16	; 0x10
     810:	4e 7f       	andi	r20, 0xFE	; 254
     812:	40 8b       	std	Z+16, r20	; 0x10


void DJControl()
{
	unsigned char cntModule;
	unsigned char DJMicActive=0;
     814:	50 e0       	ldi	r21, 0x00	; 0

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	5f c0       	rjmp	.+190    	; 0x8d8 <DJControl+0xce>
	{
		if ((ConsoleModuleSettings[cntModule][DJMIC]) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
     81a:	28 2f       	mov	r18, r24
     81c:	30 e0       	ldi	r19, 0x00	; 0
     81e:	9d e1       	ldi	r25, 0x1D	; 29
     820:	92 9f       	mul	r25, r18
     822:	f0 01       	movw	r30, r0
     824:	93 9f       	mul	r25, r19
     826:	f0 0d       	add	r31, r0
     828:	11 24       	eor	r1, r1
     82a:	e1 56       	subi	r30, 0x61	; 97
     82c:	f0 4d       	sbci	r31, 0xD0	; 208
     82e:	95 85       	ldd	r25, Z+13	; 0x0d
     830:	99 23       	and	r25, r25
     832:	09 f4       	brne	.+2      	; 0x836 <DJControl+0x2c>
     834:	50 c0       	rjmp	.+160    	; 0x8d6 <DJControl+0xcc>
     836:	f9 01       	movw	r30, r18
     838:	e6 5c       	subi	r30, 0xC6	; 198
     83a:	fb 4d       	sbci	r31, 0xDB	; 219
     83c:	90 81       	ld	r25, Z
     83e:	91 50       	subi	r25, 0x01	; 1
     840:	92 30       	cpi	r25, 0x02	; 2
     842:	08 f0       	brcs	.+2      	; 0x846 <DJControl+0x3c>
     844:	48 c0       	rjmp	.+144    	; 0x8d6 <DJControl+0xcc>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED) || (ConsoleFunctionData[cntModule]&CUE_FUNCTION))
					DJMicActive = 1; // !JB
			}
		}*/
//v1.15
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     846:	f9 01       	movw	r30, r18
     848:	ee 0f       	add	r30, r30
     84a:	ff 1f       	adc	r31, r31
     84c:	ee 0f       	add	r30, r30
     84e:	ff 1f       	adc	r31, r31
     850:	ee 0f       	add	r30, r30
     852:	ff 1f       	adc	r31, r31
     854:	e8 54       	subi	r30, 0x48	; 72
     856:	f7 4d       	sbci	r31, 0xD7	; 215
     858:	97 81       	ldd	r25, Z+7	; 0x07
     85a:	99 23       	and	r25, r25
     85c:	24 f1       	brlt	.+72     	; 0x8a6 <DJControl+0x9c>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) || (((ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEB])))
     85e:	f9 01       	movw	r30, r18
     860:	ee 0f       	add	r30, r30
     862:	ff 1f       	adc	r31, r31
     864:	ee 0f       	add	r30, r30
     866:	ff 1f       	adc	r31, r31
     868:	ee 0f       	add	r30, r30
     86a:	ff 1f       	adc	r31, r31
     86c:	e8 54       	subi	r30, 0x48	; 72
     86e:	f7 4d       	sbci	r31, 0xD7	; 215
     870:	96 81       	ldd	r25, Z+6	; 0x06
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED) || (ConsoleFunctionData[cntModule]&CUE_FUNCTION))
					DJMicActive = 1; // !JB
			}
		}*/
//v1.15
			if ((ModuleData[cntModule][MIC_RING]&0x80) ||
     872:	99 23       	and	r25, r25
     874:	5c f0       	brlt	.+22     	; 0x88c <DJControl+0x82>
				 ((!(ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEA])) || (((ModuleData[cntModule][LINEB]&0x80)) && (ConsoleModuleSettings[cntModule][MICATLINEB])))
     876:	6d e1       	ldi	r22, 0x1D	; 29
     878:	62 9f       	mul	r22, r18
     87a:	f0 01       	movw	r30, r0
     87c:	63 9f       	mul	r22, r19
     87e:	f0 0d       	add	r31, r0
     880:	11 24       	eor	r1, r1
     882:	e1 56       	subi	r30, 0x61	; 97
     884:	f0 4d       	sbci	r31, 0xD0	; 208
     886:	67 89       	ldd	r22, Z+23	; 0x17
     888:	61 11       	cpse	r22, r1
     88a:	0d c0       	rjmp	.+26     	; 0x8a6 <DJControl+0x9c>
     88c:	99 23       	and	r25, r25
     88e:	1c f5       	brge	.+70     	; 0x8d6 <DJControl+0xcc>
     890:	9d e1       	ldi	r25, 0x1D	; 29
     892:	92 9f       	mul	r25, r18
     894:	f0 01       	movw	r30, r0
     896:	93 9f       	mul	r25, r19
     898:	f0 0d       	add	r31, r0
     89a:	11 24       	eor	r1, r1
     89c:	e1 56       	subi	r30, 0x61	; 97
     89e:	f0 4d       	sbci	r31, 0xD0	; 208
     8a0:	90 8d       	ldd	r25, Z+24	; 0x18
     8a2:	99 23       	and	r25, r25
     8a4:	c1 f0       	breq	.+48     	; 0x8d6 <DJControl+0xcc>
			{
				if (((ModuleData[cntModule][FADERON]&0x80)) && ((ConsoleFunctionData[cntModule]&ON_LED) || (ConsoleFunctionData[cntModule]&CUE_FUNCTION)))
     8a6:	f9 01       	movw	r30, r18
     8a8:	ee 0f       	add	r30, r30
     8aa:	ff 1f       	adc	r31, r31
     8ac:	ee 0f       	add	r30, r30
     8ae:	ff 1f       	adc	r31, r31
     8b0:	ee 0f       	add	r30, r30
     8b2:	ff 1f       	adc	r31, r31
     8b4:	e8 54       	subi	r30, 0x48	; 72
     8b6:	f7 4d       	sbci	r31, 0xD7	; 215
     8b8:	91 81       	ldd	r25, Z+1	; 0x01
     8ba:	99 23       	and	r25, r25
     8bc:	64 f4       	brge	.+24     	; 0x8d6 <DJControl+0xcc>
     8be:	f9 01       	movw	r30, r18
     8c0:	e3 5b       	subi	r30, 0xB3	; 179
     8c2:	fb 4d       	sbci	r31, 0xDB	; 219
     8c4:	90 81       	ld	r25, Z
     8c6:	95 fd       	sbrc	r25, 5
     8c8:	03 c0       	rjmp	.+6      	; 0x8d0 <DJControl+0xc6>
     8ca:	92 fd       	sbrc	r25, 2
     8cc:	03 c0       	rjmp	.+6      	; 0x8d4 <DJControl+0xca>
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <DJControl+0xcc>
					DJMicActive = 1; // !JB
     8d0:	51 e0       	ldi	r21, 0x01	; 1
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <DJControl+0xcc>
     8d4:	51 e0       	ldi	r21, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char DJMicActive=0;

	ConsoleFunctionData[16] &= CRMMUTE_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     8d6:	8f 5f       	subi	r24, 0xFF	; 255
     8d8:	80 31       	cpi	r24, 0x10	; 16
     8da:	08 f4       	brcc	.+2      	; 0x8de <DJControl+0xd4>
     8dc:	9e cf       	rjmp	.-196    	; 0x81a <DJControl+0x10>
					DJMicActive = 1; // !JB
			}
		}
	}

	if (DJMicActive)
     8de:	55 23       	and	r21, r21
     8e0:	19 f0       	breq	.+6      	; 0x8e8 <DJControl+0xde>
		ConsoleFunctionData[16] |= CRMMUTE_FUNCTION_LED;		
     8e2:	41 60       	ori	r20, 0x01	; 1
     8e4:	40 93 5d 24 	sts	0x245D, r20	; 0x80245d <ConsoleFunctionData+0x10>

	if (ConsoleFunctionData[16]&CRMMUTE_FUNCTION_LED)
     8e8:	80 91 5d 24 	lds	r24, 0x245D	; 0x80245d <ConsoleFunctionData+0x10>
     8ec:	80 ff       	sbrs	r24, 0
     8ee:	19 c0       	rjmp	.+50     	; 0x922 <DJControl+0x118>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     8f0:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     8f4:	a1 e0       	ldi	r26, 0x01	; 1
     8f6:	ae 0f       	add	r26, r30
     8f8:	f0 e0       	ldi	r31, 0x00	; 0
     8fa:	ee 58       	subi	r30, 0x8E	; 142
     8fc:	fa 4d       	sbci	r31, 0xDA	; 218
     8fe:	80 ed       	ldi	r24, 0xD0	; 208
     900:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CRMMUTE;
     902:	e1 e0       	ldi	r30, 0x01	; 1
     904:	ea 0f       	add	r30, r26
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	ae 58       	subi	r26, 0x8E	; 142
     90a:	ba 4d       	sbci	r27, 0xDA	; 218
     90c:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     90e:	81 e0       	ldi	r24, 0x01	; 1
     910:	8e 0f       	add	r24, r30
     912:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     916:	f0 e0       	ldi	r31, 0x00	; 0
     918:	ee 58       	subi	r30, 0x8E	; 142
     91a:	fa 4d       	sbci	r31, 0xDA	; 218
     91c:	81 e0       	ldi	r24, 0x01	; 1
     91e:	80 83       	st	Z, r24
     920:	17 c0       	rjmp	.+46     	; 0x950 <DJControl+0x146>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
     922:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     926:	a1 e0       	ldi	r26, 0x01	; 1
     928:	ae 0f       	add	r26, r30
     92a:	f0 e0       	ldi	r31, 0x00	; 0
     92c:	ee 58       	subi	r30, 0x8E	; 142
     92e:	fa 4d       	sbci	r31, 0xDA	; 218
     930:	80 ed       	ldi	r24, 0xD0	; 208
     932:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CRMMUTE;
     934:	e1 e0       	ldi	r30, 0x01	; 1
     936:	ea 0f       	add	r30, r26
     938:	b0 e0       	ldi	r27, 0x00	; 0
     93a:	ae 58       	subi	r26, 0x8E	; 142
     93c:	ba 4d       	sbci	r27, 0xDA	; 218
     93e:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     940:	81 e0       	ldi	r24, 0x01	; 1
     942:	8e 0f       	add	r24, r30
     944:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     948:	f0 e0       	ldi	r31, 0x00	; 0
     94a:	ee 58       	subi	r30, 0x8E	; 142
     94c:	fa 4d       	sbci	r31, 0xDA	; 218
     94e:	10 82       	st	Z, r1
	}
	SendSerialData = 1;
     950:	81 e0       	ldi	r24, 0x01	; 1
     952:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
     956:	08 95       	ret

00000958 <OnAirControl>:

void OnAirControl()
{
	unsigned char cntModule;
	unsigned char OnAir1=0;
	unsigned char OnAir2=0;
     958:	40 e0       	ldi	r20, 0x00	; 0
}

void OnAirControl()
{
	unsigned char cntModule;
	unsigned char OnAir1=0;
     95a:	50 e0       	ldi	r21, 0x00	; 0
	unsigned char OnAir2=0;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     95c:	80 e0       	ldi	r24, 0x00	; 0
     95e:	e0 c0       	rjmp	.+448    	; 0xb20 <OnAirControl+0x1c8>
	{
		if  ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO))
     960:	28 2f       	mov	r18, r24
     962:	30 e0       	ldi	r19, 0x00	; 0
     964:	f9 01       	movw	r30, r18
     966:	e6 5c       	subi	r30, 0xC6	; 198
     968:	fb 4d       	sbci	r31, 0xDB	; 219
     96a:	90 81       	ld	r25, Z
     96c:	91 50       	subi	r25, 0x01	; 1
     96e:	92 30       	cpi	r25, 0x02	; 2
     970:	08 f0       	brcs	.+2      	; 0x974 <OnAirControl+0x1c>
     972:	d5 c0       	rjmp	.+426    	; 0xb1e <OnAirControl+0x1c6>
		{
			if (ModuleData[cntModule][MIC_RING]&0x80)
     974:	f9 01       	movw	r30, r18
     976:	ee 0f       	add	r30, r30
     978:	ff 1f       	adc	r31, r31
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	e8 54       	subi	r30, 0x48	; 72
     984:	f7 4d       	sbci	r31, 0xD7	; 215
     986:	97 81       	ldd	r25, Z+7	; 0x07
     988:	99 23       	and	r25, r25
     98a:	ec f5       	brge	.+122    	; 0xa06 <OnAirControl+0xae>
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1MIC])
     98c:	9d e1       	ldi	r25, 0x1D	; 29
     98e:	92 9f       	mul	r25, r18
     990:	f0 01       	movw	r30, r0
     992:	93 9f       	mul	r25, r19
     994:	f0 0d       	add	r31, r0
     996:	11 24       	eor	r1, r1
     998:	e1 56       	subi	r30, 0x61	; 97
     99a:	f0 4d       	sbci	r31, 0xD0	; 208
     99c:	92 89       	ldd	r25, Z+18	; 0x12
     99e:	99 23       	and	r25, r25
     9a0:	91 f0       	breq	.+36     	; 0x9c6 <OnAirControl+0x6e>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     9a2:	f9 01       	movw	r30, r18
     9a4:	ee 0f       	add	r30, r30
     9a6:	ff 1f       	adc	r31, r31
     9a8:	ee 0f       	add	r30, r30
     9aa:	ff 1f       	adc	r31, r31
     9ac:	ee 0f       	add	r30, r30
     9ae:	ff 1f       	adc	r31, r31
     9b0:	e8 54       	subi	r30, 0x48	; 72
     9b2:	f7 4d       	sbci	r31, 0xD7	; 215
     9b4:	91 81       	ldd	r25, Z+1	; 0x01
     9b6:	99 23       	and	r25, r25
     9b8:	34 f4       	brge	.+12     	; 0x9c6 <OnAirControl+0x6e>
     9ba:	f9 01       	movw	r30, r18
     9bc:	e3 5b       	subi	r30, 0xB3	; 179
     9be:	fb 4d       	sbci	r31, 0xDB	; 219
     9c0:	90 81       	ld	r25, Z
     9c2:	95 fd       	sbrc	r25, 5
				OnAir1 = 1;	 // !JB
     9c4:	51 e0       	ldi	r21, 0x01	; 1
				if (ConsoleModuleSettings[cntModule][ONAIR2MIC])
     9c6:	9d e1       	ldi	r25, 0x1D	; 29
     9c8:	92 9f       	mul	r25, r18
     9ca:	f0 01       	movw	r30, r0
     9cc:	93 9f       	mul	r25, r19
     9ce:	f0 0d       	add	r31, r0
     9d0:	11 24       	eor	r1, r1
     9d2:	e1 56       	subi	r30, 0x61	; 97
     9d4:	f0 4d       	sbci	r31, 0xD0	; 208
     9d6:	95 89       	ldd	r25, Z+21	; 0x15
     9d8:	99 23       	and	r25, r25
     9da:	09 f4       	brne	.+2      	; 0x9de <OnAirControl+0x86>
     9dc:	a0 c0       	rjmp	.+320    	; 0xb1e <OnAirControl+0x1c6>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     9de:	f9 01       	movw	r30, r18
     9e0:	ee 0f       	add	r30, r30
     9e2:	ff 1f       	adc	r31, r31
     9e4:	ee 0f       	add	r30, r30
     9e6:	ff 1f       	adc	r31, r31
     9e8:	ee 0f       	add	r30, r30
     9ea:	ff 1f       	adc	r31, r31
     9ec:	e8 54       	subi	r30, 0x48	; 72
     9ee:	f7 4d       	sbci	r31, 0xD7	; 215
     9f0:	91 81       	ldd	r25, Z+1	; 0x01
     9f2:	99 23       	and	r25, r25
     9f4:	0c f0       	brlt	.+2      	; 0x9f8 <OnAirControl+0xa0>
     9f6:	93 c0       	rjmp	.+294    	; 0xb1e <OnAirControl+0x1c6>
     9f8:	f9 01       	movw	r30, r18
     9fa:	e3 5b       	subi	r30, 0xB3	; 179
     9fc:	fb 4d       	sbci	r31, 0xDB	; 219
     9fe:	90 81       	ld	r25, Z
     a00:	95 fd       	sbrc	r25, 5
     a02:	88 c0       	rjmp	.+272    	; 0xb14 <OnAirControl+0x1bc>
     a04:	8c c0       	rjmp	.+280    	; 0xb1e <OnAirControl+0x1c6>
				OnAir2 = 1;	 // !JB
			}
			else if (!(ModuleData[cntModule][LINEB]&0x80))
     a06:	f9 01       	movw	r30, r18
     a08:	ee 0f       	add	r30, r30
     a0a:	ff 1f       	adc	r31, r31
     a0c:	ee 0f       	add	r30, r30
     a0e:	ff 1f       	adc	r31, r31
     a10:	ee 0f       	add	r30, r30
     a12:	ff 1f       	adc	r31, r31
     a14:	e8 54       	subi	r30, 0x48	; 72
     a16:	f7 4d       	sbci	r31, 0xD7	; 215
     a18:	96 81       	ldd	r25, Z+6	; 0x06
     a1a:	99 23       	and	r25, r25
     a1c:	ec f1       	brlt	.+122    	; 0xa98 <OnAirControl+0x140>
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEA])
     a1e:	9d e1       	ldi	r25, 0x1D	; 29
     a20:	92 9f       	mul	r25, r18
     a22:	f0 01       	movw	r30, r0
     a24:	93 9f       	mul	r25, r19
     a26:	f0 0d       	add	r31, r0
     a28:	11 24       	eor	r1, r1
     a2a:	e1 56       	subi	r30, 0x61	; 97
     a2c:	f0 4d       	sbci	r31, 0xD0	; 208
     a2e:	90 89       	ldd	r25, Z+16	; 0x10
     a30:	99 23       	and	r25, r25
     a32:	91 f0       	breq	.+36     	; 0xa58 <OnAirControl+0x100>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     a34:	f9 01       	movw	r30, r18
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	ee 0f       	add	r30, r30
     a3c:	ff 1f       	adc	r31, r31
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	e8 54       	subi	r30, 0x48	; 72
     a44:	f7 4d       	sbci	r31, 0xD7	; 215
     a46:	91 81       	ldd	r25, Z+1	; 0x01
     a48:	99 23       	and	r25, r25
     a4a:	34 f4       	brge	.+12     	; 0xa58 <OnAirControl+0x100>
     a4c:	f9 01       	movw	r30, r18
     a4e:	e3 5b       	subi	r30, 0xB3	; 179
     a50:	fb 4d       	sbci	r31, 0xDB	; 219
     a52:	90 81       	ld	r25, Z
     a54:	95 fd       	sbrc	r25, 5
				OnAir1 = 1;	// !JB
     a56:	51 e0       	ldi	r21, 0x01	; 1
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEA])
     a58:	9d e1       	ldi	r25, 0x1D	; 29
     a5a:	92 9f       	mul	r25, r18
     a5c:	f0 01       	movw	r30, r0
     a5e:	93 9f       	mul	r25, r19
     a60:	f0 0d       	add	r31, r0
     a62:	11 24       	eor	r1, r1
     a64:	e1 56       	subi	r30, 0x61	; 97
     a66:	f0 4d       	sbci	r31, 0xD0	; 208
     a68:	93 89       	ldd	r25, Z+19	; 0x13
     a6a:	99 23       	and	r25, r25
     a6c:	09 f4       	brne	.+2      	; 0xa70 <OnAirControl+0x118>
     a6e:	57 c0       	rjmp	.+174    	; 0xb1e <OnAirControl+0x1c6>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     a70:	f9 01       	movw	r30, r18
     a72:	ee 0f       	add	r30, r30
     a74:	ff 1f       	adc	r31, r31
     a76:	ee 0f       	add	r30, r30
     a78:	ff 1f       	adc	r31, r31
     a7a:	ee 0f       	add	r30, r30
     a7c:	ff 1f       	adc	r31, r31
     a7e:	e8 54       	subi	r30, 0x48	; 72
     a80:	f7 4d       	sbci	r31, 0xD7	; 215
     a82:	91 81       	ldd	r25, Z+1	; 0x01
     a84:	99 23       	and	r25, r25
     a86:	0c f0       	brlt	.+2      	; 0xa8a <OnAirControl+0x132>
     a88:	4a c0       	rjmp	.+148    	; 0xb1e <OnAirControl+0x1c6>
     a8a:	f9 01       	movw	r30, r18
     a8c:	e3 5b       	subi	r30, 0xB3	; 179
     a8e:	fb 4d       	sbci	r31, 0xDB	; 219
     a90:	90 81       	ld	r25, Z
     a92:	95 fd       	sbrc	r25, 5
     a94:	41 c0       	rjmp	.+130    	; 0xb18 <OnAirControl+0x1c0>
     a96:	43 c0       	rjmp	.+134    	; 0xb1e <OnAirControl+0x1c6>
				OnAir2 = 1;	// !JB
			}
			else if (ModuleData[cntModule][LINEB]&0x80)
     a98:	99 23       	and	r25, r25
     a9a:	0c f0       	brlt	.+2      	; 0xa9e <OnAirControl+0x146>
     a9c:	40 c0       	rjmp	.+128    	; 0xb1e <OnAirControl+0x1c6>
			{
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEB])
     a9e:	9d e1       	ldi	r25, 0x1D	; 29
     aa0:	92 9f       	mul	r25, r18
     aa2:	f0 01       	movw	r30, r0
     aa4:	93 9f       	mul	r25, r19
     aa6:	f0 0d       	add	r31, r0
     aa8:	11 24       	eor	r1, r1
     aaa:	e1 56       	subi	r30, 0x61	; 97
     aac:	f0 4d       	sbci	r31, 0xD0	; 208
     aae:	91 89       	ldd	r25, Z+17	; 0x11
     ab0:	99 23       	and	r25, r25
     ab2:	91 f0       	breq	.+36     	; 0xad8 <OnAirControl+0x180>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     ab4:	f9 01       	movw	r30, r18
     ab6:	ee 0f       	add	r30, r30
     ab8:	ff 1f       	adc	r31, r31
     aba:	ee 0f       	add	r30, r30
     abc:	ff 1f       	adc	r31, r31
     abe:	ee 0f       	add	r30, r30
     ac0:	ff 1f       	adc	r31, r31
     ac2:	e8 54       	subi	r30, 0x48	; 72
     ac4:	f7 4d       	sbci	r31, 0xD7	; 215
     ac6:	91 81       	ldd	r25, Z+1	; 0x01
     ac8:	99 23       	and	r25, r25
     aca:	34 f4       	brge	.+12     	; 0xad8 <OnAirControl+0x180>
     acc:	f9 01       	movw	r30, r18
     ace:	e3 5b       	subi	r30, 0xB3	; 179
     ad0:	fb 4d       	sbci	r31, 0xDB	; 219
     ad2:	90 81       	ld	r25, Z
     ad4:	95 fd       	sbrc	r25, 5
				OnAir1 = 1;	 // !JB
     ad6:	51 e0       	ldi	r21, 0x01	; 1
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEB])
     ad8:	9d e1       	ldi	r25, 0x1D	; 29
     ada:	92 9f       	mul	r25, r18
     adc:	f0 01       	movw	r30, r0
     ade:	93 9f       	mul	r25, r19
     ae0:	f0 0d       	add	r31, r0
     ae2:	11 24       	eor	r1, r1
     ae4:	e1 56       	subi	r30, 0x61	; 97
     ae6:	f0 4d       	sbci	r31, 0xD0	; 208
     ae8:	94 89       	ldd	r25, Z+20	; 0x14
     aea:	99 23       	and	r25, r25
     aec:	c1 f0       	breq	.+48     	; 0xb1e <OnAirControl+0x1c6>
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
     aee:	f9 01       	movw	r30, r18
     af0:	ee 0f       	add	r30, r30
     af2:	ff 1f       	adc	r31, r31
     af4:	ee 0f       	add	r30, r30
     af6:	ff 1f       	adc	r31, r31
     af8:	ee 0f       	add	r30, r30
     afa:	ff 1f       	adc	r31, r31
     afc:	e8 54       	subi	r30, 0x48	; 72
     afe:	f7 4d       	sbci	r31, 0xD7	; 215
     b00:	91 81       	ldd	r25, Z+1	; 0x01
     b02:	99 23       	and	r25, r25
     b04:	64 f4       	brge	.+24     	; 0xb1e <OnAirControl+0x1c6>
     b06:	f9 01       	movw	r30, r18
     b08:	e3 5b       	subi	r30, 0xB3	; 179
     b0a:	fb 4d       	sbci	r31, 0xDB	; 219
     b0c:	90 81       	ld	r25, Z
     b0e:	95 fd       	sbrc	r25, 5
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <OnAirControl+0x1c4>
     b12:	05 c0       	rjmp	.+10     	; 0xb1e <OnAirControl+0x1c6>
				if (ConsoleModuleSettings[cntModule][ONAIR1MIC])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	 // !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2MIC])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir2 = 1;	 // !JB
     b14:	41 e0       	ldi	r20, 0x01	; 1
     b16:	03 c0       	rjmp	.+6      	; 0xb1e <OnAirControl+0x1c6>
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEA])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	// !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEA])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir2 = 1;	// !JB
     b18:	41 e0       	ldi	r20, 0x01	; 1
     b1a:	01 c0       	rjmp	.+2      	; 0xb1e <OnAirControl+0x1c6>
				if (ConsoleModuleSettings[cntModule][ONAIR1LINEB])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir1 = 1;	 // !JB
				if (ConsoleModuleSettings[cntModule][ONAIR2LINEB])
				if (((ModuleData[cntModule][FADERON]&0x80)) && (ConsoleFunctionData[cntModule]&ON_LED))
				OnAir2 = 1;	// !JB
     b1c:	41 e0       	ldi	r20, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char OnAir1=0;
	unsigned char OnAir2=0;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
     b1e:	8f 5f       	subi	r24, 0xFF	; 255
     b20:	80 31       	cpi	r24, 0x10	; 16
     b22:	08 f4       	brcc	.+2      	; 0xb26 <OnAirControl+0x1ce>
     b24:	1d cf       	rjmp	.-454    	; 0x960 <OnAirControl+0x8>
				OnAir2 = 1;	// !JB
			}
		}
	}
	
	ConsoleFunctionData[16] &= ONAIR1_FUNCTION^0xFF;
     b26:	ed e4       	ldi	r30, 0x4D	; 77
     b28:	f4 e2       	ldi	r31, 0x24	; 36
     b2a:	80 89       	ldd	r24, Z+16	; 0x10
	ConsoleFunctionData[16] &= ONAIR2_FUNCTION^0xFF;
     b2c:	8f 7c       	andi	r24, 0xCF	; 207
     b2e:	80 8b       	std	Z+16, r24	; 0x10
	if (OnAir1)
     b30:	55 23       	and	r21, r21
     b32:	19 f0       	breq	.+6      	; 0xb3a <OnAirControl+0x1e2>
	ConsoleFunctionData[16] |= ONAIR1_FUNCTION;
     b34:	80 62       	ori	r24, 0x20	; 32
     b36:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <ConsoleFunctionData+0x10>
	if (OnAir2)
     b3a:	44 23       	and	r20, r20
     b3c:	29 f0       	breq	.+10     	; 0xb48 <OnAirControl+0x1f0>
	ConsoleFunctionData[16] |= ONAIR2_FUNCTION;
     b3e:	ed e4       	ldi	r30, 0x4D	; 77
     b40:	f4 e2       	ldi	r31, 0x24	; 36
     b42:	80 89       	ldd	r24, Z+16	; 0x10
     b44:	80 61       	ori	r24, 0x10	; 16
     b46:	80 8b       	std	Z+16, r24	; 0x10

	if (ConsoleFunctionData[16]&ONAIR1_FUNCTION)
     b48:	80 91 5d 24 	lds	r24, 0x245D	; 0x80245d <ConsoleFunctionData+0x10>
     b4c:	85 ff       	sbrs	r24, 5
     b4e:	19 c0       	rjmp	.+50     	; 0xb82 <OnAirControl+0x22a>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR1;
     b50:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     b54:	a1 e0       	ldi	r26, 0x01	; 1
     b56:	ae 0f       	add	r26, r30
     b58:	f0 e0       	ldi	r31, 0x00	; 0
     b5a:	ee 58       	subi	r30, 0x8E	; 142
     b5c:	fa 4d       	sbci	r31, 0xDA	; 218
     b5e:	84 e8       	ldi	r24, 0x84	; 132
     b60:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     b62:	e1 e0       	ldi	r30, 0x01	; 1
     b64:	ea 0f       	add	r30, r26
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ae 58       	subi	r26, 0x8E	; 142
     b6a:	ba 4d       	sbci	r27, 0xDA	; 218
     b6c:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     b6e:	81 e0       	ldi	r24, 0x01	; 1
     b70:	8e 0f       	add	r24, r30
     b72:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	ee 58       	subi	r30, 0x8E	; 142
     b7a:	fa 4d       	sbci	r31, 0xDA	; 218
     b7c:	81 e0       	ldi	r24, 0x01	; 1
     b7e:	80 83       	st	Z, r24
     b80:	17 c0       	rjmp	.+46     	; 0xbb0 <OnAirControl+0x258>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR1;
     b82:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     b86:	a1 e0       	ldi	r26, 0x01	; 1
     b88:	ae 0f       	add	r26, r30
     b8a:	f0 e0       	ldi	r31, 0x00	; 0
     b8c:	ee 58       	subi	r30, 0x8E	; 142
     b8e:	fa 4d       	sbci	r31, 0xDA	; 218
     b90:	84 e8       	ldi	r24, 0x84	; 132
     b92:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     b94:	e1 e0       	ldi	r30, 0x01	; 1
     b96:	ea 0f       	add	r30, r26
     b98:	b0 e0       	ldi	r27, 0x00	; 0
     b9a:	ae 58       	subi	r26, 0x8E	; 142
     b9c:	ba 4d       	sbci	r27, 0xDA	; 218
     b9e:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	8e 0f       	add	r24, r30
     ba4:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	ee 58       	subi	r30, 0x8E	; 142
     bac:	fa 4d       	sbci	r31, 0xDA	; 218
     bae:	10 82       	st	Z, r1
	}

	if (ConsoleFunctionData[16]&ONAIR2_FUNCTION)
     bb0:	80 91 5d 24 	lds	r24, 0x245D	; 0x80245d <ConsoleFunctionData+0x10>
     bb4:	84 ff       	sbrs	r24, 4
     bb6:	19 c0       	rjmp	.+50     	; 0xbea <OnAirControl+0x292>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR2;
     bb8:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     bbc:	a1 e0       	ldi	r26, 0x01	; 1
     bbe:	ae 0f       	add	r26, r30
     bc0:	f0 e0       	ldi	r31, 0x00	; 0
     bc2:	ee 58       	subi	r30, 0x8E	; 142
     bc4:	fa 4d       	sbci	r31, 0xDA	; 218
     bc6:	85 e8       	ldi	r24, 0x85	; 133
     bc8:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     bca:	e1 e0       	ldi	r30, 0x01	; 1
     bcc:	ea 0f       	add	r30, r26
     bce:	b0 e0       	ldi	r27, 0x00	; 0
     bd0:	ae 58       	subi	r26, 0x8E	; 142
     bd2:	ba 4d       	sbci	r27, 0xDA	; 218
     bd4:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	8e 0f       	add	r24, r30
     bda:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	ee 58       	subi	r30, 0x8E	; 142
     be2:	fa 4d       	sbci	r31, 0xDA	; 218
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	80 83       	st	Z, r24
     be8:	17 c0       	rjmp	.+46     	; 0xc18 <OnAirControl+0x2c0>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_ONAIR2;
     bea:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     bee:	a1 e0       	ldi	r26, 0x01	; 1
     bf0:	ae 0f       	add	r26, r30
     bf2:	f0 e0       	ldi	r31, 0x00	; 0
     bf4:	ee 58       	subi	r30, 0x8E	; 142
     bf6:	fa 4d       	sbci	r31, 0xDA	; 218
     bf8:	85 e8       	ldi	r24, 0x85	; 133
     bfa:	80 83       	st	Z, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     bfc:	e1 e0       	ldi	r30, 0x01	; 1
     bfe:	ea 0f       	add	r30, r26
     c00:	b0 e0       	ldi	r27, 0x00	; 0
     c02:	ae 58       	subi	r26, 0x8E	; 142
     c04:	ba 4d       	sbci	r27, 0xDA	; 218
     c06:	1c 92       	st	X, r1
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
     c08:	81 e0       	ldi	r24, 0x01	; 1
     c0a:	8e 0f       	add	r24, r30
     c0c:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	ee 58       	subi	r30, 0x8E	; 142
     c14:	fa 4d       	sbci	r31, 0xDA	; 218
     c16:	10 82       	st	Z, r1
	}
	SendSerialData = 1;
     c18:	81 e0       	ldi	r24, 0x01	; 1
     c1a:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
     c1e:	08 95       	ret

00000c20 <StartControl>:

void StartControl(unsigned char Module, unsigned char On)
{
	unsigned char Status = 0;

	ConsoleFunctionData[Module] &= START_FUNCTION^0xFF;
     c20:	28 2f       	mov	r18, r24
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	f9 01       	movw	r30, r18
     c26:	e3 5b       	subi	r30, 0xB3	; 179
     c28:	fb 4d       	sbci	r31, 0xDB	; 219
     c2a:	90 81       	ld	r25, Z
     c2c:	9d 7f       	andi	r25, 0xFD	; 253
     c2e:	90 83       	st	Z, r25
	if (On)
     c30:	66 23       	and	r22, r22
     c32:	09 f4       	brne	.+2      	; 0xc36 <StartControl+0x16>
     c34:	4c c0       	rjmp	.+152    	; 0xcce <StartControl+0xae>
	{
		if (ModuleData[Module][MIC_RING]&0x80)
     c36:	f9 01       	movw	r30, r18
     c38:	ee 0f       	add	r30, r30
     c3a:	ff 1f       	adc	r31, r31
     c3c:	ee 0f       	add	r30, r30
     c3e:	ff 1f       	adc	r31, r31
     c40:	ee 0f       	add	r30, r30
     c42:	ff 1f       	adc	r31, r31
     c44:	e8 54       	subi	r30, 0x48	; 72
     c46:	f7 4d       	sbci	r31, 0xD7	; 215
     c48:	47 81       	ldd	r20, Z+7	; 0x07
     c4a:	44 23       	and	r20, r20
     c4c:	8c f4       	brge	.+34     	; 0xc70 <StartControl+0x50>
		{
			if (ConsoleModuleSettings[Module][STARTMIC])
     c4e:	4d e1       	ldi	r20, 0x1D	; 29
     c50:	42 9f       	mul	r20, r18
     c52:	f0 01       	movw	r30, r0
     c54:	43 9f       	mul	r20, r19
     c56:	f0 0d       	add	r31, r0
     c58:	11 24       	eor	r1, r1
     c5a:	e1 56       	subi	r30, 0x61	; 97
     c5c:	f0 4d       	sbci	r31, 0xD0	; 208
     c5e:	45 81       	ldd	r20, Z+5	; 0x05
     c60:	44 23       	and	r20, r20
     c62:	a9 f1       	breq	.+106    	; 0xcce <StartControl+0xae>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     c64:	f9 01       	movw	r30, r18
     c66:	e3 5b       	subi	r30, 0xB3	; 179
     c68:	fb 4d       	sbci	r31, 0xDB	; 219
     c6a:	92 60       	ori	r25, 0x02	; 2
     c6c:	90 83       	st	Z, r25
     c6e:	2f c0       	rjmp	.+94     	; 0xcce <StartControl+0xae>
		}
		else if (!(ModuleData[Module][LINEB]&0x80))
     c70:	f9 01       	movw	r30, r18
     c72:	ee 0f       	add	r30, r30
     c74:	ff 1f       	adc	r31, r31
     c76:	ee 0f       	add	r30, r30
     c78:	ff 1f       	adc	r31, r31
     c7a:	ee 0f       	add	r30, r30
     c7c:	ff 1f       	adc	r31, r31
     c7e:	e8 54       	subi	r30, 0x48	; 72
     c80:	f7 4d       	sbci	r31, 0xD7	; 215
     c82:	46 81       	ldd	r20, Z+6	; 0x06
     c84:	44 23       	and	r20, r20
     c86:	8c f0       	brlt	.+34     	; 0xcaa <StartControl+0x8a>
		{
			if (ConsoleModuleSettings[Module][STARTLINEA])
     c88:	4d e1       	ldi	r20, 0x1D	; 29
     c8a:	42 9f       	mul	r20, r18
     c8c:	f0 01       	movw	r30, r0
     c8e:	43 9f       	mul	r20, r19
     c90:	f0 0d       	add	r31, r0
     c92:	11 24       	eor	r1, r1
     c94:	e1 56       	subi	r30, 0x61	; 97
     c96:	f0 4d       	sbci	r31, 0xD0	; 208
     c98:	43 81       	ldd	r20, Z+3	; 0x03
     c9a:	44 23       	and	r20, r20
     c9c:	c1 f0       	breq	.+48     	; 0xcce <StartControl+0xae>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     c9e:	f9 01       	movw	r30, r18
     ca0:	e3 5b       	subi	r30, 0xB3	; 179
     ca2:	fb 4d       	sbci	r31, 0xDB	; 219
     ca4:	92 60       	ori	r25, 0x02	; 2
     ca6:	90 83       	st	Z, r25
     ca8:	12 c0       	rjmp	.+36     	; 0xcce <StartControl+0xae>
		}
		else if (ModuleData[Module][LINEB]&0x80)
     caa:	44 23       	and	r20, r20
     cac:	84 f4       	brge	.+32     	; 0xcce <StartControl+0xae>
		{
			if (ConsoleModuleSettings[Module][STARTLINEB])
     cae:	4d e1       	ldi	r20, 0x1D	; 29
     cb0:	42 9f       	mul	r20, r18
     cb2:	f0 01       	movw	r30, r0
     cb4:	43 9f       	mul	r20, r19
     cb6:	f0 0d       	add	r31, r0
     cb8:	11 24       	eor	r1, r1
     cba:	e1 56       	subi	r30, 0x61	; 97
     cbc:	f0 4d       	sbci	r31, 0xD0	; 208
     cbe:	44 81       	ldd	r20, Z+4	; 0x04
     cc0:	44 23       	and	r20, r20
     cc2:	29 f0       	breq	.+10     	; 0xcce <StartControl+0xae>
			ConsoleFunctionData[Module] |= START_FUNCTION;
     cc4:	f9 01       	movw	r30, r18
     cc6:	e3 5b       	subi	r30, 0xB3	; 179
     cc8:	fb 4d       	sbci	r31, 0xDB	; 219
     cca:	92 60       	ori	r25, 0x02	; 2
     ccc:	90 83       	st	Z, r25
		}
	}
	
	cntStartPuls[Module] = 0;
     cce:	f9 01       	movw	r30, r18
     cd0:	e1 59       	subi	r30, 0x91	; 145
     cd2:	fe 4c       	sbci	r31, 0xCE	; 206
     cd4:	10 82       	st	Z, r1
	if ((ConsoleFunctionData[Module]&START_FUNCTION) && (ConsoleModuleSettings[Module][STARTPULS]))
     cd6:	f9 01       	movw	r30, r18
     cd8:	e3 5b       	subi	r30, 0xB3	; 179
     cda:	fb 4d       	sbci	r31, 0xDB	; 219
     cdc:	90 81       	ld	r25, Z
     cde:	49 2f       	mov	r20, r25
     ce0:	42 70       	andi	r20, 0x02	; 2
     ce2:	91 ff       	sbrs	r25, 1
     ce4:	10 c0       	rjmp	.+32     	; 0xd06 <StartControl+0xe6>
     ce6:	9d e1       	ldi	r25, 0x1D	; 29
     ce8:	92 9f       	mul	r25, r18
     cea:	f0 01       	movw	r30, r0
     cec:	93 9f       	mul	r25, r19
     cee:	f0 0d       	add	r31, r0
     cf0:	11 24       	eor	r1, r1
     cf2:	e1 56       	subi	r30, 0x61	; 97
     cf4:	f0 4d       	sbci	r31, 0xD0	; 208
     cf6:	91 85       	ldd	r25, Z+9	; 0x09
     cf8:	99 23       	and	r25, r25
     cfa:	29 f0       	breq	.+10     	; 0xd06 <StartControl+0xe6>
	{
		cntStartPuls[Module] = PULSWIDTH;
     cfc:	f9 01       	movw	r30, r18
     cfe:	e1 59       	subi	r30, 0x91	; 145
     d00:	fe 4c       	sbci	r31, 0xCE	; 206
     d02:	9a e0       	ldi	r25, 0x0A	; 10
     d04:	90 83       	st	Z, r25
	}

	if (ConsoleFunctionData[Module]&START_FUNCTION)
     d06:	44 23       	and	r20, r20
     d08:	c9 f0       	breq	.+50     	; 0xd3c <StartControl+0x11c>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
     d0a:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     d0e:	a1 e0       	ldi	r26, 0x01	; 1
     d10:	ae 0f       	add	r26, r30
     d12:	f0 e0       	ldi	r31, 0x00	; 0
     d14:	ee 58       	subi	r30, 0x8E	; 142
     d16:	fa 4d       	sbci	r31, 0xDA	; 218
     d18:	92 e8       	ldi	r25, 0x82	; 130
     d1a:	90 83       	st	Z, r25
		SerialBufferOut[SerialBufferOutPtrTop++] = Module;
     d1c:	e1 e0       	ldi	r30, 0x01	; 1
     d1e:	ea 0f       	add	r30, r26
     d20:	b0 e0       	ldi	r27, 0x00	; 0
     d22:	ae 58       	subi	r26, 0x8E	; 142
     d24:	ba 4d       	sbci	r27, 0xDA	; 218
     d26:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	8e 0f       	add	r24, r30
     d2c:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	ee 58       	subi	r30, 0x8E	; 142
     d34:	fa 4d       	sbci	r31, 0xDA	; 218
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	80 83       	st	Z, r24
     d3a:	18 c0       	rjmp	.+48     	; 0xd6c <StartControl+0x14c>
	}
	else
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_STOP;
     d3c:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
     d40:	a1 e0       	ldi	r26, 0x01	; 1
     d42:	ae 0f       	add	r26, r30
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	ee 58       	subi	r30, 0x8E	; 142
     d48:	fa 4d       	sbci	r31, 0xDA	; 218
     d4a:	93 e8       	ldi	r25, 0x83	; 131
     d4c:	90 83       	st	Z, r25
		SerialBufferOut[SerialBufferOutPtrTop++] = Module;
     d4e:	e1 e0       	ldi	r30, 0x01	; 1
     d50:	ea 0f       	add	r30, r26
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	ae 58       	subi	r26, 0x8E	; 142
     d56:	ba 4d       	sbci	r27, 0xDA	; 218
     d58:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
     d5a:	81 e0       	ldi	r24, 0x01	; 1
     d5c:	8e 0f       	add	r24, r30
     d5e:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
     d62:	f0 e0       	ldi	r31, 0x00	; 0
     d64:	ee 58       	subi	r30, 0x8E	; 142
     d66:	fa 4d       	sbci	r31, 0xDA	; 218
     d68:	81 e0       	ldi	r24, 0x01	; 1
     d6a:	80 83       	st	Z, r24
	}
	SendSerialData = 1;
     d6c:	81 e0       	ldi	r24, 0x01	; 1
     d6e:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
     d72:	08 95       	ret

00000d74 <CheckStartCondition>:
	}
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	18 2f       	mov	r17, r24
	unsigned char StartOn = 0;

	if (!ConsoleModuleSettings[Module][SWITCHSTART])
     d7c:	c8 2f       	mov	r28, r24
     d7e:	d0 e0       	ldi	r29, 0x00	; 0
     d80:	8d e1       	ldi	r24, 0x1D	; 29
     d82:	8c 9f       	mul	r24, r28
     d84:	f0 01       	movw	r30, r0
     d86:	8d 9f       	mul	r24, r29
     d88:	f0 0d       	add	r31, r0
     d8a:	11 24       	eor	r1, r1
     d8c:	e1 56       	subi	r30, 0x61	; 97
     d8e:	f0 4d       	sbci	r31, 0xD0	; 208
     d90:	84 8d       	ldd	r24, Z+28	; 0x1c
     d92:	81 11       	cpse	r24, r1
     d94:	a5 c0       	rjmp	.+330    	; 0xee0 <CheckStartCondition+0x16c>
	{
		if  ((ConsoleModuleSettings[Module][STARTON]) && (ConsoleModuleSettings[Module][STARTFADER]))
     d96:	8d e1       	ldi	r24, 0x1D	; 29
     d98:	8c 9f       	mul	r24, r28
     d9a:	f0 01       	movw	r30, r0
     d9c:	8d 9f       	mul	r24, r29
     d9e:	f0 0d       	add	r31, r0
     da0:	11 24       	eor	r1, r1
     da2:	e1 56       	subi	r30, 0x61	; 97
     da4:	f0 4d       	sbci	r31, 0xD0	; 208
     da6:	87 81       	ldd	r24, Z+7	; 0x07
     da8:	88 23       	and	r24, r24
     daa:	c1 f1       	breq	.+112    	; 0xe1c <CheckStartCondition+0xa8>
     dac:	9d e1       	ldi	r25, 0x1D	; 29
     dae:	9c 9f       	mul	r25, r28
     db0:	f0 01       	movw	r30, r0
     db2:	9d 9f       	mul	r25, r29
     db4:	f0 0d       	add	r31, r0
     db6:	11 24       	eor	r1, r1
     db8:	e1 56       	subi	r30, 0x61	; 97
     dba:	f0 4d       	sbci	r31, 0xD0	; 208
     dbc:	96 81       	ldd	r25, Z+6	; 0x06
     dbe:	99 23       	and	r25, r25
     dc0:	69 f1       	breq	.+90     	; 0xe1c <CheckStartCondition+0xa8>
		{
			if (((ModuleData[Module][FADERON]&0x80)) && (ConsoleFunctionData[Module]&ON_LED))
     dc2:	fe 01       	movw	r30, r28
     dc4:	ee 0f       	add	r30, r30
     dc6:	ff 1f       	adc	r31, r31
     dc8:	ee 0f       	add	r30, r30
     dca:	ff 1f       	adc	r31, r31
     dcc:	ee 0f       	add	r30, r30
     dce:	ff 1f       	adc	r31, r31
     dd0:	e8 54       	subi	r30, 0x48	; 72
     dd2:	f7 4d       	sbci	r31, 0xD7	; 215
     dd4:	81 81       	ldd	r24, Z+1	; 0x01
     dd6:	88 23       	and	r24, r24
     dd8:	bc f4       	brge	.+46     	; 0xe08 <CheckStartCondition+0x94>
     dda:	fe 01       	movw	r30, r28
     ddc:	e3 5b       	subi	r30, 0xB3	; 179
     dde:	fb 4d       	sbci	r31, 0xDB	; 219
     de0:	80 81       	ld	r24, Z
     de2:	85 ff       	sbrs	r24, 5
     de4:	11 c0       	rjmp	.+34     	; 0xe08 <CheckStartCondition+0x94>
			{	 //!JB
				if (!StartActive[Module])
     de6:	fe 01       	movw	r30, r28
     de8:	ef 5b       	subi	r30, 0xBF	; 191
     dea:	f6 4d       	sbci	r31, 0xD6	; 214
     dec:	80 81       	ld	r24, Z
     dee:	81 11       	cpse	r24, r1
     df0:	79 c0       	rjmp	.+242    	; 0xee4 <CheckStartCondition+0x170>
				{
					StartControl(Module,1);
     df2:	61 e0       	ldi	r22, 0x01	; 1
     df4:	81 2f       	mov	r24, r17
     df6:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
					StartActive[Module] = 1;
     dfa:	81 e0       	ldi	r24, 0x01	; 1
     dfc:	fe 01       	movw	r30, r28
     dfe:	ef 5b       	subi	r30, 0xBF	; 191
     e00:	f6 4d       	sbci	r31, 0xD6	; 214
     e02:	80 83       	st	Z, r24
				}
				StartOn = 1;
     e04:	91 e0       	ldi	r25, 0x01	; 1
     e06:	77 c0       	rjmp	.+238    	; 0xef6 <CheckStartCondition+0x182>
			}
			else
			{
				StartControl(Module,0);
     e08:	60 e0       	ldi	r22, 0x00	; 0
     e0a:	81 2f       	mov	r24, r17
     e0c:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
				StartActive[Module] = 0;
     e10:	fe 01       	movw	r30, r28
     e12:	ef 5b       	subi	r30, 0xBF	; 191
     e14:	f6 4d       	sbci	r31, 0xD6	; 214
     e16:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	6d c0       	rjmp	.+218    	; 0xef6 <CheckStartCondition+0x182>
			{
				StartControl(Module,0);
				StartActive[Module] = 0;
			}
		}
		else if  ((ConsoleModuleSettings[Module][STARTON]) && (!(ConsoleModuleSettings[Module][STARTFADER])))
     e1c:	88 23       	and	r24, r24
     e1e:	61 f1       	breq	.+88     	; 0xe78 <CheckStartCondition+0x104>
     e20:	9d e1       	ldi	r25, 0x1D	; 29
     e22:	9c 9f       	mul	r25, r28
     e24:	f0 01       	movw	r30, r0
     e26:	9d 9f       	mul	r25, r29
     e28:	f0 0d       	add	r31, r0
     e2a:	11 24       	eor	r1, r1
     e2c:	e1 56       	subi	r30, 0x61	; 97
     e2e:	f0 4d       	sbci	r31, 0xD0	; 208
     e30:	96 81       	ldd	r25, Z+6	; 0x06
     e32:	91 11       	cpse	r25, r1
     e34:	21 c0       	rjmp	.+66     	; 0xe78 <CheckStartCondition+0x104>
		{
			if (ConsoleFunctionData[Module]&ON_LED)
     e36:	fe 01       	movw	r30, r28
     e38:	e3 5b       	subi	r30, 0xB3	; 179
     e3a:	fb 4d       	sbci	r31, 0xDB	; 219
     e3c:	80 81       	ld	r24, Z
     e3e:	85 ff       	sbrs	r24, 5
     e40:	11 c0       	rjmp	.+34     	; 0xe64 <CheckStartCondition+0xf0>
			{
				if (!StartActive[Module])
     e42:	fe 01       	movw	r30, r28
     e44:	ef 5b       	subi	r30, 0xBF	; 191
     e46:	f6 4d       	sbci	r31, 0xD6	; 214
     e48:	80 81       	ld	r24, Z
     e4a:	81 11       	cpse	r24, r1
     e4c:	4d c0       	rjmp	.+154    	; 0xee8 <CheckStartCondition+0x174>
				{
					StartControl(Module,1);
     e4e:	61 e0       	ldi	r22, 0x01	; 1
     e50:	81 2f       	mov	r24, r17
     e52:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
					StartActive[Module] = 1;
     e56:	81 e0       	ldi	r24, 0x01	; 1
     e58:	fe 01       	movw	r30, r28
     e5a:	ef 5b       	subi	r30, 0xBF	; 191
     e5c:	f6 4d       	sbci	r31, 0xD6	; 214
     e5e:	80 83       	st	Z, r24
				}
				StartOn = 1;
     e60:	91 e0       	ldi	r25, 0x01	; 1
     e62:	49 c0       	rjmp	.+146    	; 0xef6 <CheckStartCondition+0x182>
			}
			else
			{
				StartControl(Module,0);
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	81 2f       	mov	r24, r17
     e68:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
				StartActive[Module] = 0;
     e6c:	fe 01       	movw	r30, r28
     e6e:	ef 5b       	subi	r30, 0xBF	; 191
     e70:	f6 4d       	sbci	r31, 0xD6	; 214
     e72:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     e74:	90 e0       	ldi	r25, 0x00	; 0
     e76:	3f c0       	rjmp	.+126    	; 0xef6 <CheckStartCondition+0x182>
			{
				StartControl(Module,0);
				StartActive[Module] = 0;
			}
		}
		else if  ((!ConsoleModuleSettings[Module][STARTON]) && (ConsoleModuleSettings[Module][STARTFADER]))
     e78:	81 11       	cpse	r24, r1
     e7a:	38 c0       	rjmp	.+112    	; 0xeec <CheckStartCondition+0x178>
     e7c:	8d e1       	ldi	r24, 0x1D	; 29
     e7e:	8c 9f       	mul	r24, r28
     e80:	f0 01       	movw	r30, r0
     e82:	8d 9f       	mul	r24, r29
     e84:	f0 0d       	add	r31, r0
     e86:	11 24       	eor	r1, r1
     e88:	e1 56       	subi	r30, 0x61	; 97
     e8a:	f0 4d       	sbci	r31, 0xD0	; 208
     e8c:	86 81       	ldd	r24, Z+6	; 0x06
     e8e:	88 23       	and	r24, r24
     e90:	79 f1       	breq	.+94     	; 0xef0 <CheckStartCondition+0x17c>
		{
			if ((ModuleData[Module][FADERON]&0x80))
     e92:	fe 01       	movw	r30, r28
     e94:	ee 0f       	add	r30, r30
     e96:	ff 1f       	adc	r31, r31
     e98:	ee 0f       	add	r30, r30
     e9a:	ff 1f       	adc	r31, r31
     e9c:	ee 0f       	add	r30, r30
     e9e:	ff 1f       	adc	r31, r31
     ea0:	e8 54       	subi	r30, 0x48	; 72
     ea2:	f7 4d       	sbci	r31, 0xD7	; 215
     ea4:	81 81       	ldd	r24, Z+1	; 0x01
     ea6:	88 23       	and	r24, r24
     ea8:	8c f4       	brge	.+34     	; 0xecc <CheckStartCondition+0x158>
			{	 // !JB
				if (!StartActive[Module])
     eaa:	fe 01       	movw	r30, r28
     eac:	ef 5b       	subi	r30, 0xBF	; 191
     eae:	f6 4d       	sbci	r31, 0xD6	; 214
     eb0:	80 81       	ld	r24, Z
     eb2:	81 11       	cpse	r24, r1
     eb4:	1f c0       	rjmp	.+62     	; 0xef4 <CheckStartCondition+0x180>
				{
					StartControl(Module,1);
     eb6:	61 e0       	ldi	r22, 0x01	; 1
     eb8:	81 2f       	mov	r24, r17
     eba:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
					StartActive[Module] = 1;
     ebe:	81 e0       	ldi	r24, 0x01	; 1
     ec0:	fe 01       	movw	r30, r28
     ec2:	ef 5b       	subi	r30, 0xBF	; 191
     ec4:	f6 4d       	sbci	r31, 0xD6	; 214
     ec6:	80 83       	st	Z, r24
				}
				StartOn = 1;
     ec8:	91 e0       	ldi	r25, 0x01	; 1
     eca:	15 c0       	rjmp	.+42     	; 0xef6 <CheckStartCondition+0x182>
			}
			else
			{
				StartControl(Module,0);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	81 2f       	mov	r24, r17
     ed0:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
				StartActive[Module] = 0;
     ed4:	fe 01       	movw	r30, r28
     ed6:	ef 5b       	subi	r30, 0xBF	; 191
     ed8:	f6 4d       	sbci	r31, 0xD6	; 214
     eda:	10 82       	st	Z, r1
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     edc:	90 e0       	ldi	r25, 0x00	; 0
     ede:	0b c0       	rjmp	.+22     	; 0xef6 <CheckStartCondition+0x182>
     ee0:	90 e0       	ldi	r25, 0x00	; 0
     ee2:	09 c0       	rjmp	.+18     	; 0xef6 <CheckStartCondition+0x182>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     ee4:	91 e0       	ldi	r25, 0x01	; 1
     ee6:	07 c0       	rjmp	.+14     	; 0xef6 <CheckStartCondition+0x182>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     ee8:	91 e0       	ldi	r25, 0x01	; 1
     eea:	05 c0       	rjmp	.+10     	; 0xef6 <CheckStartCondition+0x182>
	SendSerialData = 1;
}

void CheckStartCondition(unsigned char Module)
{
	unsigned char StartOn = 0;
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	03 c0       	rjmp	.+6      	; 0xef6 <CheckStartCondition+0x182>
     ef0:	90 e0       	ldi	r25, 0x00	; 0
     ef2:	01 c0       	rjmp	.+2      	; 0xef6 <CheckStartCondition+0x182>
				if (!StartActive[Module])
				{
					StartControl(Module,1);
					StartActive[Module] = 1;
				}
				StartOn = 1;
     ef4:	91 e0       	ldi	r25, 0x01	; 1
				StartControl(Module,0);
				StartActive[Module] = 0;
			}
		}
	}
	if (ConsoleModuleSettings[Module][STARTCUE])
     ef6:	8d e1       	ldi	r24, 0x1D	; 29
     ef8:	8c 9f       	mul	r24, r28
     efa:	f0 01       	movw	r30, r0
     efc:	8d 9f       	mul	r24, r29
     efe:	f0 0d       	add	r31, r0
     f00:	11 24       	eor	r1, r1
     f02:	e1 56       	subi	r30, 0x61	; 97
     f04:	f0 4d       	sbci	r31, 0xD0	; 208
     f06:	80 85       	ldd	r24, Z+8	; 0x08
     f08:	88 23       	and	r24, r24
     f0a:	c1 f0       	breq	.+48     	; 0xf3c <CheckStartCondition+0x1c8>
	{
		if (ConsoleFunctionData[Module]&CUE_FUNCTION)
     f0c:	fe 01       	movw	r30, r28
     f0e:	e3 5b       	subi	r30, 0xB3	; 179
     f10:	fb 4d       	sbci	r31, 0xDB	; 219
     f12:	80 81       	ld	r24, Z
     f14:	82 ff       	sbrs	r24, 2
     f16:	09 c0       	rjmp	.+18     	; 0xf2a <CheckStartCondition+0x1b6>
		{
			StartControl(Module,1);
     f18:	61 e0       	ldi	r22, 0x01	; 1
     f1a:	81 2f       	mov	r24, r17
     f1c:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
			StartActive[Module] = 1;
     f20:	cf 5b       	subi	r28, 0xBF	; 191
     f22:	d6 4d       	sbci	r29, 0xD6	; 214
     f24:	81 e0       	ldi	r24, 0x01	; 1
     f26:	88 83       	st	Y, r24
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <CheckStartCondition+0x1c8>
		}
		else if (!StartOn)
     f2a:	91 11       	cpse	r25, r1
     f2c:	07 c0       	rjmp	.+14     	; 0xf3c <CheckStartCondition+0x1c8>
		{
			StartControl(Module,0);
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	81 2f       	mov	r24, r17
     f32:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
			StartActive[Module] = 0;
     f36:	cf 5b       	subi	r28, 0xBF	; 191
     f38:	d6 4d       	sbci	r29, 0xD6	; 214
     f3a:	18 82       	st	Y, r1
		}
	}
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	08 95       	ret

00000f44 <SetConsoleData>:
void SetConsoleData()
{
	unsigned char cntByte, cntBit;  // byte   bits
	
	// Volgens mij is dit hieronder voor de MASTER MODULE
	for (cntBit=0; cntBit<8; cntBit++)	// 8 bits
     f44:	20 e0       	ldi	r18, 0x00	; 0
     f46:	27 c0       	rjmp	.+78     	; 0xf96 <SetConsoleData+0x52>
	{
		//DATA1 = ConsoleFunctionData[16]&(0x80>>cntBit);   // AND de data met 1000 0000 . Data staat in :   ConsoleFunctionData[16]
		if (ConsoleFunctionData[16]&(0x80>>cntBit))
     f48:	40 91 5d 24 	lds	r20, 0x245D	; 0x80245d <ConsoleFunctionData+0x10>
     f4c:	80 e8       	ldi	r24, 0x80	; 128
     f4e:	90 e0       	ldi	r25, 0x00	; 0
     f50:	02 2e       	mov	r0, r18
     f52:	02 c0       	rjmp	.+4      	; 0xf58 <SetConsoleData+0x14>
     f54:	95 95       	asr	r25
     f56:	87 95       	ror	r24
     f58:	0a 94       	dec	r0
     f5a:	e2 f7       	brpl	.-8      	; 0xf54 <SetConsoleData+0x10>
     f5c:	50 e0       	ldi	r21, 0x00	; 0
     f5e:	84 23       	and	r24, r20
     f60:	95 23       	and	r25, r21
     f62:	89 2b       	or	r24, r25
     f64:	21 f0       	breq	.+8      	; 0xf6e <SetConsoleData+0x2a>
			PORTC_OUTSET = DATA1;
     f66:	88 e0       	ldi	r24, 0x08	; 8
     f68:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
     f6c:	03 c0       	rjmp	.+6      	; 0xf74 <SetConsoleData+0x30>
		else
			PORTC_OUTCLR = DATA1;
     f6e:	88 e0       	ldi	r24, 0x08	; 8
     f70:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
		
		PORTC_OUTSET = CLK1;
     f74:	80 e1       	ldi	r24, 0x10	; 16
     f76:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
		//CLK2 = 1;
		for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);		// Wacht
     f7a:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <Wait>
     f7e:	03 c0       	rjmp	.+6      	; 0xf86 <SetConsoleData+0x42>
     f80:	8f 5f       	subi	r24, 0xFF	; 255
     f82:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <Wait>
     f86:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <Wait>
     f8a:	85 30       	cpi	r24, 0x05	; 5
     f8c:	c8 f3       	brcs	.-14     	; 0xf80 <SetConsoleData+0x3c>
		//CLK1 = 0;
		PORTC_OUTCLR = CLK1;
     f8e:	80 e1       	ldi	r24, 0x10	; 16
     f90:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
void SetConsoleData()
{
	unsigned char cntByte, cntBit;  // byte   bits
	
	// Volgens mij is dit hieronder voor de MASTER MODULE
	for (cntBit=0; cntBit<8; cntBit++)	// 8 bits
     f94:	2f 5f       	subi	r18, 0xFF	; 255
     f96:	28 30       	cpi	r18, 0x08	; 8
     f98:	b8 f2       	brcs	.-82     	; 0xf48 <SetConsoleData+0x4>
     f9a:	40 e0       	ldi	r20, 0x00	; 0
     f9c:	8c c0       	rjmp	.+280    	; 0x10b6 <SetConsoleData+0x172>
	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntBit=0; cntBit<6; cntBit++)								// 8 * 6 = 48
		{
			if ((OperatingMode==MODULEMODE) && ((0x01<<cntBit)&CUE_LED))   // Als betreffende module AND CUE_LED=1
     f9e:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <OperatingMode>
     fa2:	81 30       	cpi	r24, 0x01	; 1
     fa4:	d9 f5       	brne	.+118    	; 0x101c <SetConsoleData+0xd8>
     fa6:	69 2f       	mov	r22, r25
     fa8:	28 e0       	ldi	r18, 0x08	; 8
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	09 2e       	mov	r0, r25
     fae:	02 c0       	rjmp	.+4      	; 0xfb4 <SetConsoleData+0x70>
     fb0:	35 95       	asr	r19
     fb2:	27 95       	ror	r18
     fb4:	0a 94       	dec	r0
     fb6:	e2 f7       	brpl	.-8      	; 0xfb0 <SetConsoleData+0x6c>
     fb8:	20 ff       	sbrs	r18, 0
     fba:	30 c0       	rjmp	.+96     	; 0x101c <SetConsoleData+0xd8>
			{
				//DATA1 = ShowFunctionData[7-cntByte]&(0x01<<cntBit);						// ShowFunctionData
				if ( ShowFunctionData[7-cntByte]&(0x01<<cntBit) )
     fbc:	a4 2f       	mov	r26, r20
     fbe:	b0 e0       	ldi	r27, 0x00	; 0
     fc0:	e7 e0       	ldi	r30, 0x07	; 7
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	ea 1b       	sub	r30, r26
     fc6:	fb 0b       	sbc	r31, r27
     fc8:	e8 57       	subi	r30, 0x78	; 120
     fca:	fe 4c       	sbci	r31, 0xCE	; 206
     fcc:	20 81       	ld	r18, Z
     fce:	30 e0       	ldi	r19, 0x00	; 0
     fd0:	09 2e       	mov	r0, r25
     fd2:	02 c0       	rjmp	.+4      	; 0xfd8 <SetConsoleData+0x94>
     fd4:	35 95       	asr	r19
     fd6:	27 95       	ror	r18
     fd8:	0a 94       	dec	r0
     fda:	e2 f7       	brpl	.-8      	; 0xfd4 <SetConsoleData+0x90>
     fdc:	20 ff       	sbrs	r18, 0
     fde:	04 c0       	rjmp	.+8      	; 0xfe8 <SetConsoleData+0xa4>
					PORTC_OUTSET = DATA1;
     fe0:	88 e0       	ldi	r24, 0x08	; 8
     fe2:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
     fe6:	03 c0       	rjmp	.+6      	; 0xfee <SetConsoleData+0xaa>
				else
					PORTC_OUTCLR = DATA1;
     fe8:	88 e0       	ldi	r24, 0x08	; 8
     fea:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
				
				//DATA2 = ShowFunctionData[15-cntByte]&(0x01<<cntBit);
				if ( ShowFunctionData[15-cntByte]&(0x01<<cntBit) )
     fee:	ef e0       	ldi	r30, 0x0F	; 15
     ff0:	f0 e0       	ldi	r31, 0x00	; 0
     ff2:	ea 1b       	sub	r30, r26
     ff4:	fb 0b       	sbc	r31, r27
     ff6:	e8 57       	subi	r30, 0x78	; 120
     ff8:	fe 4c       	sbci	r31, 0xCE	; 206
     ffa:	20 81       	ld	r18, Z
     ffc:	30 e0       	ldi	r19, 0x00	; 0
     ffe:	02 c0       	rjmp	.+4      	; 0x1004 <SetConsoleData+0xc0>
    1000:	35 95       	asr	r19
    1002:	27 95       	ror	r18
    1004:	6a 95       	dec	r22
    1006:	e2 f7       	brpl	.-8      	; 0x1000 <SetConsoleData+0xbc>
    1008:	20 ff       	sbrs	r18, 0
    100a:	04 c0       	rjmp	.+8      	; 0x1014 <SetConsoleData+0xd0>
					PORTC_OUTSET = DATA2;
    100c:	80 e2       	ldi	r24, 0x20	; 32
    100e:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    1012:	34 c0       	rjmp	.+104    	; 0x107c <SetConsoleData+0x138>
				else
					PORTC_OUTCLR = DATA2;
    1014:	80 e2       	ldi	r24, 0x20	; 32
    1016:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
    101a:	30 c0       	rjmp	.+96     	; 0x107c <SetConsoleData+0x138>
			}
			else
			{
				//DATA1 = ConsoleFunctionData[7-cntByte]&(0x01<<cntBit);        // ConsoleFunctionData
				if ( ConsoleFunctionData[7-cntByte]&(0x01<<cntBit) )
    101c:	64 2f       	mov	r22, r20
    101e:	70 e0       	ldi	r23, 0x00	; 0
    1020:	e7 e0       	ldi	r30, 0x07	; 7
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	e6 1b       	sub	r30, r22
    1026:	f7 0b       	sbc	r31, r23
    1028:	e3 5b       	subi	r30, 0xB3	; 179
    102a:	fb 4d       	sbci	r31, 0xDB	; 219
    102c:	20 81       	ld	r18, Z
    102e:	a9 2f       	mov	r26, r25
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	09 2e       	mov	r0, r25
    1034:	02 c0       	rjmp	.+4      	; 0x103a <SetConsoleData+0xf6>
    1036:	35 95       	asr	r19
    1038:	27 95       	ror	r18
    103a:	0a 94       	dec	r0
    103c:	e2 f7       	brpl	.-8      	; 0x1036 <SetConsoleData+0xf2>
    103e:	20 ff       	sbrs	r18, 0
    1040:	04 c0       	rjmp	.+8      	; 0x104a <SetConsoleData+0x106>
					PORTC_OUTSET = DATA1;
    1042:	88 e0       	ldi	r24, 0x08	; 8
    1044:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    1048:	03 c0       	rjmp	.+6      	; 0x1050 <SetConsoleData+0x10c>
				else
					PORTC_OUTCLR = DATA1;
    104a:	88 e0       	ldi	r24, 0x08	; 8
    104c:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
				
				//DATA2 = ConsoleFunctionData[15-cntByte]&(0x01<<cntBit);
				if ( ConsoleFunctionData[15-cntByte]&(0x01<<cntBit) )
    1050:	ef e0       	ldi	r30, 0x0F	; 15
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	e6 1b       	sub	r30, r22
    1056:	f7 0b       	sbc	r31, r23
    1058:	e3 5b       	subi	r30, 0xB3	; 179
    105a:	fb 4d       	sbci	r31, 0xDB	; 219
    105c:	20 81       	ld	r18, Z
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	02 c0       	rjmp	.+4      	; 0x1066 <SetConsoleData+0x122>
    1062:	35 95       	asr	r19
    1064:	27 95       	ror	r18
    1066:	aa 95       	dec	r26
    1068:	e2 f7       	brpl	.-8      	; 0x1062 <SetConsoleData+0x11e>
    106a:	20 ff       	sbrs	r18, 0
    106c:	04 c0       	rjmp	.+8      	; 0x1076 <SetConsoleData+0x132>
					PORTC_OUTSET = DATA2;
    106e:	80 e2       	ldi	r24, 0x20	; 32
    1070:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    1074:	03 c0       	rjmp	.+6      	; 0x107c <SetConsoleData+0x138>
				else
					PORTC_OUTCLR = DATA2;				
    1076:	80 e2       	ldi	r24, 0x20	; 32
    1078:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
			}
			//CLK1 = 1;
			PORTC_OUTSET = CLK1;
    107c:	e5 e4       	ldi	r30, 0x45	; 69
    107e:	f6 e0       	ldi	r31, 0x06	; 6
    1080:	80 e1       	ldi	r24, 0x10	; 16
    1082:	80 83       	st	Z, r24
			//CLK2 = 1;
			PORTC_OUTSET = CLK2;
    1084:	80 e4       	ldi	r24, 0x40	; 64
    1086:	80 83       	st	Z, r24
			for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);		// Wacht
    1088:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <Wait>
    108c:	03 c0       	rjmp	.+6      	; 0x1094 <SetConsoleData+0x150>
    108e:	8f 5f       	subi	r24, 0xFF	; 255
    1090:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <Wait>
    1094:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <Wait>
    1098:	85 30       	cpi	r24, 0x05	; 5
    109a:	c8 f3       	brcs	.-14     	; 0x108e <SetConsoleData+0x14a>
			//CLK1 = 0;
			PORTC_OUTCLR = CLK1;
    109c:	e6 e4       	ldi	r30, 0x46	; 70
    109e:	f6 e0       	ldi	r31, 0x06	; 6
    10a0:	80 e1       	ldi	r24, 0x10	; 16
    10a2:	80 83       	st	Z, r24
			//CLK2 = 0;
			PORTC_OUTCLR = CLK2;
    10a4:	80 e4       	ldi	r24, 0x40	; 64
    10a6:	80 83       	st	Z, r24
	}

	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntBit=0; cntBit<6; cntBit++)								// 8 * 6 = 48
    10a8:	9f 5f       	subi	r25, 0xFF	; 255
    10aa:	01 c0       	rjmp	.+2      	; 0x10ae <SetConsoleData+0x16a>
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	96 30       	cpi	r25, 0x06	; 6
    10b0:	08 f4       	brcc	.+2      	; 0x10b4 <SetConsoleData+0x170>
    10b2:	75 cf       	rjmp	.-278    	; 0xf9e <SetConsoleData+0x5a>
		PORTC_OUTCLR = CLK1;
	
	}

	// Overige CONSOLE MODULE 1-16
	for (cntByte=0; cntByte<8; cntByte++)
    10b4:	4f 5f       	subi	r20, 0xFF	; 255
    10b6:	48 30       	cpi	r20, 0x08	; 8
    10b8:	c8 f3       	brcs	.-14     	; 0x10ac <SetConsoleData+0x168>
			PORTC_OUTCLR = CLK1;
			//CLK2 = 0;
			PORTC_OUTCLR = CLK2;
		}
	}
	PORTB_OUTCLR = STRB1;
    10ba:	81 e0       	ldi	r24, 0x01	; 1
    10bc:	80 93 26 06 	sts	0x0626, r24	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
	for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
    10c0:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <Wait>
    10c4:	03 c0       	rjmp	.+6      	; 0x10cc <SetConsoleData+0x188>
    10c6:	8f 5f       	subi	r24, 0xFF	; 255
    10c8:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <Wait>
    10cc:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <Wait>
    10d0:	85 30       	cpi	r24, 0x05	; 5
    10d2:	c8 f3       	brcs	.-14     	; 0x10c6 <SetConsoleData+0x182>
	PORTB_OUTSET = STRB1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 25 06 	sts	0x0625, r24	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
	//STRB2 = 0;
	//for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
	//STRB2 = 1;
	PORTC_OUTCLR = STRB2;
    10da:	82 e0       	ldi	r24, 0x02	; 2
    10dc:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
	for (Wait=0; Wait<SET_SERIAL_WAIT; Wait++);
    10e0:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <Wait>
    10e4:	03 c0       	rjmp	.+6      	; 0x10ec <SetConsoleData+0x1a8>
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <Wait>
    10ec:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <Wait>
    10f0:	85 30       	cpi	r24, 0x05	; 5
    10f2:	c8 f3       	brcs	.-14     	; 0x10e6 <SetConsoleData+0x1a2>
	PORTC_OUTSET = STRB2;	
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    10fa:	08 95       	ret

000010fc <CheckCUEByRemoteMIC>:
void CheckCUEByRemoteMIC(void)
{
	char Status = 0;
	int cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    10fc:	80 e0       	ldi	r24, 0x00	; 0
    10fe:	90 e0       	ldi	r25, 0x00	; 0



void CheckCUEByRemoteMIC(void)
{
	char Status = 0;
    1100:	30 e0       	ldi	r19, 0x00	; 0
	int cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1102:	18 c0       	rjmp	.+48     	; 0x1134 <CheckCUEByRemoteMIC+0x38>
	{
		if  (ModuleType[cntModule]==TRIPLE)
    1104:	fc 01       	movw	r30, r24
    1106:	e6 5c       	subi	r30, 0xC6	; 198
    1108:	fb 4d       	sbci	r31, 0xDB	; 219
    110a:	20 81       	ld	r18, Z
    110c:	21 30       	cpi	r18, 0x01	; 1
    110e:	89 f4       	brne	.+34     	; 0x1132 <CheckCUEByRemoteMIC+0x36>
		{
			if (ModuleData[cntModule][MIC_RING]&0x80)
    1110:	fc 01       	movw	r30, r24
    1112:	ee 0f       	add	r30, r30
    1114:	ff 1f       	adc	r31, r31
    1116:	ee 0f       	add	r30, r30
    1118:	ff 1f       	adc	r31, r31
    111a:	ee 0f       	add	r30, r30
    111c:	ff 1f       	adc	r31, r31
    111e:	e8 54       	subi	r30, 0x48	; 72
    1120:	f7 4d       	sbci	r31, 0xD7	; 215
    1122:	27 81       	ldd	r18, Z+7	; 0x07
    1124:	22 23       	and	r18, r18
    1126:	2c f4       	brge	.+10     	; 0x1132 <CheckCUEByRemoteMIC+0x36>
			{
				Status |= CUEByRemoteMIC[cntModule];
    1128:	fc 01       	movw	r30, r24
    112a:	ec 54       	subi	r30, 0x4C	; 76
    112c:	f4 4d       	sbci	r31, 0xD4	; 212
    112e:	20 81       	ld	r18, Z
    1130:	32 2b       	or	r19, r18
void CheckCUEByRemoteMIC(void)
{
	char Status = 0;
	int cntModule;

	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1132:	01 96       	adiw	r24, 0x01	; 1
    1134:	80 31       	cpi	r24, 0x10	; 16
    1136:	91 05       	cpc	r25, r1
    1138:	2c f3       	brlt	.-54     	; 0x1104 <CheckCUEByRemoteMIC+0x8>
				Status |= CUEByRemoteMIC[cntModule];
			}
		}
	}

	SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_FUNCTION;
    113a:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    113e:	a1 e0       	ldi	r26, 0x01	; 1
    1140:	ae 0f       	add	r26, r30
    1142:	f0 e0       	ldi	r31, 0x00	; 0
    1144:	ee 58       	subi	r30, 0x8E	; 142
    1146:	fa 4d       	sbci	r31, 0xDA	; 218
    1148:	80 ed       	ldi	r24, 0xD0	; 208
    114a:	80 83       	st	Z, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_CUE_BY_MIC_REMOTE;
    114c:	e1 e0       	ldi	r30, 0x01	; 1
    114e:	ea 0f       	add	r30, r26
    1150:	b0 e0       	ldi	r27, 0x00	; 0
    1152:	ae 58       	subi	r26, 0x8E	; 142
    1154:	ba 4d       	sbci	r27, 0xDA	; 218
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	8c 93       	st	X, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = Status;
    115a:	81 e0       	ldi	r24, 0x01	; 1
    115c:	8e 0f       	add	r24, r30
    115e:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	ee 58       	subi	r30, 0x8E	; 142
    1166:	fa 4d       	sbci	r31, 0xDA	; 218
    1168:	30 83       	st	Z, r19
    116a:	08 95       	ret

0000116c <GetModuleNrFromTelcoNr>:
{
	char cntTelco = -1;
	char ModuleNr = -1;
	char cntModule;
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    116c:	80 e0       	ldi	r24, 0x00	; 0
    116e:	01 c0       	rjmp	.+2      	; 0x1172 <GetModuleNrFromTelcoNr+0x6>
    1170:	8f 5f       	subi	r24, 0xFF	; 255
    1172:	80 31       	cpi	r24, 0x10	; 16
    1174:	e8 f3       	brcs	.-6      	; 0x1170 <GetModuleNrFromTelcoNr+0x4>
			}
		}
	}

	return ModuleNr;
}
    1176:	8f ef       	ldi	r24, 0xFF	; 255
    1178:	08 95       	ret

0000117a <CueControl>:
void CueControl()
{
	unsigned char cntModule;
	unsigned char CueActive=0;

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
    117a:	ed e4       	ldi	r30, 0x4D	; 77
    117c:	f4 e2       	ldi	r31, 0x24	; 36
    117e:	40 89       	ldd	r20, Z+16	; 0x10
    1180:	4d 7f       	andi	r20, 0xFD	; 253
    1182:	40 8b       	std	Z+16, r20	; 0x10


void CueControl()
{
	unsigned char cntModule;
	unsigned char CueActive=0;
    1184:	50 e0       	ldi	r21, 0x00	; 0

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1186:	80 e0       	ldi	r24, 0x00	; 0
    1188:	11 c0       	rjmp	.+34     	; 0x11ac <CueControl+0x32>
	{
		if ((ConsoleFunctionData[cntModule]&CUE_FUNCTION) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
    118a:	28 2f       	mov	r18, r24
    118c:	30 e0       	ldi	r19, 0x00	; 0
    118e:	f9 01       	movw	r30, r18
    1190:	e3 5b       	subi	r30, 0xB3	; 179
    1192:	fb 4d       	sbci	r31, 0xDB	; 219
    1194:	90 81       	ld	r25, Z
    1196:	92 ff       	sbrs	r25, 2
    1198:	08 c0       	rjmp	.+16     	; 0x11aa <CueControl+0x30>
    119a:	f9 01       	movw	r30, r18
    119c:	e6 5c       	subi	r30, 0xC6	; 198
    119e:	fb 4d       	sbci	r31, 0xDB	; 219
    11a0:	90 81       	ld	r25, Z
    11a2:	91 50       	subi	r25, 0x01	; 1
    11a4:	92 30       	cpi	r25, 0x02	; 2
    11a6:	08 f4       	brcc	.+2      	; 0x11aa <CueControl+0x30>
		CueActive = 1;
    11a8:	51 e0       	ldi	r21, 0x01	; 1
{
	unsigned char cntModule;
	unsigned char CueActive=0;

	ConsoleFunctionData[16] &= MASTER_CUE_ON_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    11aa:	8f 5f       	subi	r24, 0xFF	; 255
    11ac:	80 31       	cpi	r24, 0x10	; 16
    11ae:	68 f3       	brcs	.-38     	; 0x118a <CueControl+0x10>
	{
		if ((ConsoleFunctionData[cntModule]&CUE_FUNCTION) && ((ModuleType[cntModule]==TRIPLE) || (ModuleType[cntModule]==TELCO)))
		CueActive = 1;
	}

	if (DirectorTBCUEBussActive != 0)
    11b0:	80 91 c4 2b 	lds	r24, 0x2BC4	; 0x802bc4 <DirectorTBCUEBussActive>
    11b4:	81 11       	cpse	r24, r1
	{
		CueActive = 1;
    11b6:	51 e0       	ldi	r21, 0x01	; 1
	}

	if ((CueActive) && (ConsoleMasterSettings[CUETOCRM]))
    11b8:	55 23       	and	r21, r21
    11ba:	39 f0       	breq	.+14     	; 0x11ca <CueControl+0x50>
    11bc:	80 91 3c 29 	lds	r24, 0x293C	; 0x80293c <ConsoleMasterSettings+0x1>
    11c0:	88 23       	and	r24, r24
    11c2:	19 f0       	breq	.+6      	; 0x11ca <CueControl+0x50>
	ConsoleFunctionData[16] |= MASTER_CUE_ON_FUNCTION_LED;
    11c4:	42 60       	ori	r20, 0x02	; 2
    11c6:	40 93 5d 24 	sts	0x245D, r20	; 0x80245d <ConsoleFunctionData+0x10>

	//Check auto communication
	ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    11ca:	ed e4       	ldi	r30, 0x4D	; 77
    11cc:	f4 e2       	ldi	r31, 0x24	; 36
    11ce:	80 89       	ldd	r24, Z+16	; 0x10
    11d0:	87 7f       	andi	r24, 0xF7	; 247
    11d2:	80 8b       	std	Z+16, r24	; 0x10
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	2b c0       	rjmp	.+86     	; 0x122e <CueControl+0xb4>
	{
		if (ConsoleFunctionData[cntModule]&CUE_LED)
    11d8:	28 2f       	mov	r18, r24
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	f9 01       	movw	r30, r18
    11de:	e3 5b       	subi	r30, 0xB3	; 179
    11e0:	fb 4d       	sbci	r31, 0xDB	; 219
    11e2:	90 81       	ld	r25, Z
    11e4:	93 ff       	sbrs	r25, 3
    11e6:	22 c0       	rjmp	.+68     	; 0x122c <CueControl+0xb2>
		{
			if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    11e8:	f9 01       	movw	r30, r18
    11ea:	ee 0f       	add	r30, r30
    11ec:	ff 1f       	adc	r31, r31
    11ee:	ee 0f       	add	r30, r30
    11f0:	ff 1f       	adc	r31, r31
    11f2:	ee 0f       	add	r30, r30
    11f4:	ff 1f       	adc	r31, r31
    11f6:	e8 54       	subi	r30, 0x48	; 72
    11f8:	f7 4d       	sbci	r31, 0xD7	; 215
    11fa:	47 81       	ldd	r20, Z+7	; 0x07
    11fc:	44 23       	and	r20, r20
    11fe:	b4 f4       	brge	.+44     	; 0x122c <CueControl+0xb2>
    1200:	4d e1       	ldi	r20, 0x1D	; 29
    1202:	42 9f       	mul	r20, r18
    1204:	f0 01       	movw	r30, r0
    1206:	43 9f       	mul	r20, r19
    1208:	f0 0d       	add	r31, r0
    120a:	11 24       	eor	r1, r1
    120c:	e1 56       	subi	r30, 0x61	; 97
    120e:	f0 4d       	sbci	r31, 0xD0	; 208
    1210:	26 85       	ldd	r18, Z+14	; 0x0e
    1212:	22 23       	and	r18, r18
    1214:	59 f0       	breq	.+22     	; 0x122c <CueControl+0xb2>
    1216:	94 ff       	sbrs	r25, 4
    1218:	09 c0       	rjmp	.+18     	; 0x122c <CueControl+0xb2>
    121a:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <ConsoleMasterSettings+0x2>
    121e:	99 23       	and	r25, r25
    1220:	29 f0       	breq	.+10     	; 0x122c <CueControl+0xb2>
			{
				ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1222:	ed e4       	ldi	r30, 0x4D	; 77
    1224:	f4 e2       	ldi	r31, 0x24	; 36
    1226:	90 89       	ldd	r25, Z+16	; 0x10
    1228:	98 60       	ori	r25, 0x08	; 8
    122a:	90 8b       	std	Z+16, r25	; 0x10
	if ((CueActive) && (ConsoleMasterSettings[CUETOCRM]))
	ConsoleFunctionData[16] |= MASTER_CUE_ON_FUNCTION_LED;

	//Check auto communication
	ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    122c:	8f 5f       	subi	r24, 0xFF	; 255
    122e:	80 31       	cpi	r24, 0x10	; 16
    1230:	98 f2       	brcs	.-90     	; 0x11d8 <CueControl+0x5e>
			}
		}
	}
	CheckTBMic();

	SendSerialData = 1;
    1232:	81 e0       	ldi	r24, 0x01	; 1
    1234:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    1238:	08 95       	ret

0000123a <Init>:
//########################################################################################################################################
//########################################################################################################################################
//########################################################################################################################################

void Init(void)
{	
    123a:	0f 93       	push	r16
    123c:	1f 93       	push	r17
    123e:	cf 93       	push	r28
    1240:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1242:	83 e9       	ldi	r24, 0x93	; 147
    1244:	91 e1       	ldi	r25, 0x11	; 17
    1246:	01 97       	sbiw	r24, 0x01	; 1
    1248:	f1 f7       	brne	.-4      	; 0x1246 <Init+0xc>
    124a:	00 c0       	rjmp	.+0      	; 0x124c <Init+0x12>
    124c:	00 00       	nop
	unsigned char ClearMem = 0;
	
	_delay_ms(2);
	//############## PORT DIRECTION REGISTERS ######################
	
	PORTA_DIRSET = 0b01111111;		// Initialise port als uitgang LCD DISPLAY
    124e:	e1 e0       	ldi	r30, 0x01	; 1
    1250:	f6 e0       	ldi	r31, 0x06	; 6
    1252:	8f e7       	ldi	r24, 0x7F	; 127
    1254:	80 83       	st	Z, r24
	PORTA_DIRSET = 0b10000000;      // RST_CC uitgang even als test pin
    1256:	80 e8       	ldi	r24, 0x80	; 128
    1258:	80 83       	st	Z, r24
	
	
	PORTR_DIRCLR = 0b00000011;		// Initialise port als ingang KNOPJES INLEZEN  ( SW1 t/m SW2   Zie orginele schema muxboard airlb6a )
    125a:	83 e0       	ldi	r24, 0x03	; 3
    125c:	80 93 e2 07 	sts	0x07E2, r24	; 0x8007e2 <__TEXT_REGION_LENGTH__+0x7de7e2>
	PORTD_DIRCLR = 0b11111100;		// Initialise port als ingang KNOPJES INLEZEN  ( SW2 t/m SW7   Zie orginele schema muxboard airlb6a )
    1260:	9c ef       	ldi	r25, 0xFC	; 252
    1262:	90 93 62 06 	sts	0x0662, r25	; 0x800662 <__TEXT_REGION_LENGTH__+0x7de662>


	PORTB_DIRSET = 0b00001110;		// Initialise port als uitgang KNOPJES SCANNEN  ( AS3 AS0 en AS1  Zie orginele schema muxboard airlb6a )
    1266:	a1 e2       	ldi	r26, 0x21	; 33
    1268:	b6 e0       	ldi	r27, 0x06	; 6
    126a:	9e e0       	ldi	r25, 0x0E	; 14
    126c:	9c 93       	st	X, r25
	PORTC_DIRSET = 0b00000101;		// Initialise port als uitgang KNOPJES SCANNEN  ( AS4 en AS2      Zie orginele schema muxboard airlb6a )
    126e:	c1 e4       	ldi	r28, 0x41	; 65
    1270:	d6 e0       	ldi	r29, 0x06	; 6
    1272:	95 e0       	ldi	r25, 0x05	; 5
    1274:	98 83       	st	Y, r25

	PORTE_DIRCLR = 0b00000100;      //  Initialise port als ingang   RX RS232
    1276:	e2 e8       	ldi	r30, 0x82	; 130
    1278:	f6 e0       	ldi	r31, 0x06	; 6
    127a:	94 e0       	ldi	r25, 0x04	; 4
    127c:	90 83       	st	Z, r25
	PORTE_DIRSET = 0b00001000;	    //  Initialise port als uitgang  TX RS232
    127e:	98 e0       	ldi	r25, 0x08	; 8
    1280:	90 93 81 06 	sts	0x0681, r25	; 0x800681 <__TEXT_REGION_LENGTH__+0x7de681>

	PORTC_DIRSET = 0b01111010;	    // Initialise port als uitgang LEDJES AANSTUREN  CLK2 DATA2 CLK1 DATA1 en STRB2
    1284:	9a e7       	ldi	r25, 0x7A	; 122
    1286:	98 83       	st	Y, r25
	PORTB_DIRSET = 0b00000001;	    // Initialise port als uitgang LEDJES AANSTUREN  STRB1 
    1288:	91 e0       	ldi	r25, 0x01	; 1
    128a:	9c 93       	st	X, r25
	
	PORTE_DIRCLR = 0b00000011;      //  Initialise port als ingang   IIC
    128c:	80 83       	st	Z, r24
	
	
	
	//##############################################################	
	
	SetupSIO0();  // Setup Serial port	
    128e:	0e 94 d0 28 	call	0x51a0	; 0x51a0 <SetupSIO0>
	SetupLCD();
    1292:	0e 94 35 22 	call	0x446a	; 0x446a <SetupLCD>
	//////-----------------------------------------------------------------------------------------------


	unsigned char n,s;

	s=SREG;
    1296:	2f b7       	in	r18, 0x3f	; 63


	// Internal 2 MHz RC oscillator initialization
	// Enable the internal 2 MHz RC oscillator
	OSC.CTRL|=OSC_RC2MEN_bm;
    1298:	e0 e5       	ldi	r30, 0x50	; 80
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	80 81       	ld	r24, Z
    129e:	81 60       	ori	r24, 0x01	; 1
    12a0:	80 83       	st	Z, r24
	// Disable the auto-calibration of the internal 2 MHz RC oscillator
	DFLLRC2M.CTRL&= ~DFLL_ENABLE_bm;
    12a2:	e8 e6       	ldi	r30, 0x68	; 104
    12a4:	f0 e0       	ldi	r31, 0x00	; 0
    12a6:	80 81       	ld	r24, Z
    12a8:	8e 7f       	andi	r24, 0xFE	; 254
    12aa:	80 83       	st	Z, r24

	// Wait for the internal 2 MHz RC oscillator to stabilize
	while ((OSC.STATUS & OSC_RC2MRDY_bm)==0);
    12ac:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    12b0:	80 ff       	sbrs	r24, 0
    12b2:	fc cf       	rjmp	.-8      	; 0x12ac <Init+0x72>
	// PLL clock source: 2 MHz Internal Osc.
	// PLL multiplication factor: 18
	// PLL output/2: Off
	// PLL frequency: 36,000000 MHz
	// Set the PLL clock source and multiplication factor
	n=(OSC.PLLCTRL & (~(OSC_PLLSRC_gm | OSC_PLLDIV_bm | OSC_PLLFAC_gm))) |
    12b4:	e0 e5       	ldi	r30, 0x50	; 80
    12b6:	f0 e0       	ldi	r31, 0x00	; 0
    12b8:	85 81       	ldd	r24, Z+5	; 0x05
	OSC_PLLSRC_RC2M_gc | (0<<OSC_PLLDIV_bp) | 18;
	CCP=CCP_IOREG_gc;
    12ba:	98 ed       	ldi	r25, 0xD8	; 216
    12bc:	94 bf       	out	0x34, r25	; 52
	OSC.PLLCTRL=n;
    12be:	82 e1       	ldi	r24, 0x12	; 18
    12c0:	85 83       	std	Z+5, r24	; 0x05
	// Enable the PLL
	OSC.CTRL|=OSC_PLLEN_bm;
    12c2:	80 81       	ld	r24, Z
    12c4:	80 61       	ori	r24, 0x10	; 16
    12c6:	80 83       	st	Z, r24
	// System Clock prescalers B & C division factors: B:1, C:1
	// ClkPer4: 9000,000 kHz
	// ClkPer2: 9000,000 kHz
	// ClkPer:  9000,000 kHz
	// ClkCPU:  9000,000 kHz
	n=(CLK.PSCTRL & (~(CLK_PSADIV_gm | CLK_PSBCDIV1_bm | CLK_PSBCDIV0_bm))) |
    12c8:	e0 e4       	ldi	r30, 0x40	; 64
    12ca:	f0 e0       	ldi	r31, 0x00	; 0
    12cc:	81 81       	ldd	r24, Z+1	; 0x01
    12ce:	80 78       	andi	r24, 0x80	; 128
    12d0:	8c 60       	ori	r24, 0x0C	; 12
	CLK_PSADIV_4_gc | CLK_PSBCDIV_1_1_gc;
	CCP=CCP_IOREG_gc;
    12d2:	94 bf       	out	0x34, r25	; 52
	CLK.PSCTRL=n;
    12d4:	81 83       	std	Z+1, r24	; 0x01

	// Wait for the PLL to stabilize
	while ((OSC.STATUS & OSC_PLLRDY_bm)==0);
    12d6:	80 91 51 00 	lds	r24, 0x0051	; 0x800051 <__TEXT_REGION_LENGTH__+0x7de051>
    12da:	84 ff       	sbrs	r24, 4
    12dc:	fc cf       	rjmp	.-8      	; 0x12d6 <Init+0x9c>

	// Select the system clock source: Phase Locked Loop
	n=(CLK.CTRL & (~CLK_SCLKSEL_gm)) | CLK_SCLKSEL_PLL_gc;
    12de:	e0 e4       	ldi	r30, 0x40	; 64
    12e0:	f0 e0       	ldi	r31, 0x00	; 0
    12e2:	80 81       	ld	r24, Z
    12e4:	88 7f       	andi	r24, 0xF8	; 248
    12e6:	84 60       	ori	r24, 0x04	; 4
	CCP=CCP_IOREG_gc;
    12e8:	98 ed       	ldi	r25, 0xD8	; 216
    12ea:	94 bf       	out	0x34, r25	; 52
	CLK.CTRL=n;
    12ec:	80 83       	st	Z, r24

	// Disable the unused oscillators: 32 MHz, internal 32 kHz, external clock/crystal oscillator
	OSC.CTRL&= ~(OSC_RC32MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm);
    12ee:	e0 e5       	ldi	r30, 0x50	; 80
    12f0:	f0 e0       	ldi	r31, 0x00	; 0
    12f2:	80 81       	ld	r24, Z
    12f4:	81 7f       	andi	r24, 0xF1	; 241
    12f6:	80 83       	st	Z, r24

	// ClkPer output disabled
	PORTCFG.CLKEVOUT&= ~(PORTCFG_CLKOUTSEL_gm | PORTCFG_CLKOUT_gm);
    12f8:	e0 eb       	ldi	r30, 0xB0	; 176
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	84 81       	ldd	r24, Z+4	; 0x04
    12fe:	80 7f       	andi	r24, 0xF0	; 240
    1300:	84 83       	std	Z+4, r24	; 0x04
	// Restore interrupts enabled/disabled state
	SREG=s;
    1302:	2f bf       	out	0x3f, r18	; 63
    1304:	83 e9       	ldi	r24, 0x93	; 147
    1306:	91 e1       	ldi	r25, 0x11	; 17
    1308:	01 97       	sbiw	r24, 0x01	; 1
    130a:	f1 f7       	brne	.-4      	; 0x1308 <Init+0xce>
    130c:	00 c0       	rjmp	.+0      	; 0x130e <Init+0xd4>
    130e:	00 00       	nop
	

	_delay_ms(2);	

	
	OperatingMode = NORMALMODE;
    1310:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <OperatingMode>
	//GlobalTimerActive = 1;   // willem
	DirectorTBCUEBussActive = 0;
    1314:	10 92 c4 2b 	sts	0x2BC4, r1	; 0x802bc4 <DirectorTBCUEBussActive>
	
	//ConsoleFunctionData[0] |= 0x10;  // Even voor de Test : ConsoleFunctionData[module] |= ON_LED   LED wordt op des betreffende module aan of uit gezet plus overige functies mogelijk
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1318:	20 e0       	ldi	r18, 0x00	; 0
    131a:	0c c0       	rjmp	.+24     	; 0x1334 <Init+0xfa>
	{
		ConsoleFunctionData[cntModule] = MUTE_FUNCTION;
    131c:	82 2f       	mov	r24, r18
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	fc 01       	movw	r30, r24
    1322:	e3 5b       	subi	r30, 0xB3	; 179
    1324:	fb 4d       	sbci	r31, 0xDB	; 219
    1326:	30 e1       	ldi	r19, 0x10	; 16
    1328:	30 83       	st	Z, r19
		ShowFunctionData[cntModule] = 0x00;
    132a:	fc 01       	movw	r30, r24
    132c:	e8 57       	subi	r30, 0x78	; 120
    132e:	fe 4c       	sbci	r31, 0xCE	; 206
    1330:	10 82       	st	Z, r1
	//GlobalTimerActive = 1;   // willem
	DirectorTBCUEBussActive = 0;
	
	//ConsoleFunctionData[0] |= 0x10;  // Even voor de Test : ConsoleFunctionData[module] |= ON_LED   LED wordt op des betreffende module aan of uit gezet plus overige functies mogelijk
	
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1332:	2f 5f       	subi	r18, 0xFF	; 255
    1334:	20 31       	cpi	r18, 0x10	; 16
    1336:	90 f3       	brcs	.-28     	; 0x131c <Init+0xe2>
	{
		ConsoleFunctionData[cntModule] = MUTE_FUNCTION;
		ShowFunctionData[cntModule] = 0x00;
	}
	ConsoleFunctionData[16] = NOT_POWER_ON_CC;
    1338:	80 e4       	ldi	r24, 0x40	; 64
    133a:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <ConsoleFunctionData+0x10>
	
	SetConsoleData();
    133e:	0e 94 a2 07 	call	0xf44	; 0xf44 <SetConsoleData>
	//STRB1 = 1;
	//STRB2 = 1;
	
		
	
	OldTimeAndDate.Hours = 0;
    1342:	e0 ea       	ldi	r30, 0xA0	; 160
    1344:	f1 e3       	ldi	r31, 0x31	; 49
    1346:	13 82       	std	Z+3, r1	; 0x03
	OldTimeAndDate.Minutes = 0;
    1348:	12 82       	std	Z+2, r1	; 0x02
	OldTimeAndDate.Seconds = 0;
    134a:	11 82       	std	Z+1, r1	; 0x01
	OldTimeAndDate.Frames = 0;
    134c:	10 82       	st	Z, r1
	TimeAndDate.Hours = 0;
    134e:	ea e9       	ldi	r30, 0x9A	; 154
    1350:	f1 e3       	ldi	r31, 0x31	; 49
    1352:	13 82       	std	Z+3, r1	; 0x03
	TimeAndDate.Minutes = 0;
    1354:	12 82       	std	Z+2, r1	; 0x02
	TimeAndDate.Seconds = 0;
    1356:	11 82       	std	Z+1, r1	; 0x01
	TimeAndDate.Frames = 0;
    1358:	10 82       	st	Z, r1
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	1f c0       	rjmp	.+62     	; 0x139c <Init+0x162>
	{
		TimerActive[cntModule] = 0;
    135e:	82 2f       	mov	r24, r18
    1360:	90 e0       	ldi	r25, 0x00	; 0
    1362:	fc 01       	movw	r30, r24
    1364:	e6 54       	subi	r30, 0x46	; 70
    1366:	f2 4d       	sbci	r31, 0xD2	; 210
    1368:	10 82       	st	Z, r1
		cntStartPuls[cntModule] = 0;
    136a:	fc 01       	movw	r30, r24
    136c:	e1 59       	subi	r30, 0x91	; 145
    136e:	fe 4c       	sbci	r31, 0xCE	; 206
    1370:	10 82       	st	Z, r1
		cntStartFunction[cntModule] = 0;
    1372:	fc 01       	movw	r30, r24
    1374:	e1 5a       	subi	r30, 0xA1	; 161
    1376:	fb 4d       	sbci	r31, 0xDB	; 219
    1378:	10 82       	st	Z, r1
		cntCueFunction[cntModule] = 0;
    137a:	fc 01       	movw	r30, r24
    137c:	e3 52       	subi	r30, 0x23	; 35
    137e:	fd 4d       	sbci	r31, 0xDD	; 221
    1380:	10 82       	st	Z, r1
		cntMuteFunction[cntModule] = 0;
    1382:	fc 01       	movw	r30, r24
    1384:	e2 5c       	subi	r30, 0xC2	; 194
    1386:	f4 4d       	sbci	r31, 0xD4	; 212
    1388:	10 82       	st	Z, r1
		StartActive[cntModule] = 0;
    138a:	fc 01       	movw	r30, r24
    138c:	ef 5b       	subi	r30, 0xBF	; 191
    138e:	f6 4d       	sbci	r31, 0xD6	; 214
    1390:	10 82       	st	Z, r1
		CUEByRemoteMIC[cntModule] = 0;
    1392:	fc 01       	movw	r30, r24
    1394:	ec 54       	subi	r30, 0x4C	; 76
    1396:	f4 4d       	sbci	r31, 0xD4	; 212
    1398:	10 82       	st	Z, r1
	OldTimeAndDate.Frames = 0;
	TimeAndDate.Hours = 0;
	TimeAndDate.Minutes = 0;
	TimeAndDate.Seconds = 0;
	TimeAndDate.Frames = 0;
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    139a:	2f 5f       	subi	r18, 0xFF	; 255
    139c:	20 31       	cpi	r18, 0x10	; 16
    139e:	f8 f2       	brcs	.-66     	; 0x135e <Init+0x124>
		cntCueFunction[cntModule] = 0;
		cntMuteFunction[cntModule] = 0;
		StartActive[cntModule] = 0;
		CUEByRemoteMIC[cntModule] = 0;
	}
	GlobalTimerActive = 0;
    13a0:	10 92 9f 31 	sts	0x319F, r1	; 0x80319f <GlobalTimerActive>
	TextStringPtr = 0;
    13a4:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>

	SerialBufferInPtrTop = 0;
    13a8:	10 92 99 31 	sts	0x3199, r1	; 0x803199 <SerialBufferInPtrTop>
	SerialBufferInPtrBottom = 0;
    13ac:	10 92 ee 22 	sts	0x22EE, r1	; 0x8022ee <SerialBufferInPtrBottom>
	SerialBufferOutPtrTop = 0;
    13b0:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <SerialBufferOutPtrTop>
	SerialBufferOutPtrBottom = 0;
    13b4:	10 92 40 29 	sts	0x2940, r1	; 0x802940 <SerialBufferOutPtrBottom>
	SerialCnt = 0;
    13b8:	10 92 71 25 	sts	0x2571, r1	; 0x802571 <SerialCnt>
	SerialLength = 0;
    13bc:	10 92 38 24 	sts	0x2438, r1	; 0x802438 <SerialLength>
	SendSerialReady = 1;
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	80 93 34 24 	sts	0x2434, r24	; 0x802434 <SendSerialReady>
	
	

	

	I2CBufferInPtrTop = 0;
    13c6:	10 92 4a 24 	sts	0x244A, r1	; 0x80244a <I2CBufferInPtrTop>
	I2CBufferInPtrBottom = 0;
    13ca:	10 92 c5 2b 	sts	0x2BC5, r1	; 0x802bc5 <I2CBufferInPtrBottom>
	I2CBufferOutPtrTop = 0;
    13ce:	10 92 36 24 	sts	0x2436, r1	; 0x802436 <I2CBufferOutPtrTop>
	I2CBufferOutPtrBottom = 0;
    13d2:	10 92 ef 22 	sts	0x22EF, r1	; 0x8022ef <I2CBufferOutPtrBottom>
	I2CSendReady=1;
    13d6:	80 93 3a 29 	sts	0x293A, r24	; 0x80293a <I2CSendReady>
	I2CMasterReciever = 0;
    13da:	10 92 39 29 	sts	0x2939, r1	; 0x802939 <I2CMasterReciever>
	I2CError = 0;
    13de:	10 92 35 24 	sts	0x2435, r1	; 0x802435 <I2CError>
	CardInserted = 0;
    13e2:	10 92 37 24 	sts	0x2437, r1	; 0x802437 <CardInserted>
	
	//SetupSIO1();
			
	SetupTimer0();
    13e6:	0e 94 b7 0d 	call	0x1b6e	; 0x1b6e <SetupTimer0>

//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

	// Set display 
	SetLCD(1,"   D&R Airlab   ");
    13ea:	6e e1       	ldi	r22, 0x1E	; 30
    13ec:	70 e2       	ldi	r23, 0x20	; 32
    13ee:	81 e0       	ldi	r24, 0x01	; 1
    13f0:	90 e0       	ldi	r25, 0x00	; 0
    13f2:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	SetLCD(0,"\xC0");
    13f6:	6f e2       	ldi	r22, 0x2F	; 47
    13f8:	70 e2       	ldi	r23, 0x20	; 32
    13fa:	80 e0       	ldi	r24, 0x00	; 0
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	SetLCD(1,"  Initializing  ");	
    1402:	61 e3       	ldi	r22, 0x31	; 49
    1404:	70 e2       	ldi	r23, 0x20	; 32
    1406:	81 e0       	ldi	r24, 0x01	; 1
    1408:	90 e0       	ldi	r25, 0x00	; 0
    140a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	
	NrOfTelcos = 0;
    140e:	10 92 70 24 	sts	0x2470, r1	; 0x802470 <NrOfTelcos>
	NrOfTriples = 0;
    1412:	10 92 6f 24 	sts	0x246F, r1	; 0x80246f <NrOfTriples>
	*/	
	//TWIM_InitInterrupt();
	////TWIM_Init();
	//PMIC_CTRL |= PMIC_LOLVLEN_bm;
	
	 PMIC_CTRL|=PMIC_HILVLEN_bm|PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm; //enable high level, low level, medium level interrupt
    1416:	e2 ea       	ldi	r30, 0xA2	; 162
    1418:	f0 e0       	ldi	r31, 0x00	; 0
    141a:	80 81       	ld	r24, Z
    141c:	87 60       	ori	r24, 0x07	; 7
    141e:	80 83       	st	Z, r24
 
	 init_twi();	
    1420:	0e 94 8d 20 	call	0x411a	; 0x411a <init_twi>
	
	sei();
    1424:	78 94       	sei
	
//-----------------------------------------------------------------------------------------------------------------------------------------------
	
	// First Load all data from EEPROM (or Card?)
	Address = 0x0000;
	ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
    1426:	20 e1       	ldi	r18, 0x10	; 16
    1428:	30 e0       	ldi	r19, 0x00	; 0
    142a:	4a e3       	ldi	r20, 0x3A	; 58
    142c:	54 e2       	ldi	r21, 0x24	; 36
    142e:	60 e0       	ldi	r22, 0x00	; 0
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	80 e7       	ldi	r24, 0x70	; 112
    1434:	90 e0       	ldi	r25, 0x00	; 0
    1436:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
	Address += NROFMODULES;
	for (cntModule=0; cntModule<16; cntModule++)
    143a:	c0 e0       	ldi	r28, 0x00	; 0
//-----------------------------------------------------------------------------------------------------------------------------------------------
	
	// First Load all data from EEPROM (or Card?)
	Address = 0x0000;
	ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
	Address += NROFMODULES;
    143c:	00 e1       	ldi	r16, 0x10	; 16
    143e:	10 e0       	ldi	r17, 0x00	; 0
	for (cntModule=0; cntModule<16; cntModule++)
    1440:	10 c0       	rjmp	.+32     	; 0x1462 <Init+0x228>
	{
		ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    1442:	9d e1       	ldi	r25, 0x1D	; 29
    1444:	c9 9f       	mul	r28, r25
    1446:	a0 01       	movw	r20, r0
    1448:	11 24       	eor	r1, r1
    144a:	41 56       	subi	r20, 0x61	; 97
    144c:	50 4d       	sbci	r21, 0xD0	; 208
    144e:	2d e1       	ldi	r18, 0x1D	; 29
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	b8 01       	movw	r22, r16
    1454:	80 e7       	ldi	r24, 0x70	; 112
    1456:	90 e0       	ldi	r25, 0x00	; 0
    1458:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
		Address += 29;
    145c:	03 5e       	subi	r16, 0xE3	; 227
    145e:	1f 4f       	sbci	r17, 0xFF	; 255
	
	// First Load all data from EEPROM (or Card?)
	Address = 0x0000;
	ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
	Address += NROFMODULES;
	for (cntModule=0; cntModule<16; cntModule++)
    1460:	cf 5f       	subi	r28, 0xFF	; 255
    1462:	c0 31       	cpi	r28, 0x10	; 16
    1464:	70 f3       	brcs	.-36     	; 0x1442 <Init+0x208>
	{
		ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
		Address += 29;
	}
	ReadData(I2CAddressEEProm, Address, &(ConsoleMasterSettings[0]), 5);	
    1466:	25 e0       	ldi	r18, 0x05	; 5
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	4b e3       	ldi	r20, 0x3B	; 59
    146c:	59 e2       	ldi	r21, 0x29	; 41
    146e:	b8 01       	movw	r22, r16
    1470:	80 e7       	ldi	r24, 0x70	; 112
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>

	
//------------------------------------------------------------------------------------------------------------------------------------------------	


	Delay(10);	
    1478:	8a e0       	ldi	r24, 0x0A	; 10
    147a:	90 e0       	ldi	r25, 0x00	; 0
    147c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>

	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1480:	20 e0       	ldi	r18, 0x00	; 0
    1482:	14 c0       	rjmp	.+40     	; 0x14ac <Init+0x272>
	{
		for (cntByte=0; cntByte<8; cntByte++)
		{
			ModuleData[cntModule][cntByte]=ATTACK;
    1484:	e2 2f       	mov	r30, r18
    1486:	f0 e0       	ldi	r31, 0x00	; 0
    1488:	ee 0f       	add	r30, r30
    148a:	ff 1f       	adc	r31, r31
    148c:	ee 0f       	add	r30, r30
    148e:	ff 1f       	adc	r31, r31
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	e8 54       	subi	r30, 0x48	; 72
    1496:	f7 4d       	sbci	r31, 0xD7	; 215
    1498:	e8 0f       	add	r30, r24
    149a:	f1 1d       	adc	r31, r1
    149c:	91 e0       	ldi	r25, 0x01	; 1
    149e:	90 83       	st	Z, r25
	Delay(10);	

	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		for (cntByte=0; cntByte<8; cntByte++)
    14a0:	8f 5f       	subi	r24, 0xFF	; 255
    14a2:	01 c0       	rjmp	.+2      	; 0x14a6 <Init+0x26c>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	88 30       	cpi	r24, 0x08	; 8
    14a8:	68 f3       	brcs	.-38     	; 0x1484 <Init+0x24a>


	Delay(10);	

	// Clear readbuffers
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    14aa:	2f 5f       	subi	r18, 0xFF	; 255
    14ac:	20 31       	cpi	r18, 0x10	; 16
    14ae:	d0 f3       	brcs	.-12     	; 0x14a4 <Init+0x26a>
    14b0:	80 e0       	ldi	r24, 0x00	; 0
    14b2:	07 c0       	rjmp	.+14     	; 0x14c2 <Init+0x288>
			ModuleData[cntModule][cntByte]=ATTACK;
		}
	}
	for (cntByte=0; cntByte<8; cntByte++)
	{
		MasterData[cntByte]=ATTACK;
    14b4:	e8 2f       	mov	r30, r24
    14b6:	f0 e0       	ldi	r31, 0x00	; 0
    14b8:	e1 58       	subi	r30, 0x81	; 129
    14ba:	fe 4c       	sbci	r31, 0xCE	; 206
    14bc:	91 e0       	ldi	r25, 0x01	; 1
    14be:	90 83       	st	Z, r25
		for (cntByte=0; cntByte<8; cntByte++)
		{
			ModuleData[cntModule][cntByte]=ATTACK;
		}
	}
	for (cntByte=0; cntByte<8; cntByte++)
    14c0:	8f 5f       	subi	r24, 0xFF	; 255
    14c2:	88 30       	cpi	r24, 0x08	; 8
    14c4:	b8 f3       	brcs	.-18     	; 0x14b4 <Init+0x27a>
	{
		MasterData[cntByte]=ATTACK;
	}
	
	Delay(10);
    14c6:	8a e0       	ldi	r24, 0x0A	; 10
    14c8:	90 e0       	ldi	r25, 0x00	; 0
    14ca:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>

	for (cntModule=0; cntModule<100; cntModule++)
    14ce:	c0 e0       	ldi	r28, 0x00	; 0
    14d0:	07 c0       	rjmp	.+14     	; 0x14e0 <Init+0x2a6>
	{
		ReadModuleSwitches(MODULE1_8);
    14d2:	80 e0       	ldi	r24, 0x00	; 0
    14d4:	0e 94 8d 24 	call	0x491a	; 0x491a <ReadModuleSwitches>
		ReadModuleSwitches(MODULE9_16);
    14d8:	81 e0       	ldi	r24, 0x01	; 1
    14da:	0e 94 8d 24 	call	0x491a	; 0x491a <ReadModuleSwitches>
		MasterData[cntByte]=ATTACK;
	}
	
	Delay(10);

	for (cntModule=0; cntModule<100; cntModule++)
    14de:	cf 5f       	subi	r28, 0xFF	; 255
    14e0:	c4 36       	cpi	r28, 0x64	; 100
    14e2:	b8 f3       	brcs	.-18     	; 0x14d2 <Init+0x298>
	{
		ReadModuleSwitches(MODULE1_8);
		ReadModuleSwitches(MODULE9_16);
	}
	EventBufferPtrTop = 0;
    14e4:	10 92 38 29 	sts	0x2938, r1	; 0x802938 <EventBufferPtrTop>
	EventBufferPtrBottom = 0;
    14e8:	10 92 e8 20 	sts	0x20E8, r1	; 0x8020e8 <__data_end>
	

	
	
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    14ec:	c0 e0       	ldi	r28, 0x00	; 0
    14ee:	39 c0       	rjmp	.+114    	; 0x1562 <Init+0x328>
	{
		unsigned char Type = 0;

		if (ModuleData[cntModule][4]&0x80)
    14f0:	8c 2f       	mov	r24, r28
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	fc 01       	movw	r30, r24
    14f6:	ee 0f       	add	r30, r30
    14f8:	ff 1f       	adc	r31, r31
    14fa:	ee 0f       	add	r30, r30
    14fc:	ff 1f       	adc	r31, r31
    14fe:	ee 0f       	add	r30, r30
    1500:	ff 1f       	adc	r31, r31
    1502:	e8 54       	subi	r30, 0x48	; 72
    1504:	f7 4d       	sbci	r31, 0xD7	; 215
    1506:	24 81       	ldd	r18, Z+4	; 0x04
    1508:	22 23       	and	r18, r18
    150a:	14 f0       	brlt	.+4      	; 0x1510 <Init+0x2d6>
	
	
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
	{
		unsigned char Type = 0;
    150c:	20 e0       	ldi	r18, 0x00	; 0
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <Init+0x2d8>

		if (ModuleData[cntModule][4]&0x80)
		Type = 0x02;
    1510:	22 e0       	ldi	r18, 0x02	; 2
		if (ModuleData[cntModule][5]&0x80)
    1512:	fc 01       	movw	r30, r24
    1514:	ee 0f       	add	r30, r30
    1516:	ff 1f       	adc	r31, r31
    1518:	ee 0f       	add	r30, r30
    151a:	ff 1f       	adc	r31, r31
    151c:	ee 0f       	add	r30, r30
    151e:	ff 1f       	adc	r31, r31
    1520:	e8 54       	subi	r30, 0x48	; 72
    1522:	f7 4d       	sbci	r31, 0xD7	; 215
    1524:	35 81       	ldd	r19, Z+5	; 0x05
    1526:	33 23       	and	r19, r19
    1528:	0c f4       	brge	.+2      	; 0x152c <Init+0x2f2>
		Type |= 0x01;
    152a:	21 60       	ori	r18, 0x01	; 1

		if (ModuleType[cntModule] != Type)
    152c:	fc 01       	movw	r30, r24
    152e:	e6 5c       	subi	r30, 0xC6	; 198
    1530:	fb 4d       	sbci	r31, 0xDB	; 219
    1532:	30 81       	ld	r19, Z
    1534:	23 17       	cp	r18, r19
    1536:	a1 f0       	breq	.+40     	; 0x1560 <Init+0x326>
		{
			ModuleType[cntModule] = Type;
    1538:	fc 01       	movw	r30, r24
    153a:	e6 5c       	subi	r30, 0xC6	; 198
    153c:	fb 4d       	sbci	r31, 0xDB	; 219
    153e:	20 83       	st	Z, r18
			SetLCD(0,"\xC0");
    1540:	6f e2       	ldi	r22, 0x2F	; 47
    1542:	70 e2       	ldi	r23, 0x20	; 32
    1544:	80 e0       	ldi	r24, 0x00	; 0
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
			SetLCD(1,"Config changed");
    154c:	62 e4       	ldi	r22, 0x42	; 66
    154e:	70 e2       	ldi	r23, 0x20	; 32
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
			Delay(20);
    1558:	84 e1       	ldi	r24, 0x14	; 20
    155a:	90 e0       	ldi	r25, 0x00	; 0
    155c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>
	

	
	
	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    1560:	cf 5f       	subi	r28, 0xFF	; 255
    1562:	c0 31       	cpi	r28, 0x10	; 16
    1564:	28 f2       	brcs	.-118    	; 0x14f0 <Init+0x2b6>
			//ConsoleModuleSettings[cntModule][REMONLINEB] = 0x00;
			//ConsoleModuleSettings[cntModule][SWITCHSTART] = 0x00;
		}
	}
	
	ModuleType[0] = 0x1;
    1566:	ea e3       	ldi	r30, 0x3A	; 58
    1568:	f4 e2       	ldi	r31, 0x24	; 36
    156a:	81 e0       	ldi	r24, 0x01	; 1
    156c:	80 83       	st	Z, r24
	ModuleType[1] = 0x1;
    156e:	81 83       	std	Z+1, r24	; 0x01
	ModuleType[2] = 0x1;
    1570:	82 83       	std	Z+2, r24	; 0x02
	ModuleType[3] = 0x1;
    1572:	83 83       	std	Z+3, r24	; 0x03
	ModuleType[4] = 0x1;
    1574:	84 83       	std	Z+4, r24	; 0x04
	ModuleType[5] = 0x1;
    1576:	85 83       	std	Z+5, r24	; 0x05
	ModuleType[6] = 1;
    1578:	86 83       	std	Z+6, r24	; 0x06
	ModuleType[7] = 1;
    157a:	87 83       	std	Z+7, r24	; 0x07
				//
	//
	ModuleType[8] = 1;
    157c:	80 87       	std	Z+8, r24	; 0x08
	ModuleType[9] = 1;
    157e:	81 87       	std	Z+9, r24	; 0x09
	ModuleType[10] = 1;
    1580:	82 87       	std	Z+10, r24	; 0x0a
	ModuleType[11] = 1;
    1582:	83 87       	std	Z+11, r24	; 0x0b
	ModuleType[12] = 1;
    1584:	84 87       	std	Z+12, r24	; 0x0c
	ModuleType[13] = 1;
    1586:	85 87       	std	Z+13, r24	; 0x0d
	ModuleType[14] = 1;
    1588:	86 87       	std	Z+14, r24	; 0x0e
	ModuleType[15] = 1;	
    158a:	87 87       	std	Z+15, r24	; 0x0f
	//////////ConsoleMasterSettings[3] = 1;		 
	//////////ConsoleMasterSettings[4] = 1;

	
	// Determine Startup setting
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    158c:	10 e0       	ldi	r17, 0x00	; 0
    158e:	68 c0       	rjmp	.+208    	; 0x1660 <Init+0x426>
	{
		ConsoleFunctionData[cntModule] = 0x00;
    1590:	c1 2f       	mov	r28, r17
    1592:	d0 e0       	ldi	r29, 0x00	; 0
    1594:	fe 01       	movw	r30, r28
    1596:	e3 5b       	subi	r30, 0xB3	; 179
    1598:	fb 4d       	sbci	r31, 0xDB	; 219
    159a:	10 82       	st	Z, r1
		if (ConsoleModuleSettings[cntModule][POWERON])
    159c:	8d e1       	ldi	r24, 0x1D	; 29
    159e:	8c 9f       	mul	r24, r28
    15a0:	f0 01       	movw	r30, r0
    15a2:	8d 9f       	mul	r24, r29
    15a4:	f0 0d       	add	r31, r0
    15a6:	11 24       	eor	r1, r1
    15a8:	e1 56       	subi	r30, 0x61	; 97
    15aa:	f0 4d       	sbci	r31, 0xD0	; 208
    15ac:	86 89       	ldd	r24, Z+22	; 0x16
    15ae:	88 23       	and	r24, r24
    15b0:	09 f4       	brne	.+2      	; 0x15b4 <Init+0x37a>
    15b2:	51 c0       	rjmp	.+162    	; 0x1656 <Init+0x41c>
		{
			ConsoleFunctionData[cntModule] |= ON_LED;
    15b4:	80 e2       	ldi	r24, 0x20	; 32
    15b6:	fe 01       	movw	r30, r28
    15b8:	e3 5b       	subi	r30, 0xB3	; 179
    15ba:	fb 4d       	sbci	r31, 0xDB	; 219
    15bc:	80 83       	st	Z, r24
			if ((ConsoleModuleSettings[cntModule][STARTON]) && (!ConsoleModuleSettings[cntModule][STARTFADER]))
    15be:	8d e1       	ldi	r24, 0x1D	; 29
    15c0:	8c 9f       	mul	r24, r28
    15c2:	f0 01       	movw	r30, r0
    15c4:	8d 9f       	mul	r24, r29
    15c6:	f0 0d       	add	r31, r0
    15c8:	11 24       	eor	r1, r1
    15ca:	e1 56       	subi	r30, 0x61	; 97
    15cc:	f0 4d       	sbci	r31, 0xD0	; 208
    15ce:	87 81       	ldd	r24, Z+7	; 0x07
    15d0:	88 23       	and	r24, r24
    15d2:	79 f0       	breq	.+30     	; 0x15f2 <Init+0x3b8>
    15d4:	8d e1       	ldi	r24, 0x1D	; 29
    15d6:	8c 9f       	mul	r24, r28
    15d8:	f0 01       	movw	r30, r0
    15da:	8d 9f       	mul	r24, r29
    15dc:	f0 0d       	add	r31, r0
    15de:	11 24       	eor	r1, r1
    15e0:	e1 56       	subi	r30, 0x61	; 97
    15e2:	f0 4d       	sbci	r31, 0xD0	; 208
    15e4:	86 81       	ldd	r24, Z+6	; 0x06
    15e6:	81 11       	cpse	r24, r1
    15e8:	04 c0       	rjmp	.+8      	; 0x15f2 <Init+0x3b8>
			StartControl(cntModule,1);
    15ea:	61 e0       	ldi	r22, 0x01	; 1
    15ec:	81 2f       	mov	r24, r17
    15ee:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>

			if ((ModuleData[cntModule][FADERON]&0x80))
    15f2:	fe 01       	movw	r30, r28
    15f4:	ee 0f       	add	r30, r30
    15f6:	ff 1f       	adc	r31, r31
    15f8:	ee 0f       	add	r30, r30
    15fa:	ff 1f       	adc	r31, r31
    15fc:	ee 0f       	add	r30, r30
    15fe:	ff 1f       	adc	r31, r31
    1600:	e8 54       	subi	r30, 0x48	; 72
    1602:	f7 4d       	sbci	r31, 0xD7	; 215
    1604:	81 81       	ldd	r24, Z+1	; 0x01
    1606:	88 23       	and	r24, r24
    1608:	04 f5       	brge	.+64     	; 0x164a <Init+0x410>
			{ // !JB
				if  ((ConsoleModuleSettings[cntModule][STARTON]) && (ConsoleModuleSettings[cntModule][STARTFADER]))
    160a:	8d e1       	ldi	r24, 0x1D	; 29
    160c:	8c 9f       	mul	r24, r28
    160e:	f0 01       	movw	r30, r0
    1610:	8d 9f       	mul	r24, r29
    1612:	f0 0d       	add	r31, r0
    1614:	11 24       	eor	r1, r1
    1616:	e1 56       	subi	r30, 0x61	; 97
    1618:	f0 4d       	sbci	r31, 0xD0	; 208
    161a:	87 81       	ldd	r24, Z+7	; 0x07
    161c:	88 23       	and	r24, r24
    161e:	79 f0       	breq	.+30     	; 0x163e <Init+0x404>
    1620:	8d e1       	ldi	r24, 0x1D	; 29
    1622:	8c 9f       	mul	r24, r28
    1624:	f0 01       	movw	r30, r0
    1626:	8d 9f       	mul	r24, r29
    1628:	f0 0d       	add	r31, r0
    162a:	11 24       	eor	r1, r1
    162c:	e1 56       	subi	r30, 0x61	; 97
    162e:	f0 4d       	sbci	r31, 0xD0	; 208
    1630:	86 81       	ldd	r24, Z+6	; 0x06
    1632:	88 23       	and	r24, r24
    1634:	21 f0       	breq	.+8      	; 0x163e <Init+0x404>
				StartControl(cntModule,1);
    1636:	61 e0       	ldi	r22, 0x01	; 1
    1638:	81 2f       	mov	r24, r17
    163a:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>

				ConsoleFunctionData[cntModule] |= REMOTE_FUNCTION;
    163e:	c3 5b       	subi	r28, 0xB3	; 179
    1640:	db 4d       	sbci	r29, 0xDB	; 219
    1642:	88 81       	ld	r24, Y
    1644:	81 60       	ori	r24, 0x01	; 1
    1646:	88 83       	st	Y, r24
    1648:	0a c0       	rjmp	.+20     	; 0x165e <Init+0x424>
			}
			else
			{
				ConsoleFunctionData[cntModule] |= MUTE_FUNCTION;
    164a:	c3 5b       	subi	r28, 0xB3	; 179
    164c:	db 4d       	sbci	r29, 0xDB	; 219
    164e:	88 81       	ld	r24, Y
    1650:	80 61       	ori	r24, 0x10	; 16
    1652:	88 83       	st	Y, r24
    1654:	04 c0       	rjmp	.+8      	; 0x165e <Init+0x424>
			}
		}
		else
		{
			ConsoleFunctionData[cntModule] |= MUTE_FUNCTION;
    1656:	c3 5b       	subi	r28, 0xB3	; 179
    1658:	db 4d       	sbci	r29, 0xDB	; 219
    165a:	80 e1       	ldi	r24, 0x10	; 16
    165c:	88 83       	st	Y, r24
	//////////ConsoleMasterSettings[3] = 1;		 
	//////////ConsoleMasterSettings[4] = 1;

	
	// Determine Startup setting
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    165e:	1f 5f       	subi	r17, 0xFF	; 255
    1660:	10 31       	cpi	r17, 0x10	; 16
    1662:	08 f4       	brcc	.+2      	; 0x1666 <Init+0x42c>
    1664:	95 cf       	rjmp	.-214    	; 0x1590 <Init+0x356>
		// Watchdog
		//PCON |= 0x10;
		//T3 = 0;
	}	
	
	ConsoleFunctionData[16] = NOT_POWER_ON_CC;
    1666:	80 e4       	ldi	r24, 0x40	; 64
    1668:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <ConsoleFunctionData+0x10>

	for (cntModule; cntModule<NROFMODULES; cntModule++)
    166c:	04 c0       	rjmp	.+8      	; 0x1676 <Init+0x43c>
	{
		TimerControl(cntModule);
    166e:	81 2f       	mov	r24, r17
    1670:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
		//T3 = 0;
	}	
	
	ConsoleFunctionData[16] = NOT_POWER_ON_CC;

	for (cntModule; cntModule<NROFMODULES; cntModule++)
    1674:	1f 5f       	subi	r17, 0xFF	; 255
    1676:	10 31       	cpi	r17, 0x10	; 16
    1678:	d0 f3       	brcs	.-12     	; 0x166e <Init+0x434>
		//PCON |= 0x10;
		//T3 = 0;
	}

	//OnAir1/2 Control
	OnAirControl();
    167a:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>

	//DJ-Control
	DJControl();
    167e:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>

	//StudioMic Control
	StudioMicControl();
    1682:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>

	//Cue Control
	CueControl();
    1686:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>

	SetConsoleData();
    168a:	0e 94 a2 07 	call	0xf44	; 0xf44 <SetConsoleData>


	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	16 c0       	rjmp	.+44     	; 0x16be <Init+0x484>
	{
		switch (ModuleType[cntModule])
    1692:	e8 2f       	mov	r30, r24
    1694:	f0 e0       	ldi	r31, 0x00	; 0
    1696:	e6 5c       	subi	r30, 0xC6	; 198
    1698:	fb 4d       	sbci	r31, 0xDB	; 219
    169a:	90 81       	ld	r25, Z
    169c:	91 30       	cpi	r25, 0x01	; 1
    169e:	19 f0       	breq	.+6      	; 0x16a6 <Init+0x46c>
    16a0:	92 30       	cpi	r25, 0x02	; 2
    16a2:	39 f0       	breq	.+14     	; 0x16b2 <Init+0x478>
    16a4:	0b c0       	rjmp	.+22     	; 0x16bc <Init+0x482>
		{
			case TRIPLE:
			{
				// Triple Module
				NrOfTriples++;
    16a6:	90 91 6f 24 	lds	r25, 0x246F	; 0x80246f <NrOfTriples>
    16aa:	9f 5f       	subi	r25, 0xFF	; 255
    16ac:	90 93 6f 24 	sts	0x246F, r25	; 0x80246f <NrOfTriples>
			}
			break;
    16b0:	05 c0       	rjmp	.+10     	; 0x16bc <Init+0x482>
			case TELCO:
			{
				// Telco Module
				NrOfTelcos++;
    16b2:	90 91 70 24 	lds	r25, 0x2470	; 0x802470 <NrOfTelcos>
    16b6:	9f 5f       	subi	r25, 0xFF	; 255
    16b8:	90 93 70 24 	sts	0x2470, r25	; 0x802470 <NrOfTelcos>

	SetConsoleData();


	// Determine Nr Of Modules and Telco's
	for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    16bc:	8f 5f       	subi	r24, 0xFF	; 255
    16be:	80 31       	cpi	r24, 0x10	; 16
    16c0:	40 f3       	brcs	.-48     	; 0x1692 <Init+0x458>
		//PCON |= 0x10;
		//T3 = 0;
	}
		
	/* Set display */
	SetLCD(0,"\x80");
    16c2:	61 e5       	ldi	r22, 0x51	; 81
    16c4:	70 e2       	ldi	r23, 0x20	; 32
    16c6:	80 e0       	ldi	r24, 0x00	; 0
    16c8:	90 e0       	ldi	r25, 0x00	; 0
    16ca:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	SetLCD(1,"   D&R Airlab   ");
    16ce:	6e e1       	ldi	r22, 0x1E	; 30
    16d0:	70 e2       	ldi	r23, 0x20	; 32
    16d2:	81 e0       	ldi	r24, 0x01	; 1
    16d4:	90 e0       	ldi	r25, 0x00	; 0
    16d6:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	ShowConfig();
    16da:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <ShowConfig>
	
	Delay(1000);
    16de:	88 ee       	ldi	r24, 0xE8	; 232
    16e0:	93 e0       	ldi	r25, 0x03	; 3
    16e2:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>
	
	
	PORTD_OUTCLR = 0x01;
    16e6:	e6 e6       	ldi	r30, 0x66	; 102
    16e8:	f6 e0       	ldi	r31, 0x06	; 6
    16ea:	81 e0       	ldi	r24, 0x01	; 1
    16ec:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x02;
    16ee:	82 e0       	ldi	r24, 0x02	; 2
    16f0:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x04;
    16f2:	84 e0       	ldi	r24, 0x04	; 4
    16f4:	80 83       	st	Z, r24
	PORTD_OUTCLR = 0x08;
    16f6:	88 e0       	ldi	r24, 0x08	; 8
    16f8:	80 83       	st	Z, r24
	PORTD_OUTSET = 0x10;
    16fa:	80 e1       	ldi	r24, 0x10	; 16
    16fc:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x7de665>

	if ((PORTC_IN&0x43)==0x00)
    1700:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x7de648>
    1704:	83 74       	andi	r24, 0x43	; 67
    1706:	79 f4       	brne	.+30     	; 0x1726 <Init+0x4ec>
	{
		ConsoleMasterSettings[4] = 0x01;
    1708:	81 e0       	ldi	r24, 0x01	; 1
    170a:	80 93 3f 29 	sts	0x293F, r24	; 0x80293f <ConsoleMasterSettings+0x4>
		SetLCD(0,"\xC0");
    170e:	6f e2       	ldi	r22, 0x2F	; 47
    1710:	70 e2       	ldi	r23, 0x20	; 32
    1712:	80 e0       	ldi	r24, 0x00	; 0
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
		SetLCD(1,"Security off    ");
    171a:	63 e5       	ldi	r22, 0x53	; 83
    171c:	70 e2       	ldi	r23, 0x20	; 32
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	90 e0       	ldi	r25, 0x00	; 0
    1722:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	}
	
	Delay(50);
    1726:	82 e3       	ldi	r24, 0x32	; 50
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>
	SetLCD(0,"\x80");
    172e:	61 e5       	ldi	r22, 0x51	; 81
    1730:	70 e2       	ldi	r23, 0x20	; 32
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	SetLCD(1,"                ");
    173a:	64 e6       	ldi	r22, 0x64	; 100
    173c:	70 e2       	ldi	r23, 0x20	; 32
    173e:	81 e0       	ldi	r24, 0x01	; 1
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	SetLCD(0,"\xC0");
    1746:	6f e2       	ldi	r22, 0x2F	; 47
    1748:	70 e2       	ldi	r23, 0x20	; 32
    174a:	80 e0       	ldi	r24, 0x00	; 0
    174c:	90 e0       	ldi	r25, 0x00	; 0
    174e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	SetLCD(1,TextString[TextStringPtr]);
    1752:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    1756:	81 e1       	ldi	r24, 0x11	; 17
    1758:	68 9f       	mul	r22, r24
    175a:	b0 01       	movw	r22, r0
    175c:	11 24       	eor	r1, r1
    175e:	60 51       	subi	r22, 0x10	; 16
    1760:	7c 4d       	sbci	r23, 0xDC	; 220
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>





}
    176a:	df 91       	pop	r29
    176c:	cf 91       	pop	r28
    176e:	1f 91       	pop	r17
    1770:	0f 91       	pop	r16
    1772:	08 95       	ret

00001774 <main>:
//*****************************************************************************************************************************
//*****************************************************************************************************************************
//*****************************************************************************************************************************
//*****************************************************************************************************************************
int	main (void)
{	
    1774:	cf 93       	push	r28
    1776:	df 93       	push	r29
    1778:	cd b7       	in	r28, 0x3d	; 61
    177a:	de b7       	in	r29, 0x3e	; 62
    177c:	29 97       	sbiw	r28, 0x09	; 9
    177e:	cd bf       	out	0x3d, r28	; 61
    1780:	de bf       	out	0x3e, r29	; 62
	char TextBuffer[9];
	
	Init();
    1782:	0e 94 1d 09 	call	0x123a	; 0x123a <Init>
				//}
			//}
		//}
	//}

	TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    1786:	ea e9       	ldi	r30, 0x9A	; 154
    1788:	f1 e3       	ldi	r31, 0x31	; 49
    178a:	23 81       	ldd	r18, Z+3	; 0x03
    178c:	8d ec       	ldi	r24, 0xCD	; 205
    178e:	28 9f       	mul	r18, r24
    1790:	91 2d       	mov	r25, r1
    1792:	11 24       	eor	r1, r1
    1794:	96 95       	lsr	r25
    1796:	96 95       	lsr	r25
    1798:	96 95       	lsr	r25
    179a:	30 e3       	ldi	r19, 0x30	; 48
    179c:	39 0f       	add	r19, r25
    179e:	39 83       	std	Y+1, r19	; 0x01
	TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    17a0:	99 0f       	add	r25, r25
    17a2:	39 2f       	mov	r19, r25
    17a4:	33 0f       	add	r19, r19
    17a6:	33 0f       	add	r19, r19
    17a8:	93 0f       	add	r25, r19
    17aa:	29 1b       	sub	r18, r25
    17ac:	92 2f       	mov	r25, r18
    17ae:	90 5d       	subi	r25, 0xD0	; 208
    17b0:	9a 83       	std	Y+2, r25	; 0x02
	TextBuffer[2] = ':';
    17b2:	4a e3       	ldi	r20, 0x3A	; 58
    17b4:	4b 83       	std	Y+3, r20	; 0x03
	TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    17b6:	22 81       	ldd	r18, Z+2	; 0x02
    17b8:	28 9f       	mul	r18, r24
    17ba:	91 2d       	mov	r25, r1
    17bc:	11 24       	eor	r1, r1
    17be:	96 95       	lsr	r25
    17c0:	96 95       	lsr	r25
    17c2:	96 95       	lsr	r25
    17c4:	30 e3       	ldi	r19, 0x30	; 48
    17c6:	39 0f       	add	r19, r25
    17c8:	3c 83       	std	Y+4, r19	; 0x04
	TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    17ca:	99 0f       	add	r25, r25
    17cc:	39 2f       	mov	r19, r25
    17ce:	33 0f       	add	r19, r19
    17d0:	33 0f       	add	r19, r19
    17d2:	93 0f       	add	r25, r19
    17d4:	29 1b       	sub	r18, r25
    17d6:	92 2f       	mov	r25, r18
    17d8:	90 5d       	subi	r25, 0xD0	; 208
    17da:	9d 83       	std	Y+5, r25	; 0x05
	TextBuffer[5] = ':';
    17dc:	4e 83       	std	Y+6, r20	; 0x06
	TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    17de:	91 81       	ldd	r25, Z+1	; 0x01
    17e0:	98 9f       	mul	r25, r24
    17e2:	81 2d       	mov	r24, r1
    17e4:	11 24       	eor	r1, r1
    17e6:	86 95       	lsr	r24
    17e8:	86 95       	lsr	r24
    17ea:	86 95       	lsr	r24
    17ec:	20 e3       	ldi	r18, 0x30	; 48
    17ee:	28 0f       	add	r18, r24
    17f0:	2f 83       	std	Y+7, r18	; 0x07
	TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    17f2:	88 0f       	add	r24, r24
    17f4:	28 2f       	mov	r18, r24
    17f6:	22 0f       	add	r18, r18
    17f8:	22 0f       	add	r18, r18
    17fa:	82 0f       	add	r24, r18
    17fc:	98 1b       	sub	r25, r24
    17fe:	89 2f       	mov	r24, r25
    1800:	80 5d       	subi	r24, 0xD0	; 208
    1802:	88 87       	std	Y+8, r24	; 0x08

	SetLCD(0,"\x84");
    1804:	65 e7       	ldi	r22, 0x75	; 117
    1806:	70 e2       	ldi	r23, 0x20	; 32
    1808:	80 e0       	ldi	r24, 0x00	; 0
    180a:	90 e0       	ldi	r25, 0x00	; 0
    180c:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	TextBuffer[8] = 0;
    1810:	19 86       	std	Y+9, r1	; 0x09
	SetLCD(1,TextBuffer);
    1812:	be 01       	movw	r22, r28
    1814:	6f 5f       	subi	r22, 0xFF	; 255
    1816:	7f 4f       	sbci	r23, 0xFF	; 255
    1818:	81 e0       	ldi	r24, 0x01	; 1
    181a:	90 e0       	ldi	r25, 0x00	; 0
    181c:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

					
	unsigned char cntByte, cntChannel;				
										
	// MASTERSETUPDATA
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
    1820:	10 92 40 29 	sts	0x2940, r1	; 0x802940 <SerialBufferOutPtrBottom>
    1824:	10 92 ee 22 	sts	0x22EE, r1	; 0x8022ee <SerialBufferInPtrBottom>
    1828:	10 92 99 31 	sts	0x3199, r1	; 0x803199 <SerialBufferInPtrTop>
														
	SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    182c:	e2 e7       	ldi	r30, 0x72	; 114
    182e:	f5 e2       	ldi	r31, 0x25	; 37
    1830:	84 e9       	ldi	r24, 0x94	; 148
    1832:	80 83       	st	Z, r24
	SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    1834:	82 e0       	ldi	r24, 0x02	; 2
    1836:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    183a:	11 82       	std	Z+1, r1	; 0x01
										
	for (cntByte=0; cntByte<5; cntByte++)
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	11 c0       	rjmp	.+34     	; 0x1862 <main+0xee>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    1840:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    1844:	91 e0       	ldi	r25, 0x01	; 1
    1846:	9e 0f       	add	r25, r30
    1848:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    184c:	f0 e0       	ldi	r31, 0x00	; 0
    184e:	a8 2f       	mov	r26, r24
    1850:	b0 e0       	ldi	r27, 0x00	; 0
    1852:	a5 5c       	subi	r26, 0xC5	; 197
    1854:	b6 4d       	sbci	r27, 0xD6	; 214
    1856:	9c 91       	ld	r25, X
    1858:	ee 58       	subi	r30, 0x8E	; 142
    185a:	fa 4d       	sbci	r31, 0xDA	; 218
    185c:	9f 77       	andi	r25, 0x7F	; 127
    185e:	90 83       	st	Z, r25
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
														
	SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
	SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
										
	for (cntByte=0; cntByte<5; cntByte++)
    1860:	8f 5f       	subi	r24, 0xFF	; 255
    1862:	85 30       	cpi	r24, 0x05	; 5
    1864:	68 f3       	brcs	.-38     	; 0x1840 <main+0xcc>
	{
		SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
	}

	if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    1866:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    186a:	88 23       	and	r24, r24
    186c:	69 f0       	breq	.+26     	; 0x1888 <main+0x114>
    186e:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <SendSerialReady>
    1872:	88 23       	and	r24, r24
    1874:	49 f0       	breq	.+18     	; 0x1888 <main+0x114>
	{
		USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    1876:	81 e0       	ldi	r24, 0x01	; 1
    1878:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <SerialBufferOutPtrBottom>
    187c:	80 91 72 25 	lds	r24, 0x2572	; 0x802572 <SerialBufferOut>
    1880:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
		SendSerialReady = 0;
    1884:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <SendSerialReady>
	}


					
	Delay(100);
    1888:	84 e6       	ldi	r24, 0x64	; 100
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>
	//cntChannel=0;
		
	// MODULESETDATA
	for (cntChannel=0; cntChannel<16; cntChannel++)
    1890:	20 e0       	ldi	r18, 0x00	; 0
    1892:	46 c0       	rjmp	.+140    	; 0x1920 <main+0x1ac>
	{
		//if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
		//{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    1894:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    1898:	e1 e0       	ldi	r30, 0x01	; 1
    189a:	ea 0f       	add	r30, r26
    189c:	b0 e0       	ldi	r27, 0x00	; 0
    189e:	ae 58       	subi	r26, 0x8E	; 142
    18a0:	ba 4d       	sbci	r27, 0xDA	; 218
    18a2:	83 e9       	ldi	r24, 0x93	; 147
    18a4:	8c 93       	st	X, r24
		SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    18a6:	81 e0       	ldi	r24, 0x01	; 1
    18a8:	8e 0f       	add	r24, r30
    18aa:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	ee 58       	subi	r30, 0x8E	; 142
    18b2:	fa 4d       	sbci	r31, 0xDA	; 218
    18b4:	20 83       	st	Z, r18
						
		for (cntByte=0; cntByte<29; cntByte++)
    18b6:	90 e0       	ldi	r25, 0x00	; 0
    18b8:	16 c0       	rjmp	.+44     	; 0x18e6 <main+0x172>
		{
			ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
    18ba:	8d e1       	ldi	r24, 0x1D	; 29
    18bc:	28 9f       	mul	r18, r24
    18be:	f0 01       	movw	r30, r0
    18c0:	11 24       	eor	r1, r1
    18c2:	e1 56       	subi	r30, 0x61	; 97
    18c4:	f0 4d       	sbci	r31, 0xD0	; 208
    18c6:	e9 0f       	add	r30, r25
    18c8:	f1 1d       	adc	r31, r1
    18ca:	80 81       	ld	r24, Z
    18cc:	81 70       	andi	r24, 0x01	; 1
    18ce:	80 83       	st	Z, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
    18d0:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    18d4:	31 e0       	ldi	r19, 0x01	; 1
    18d6:	3e 0f       	add	r19, r30
    18d8:	30 93 4c 24 	sts	0x244C, r19	; 0x80244c <SerialBufferOutPtrTop>
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	ee 58       	subi	r30, 0x8E	; 142
    18e0:	fa 4d       	sbci	r31, 0xDA	; 218
    18e2:	80 83       	st	Z, r24
		//if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
		//{
		SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
		SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
						
		for (cntByte=0; cntByte<29; cntByte++)
    18e4:	9f 5f       	subi	r25, 0xFF	; 255
    18e6:	9d 31       	cpi	r25, 0x1D	; 29
    18e8:	40 f3       	brcs	.-48     	; 0x18ba <main+0x146>
		{
			ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
			SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
		}
		//}
		if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    18ea:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    18ee:	e0 91 40 29 	lds	r30, 0x2940	; 0x802940 <SerialBufferOutPtrBottom>
    18f2:	8e 17       	cp	r24, r30
    18f4:	81 f0       	breq	.+32     	; 0x1916 <main+0x1a2>
    18f6:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <SendSerialReady>
    18fa:	88 23       	and	r24, r24
    18fc:	61 f0       	breq	.+24     	; 0x1916 <main+0x1a2>
		{
			USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    18fe:	81 e0       	ldi	r24, 0x01	; 1
    1900:	8e 0f       	add	r24, r30
    1902:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <SerialBufferOutPtrBottom>
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	ee 58       	subi	r30, 0x8E	; 142
    190a:	fa 4d       	sbci	r31, 0xDA	; 218
    190c:	80 81       	ld	r24, Z
    190e:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
			SendSerialReady = 0;
    1912:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <SendSerialReady>
		}
		while(SendSerialReady);
    1916:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <SendSerialReady>
    191a:	81 11       	cpse	r24, r1
    191c:	fc cf       	rjmp	.-8      	; 0x1916 <main+0x1a2>
					
	Delay(100);
	//cntChannel=0;
		
	// MODULESETDATA
	for (cntChannel=0; cntChannel<16; cntChannel++)
    191e:	2f 5f       	subi	r18, 0xFF	; 255
    1920:	20 31       	cpi	r18, 0x10	; 16
    1922:	08 f4       	brcc	.+2      	; 0x1926 <main+0x1b2>
    1924:	b7 cf       	rjmp	.-146    	; 0x1894 <main+0x120>
			SendSerialReady = 0;
		}
		while(SendSerialReady);
	}
									
	Delay(10);
    1926:	8a e0       	ldi	r24, 0x0A	; 10
    1928:	90 e0       	ldi	r25, 0x00	; 0
    192a:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>
// ************** WHILE(1) ************* ************** WHILE(1) ************* ************** WHILE(1) *************

	//SerialBufferOutPtrTop = 1;  // Dit schijnt belangrijk te zijn
	//SerialBufferOutPtrBottom = 2;  // buffers moeten opeen volgend zijn !!!  0-1  1-2  2-3 enz.
	
	SerialBufferInPtrTop = SerialBufferInPtrBottom = SerialBufferOutPtrTop = SerialBufferOutPtrBottom = 0;
    192e:	10 92 40 29 	sts	0x2940, r1	; 0x802940 <SerialBufferOutPtrBottom>
    1932:	10 92 4c 24 	sts	0x244C, r1	; 0x80244c <SerialBufferOutPtrTop>
    1936:	10 92 ee 22 	sts	0x22EE, r1	; 0x8022ee <SerialBufferInPtrBottom>
    193a:	10 92 99 31 	sts	0x3199, r1	; 0x803199 <SerialBufferInPtrTop>
	
	while(1)
	{
		unsigned char cnt;

		for (cnt=0; cnt<NROFMODULES; cnt++)
    193e:	f1 2c       	mov	r15, r1
    1940:	79 c0       	rjmp	.+242    	; 0x1a34 <main+0x2c0>
		{
			if (cntStartPuls[cnt])
    1942:	0f 2d       	mov	r16, r15
    1944:	10 e0       	ldi	r17, 0x00	; 0
    1946:	f8 01       	movw	r30, r16
    1948:	e1 59       	subi	r30, 0x91	; 145
    194a:	fe 4c       	sbci	r31, 0xCE	; 206
    194c:	80 81       	ld	r24, Z
    194e:	88 23       	and	r24, r24
    1950:	81 f0       	breq	.+32     	; 0x1972 <main+0x1fe>
			{
				cntStartPuls[cnt]--;
    1952:	81 50       	subi	r24, 0x01	; 1
    1954:	f8 01       	movw	r30, r16
    1956:	e1 59       	subi	r30, 0x91	; 145
    1958:	fe 4c       	sbci	r31, 0xCE	; 206
    195a:	80 83       	st	Z, r24
				if (cntStartPuls[cnt]==0)
    195c:	81 11       	cpse	r24, r1
    195e:	09 c0       	rjmp	.+18     	; 0x1972 <main+0x1fe>
				{
					ConsoleFunctionData[cnt] &= START_FUNCTION^0xFF;
    1960:	f8 01       	movw	r30, r16
    1962:	e3 5b       	subi	r30, 0xB3	; 179
    1964:	fb 4d       	sbci	r31, 0xDB	; 219
    1966:	80 81       	ld	r24, Z
    1968:	8d 7f       	andi	r24, 0xFD	; 253
    196a:	80 83       	st	Z, r24
					SendSerialData = 1;
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
				}
			}

			if (cntStartFunction[cnt])
    1972:	f8 01       	movw	r30, r16
    1974:	e1 5a       	subi	r30, 0xA1	; 161
    1976:	fb 4d       	sbci	r31, 0xDB	; 219
    1978:	80 81       	ld	r24, Z
    197a:	88 23       	and	r24, r24
    197c:	81 f0       	breq	.+32     	; 0x199e <main+0x22a>
			{
				cntStartFunction[cnt]--;
    197e:	81 50       	subi	r24, 0x01	; 1
    1980:	f8 01       	movw	r30, r16
    1982:	e1 5a       	subi	r30, 0xA1	; 161
    1984:	fb 4d       	sbci	r31, 0xDB	; 219
    1986:	80 83       	st	Z, r24
				if (cntStartFunction[cnt]==0)
    1988:	81 11       	cpse	r24, r1
    198a:	09 c0       	rjmp	.+18     	; 0x199e <main+0x22a>
				{
					ConsoleFunctionData[cnt] &= START_FUNCTION^0xFF;
    198c:	f8 01       	movw	r30, r16
    198e:	e3 5b       	subi	r30, 0xB3	; 179
    1990:	fb 4d       	sbci	r31, 0xDB	; 219
    1992:	80 81       	ld	r24, Z
    1994:	8d 7f       	andi	r24, 0xFD	; 253
    1996:	80 83       	st	Z, r24
					SendSerialData = 1;
    1998:	81 e0       	ldi	r24, 0x01	; 1
    199a:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
				}
			}
			if (cntCueFunction[cnt])
    199e:	f8 01       	movw	r30, r16
    19a0:	e3 52       	subi	r30, 0x23	; 35
    19a2:	fd 4d       	sbci	r31, 0xDD	; 221
    19a4:	80 81       	ld	r24, Z
    19a6:	88 23       	and	r24, r24
    19a8:	91 f0       	breq	.+36     	; 0x19ce <main+0x25a>
			{
				cntCueFunction[cnt]--;
    19aa:	81 50       	subi	r24, 0x01	; 1
    19ac:	f8 01       	movw	r30, r16
    19ae:	e3 52       	subi	r30, 0x23	; 35
    19b0:	fd 4d       	sbci	r31, 0xDD	; 221
    19b2:	80 83       	st	Z, r24
				if (cntCueFunction[cnt]==0)
    19b4:	81 11       	cpse	r24, r1
    19b6:	0b c0       	rjmp	.+22     	; 0x19ce <main+0x25a>
				{
					ConsoleFunctionData[cnt] |= CUE_FUNCTION;
    19b8:	f8 01       	movw	r30, r16
    19ba:	e3 5b       	subi	r30, 0xB3	; 179
    19bc:	fb 4d       	sbci	r31, 0xDB	; 219
    19be:	80 81       	ld	r24, Z
    19c0:	84 60       	ori	r24, 0x04	; 4
    19c2:	80 83       	st	Z, r24
					CueControl();
    19c4:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
					SendSerialData = 1;
    19c8:	81 e0       	ldi	r24, 0x01	; 1
    19ca:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
				}
			}
			if (cntMuteFunction[cnt])
    19ce:	f8 01       	movw	r30, r16
    19d0:	e2 5c       	subi	r30, 0xC2	; 194
    19d2:	f4 4d       	sbci	r31, 0xD4	; 212
    19d4:	80 81       	ld	r24, Z
    19d6:	88 23       	and	r24, r24
    19d8:	61 f1       	breq	.+88     	; 0x1a32 <main+0x2be>
			{
				cntMuteFunction[cnt]--;
    19da:	81 50       	subi	r24, 0x01	; 1
    19dc:	f8 01       	movw	r30, r16
    19de:	e2 5c       	subi	r30, 0xC2	; 194
    19e0:	f4 4d       	sbci	r31, 0xD4	; 212
    19e2:	80 83       	st	Z, r24
				if (cntMuteFunction[cnt]==0)
    19e4:	81 11       	cpse	r24, r1
    19e6:	25 c0       	rjmp	.+74     	; 0x1a32 <main+0x2be>
				{
					char TelcoNr = GetTelcoNrFromModuleNr(cnt);
    19e8:	8f 2d       	mov	r24, r15
    19ea:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>

					ConsoleFunctionData[cnt] &= MUTE_FUNCTION^0xFF;
    19ee:	f8 01       	movw	r30, r16
    19f0:	e3 5b       	subi	r30, 0xB3	; 179
    19f2:	fb 4d       	sbci	r31, 0xDB	; 219
    19f4:	90 81       	ld	r25, Z
    19f6:	9f 7e       	andi	r25, 0xEF	; 239
    19f8:	90 83       	st	Z, r25

					if ((TelcoNr>=0) && (TelcoNr<4))
    19fa:	84 30       	cpi	r24, 0x04	; 4
    19fc:	b8 f4       	brcc	.+46     	; 0x1a2c <main+0x2b8>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    19fe:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    1a02:	a1 e0       	ldi	r26, 0x01	; 1
    1a04:	ae 0f       	add	r26, r30
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	ee 58       	subi	r30, 0x8E	; 142
    1a0a:	fa 4d       	sbci	r31, 0xDA	; 218
    1a0c:	93 ec       	ldi	r25, 0xC3	; 195
    1a0e:	90 83       	st	Z, r25
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    1a10:	e1 e0       	ldi	r30, 0x01	; 1
    1a12:	ea 0f       	add	r30, r26
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	ae 58       	subi	r26, 0x8E	; 142
    1a18:	ba 4d       	sbci	r27, 0xDA	; 218
    1a1a:	8c 93       	st	X, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    1a1c:	81 e0       	ldi	r24, 0x01	; 1
    1a1e:	8e 0f       	add	r24, r30
    1a20:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    1a24:	f0 e0       	ldi	r31, 0x00	; 0
    1a26:	ee 58       	subi	r30, 0x8E	; 142
    1a28:	fa 4d       	sbci	r31, 0xDA	; 218
    1a2a:	10 82       	st	Z, r1
					}

					SendSerialData = 1;
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
	
	while(1)
	{
		unsigned char cnt;

		for (cnt=0; cnt<NROFMODULES; cnt++)
    1a32:	f3 94       	inc	r15
    1a34:	ef e0       	ldi	r30, 0x0F	; 15
    1a36:	ef 15       	cp	r30, r15
    1a38:	08 f0       	brcs	.+2      	; 0x1a3c <main+0x2c8>
    1a3a:	83 cf       	rjmp	.-250    	; 0x1942 <main+0x1ce>
					SendSerialData = 1;
				}
			}
		}
				
		if (SendSerialData)
    1a3c:	80 91 39 24 	lds	r24, 0x2439	; 0x802439 <SendSerialData>
    1a40:	88 23       	and	r24, r24
    1a42:	21 f0       	breq	.+8      	; 0x1a4c <main+0x2d8>
		{
			SendSerialData = 0;
    1a44:	10 92 39 24 	sts	0x2439, r1	; 0x802439 <SendSerialData>
			SetConsoleData();
    1a48:	0e 94 a2 07 	call	0xf44	; 0xf44 <SetConsoleData>
		}
		
		if ((TimeAndDate.Seconds != OldTimeAndDate.Seconds) ) //&& (OperatingMode==NORMALMODE))
    1a4c:	90 91 9b 31 	lds	r25, 0x319B	; 0x80319b <TimeAndDate+0x1>
    1a50:	80 91 a1 31 	lds	r24, 0x31A1	; 0x8031a1 <OldTimeAndDate+0x1>
    1a54:	98 17       	cp	r25, r24
    1a56:	09 f4       	brne	.+2      	; 0x1a5a <main+0x2e6>
    1a58:	4e c0       	rjmp	.+156    	; 0x1af6 <main+0x382>
		{		
			TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    1a5a:	0a e9       	ldi	r16, 0x9A	; 154
    1a5c:	11 e3       	ldi	r17, 0x31	; 49
    1a5e:	f8 01       	movw	r30, r16
    1a60:	33 81       	ldd	r19, Z+3	; 0x03
    1a62:	8d ec       	ldi	r24, 0xCD	; 205
    1a64:	38 9f       	mul	r19, r24
    1a66:	21 2d       	mov	r18, r1
    1a68:	11 24       	eor	r1, r1
    1a6a:	26 95       	lsr	r18
    1a6c:	26 95       	lsr	r18
    1a6e:	26 95       	lsr	r18
    1a70:	40 e3       	ldi	r20, 0x30	; 48
    1a72:	42 0f       	add	r20, r18
    1a74:	49 83       	std	Y+1, r20	; 0x01
			TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    1a76:	22 0f       	add	r18, r18
    1a78:	42 2f       	mov	r20, r18
    1a7a:	44 0f       	add	r20, r20
    1a7c:	44 0f       	add	r20, r20
    1a7e:	24 0f       	add	r18, r20
    1a80:	32 1b       	sub	r19, r18
    1a82:	30 5d       	subi	r19, 0xD0	; 208
    1a84:	3a 83       	std	Y+2, r19	; 0x02
			TextBuffer[2] = ':';
    1a86:	5a e3       	ldi	r21, 0x3A	; 58
    1a88:	5b 83       	std	Y+3, r21	; 0x03
			TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    1a8a:	32 81       	ldd	r19, Z+2	; 0x02
    1a8c:	38 9f       	mul	r19, r24
    1a8e:	21 2d       	mov	r18, r1
    1a90:	11 24       	eor	r1, r1
    1a92:	26 95       	lsr	r18
    1a94:	26 95       	lsr	r18
    1a96:	26 95       	lsr	r18
    1a98:	40 e3       	ldi	r20, 0x30	; 48
    1a9a:	42 0f       	add	r20, r18
    1a9c:	4c 83       	std	Y+4, r20	; 0x04
			TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    1a9e:	22 0f       	add	r18, r18
    1aa0:	42 2f       	mov	r20, r18
    1aa2:	44 0f       	add	r20, r20
    1aa4:	44 0f       	add	r20, r20
    1aa6:	24 0f       	add	r18, r20
    1aa8:	32 1b       	sub	r19, r18
    1aaa:	30 5d       	subi	r19, 0xD0	; 208
    1aac:	3d 83       	std	Y+5, r19	; 0x05
			TextBuffer[5] = ':';
    1aae:	5e 83       	std	Y+6, r21	; 0x06
			TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    1ab0:	98 9f       	mul	r25, r24
    1ab2:	81 2d       	mov	r24, r1
    1ab4:	11 24       	eor	r1, r1
    1ab6:	86 95       	lsr	r24
    1ab8:	86 95       	lsr	r24
    1aba:	86 95       	lsr	r24
    1abc:	20 e3       	ldi	r18, 0x30	; 48
    1abe:	28 0f       	add	r18, r24
    1ac0:	2f 83       	std	Y+7, r18	; 0x07
			TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    1ac2:	88 0f       	add	r24, r24
    1ac4:	28 2f       	mov	r18, r24
    1ac6:	22 0f       	add	r18, r18
    1ac8:	22 0f       	add	r18, r18
    1aca:	82 0f       	add	r24, r18
    1acc:	98 1b       	sub	r25, r24
    1ace:	90 5d       	subi	r25, 0xD0	; 208
    1ad0:	98 87       	std	Y+8, r25	; 0x08
			TextBuffer[8] = 0;
    1ad2:	19 86       	std	Y+9, r1	; 0x09
			
			SetLCD(0,"\x84");
    1ad4:	65 e7       	ldi	r22, 0x75	; 117
    1ad6:	70 e2       	ldi	r23, 0x20	; 32
    1ad8:	80 e0       	ldi	r24, 0x00	; 0
    1ada:	90 e0       	ldi	r25, 0x00	; 0
    1adc:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
			SetLCD(1,TextBuffer);
    1ae0:	be 01       	movw	r22, r28
    1ae2:	6f 5f       	subi	r22, 0xFF	; 255
    1ae4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae6:	81 e0       	ldi	r24, 0x01	; 1
    1ae8:	90 e0       	ldi	r25, 0x00	; 0
    1aea:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
			OldTimeAndDate.Seconds = TimeAndDate.Seconds;		
    1aee:	f8 01       	movw	r30, r16
    1af0:	81 81       	ldd	r24, Z+1	; 0x01
    1af2:	80 93 a1 31 	sts	0x31A1, r24	; 0x8031a1 <OldTimeAndDate+0x1>
		}
		
		ReadConsole();
    1af6:	0e 94 d8 25 	call	0x4bb0	; 0x4bb0 <ReadConsole>
		
		if (EventBufferPtrTop != EventBufferPtrBottom)
    1afa:	80 91 38 29 	lds	r24, 0x2938	; 0x802938 <EventBufferPtrTop>
    1afe:	e0 91 e8 20 	lds	r30, 0x20E8	; 0x8020e8 <__data_end>
    1b02:	8e 17       	cp	r24, r30
    1b04:	69 f0       	breq	.+26     	; 0x1b20 <main+0x3ac>
		{
			//USARTE0_DATA = EventBuffer[EventBufferPtrBottom];    // Aha hier weet je nu welke schakelaar er is ingedrukt
			DoEvent(EventBuffer[EventBufferPtrBottom++]);			
    1b06:	81 e0       	ldi	r24, 0x01	; 1
    1b08:	8e 0f       	add	r24, r30
    1b0a:	80 93 e8 20 	sts	0x20E8, r24	; 0x8020e8 <__data_end>
    1b0e:	f0 e0       	ldi	r31, 0x00	; 0
    1b10:	ee 0f       	add	r30, r30
    1b12:	ff 1f       	adc	r31, r31
    1b14:	e9 54       	subi	r30, 0x49	; 73
    1b16:	f9 4d       	sbci	r31, 0xD9	; 217
    1b18:	80 81       	ld	r24, Z
    1b1a:	91 81       	ldd	r25, Z+1	; 0x01
    1b1c:	0e 94 23 0e 	call	0x1c46	; 0x1c46 <DoEvent>
			//USARTE0_DATA =EventBufferPtrBottom;
			//EventBufferPtrBottom++;			
		}

		
		ConsoleMasterSettings[3]=1;  // is nodig zodat RS232 communicatie altijd mogelijk is
    1b20:	81 e0       	ldi	r24, 0x01	; 1
    1b22:	80 93 3e 29 	sts	0x293E, r24	; 0x80293e <ConsoleMasterSettings+0x3>

		if (ConsoleMasterSettings[3])
		{
			if (SerialBufferInPtrTop != SerialBufferInPtrBottom)
    1b26:	90 91 99 31 	lds	r25, 0x3199	; 0x803199 <SerialBufferInPtrTop>
    1b2a:	80 91 ee 22 	lds	r24, 0x22EE	; 0x8022ee <SerialBufferInPtrBottom>
    1b2e:	98 13       	cpse	r25, r24
						
			DoSerial();
    1b30:	0e 94 b1 26 	call	0x4d62	; 0x4d62 <DoSerial>

			if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom)  && SendSerialReady)
    1b34:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    1b38:	e0 91 40 29 	lds	r30, 0x2940	; 0x802940 <SerialBufferOutPtrBottom>
    1b3c:	8e 17       	cp	r24, r30
    1b3e:	09 f4       	brne	.+2      	; 0x1b42 <main+0x3ce>
    1b40:	fe ce       	rjmp	.-516    	; 0x193e <main+0x1ca>
    1b42:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <SendSerialReady>
    1b46:	88 23       	and	r24, r24
    1b48:	09 f4       	brne	.+2      	; 0x1b4c <main+0x3d8>
    1b4a:	f9 ce       	rjmp	.-526    	; 0x193e <main+0x1ca>
			//if(SendSerialReady)
			{
				
				USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];				
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	8e 0f       	add	r24, r30
    1b50:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <SerialBufferOutPtrBottom>
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	ee 58       	subi	r30, 0x8E	; 142
    1b58:	fa 4d       	sbci	r31, 0xDA	; 218
    1b5a:	80 81       	ld	r24, Z
    1b5c:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
				SendSerialReady = 0;
    1b60:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <SendSerialReady>
				while ( !( USARTE0.STATUS & USART_DREIF_bm) );
    1b64:	80 91 a1 0a 	lds	r24, 0x0AA1	; 0x800aa1 <__TEXT_REGION_LENGTH__+0x7deaa1>
    1b68:	85 ff       	sbrs	r24, 5
    1b6a:	fc cf       	rjmp	.-8      	; 0x1b64 <main+0x3f0>
    1b6c:	e8 ce       	rjmp	.-560    	; 0x193e <main+0x1ca>

00001b6e <SetupTimer0>:
struct TimeAndDateStruct OldTimeAndDate, TimeAndDate;


void SetupTimer0()
{	
	cli();
    1b6e:	f8 94       	cli

	// Clock source: ClkPer/4
	TCC0_CTRLA=TC_CLKSEL_DIV4_gc;
    1b70:	83 e0       	ldi	r24, 0x03	; 3
    1b72:	80 93 00 08 	sts	0x0800, r24	; 0x800800 <__TEXT_REGION_LENGTH__+0x7de800>
	//TCC0_CTRLA = 0x02;


	// Overflow interrupt: Low Level
	// Error interrupt: Disabled
	TCC0_INTCTRLA=TC_ERRINTLVL_OFF_gc | TC_OVFINTLVL_MED_gc;
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	80 93 06 08 	sts	0x0806, r24	; 0x800806 <__TEXT_REGION_LENGTH__+0x7de806>
	//TCC0_INTCTRLA = 0x02;
	
	
	// Set Period register
	TCC0_PER=0x5A5D;
    1b7c:	8d e5       	ldi	r24, 0x5D	; 93
    1b7e:	9a e5       	ldi	r25, 0x5A	; 90
    1b80:	80 93 26 08 	sts	0x0826, r24	; 0x800826 <__TEXT_REGION_LENGTH__+0x7de826>
    1b84:	90 93 27 08 	sts	0x0827, r25	; 0x800827 <__TEXT_REGION_LENGTH__+0x7de827>

	PMIC_CTRL |= 0x02;
    1b88:	e2 ea       	ldi	r30, 0xA2	; 162
    1b8a:	f0 e0       	ldi	r31, 0x00	; 0
    1b8c:	80 81       	ld	r24, Z
    1b8e:	82 60       	ori	r24, 0x02	; 2
    1b90:	80 83       	st	Z, r24
	
	sei();	
    1b92:	78 94       	sei
    1b94:	08 95       	ret

00001b96 <__vector_14>:
}

ISR(TCC0_OVF_vect) 
{
    1b96:	1f 92       	push	r1
    1b98:	0f 92       	push	r0
    1b9a:	0f b6       	in	r0, 0x3f	; 63
    1b9c:	0f 92       	push	r0
    1b9e:	11 24       	eor	r1, r1
    1ba0:	08 b6       	in	r0, 0x38	; 56
    1ba2:	0f 92       	push	r0
    1ba4:	18 be       	out	0x38, r1	; 56
    1ba6:	0b b6       	in	r0, 0x3b	; 59
    1ba8:	0f 92       	push	r0
    1baa:	1b be       	out	0x3b, r1	; 59
    1bac:	8f 93       	push	r24
    1bae:	ef 93       	push	r30
    1bb0:	ff 93       	push	r31

	//GlobalTimerActive=1;     // willem
	 Count++;
    1bb2:	80 91 9e 31 	lds	r24, 0x319E	; 0x80319e <Count>
    1bb6:	8f 5f       	subi	r24, 0xFF	; 255
    1bb8:	80 93 9e 31 	sts	0x319E, r24	; 0x80319e <Count>
	 if (Count>9) //Was before 10.
    1bbc:	8a 30       	cpi	r24, 0x0A	; 10
    1bbe:	10 f0       	brcs	.+4      	; 0x1bc4 <__vector_14+0x2e>
		 Count = 0;
    1bc0:	10 92 9e 31 	sts	0x319E, r1	; 0x80319e <Count>

	 if ((Count==0x00) && (GlobalTimerActive))
    1bc4:	80 91 9e 31 	lds	r24, 0x319E	; 0x80319e <Count>
    1bc8:	81 11       	cpse	r24, r1
    1bca:	1f c0       	rjmp	.+62     	; 0x1c0a <__vector_14+0x74>
    1bcc:	80 91 9f 31 	lds	r24, 0x319F	; 0x80319f <GlobalTimerActive>
    1bd0:	88 23       	and	r24, r24
    1bd2:	d9 f0       	breq	.+54     	; 0x1c0a <__vector_14+0x74>
	 {
		 	//PORTA_OUTTGL |= (1<<0);    // ----------------------------------------------------------------
		 	//PORTA_OUTTGL |= 0x80;
			TimeAndDate.Frames+=10;
    1bd4:	ea e9       	ldi	r30, 0x9A	; 154
    1bd6:	f1 e3       	ldi	r31, 0x31	; 49
    1bd8:	80 81       	ld	r24, Z
    1bda:	86 5f       	subi	r24, 0xF6	; 246
    1bdc:	80 83       	st	Z, r24
			
			if (TimeAndDate.Frames>90)
    1bde:	8b 35       	cpi	r24, 0x5B	; 91
    1be0:	a0 f0       	brcs	.+40     	; 0x1c0a <__vector_14+0x74>
			{


				TimeAndDate.Frames = 0;
    1be2:	10 82       	st	Z, r1
				TimeAndDate.Seconds++;
    1be4:	81 81       	ldd	r24, Z+1	; 0x01
    1be6:	8f 5f       	subi	r24, 0xFF	; 255
    1be8:	81 83       	std	Z+1, r24	; 0x01
				if (TimeAndDate.Seconds>59)
    1bea:	8c 33       	cpi	r24, 0x3C	; 60
    1bec:	70 f0       	brcs	.+28     	; 0x1c0a <__vector_14+0x74>
				{
					
					TimeAndDate.Seconds = 0;
    1bee:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Minutes++;
    1bf0:	82 81       	ldd	r24, Z+2	; 0x02
    1bf2:	8f 5f       	subi	r24, 0xFF	; 255
    1bf4:	82 83       	std	Z+2, r24	; 0x02
					if (TimeAndDate.Minutes>59)
    1bf6:	8c 33       	cpi	r24, 0x3C	; 60
    1bf8:	40 f0       	brcs	.+16     	; 0x1c0a <__vector_14+0x74>
					{
						TimeAndDate.Minutes = 0;
    1bfa:	12 82       	std	Z+2, r1	; 0x02
						TimeAndDate.Hours++;
    1bfc:	83 81       	ldd	r24, Z+3	; 0x03
    1bfe:	8f 5f       	subi	r24, 0xFF	; 255
    1c00:	83 83       	std	Z+3, r24	; 0x03
						if (TimeAndDate.Hours>23)
    1c02:	88 31       	cpi	r24, 0x18	; 24
    1c04:	10 f0       	brcs	.+4      	; 0x1c0a <__vector_14+0x74>
						{
							TimeAndDate.Hours = 0;
    1c06:	10 92 9d 31 	sts	0x319D, r1	; 0x80319d <TimeAndDate+0x3>
					}
				}
		 }
	}

    1c0a:	ff 91       	pop	r31
    1c0c:	ef 91       	pop	r30
    1c0e:	8f 91       	pop	r24
    1c10:	0f 90       	pop	r0
    1c12:	0b be       	out	0x3b, r0	; 59
    1c14:	0f 90       	pop	r0
    1c16:	08 be       	out	0x38, r0	; 56
    1c18:	0f 90       	pop	r0
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	0f 90       	pop	r0
    1c1e:	1f 90       	pop	r1
    1c20:	18 95       	reti

00001c22 <Delay>:
* delay(100) = ca. 1 Sec                                        *
****************************************************************/
void Delay(int tijd)
{
	int x, y;
	for (x = 1; x <= tijd; x++)
    1c22:	41 e0       	ldi	r20, 0x01	; 1
    1c24:	50 e0       	ldi	r21, 0x00	; 0
    1c26:	0b c0       	rjmp	.+22     	; 0x1c3e <Delay+0x1c>
	{
		for (y = 0; y <= 1000; y++)
    1c28:	2f 5f       	subi	r18, 0xFF	; 255
    1c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c2c:	02 c0       	rjmp	.+4      	; 0x1c32 <Delay+0x10>
    1c2e:	20 e0       	ldi	r18, 0x00	; 0
    1c30:	30 e0       	ldi	r19, 0x00	; 0
    1c32:	29 3e       	cpi	r18, 0xE9	; 233
    1c34:	63 e0       	ldi	r22, 0x03	; 3
    1c36:	36 07       	cpc	r19, r22
    1c38:	bc f3       	brlt	.-18     	; 0x1c28 <Delay+0x6>
* delay(100) = ca. 1 Sec                                        *
****************************************************************/
void Delay(int tijd)
{
	int x, y;
	for (x = 1; x <= tijd; x++)
    1c3a:	4f 5f       	subi	r20, 0xFF	; 255
    1c3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1c3e:	84 17       	cp	r24, r20
    1c40:	95 07       	cpc	r25, r21
    1c42:	ac f7       	brge	.-22     	; 0x1c2e <Delay+0xc>
			//PCON |= 0x10;
			//T3 = 0;
			;
		}
	}
    1c44:	08 95       	ret

00001c46 <DoEvent>:


//unsigned char  CS_CC;

void DoEvent(unsigned int Event)
{
    1c46:	8f 92       	push	r8
    1c48:	9f 92       	push	r9
    1c4a:	af 92       	push	r10
    1c4c:	bf 92       	push	r11
    1c4e:	cf 92       	push	r12
    1c50:	df 92       	push	r13
    1c52:	ef 92       	push	r14
    1c54:	ff 92       	push	r15
    1c56:	0f 93       	push	r16
    1c58:	1f 93       	push	r17
    1c5a:	cf 93       	push	r28
    1c5c:	df 93       	push	r29
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
    1c62:	61 97       	sbiw	r28, 0x11	; 17
    1c64:	cd bf       	out	0x3d, r28	; 61
    1c66:	de bf       	out	0x3e, r29	; 62
	unsigned char EventType = (Event&0x87);
    1c68:	28 2f       	mov	r18, r24
    1c6a:	27 78       	andi	r18, 0x87	; 135
	unsigned char Module = (Event>>3)&0x0F;
    1c6c:	ac 01       	movw	r20, r24
    1c6e:	56 95       	lsr	r21
    1c70:	47 95       	ror	r20
    1c72:	56 95       	lsr	r21
    1c74:	47 95       	ror	r20
    1c76:	56 95       	lsr	r21
    1c78:	47 95       	ror	r20
    1c7a:	34 2f       	mov	r19, r20
    1c7c:	3f 70       	andi	r19, 0x0F	; 15
    1c7e:	e3 2e       	mov	r14, r19
	unsigned char EventOn = !(Event&0x100);
    1c80:	8c 01       	movw	r16, r24
    1c82:	00 27       	eor	r16, r16
    1c84:	11 70       	andi	r17, 0x01	; 1
	
	if ((Event&0x287) == EXT_MUTE)
    1c86:	87 78       	andi	r24, 0x87	; 135
    1c88:	92 70       	andi	r25, 0x02	; 2
    1c8a:	87 38       	cpi	r24, 0x87	; 135
    1c8c:	92 40       	sbci	r25, 0x02	; 2
    1c8e:	09 f4       	brne	.+2      	; 0x1c92 <DoEvent+0x4c>
	{
		EventType = MUTE;
    1c90:	28 e8       	ldi	r18, 0x88	; 136
	}

	switch (EventType)
    1c92:	82 2f       	mov	r24, r18
    1c94:	90 e0       	ldi	r25, 0x00	; 0
    1c96:	89 38       	cpi	r24, 0x89	; 137
    1c98:	91 05       	cpc	r25, r1
    1c9a:	10 f0       	brcs	.+4      	; 0x1ca0 <DoEvent+0x5a>
    1c9c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
    1ca0:	fc 01       	movw	r30, r24
    1ca2:	88 27       	eor	r24, r24
    1ca4:	e2 50       	subi	r30, 0x02	; 2
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	8f 4f       	sbci	r24, 0xFF	; 255
    1caa:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__tablejump2__>
	{
		case EXTERNREMOTEIN:
		{
			if (OperatingMode != MODULEMODE)
    1cae:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <OperatingMode>
    1cb2:	81 30       	cpi	r24, 0x01	; 1
    1cb4:	11 f4       	brne	.+4      	; 0x1cba <DoEvent+0x74>
    1cb6:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			{
				switch (ModuleType[Module])
    1cba:	f1 2c       	mov	r15, r1
    1cbc:	f7 01       	movw	r30, r14
    1cbe:	e6 5c       	subi	r30, 0xC6	; 198
    1cc0:	fb 4d       	sbci	r31, 0xDB	; 219
    1cc2:	80 81       	ld	r24, Z
    1cc4:	81 30       	cpi	r24, 0x01	; 1
    1cc6:	29 f0       	breq	.+10     	; 0x1cd2 <DoEvent+0x8c>
    1cc8:	82 30       	cpi	r24, 0x02	; 2
    1cca:	09 f4       	brne	.+2      	; 0x1cce <DoEvent+0x88>
    1ccc:	4f c2       	rjmp	.+1182   	; 0x216c <__DATA_REGION_LENGTH__+0x16c>
    1cce:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
				{
					case TRIPLE:
					{ // TRIPLE
						if (EventOn)
    1cd2:	01 2b       	or	r16, r17
    1cd4:	09 f0       	breq	.+2      	; 0x1cd8 <DoEvent+0x92>
    1cd6:	aa c1       	rjmp	.+852    	; 0x202c <__DATA_REGION_LENGTH__+0x2c>
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    1cd8:	f7 01       	movw	r30, r14
    1cda:	ee 0f       	add	r30, r30
    1cdc:	ff 1f       	adc	r31, r31
    1cde:	ee 0f       	add	r30, r30
    1ce0:	ff 1f       	adc	r31, r31
    1ce2:	ee 0f       	add	r30, r30
    1ce4:	ff 1f       	adc	r31, r31
    1ce6:	e8 54       	subi	r30, 0x48	; 72
    1ce8:	f7 4d       	sbci	r31, 0xD7	; 215
    1cea:	87 81       	ldd	r24, Z+7	; 0x07
    1cec:	88 23       	and	r24, r24
    1cee:	0c f0       	brlt	.+2      	; 0x1cf2 <DoEvent+0xac>
    1cf0:	53 c0       	rjmp	.+166    	; 0x1d98 <DoEvent+0x152>
    1cf2:	8d e1       	ldi	r24, 0x1D	; 29
    1cf4:	8e 9d       	mul	r24, r14
    1cf6:	f0 01       	movw	r30, r0
    1cf8:	8f 9d       	mul	r24, r15
    1cfa:	f0 0d       	add	r31, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	e1 56       	subi	r30, 0x61	; 97
    1d00:	f0 4d       	sbci	r31, 0xD0	; 208
    1d02:	84 85       	ldd	r24, Z+12	; 0x0c
    1d04:	88 23       	and	r24, r24
    1d06:	09 f4       	brne	.+2      	; 0x1d0a <DoEvent+0xc4>
    1d08:	47 c0       	rjmp	.+142    	; 0x1d98 <DoEvent+0x152>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    1d0a:	0f 2e       	mov	r0, r31
    1d0c:	fd e4       	ldi	r31, 0x4D	; 77
    1d0e:	cf 2e       	mov	r12, r31
    1d10:	f4 e2       	ldi	r31, 0x24	; 36
    1d12:	df 2e       	mov	r13, r31
    1d14:	f0 2d       	mov	r31, r0
    1d16:	87 01       	movw	r16, r14
    1d18:	03 5b       	subi	r16, 0xB3	; 179
    1d1a:	1b 4d       	sbci	r17, 0xDB	; 219
    1d1c:	f8 01       	movw	r30, r16
    1d1e:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1d20:	8c 60       	ori	r24, 0x0C	; 12
    1d22:	80 83       	st	Z, r24
	
								//DJ-Control
								DJControl();
    1d24:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
	
								ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1d28:	f6 01       	movw	r30, r12
    1d2a:	80 89       	ldd	r24, Z+16	; 0x10
    1d2c:	87 7f       	andi	r24, 0xF7	; 247
    1d2e:	80 8b       	std	Z+16, r24	; 0x10
								if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1d30:	f8 01       	movw	r30, r16
    1d32:	90 81       	ld	r25, Z
    1d34:	90 ff       	sbrs	r25, 0
    1d36:	04 c0       	rjmp	.+8      	; 0x1d40 <DoEvent+0xfa>
									ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1d38:	f8 01       	movw	r30, r16
    1d3a:	90 61       	ori	r25, 0x10	; 16
    1d3c:	90 83       	st	Z, r25
    1d3e:	20 c0       	rjmp	.+64     	; 0x1d80 <DoEvent+0x13a>
								else if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1d40:	f7 01       	movw	r30, r14
    1d42:	ee 0f       	add	r30, r30
    1d44:	ff 1f       	adc	r31, r31
    1d46:	ee 0f       	add	r30, r30
    1d48:	ff 1f       	adc	r31, r31
    1d4a:	ee 0f       	add	r30, r30
    1d4c:	ff 1f       	adc	r31, r31
    1d4e:	e8 54       	subi	r30, 0x48	; 72
    1d50:	f7 4d       	sbci	r31, 0xD7	; 215
    1d52:	27 81       	ldd	r18, Z+7	; 0x07
    1d54:	22 23       	and	r18, r18
    1d56:	a4 f4       	brge	.+40     	; 0x1d80 <DoEvent+0x13a>
    1d58:	2d e1       	ldi	r18, 0x1D	; 29
    1d5a:	2e 9d       	mul	r18, r14
    1d5c:	f0 01       	movw	r30, r0
    1d5e:	2f 9d       	mul	r18, r15
    1d60:	f0 0d       	add	r31, r0
    1d62:	11 24       	eor	r1, r1
    1d64:	e1 56       	subi	r30, 0x61	; 97
    1d66:	f0 4d       	sbci	r31, 0xD0	; 208
    1d68:	26 85       	ldd	r18, Z+14	; 0x0e
    1d6a:	22 23       	and	r18, r18
    1d6c:	49 f0       	breq	.+18     	; 0x1d80 <DoEvent+0x13a>
    1d6e:	94 ff       	sbrs	r25, 4
    1d70:	07 c0       	rjmp	.+14     	; 0x1d80 <DoEvent+0x13a>
    1d72:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <ConsoleMasterSettings+0x2>
    1d76:	99 23       	and	r25, r25
    1d78:	19 f0       	breq	.+6      	; 0x1d80 <DoEvent+0x13a>
								{
									ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1d7a:	88 60       	ori	r24, 0x08	; 8
    1d7c:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <ConsoleFunctionData+0x10>
								}

								CUEByRemoteMIC[Module] = 1;
    1d80:	11 e0       	ldi	r17, 0x01	; 1
    1d82:	f7 01       	movw	r30, r14
    1d84:	ec 54       	subi	r30, 0x4C	; 76
    1d86:	f4 4d       	sbci	r31, 0xD4	; 212
    1d88:	10 83       	st	Z, r17
								CheckCUEByRemoteMIC();
    1d8a:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CheckCUEByRemoteMIC>
								CheckTBMic();
    1d8e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
								SendSerialData = 1;
    1d92:	10 93 39 24 	sts	0x2439, r17	; 0x802439 <SendSerialData>
    1d96:	c6 c0       	rjmp	.+396    	; 0x1f24 <DoEvent+0x2de>
							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    1d98:	f7 01       	movw	r30, r14
    1d9a:	ee 0f       	add	r30, r30
    1d9c:	ff 1f       	adc	r31, r31
    1d9e:	ee 0f       	add	r30, r30
    1da0:	ff 1f       	adc	r31, r31
    1da2:	ee 0f       	add	r30, r30
    1da4:	ff 1f       	adc	r31, r31
    1da6:	e8 54       	subi	r30, 0x48	; 72
    1da8:	f7 4d       	sbci	r31, 0xD7	; 215
    1daa:	86 81       	ldd	r24, Z+6	; 0x06
    1dac:	88 23       	and	r24, r24
    1dae:	0c f4       	brge	.+2      	; 0x1db2 <DoEvent+0x16c>
    1db0:	5c c0       	rjmp	.+184    	; 0x1e6a <DoEvent+0x224>
    1db2:	9d e1       	ldi	r25, 0x1D	; 29
    1db4:	9e 9d       	mul	r25, r14
    1db6:	f0 01       	movw	r30, r0
    1db8:	9f 9d       	mul	r25, r15
    1dba:	f0 0d       	add	r31, r0
    1dbc:	11 24       	eor	r1, r1
    1dbe:	e1 56       	subi	r30, 0x61	; 97
    1dc0:	f0 4d       	sbci	r31, 0xD0	; 208
    1dc2:	92 85       	ldd	r25, Z+10	; 0x0a
    1dc4:	99 23       	and	r25, r25
    1dc6:	09 f4       	brne	.+2      	; 0x1dca <DoEvent+0x184>
    1dc8:	50 c0       	rjmp	.+160    	; 0x1e6a <DoEvent+0x224>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    1dca:	f7 01       	movw	r30, r14
    1dcc:	e3 5b       	subi	r30, 0xB3	; 179
    1dce:	fb 4d       	sbci	r31, 0xDB	; 219
    1dd0:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1dd2:	8c 60       	ori	r24, 0x0C	; 12
    1dd4:	80 83       	st	Z, r24

								//DJ-Control
								DJControl();
    1dd6:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>

								if (ConsoleModuleSettings[Module][MICATLINEA])
    1dda:	8d e1       	ldi	r24, 0x1D	; 29
    1ddc:	8e 9d       	mul	r24, r14
    1dde:	f0 01       	movw	r30, r0
    1de0:	8f 9d       	mul	r24, r15
    1de2:	f0 0d       	add	r31, r0
    1de4:	11 24       	eor	r1, r1
    1de6:	e1 56       	subi	r30, 0x61	; 97
    1de8:	f0 4d       	sbci	r31, 0xD0	; 208
    1dea:	87 89       	ldd	r24, Z+23	; 0x17
    1dec:	88 23       	and	r24, r24
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <DoEvent+0x1ac>
    1df0:	99 c0       	rjmp	.+306    	; 0x1f24 <DoEvent+0x2de>
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1df2:	ed e4       	ldi	r30, 0x4D	; 77
    1df4:	f4 e2       	ldi	r31, 0x24	; 36
    1df6:	80 89       	ldd	r24, Z+16	; 0x10
    1df8:	87 7f       	andi	r24, 0xF7	; 247
    1dfa:	80 8b       	std	Z+16, r24	; 0x10
									if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1dfc:	f7 01       	movw	r30, r14
    1dfe:	e3 5b       	subi	r30, 0xB3	; 179
    1e00:	fb 4d       	sbci	r31, 0xDB	; 219
    1e02:	80 81       	ld	r24, Z
    1e04:	80 ff       	sbrs	r24, 0
    1e06:	05 c0       	rjmp	.+10     	; 0x1e12 <DoEvent+0x1cc>
										ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1e08:	f7 01       	movw	r30, r14
    1e0a:	e3 5b       	subi	r30, 0xB3	; 179
    1e0c:	fb 4d       	sbci	r31, 0xDB	; 219
    1e0e:	80 61       	ori	r24, 0x10	; 16
    1e10:	80 83       	st	Z, r24
									if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1e12:	f7 01       	movw	r30, r14
    1e14:	ee 0f       	add	r30, r30
    1e16:	ff 1f       	adc	r31, r31
    1e18:	ee 0f       	add	r30, r30
    1e1a:	ff 1f       	adc	r31, r31
    1e1c:	ee 0f       	add	r30, r30
    1e1e:	ff 1f       	adc	r31, r31
    1e20:	e8 54       	subi	r30, 0x48	; 72
    1e22:	f7 4d       	sbci	r31, 0xD7	; 215
    1e24:	86 81       	ldd	r24, Z+6	; 0x06
    1e26:	88 23       	and	r24, r24
    1e28:	d4 f0       	brlt	.+52     	; 0x1e5e <DoEvent+0x218>
    1e2a:	8d e1       	ldi	r24, 0x1D	; 29
    1e2c:	8e 9d       	mul	r24, r14
    1e2e:	f0 01       	movw	r30, r0
    1e30:	8f 9d       	mul	r24, r15
    1e32:	f0 0d       	add	r31, r0
    1e34:	11 24       	eor	r1, r1
    1e36:	e1 56       	subi	r30, 0x61	; 97
    1e38:	f0 4d       	sbci	r31, 0xD0	; 208
    1e3a:	86 85       	ldd	r24, Z+14	; 0x0e
    1e3c:	88 23       	and	r24, r24
    1e3e:	79 f0       	breq	.+30     	; 0x1e5e <DoEvent+0x218>
    1e40:	f7 01       	movw	r30, r14
    1e42:	e3 5b       	subi	r30, 0xB3	; 179
    1e44:	fb 4d       	sbci	r31, 0xDB	; 219
    1e46:	80 81       	ld	r24, Z
    1e48:	84 ff       	sbrs	r24, 4
    1e4a:	09 c0       	rjmp	.+18     	; 0x1e5e <DoEvent+0x218>
    1e4c:	80 91 3d 29 	lds	r24, 0x293D	; 0x80293d <ConsoleMasterSettings+0x2>
    1e50:	88 23       	and	r24, r24
    1e52:	29 f0       	breq	.+10     	; 0x1e5e <DoEvent+0x218>
									{
											ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1e54:	ed e4       	ldi	r30, 0x4D	; 77
    1e56:	f4 e2       	ldi	r31, 0x24	; 36
    1e58:	80 89       	ldd	r24, Z+16	; 0x10
    1e5a:	88 60       	ori	r24, 0x08	; 8
    1e5c:	80 8b       	std	Z+16, r24	; 0x10
									}
									CheckTBMic();
    1e5e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
									SendSerialData = 1;
    1e62:	81 e0       	ldi	r24, 0x01	; 1
    1e64:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    1e68:	5d c0       	rjmp	.+186    	; 0x1f24 <DoEvent+0x2de>
								}
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    1e6a:	88 23       	and	r24, r24
    1e6c:	0c f0       	brlt	.+2      	; 0x1e70 <DoEvent+0x22a>
    1e6e:	5a c0       	rjmp	.+180    	; 0x1f24 <DoEvent+0x2de>
    1e70:	8d e1       	ldi	r24, 0x1D	; 29
    1e72:	8e 9d       	mul	r24, r14
    1e74:	f0 01       	movw	r30, r0
    1e76:	8f 9d       	mul	r24, r15
    1e78:	f0 0d       	add	r31, r0
    1e7a:	11 24       	eor	r1, r1
    1e7c:	e1 56       	subi	r30, 0x61	; 97
    1e7e:	f0 4d       	sbci	r31, 0xD0	; 208
    1e80:	83 85       	ldd	r24, Z+11	; 0x0b
    1e82:	88 23       	and	r24, r24
    1e84:	09 f4       	brne	.+2      	; 0x1e88 <DoEvent+0x242>
    1e86:	4e c0       	rjmp	.+156    	; 0x1f24 <DoEvent+0x2de>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    1e88:	f7 01       	movw	r30, r14
    1e8a:	e3 5b       	subi	r30, 0xB3	; 179
    1e8c:	fb 4d       	sbci	r31, 0xDB	; 219
    1e8e:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    1e90:	8c 60       	ori	r24, 0x0C	; 12
    1e92:	80 83       	st	Z, r24

								//DJ-Control
								DJControl();
    1e94:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>

								if (ConsoleModuleSettings[Module][MICATLINEB])
    1e98:	8d e1       	ldi	r24, 0x1D	; 29
    1e9a:	8e 9d       	mul	r24, r14
    1e9c:	f0 01       	movw	r30, r0
    1e9e:	8f 9d       	mul	r24, r15
    1ea0:	f0 0d       	add	r31, r0
    1ea2:	11 24       	eor	r1, r1
    1ea4:	e1 56       	subi	r30, 0x61	; 97
    1ea6:	f0 4d       	sbci	r31, 0xD0	; 208
    1ea8:	80 8d       	ldd	r24, Z+24	; 0x18
    1eaa:	88 23       	and	r24, r24
    1eac:	d9 f1       	breq	.+118    	; 0x1f24 <DoEvent+0x2de>
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    1eae:	ed e4       	ldi	r30, 0x4D	; 77
    1eb0:	f4 e2       	ldi	r31, 0x24	; 36
    1eb2:	80 89       	ldd	r24, Z+16	; 0x10
    1eb4:	87 7f       	andi	r24, 0xF7	; 247
    1eb6:	80 8b       	std	Z+16, r24	; 0x10
									if (ConsoleFunctionData[Module]&REMOTE_FUNCTION)
    1eb8:	f7 01       	movw	r30, r14
    1eba:	e3 5b       	subi	r30, 0xB3	; 179
    1ebc:	fb 4d       	sbci	r31, 0xDB	; 219
    1ebe:	80 81       	ld	r24, Z
    1ec0:	80 ff       	sbrs	r24, 0
    1ec2:	05 c0       	rjmp	.+10     	; 0x1ece <DoEvent+0x288>
										ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    1ec4:	f7 01       	movw	r30, r14
    1ec6:	e3 5b       	subi	r30, 0xB3	; 179
    1ec8:	fb 4d       	sbci	r31, 0xDB	; 219
    1eca:	80 61       	ori	r24, 0x10	; 16
    1ecc:	80 83       	st	Z, r24
									if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    1ece:	f7 01       	movw	r30, r14
    1ed0:	ee 0f       	add	r30, r30
    1ed2:	ff 1f       	adc	r31, r31
    1ed4:	ee 0f       	add	r30, r30
    1ed6:	ff 1f       	adc	r31, r31
    1ed8:	ee 0f       	add	r30, r30
    1eda:	ff 1f       	adc	r31, r31
    1edc:	e8 54       	subi	r30, 0x48	; 72
    1ede:	f7 4d       	sbci	r31, 0xD7	; 215
    1ee0:	86 81       	ldd	r24, Z+6	; 0x06
    1ee2:	88 23       	and	r24, r24
    1ee4:	d4 f4       	brge	.+52     	; 0x1f1a <DoEvent+0x2d4>
    1ee6:	8d e1       	ldi	r24, 0x1D	; 29
    1ee8:	8e 9d       	mul	r24, r14
    1eea:	f0 01       	movw	r30, r0
    1eec:	8f 9d       	mul	r24, r15
    1eee:	f0 0d       	add	r31, r0
    1ef0:	11 24       	eor	r1, r1
    1ef2:	e1 56       	subi	r30, 0x61	; 97
    1ef4:	f0 4d       	sbci	r31, 0xD0	; 208
    1ef6:	86 85       	ldd	r24, Z+14	; 0x0e
    1ef8:	88 23       	and	r24, r24
    1efa:	79 f0       	breq	.+30     	; 0x1f1a <DoEvent+0x2d4>
    1efc:	f7 01       	movw	r30, r14
    1efe:	e3 5b       	subi	r30, 0xB3	; 179
    1f00:	fb 4d       	sbci	r31, 0xDB	; 219
    1f02:	80 81       	ld	r24, Z
    1f04:	84 ff       	sbrs	r24, 4
    1f06:	09 c0       	rjmp	.+18     	; 0x1f1a <DoEvent+0x2d4>
    1f08:	80 91 3d 29 	lds	r24, 0x293D	; 0x80293d <ConsoleMasterSettings+0x2>
    1f0c:	88 23       	and	r24, r24
    1f0e:	29 f0       	breq	.+10     	; 0x1f1a <DoEvent+0x2d4>
									{
											ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    1f10:	ed e4       	ldi	r30, 0x4D	; 77
    1f12:	f4 e2       	ldi	r31, 0x24	; 36
    1f14:	80 89       	ldd	r24, Z+16	; 0x10
    1f16:	88 60       	ori	r24, 0x08	; 8
    1f18:	80 8b       	std	Z+16, r24	; 0x10
									}
  								CheckTBMic();
    1f1a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
									SendSerialData = 1;
    1f1e:	81 e0       	ldi	r24, 0x01	; 1
    1f20:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
								}
							}

							// REMOTE ON
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMONMIC]))
    1f24:	f7 01       	movw	r30, r14
    1f26:	ee 0f       	add	r30, r30
    1f28:	ff 1f       	adc	r31, r31
    1f2a:	ee 0f       	add	r30, r30
    1f2c:	ff 1f       	adc	r31, r31
    1f2e:	ee 0f       	add	r30, r30
    1f30:	ff 1f       	adc	r31, r31
    1f32:	e8 54       	subi	r30, 0x48	; 72
    1f34:	f7 4d       	sbci	r31, 0xD7	; 215
    1f36:	87 81       	ldd	r24, Z+7	; 0x07
    1f38:	88 23       	and	r24, r24
    1f3a:	0c f5       	brge	.+66     	; 0x1f7e <DoEvent+0x338>
    1f3c:	9d e1       	ldi	r25, 0x1D	; 29
    1f3e:	9e 9d       	mul	r25, r14
    1f40:	f0 01       	movw	r30, r0
    1f42:	9f 9d       	mul	r25, r15
    1f44:	f0 0d       	add	r31, r0
    1f46:	11 24       	eor	r1, r1
    1f48:	e1 56       	subi	r30, 0x61	; 97
    1f4a:	f0 4d       	sbci	r31, 0xD0	; 208
    1f4c:	91 8d       	ldd	r25, Z+25	; 0x19
    1f4e:	99 23       	and	r25, r25
    1f50:	b1 f0       	breq	.+44     	; 0x1f7e <DoEvent+0x338>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    1f52:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	8e 0f       	add	r24, r30
    1f5a:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	c7 01       	movw	r24, r14
    1f62:	88 0f       	add	r24, r24
    1f64:	99 1f       	adc	r25, r25
    1f66:	88 0f       	add	r24, r24
    1f68:	99 1f       	adc	r25, r25
    1f6a:	88 0f       	add	r24, r24
    1f6c:	99 1f       	adc	r25, r25
    1f6e:	83 60       	ori	r24, 0x03	; 3
    1f70:	ee 0f       	add	r30, r30
    1f72:	ff 1f       	adc	r31, r31
    1f74:	e9 54       	subi	r30, 0x49	; 73
    1f76:	f9 4d       	sbci	r31, 0xD9	; 217
    1f78:	80 83       	st	Z, r24
    1f7a:	91 83       	std	Z+1, r25	; 0x01
    1f7c:	53 c0       	rjmp	.+166    	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMONLINEA]) && (!(ModuleData[Module][MIC_RING]&0x80)))
    1f7e:	f7 01       	movw	r30, r14
    1f80:	ee 0f       	add	r30, r30
    1f82:	ff 1f       	adc	r31, r31
    1f84:	ee 0f       	add	r30, r30
    1f86:	ff 1f       	adc	r31, r31
    1f88:	ee 0f       	add	r30, r30
    1f8a:	ff 1f       	adc	r31, r31
    1f8c:	e8 54       	subi	r30, 0x48	; 72
    1f8e:	f7 4d       	sbci	r31, 0xD7	; 215
    1f90:	96 81       	ldd	r25, Z+6	; 0x06
    1f92:	99 23       	and	r25, r25
    1f94:	1c f1       	brlt	.+70     	; 0x1fdc <DoEvent+0x396>
    1f96:	2d e1       	ldi	r18, 0x1D	; 29
    1f98:	2e 9d       	mul	r18, r14
    1f9a:	f0 01       	movw	r30, r0
    1f9c:	2f 9d       	mul	r18, r15
    1f9e:	f0 0d       	add	r31, r0
    1fa0:	11 24       	eor	r1, r1
    1fa2:	e1 56       	subi	r30, 0x61	; 97
    1fa4:	f0 4d       	sbci	r31, 0xD0	; 208
    1fa6:	22 8d       	ldd	r18, Z+26	; 0x1a
    1fa8:	22 23       	and	r18, r18
    1faa:	c1 f0       	breq	.+48     	; 0x1fdc <DoEvent+0x396>
    1fac:	88 23       	and	r24, r24
    1fae:	b4 f0       	brlt	.+44     	; 0x1fdc <DoEvent+0x396>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    1fb0:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    1fb4:	81 e0       	ldi	r24, 0x01	; 1
    1fb6:	8e 0f       	add	r24, r30
    1fb8:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    1fbc:	f0 e0       	ldi	r31, 0x00	; 0
    1fbe:	c7 01       	movw	r24, r14
    1fc0:	88 0f       	add	r24, r24
    1fc2:	99 1f       	adc	r25, r25
    1fc4:	88 0f       	add	r24, r24
    1fc6:	99 1f       	adc	r25, r25
    1fc8:	88 0f       	add	r24, r24
    1fca:	99 1f       	adc	r25, r25
    1fcc:	83 60       	ori	r24, 0x03	; 3
    1fce:	ee 0f       	add	r30, r30
    1fd0:	ff 1f       	adc	r31, r31
    1fd2:	e9 54       	subi	r30, 0x49	; 73
    1fd4:	f9 4d       	sbci	r31, 0xD9	; 217
    1fd6:	80 83       	st	Z, r24
    1fd8:	91 83       	std	Z+1, r25	; 0x01
    1fda:	24 c0       	rjmp	.+72     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMONLINEB]) && (!(ModuleData[Module][MIC_RING]&0x80)))
    1fdc:	99 23       	and	r25, r25
    1fde:	14 f5       	brge	.+68     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    1fe0:	9d e1       	ldi	r25, 0x1D	; 29
    1fe2:	9e 9d       	mul	r25, r14
    1fe4:	f0 01       	movw	r30, r0
    1fe6:	9f 9d       	mul	r25, r15
    1fe8:	f0 0d       	add	r31, r0
    1fea:	11 24       	eor	r1, r1
    1fec:	e1 56       	subi	r30, 0x61	; 97
    1fee:	f0 4d       	sbci	r31, 0xD0	; 208
    1ff0:	93 8d       	ldd	r25, Z+27	; 0x1b
    1ff2:	99 23       	and	r25, r25
    1ff4:	b9 f0       	breq	.+46     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
    1ff6:	88 23       	and	r24, r24
    1ff8:	ac f0       	brlt	.+42     	; 0x2024 <__DATA_REGION_LENGTH__+0x24>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | ON;
    1ffa:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	8e 0f       	add	r24, r30
    2002:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    2006:	f0 e0       	ldi	r31, 0x00	; 0
    2008:	c7 01       	movw	r24, r14
    200a:	88 0f       	add	r24, r24
    200c:	99 1f       	adc	r25, r25
    200e:	88 0f       	add	r24, r24
    2010:	99 1f       	adc	r25, r25
    2012:	88 0f       	add	r24, r24
    2014:	99 1f       	adc	r25, r25
    2016:	83 60       	ori	r24, 0x03	; 3
    2018:	ee 0f       	add	r30, r30
    201a:	ff 1f       	adc	r31, r31
    201c:	e9 54       	subi	r30, 0x49	; 73
    201e:	f9 4d       	sbci	r31, 0xD9	; 217
    2020:	80 83       	st	Z, r24
    2022:	91 83       	std	Z+1, r25	; 0x01
							}

							//Cue-Control
							CueControl();
    2024:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
    2028:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						}
						else
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    202c:	f7 01       	movw	r30, r14
    202e:	ee 0f       	add	r30, r30
    2030:	ff 1f       	adc	r31, r31
    2032:	ee 0f       	add	r30, r30
    2034:	ff 1f       	adc	r31, r31
    2036:	ee 0f       	add	r30, r30
    2038:	ff 1f       	adc	r31, r31
    203a:	e8 54       	subi	r30, 0x48	; 72
    203c:	f7 4d       	sbci	r31, 0xD7	; 215
    203e:	87 81       	ldd	r24, Z+7	; 0x07
    2040:	88 23       	and	r24, r24
    2042:	7c f5       	brge	.+94     	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
    2044:	8d e1       	ldi	r24, 0x1D	; 29
    2046:	8e 9d       	mul	r24, r14
    2048:	f0 01       	movw	r30, r0
    204a:	8f 9d       	mul	r24, r15
    204c:	f0 0d       	add	r31, r0
    204e:	11 24       	eor	r1, r1
    2050:	e1 56       	subi	r30, 0x61	; 97
    2052:	f0 4d       	sbci	r31, 0xD0	; 208
    2054:	84 85       	ldd	r24, Z+12	; 0x0c
    2056:	88 23       	and	r24, r24
    2058:	21 f1       	breq	.+72     	; 0x20a2 <__DATA_REGION_LENGTH__+0xa2>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    205a:	f7 01       	movw	r30, r14
    205c:	e3 5b       	subi	r30, 0xB3	; 179
    205e:	fb 4d       	sbci	r31, 0xDB	; 219
    2060:	90 81       	ld	r25, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2062:	89 2f       	mov	r24, r25
    2064:	83 7f       	andi	r24, 0xF3	; 243
    2066:	80 83       	st	Z, r24
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    2068:	95 ff       	sbrs	r25, 5
    206a:	11 c0       	rjmp	.+34     	; 0x208e <__DATA_REGION_LENGTH__+0x8e>
    206c:	f7 01       	movw	r30, r14
    206e:	ee 0f       	add	r30, r30
    2070:	ff 1f       	adc	r31, r31
    2072:	ee 0f       	add	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	ee 0f       	add	r30, r30
    2078:	ff 1f       	adc	r31, r31
    207a:	e8 54       	subi	r30, 0x48	; 72
    207c:	f7 4d       	sbci	r31, 0xD7	; 215
    207e:	91 81       	ldd	r25, Z+1	; 0x01
    2080:	99 23       	and	r25, r25
    2082:	2c f4       	brge	.+10     	; 0x208e <__DATA_REGION_LENGTH__+0x8e>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    2084:	f7 01       	movw	r30, r14
    2086:	e3 5b       	subi	r30, 0xB3	; 179
    2088:	fb 4d       	sbci	r31, 0xDB	; 219
    208a:	8f 7e       	andi	r24, 0xEF	; 239
    208c:	80 83       	st	Z, r24

								CUEByRemoteMIC[Module] = 0;
    208e:	f7 01       	movw	r30, r14
    2090:	ec 54       	subi	r30, 0x4C	; 76
    2092:	f4 4d       	sbci	r31, 0xD4	; 212
    2094:	10 82       	st	Z, r1
								CheckCUEByRemoteMIC();
    2096:	0e 94 7e 08 	call	0x10fc	; 0x10fc <CheckCUEByRemoteMIC>

								SendSerialData = 1;
    209a:	81 e0       	ldi	r24, 0x01	; 1
    209c:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    20a0:	5f c0       	rjmp	.+190    	; 0x2160 <__DATA_REGION_LENGTH__+0x160>

							}
							else if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    20a2:	f7 01       	movw	r30, r14
    20a4:	ee 0f       	add	r30, r30
    20a6:	ff 1f       	adc	r31, r31
    20a8:	ee 0f       	add	r30, r30
    20aa:	ff 1f       	adc	r31, r31
    20ac:	ee 0f       	add	r30, r30
    20ae:	ff 1f       	adc	r31, r31
    20b0:	e8 54       	subi	r30, 0x48	; 72
    20b2:	f7 4d       	sbci	r31, 0xD7	; 215
    20b4:	86 81       	ldd	r24, Z+6	; 0x06
    20b6:	88 23       	and	r24, r24
    20b8:	4c f1       	brlt	.+82     	; 0x210c <__DATA_REGION_LENGTH__+0x10c>
    20ba:	9d e1       	ldi	r25, 0x1D	; 29
    20bc:	9e 9d       	mul	r25, r14
    20be:	f0 01       	movw	r30, r0
    20c0:	9f 9d       	mul	r25, r15
    20c2:	f0 0d       	add	r31, r0
    20c4:	11 24       	eor	r1, r1
    20c6:	e1 56       	subi	r30, 0x61	; 97
    20c8:	f0 4d       	sbci	r31, 0xD0	; 208
    20ca:	92 85       	ldd	r25, Z+10	; 0x0a
    20cc:	99 23       	and	r25, r25
    20ce:	f1 f0       	breq	.+60     	; 0x210c <__DATA_REGION_LENGTH__+0x10c>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    20d0:	f7 01       	movw	r30, r14
    20d2:	e3 5b       	subi	r30, 0xB3	; 179
    20d4:	fb 4d       	sbci	r31, 0xDB	; 219
    20d6:	90 81       	ld	r25, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    20d8:	89 2f       	mov	r24, r25
    20da:	83 7f       	andi	r24, 0xF3	; 243
    20dc:	80 83       	st	Z, r24
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    20de:	95 ff       	sbrs	r25, 5
    20e0:	11 c0       	rjmp	.+34     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
    20e2:	f7 01       	movw	r30, r14
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	ee 0f       	add	r30, r30
    20ea:	ff 1f       	adc	r31, r31
    20ec:	ee 0f       	add	r30, r30
    20ee:	ff 1f       	adc	r31, r31
    20f0:	e8 54       	subi	r30, 0x48	; 72
    20f2:	f7 4d       	sbci	r31, 0xD7	; 215
    20f4:	91 81       	ldd	r25, Z+1	; 0x01
    20f6:	99 23       	and	r25, r25
    20f8:	2c f4       	brge	.+10     	; 0x2104 <__DATA_REGION_LENGTH__+0x104>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    20fa:	f7 01       	movw	r30, r14
    20fc:	e3 5b       	subi	r30, 0xB3	; 179
    20fe:	fb 4d       	sbci	r31, 0xDB	; 219
    2100:	8f 7e       	andi	r24, 0xEF	; 239
    2102:	80 83       	st	Z, r24

								SendSerialData = 1;
    2104:	81 e0       	ldi	r24, 0x01	; 1
    2106:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    210a:	2a c0       	rjmp	.+84     	; 0x2160 <__DATA_REGION_LENGTH__+0x160>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    210c:	88 23       	and	r24, r24
    210e:	44 f5       	brge	.+80     	; 0x2160 <__DATA_REGION_LENGTH__+0x160>
    2110:	8d e1       	ldi	r24, 0x1D	; 29
    2112:	8e 9d       	mul	r24, r14
    2114:	f0 01       	movw	r30, r0
    2116:	8f 9d       	mul	r24, r15
    2118:	f0 0d       	add	r31, r0
    211a:	11 24       	eor	r1, r1
    211c:	e1 56       	subi	r30, 0x61	; 97
    211e:	f0 4d       	sbci	r31, 0xD0	; 208
    2120:	83 85       	ldd	r24, Z+11	; 0x0b
    2122:	88 23       	and	r24, r24
    2124:	e9 f0       	breq	.+58     	; 0x2160 <__DATA_REGION_LENGTH__+0x160>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2126:	f7 01       	movw	r30, r14
    2128:	e3 5b       	subi	r30, 0xB3	; 179
    212a:	fb 4d       	sbci	r31, 0xDB	; 219
    212c:	90 81       	ld	r25, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    212e:	89 2f       	mov	r24, r25
    2130:	83 7f       	andi	r24, 0xF3	; 243
    2132:	80 83       	st	Z, r24
								if ((ConsoleFunctionData[Module]&ON_LED) && ((ModuleData[Module][FADERON]&0x80)))
    2134:	95 ff       	sbrs	r25, 5
    2136:	11 c0       	rjmp	.+34     	; 0x215a <__DATA_REGION_LENGTH__+0x15a>
    2138:	f7 01       	movw	r30, r14
    213a:	ee 0f       	add	r30, r30
    213c:	ff 1f       	adc	r31, r31
    213e:	ee 0f       	add	r30, r30
    2140:	ff 1f       	adc	r31, r31
    2142:	ee 0f       	add	r30, r30
    2144:	ff 1f       	adc	r31, r31
    2146:	e8 54       	subi	r30, 0x48	; 72
    2148:	f7 4d       	sbci	r31, 0xD7	; 215
    214a:	91 81       	ldd	r25, Z+1	; 0x01
    214c:	99 23       	and	r25, r25
    214e:	2c f4       	brge	.+10     	; 0x215a <__DATA_REGION_LENGTH__+0x15a>
									ConsoleFunctionData[Module]&=MUTE_FUNCTION^0xFF;	// !JB
    2150:	f7 01       	movw	r30, r14
    2152:	e3 5b       	subi	r30, 0xB3	; 179
    2154:	fb 4d       	sbci	r31, 0xDB	; 219
    2156:	8f 7e       	andi	r24, 0xEF	; 239
    2158:	80 83       	st	Z, r24

								SendSerialData = 1;
    215a:	81 e0       	ldi	r24, 0x01	; 1
    215c:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
							}

							//DJ-Control
							DJControl();
    2160:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>

							//Cue-Control
							CueControl();
    2164:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
    2168:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						}
					}
					break;
					case TELCO:
					{ // TELCO
						if (EventOn)
    216c:	01 2b       	or	r16, r17
    216e:	09 f0       	breq	.+2      	; 0x2172 <__DATA_REGION_LENGTH__+0x172>
    2170:	7b c0       	rjmp	.+246    	; 0x2268 <__DATA_REGION_LENGTH__+0x268>
						{
							if ((!(ModuleData[Module][LINEB]&0x80)) && (ConsoleModuleSettings[Module][REMLINEA]))
    2172:	f7 01       	movw	r30, r14
    2174:	ee 0f       	add	r30, r30
    2176:	ff 1f       	adc	r31, r31
    2178:	ee 0f       	add	r30, r30
    217a:	ff 1f       	adc	r31, r31
    217c:	ee 0f       	add	r30, r30
    217e:	ff 1f       	adc	r31, r31
    2180:	e8 54       	subi	r30, 0x48	; 72
    2182:	f7 4d       	sbci	r31, 0xD7	; 215
    2184:	86 81       	ldd	r24, Z+6	; 0x06
    2186:	88 23       	and	r24, r24
    2188:	0c f1       	brlt	.+66     	; 0x21cc <__DATA_REGION_LENGTH__+0x1cc>
    218a:	9d e1       	ldi	r25, 0x1D	; 29
    218c:	9e 9d       	mul	r25, r14
    218e:	f0 01       	movw	r30, r0
    2190:	9f 9d       	mul	r25, r15
    2192:	f0 0d       	add	r31, r0
    2194:	11 24       	eor	r1, r1
    2196:	e1 56       	subi	r30, 0x61	; 97
    2198:	f0 4d       	sbci	r31, 0xD0	; 208
    219a:	92 85       	ldd	r25, Z+10	; 0x0a
    219c:	99 23       	and	r25, r25
    219e:	b1 f0       	breq	.+44     	; 0x21cc <__DATA_REGION_LENGTH__+0x1cc>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | PFL;
    21a0:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    21a4:	81 e0       	ldi	r24, 0x01	; 1
    21a6:	8e 0f       	add	r24, r30
    21a8:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	c7 01       	movw	r24, r14
    21b0:	88 0f       	add	r24, r24
    21b2:	99 1f       	adc	r25, r25
    21b4:	88 0f       	add	r24, r24
    21b6:	99 1f       	adc	r25, r25
    21b8:	88 0f       	add	r24, r24
    21ba:	99 1f       	adc	r25, r25
    21bc:	82 60       	ori	r24, 0x02	; 2
    21be:	ee 0f       	add	r30, r30
    21c0:	ff 1f       	adc	r31, r31
    21c2:	e9 54       	subi	r30, 0x49	; 73
    21c4:	f9 4d       	sbci	r31, 0xD9	; 217
    21c6:	80 83       	st	Z, r24
    21c8:	91 83       	std	Z+1, r25	; 0x01
    21ca:	4a c0       	rjmp	.+148    	; 0x2260 <__DATA_REGION_LENGTH__+0x260>
							}
							else if ((ModuleData[Module][LINEB]&0x80) && (ConsoleModuleSettings[Module][REMLINEB]))
    21cc:	88 23       	and	r24, r24
    21ce:	0c f5       	brge	.+66     	; 0x2212 <__DATA_REGION_LENGTH__+0x212>
    21d0:	8d e1       	ldi	r24, 0x1D	; 29
    21d2:	8e 9d       	mul	r24, r14
    21d4:	f0 01       	movw	r30, r0
    21d6:	8f 9d       	mul	r24, r15
    21d8:	f0 0d       	add	r31, r0
    21da:	11 24       	eor	r1, r1
    21dc:	e1 56       	subi	r30, 0x61	; 97
    21de:	f0 4d       	sbci	r31, 0xD0	; 208
    21e0:	83 85       	ldd	r24, Z+11	; 0x0b
    21e2:	88 23       	and	r24, r24
    21e4:	b1 f0       	breq	.+44     	; 0x2212 <__DATA_REGION_LENGTH__+0x212>
							{
								EventBuffer[EventBufferPtrTop++] = (Module<<3) | PFL;
    21e6:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    21ea:	81 e0       	ldi	r24, 0x01	; 1
    21ec:	8e 0f       	add	r24, r30
    21ee:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	c7 01       	movw	r24, r14
    21f6:	88 0f       	add	r24, r24
    21f8:	99 1f       	adc	r25, r25
    21fa:	88 0f       	add	r24, r24
    21fc:	99 1f       	adc	r25, r25
    21fe:	88 0f       	add	r24, r24
    2200:	99 1f       	adc	r25, r25
    2202:	82 60       	ori	r24, 0x02	; 2
    2204:	ee 0f       	add	r30, r30
    2206:	ff 1f       	adc	r31, r31
    2208:	e9 54       	subi	r30, 0x49	; 73
    220a:	f9 4d       	sbci	r31, 0xD9	; 217
    220c:	80 83       	st	Z, r24
    220e:	91 83       	std	Z+1, r25	; 0x01
    2210:	27 c0       	rjmp	.+78     	; 0x2260 <__DATA_REGION_LENGTH__+0x260>
							}
							else if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]))
    2212:	f7 01       	movw	r30, r14
    2214:	ee 0f       	add	r30, r30
    2216:	ff 1f       	adc	r31, r31
    2218:	ee 0f       	add	r30, r30
    221a:	ff 1f       	adc	r31, r31
    221c:	ee 0f       	add	r30, r30
    221e:	ff 1f       	adc	r31, r31
    2220:	e8 54       	subi	r30, 0x48	; 72
    2222:	f7 4d       	sbci	r31, 0xD7	; 215
    2224:	87 81       	ldd	r24, Z+7	; 0x07
    2226:	88 23       	and	r24, r24
    2228:	dc f4       	brge	.+54     	; 0x2260 <__DATA_REGION_LENGTH__+0x260>
    222a:	8d e1       	ldi	r24, 0x1D	; 29
    222c:	8e 9d       	mul	r24, r14
    222e:	f0 01       	movw	r30, r0
    2230:	8f 9d       	mul	r24, r15
    2232:	f0 0d       	add	r31, r0
    2234:	11 24       	eor	r1, r1
    2236:	e1 56       	subi	r30, 0x61	; 97
    2238:	f0 4d       	sbci	r31, 0xD0	; 208
    223a:	84 85       	ldd	r24, Z+12	; 0x0c
    223c:	88 23       	and	r24, r24
    223e:	81 f0       	breq	.+32     	; 0x2260 <__DATA_REGION_LENGTH__+0x260>
							{
								ConsoleFunctionData[Module] |= CUE_LED;
    2240:	f7 01       	movw	r30, r14
    2242:	e3 5b       	subi	r30, 0xB3	; 179
    2244:	fb 4d       	sbci	r31, 0xDB	; 219
    2246:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] |= CUE_FUNCTION;
    2248:	8c 60       	ori	r24, 0x0C	; 12
    224a:	80 83       	st	Z, r24
								if (!(ConsoleFunctionData[Module]&REMOTE_FUNCTION))
    224c:	80 fd       	sbrc	r24, 0
    224e:	05 c0       	rjmp	.+10     	; 0x225a <__DATA_REGION_LENGTH__+0x25a>
									ConsoleFunctionData[Module]|=MUTE_FUNCTION;
    2250:	f7 01       	movw	r30, r14
    2252:	e3 5b       	subi	r30, 0xB3	; 179
    2254:	fb 4d       	sbci	r31, 0xDB	; 219
    2256:	80 61       	ori	r24, 0x10	; 16
    2258:	80 83       	st	Z, r24
								SendSerialData = 1;
    225a:	81 e0       	ldi	r24, 0x01	; 1
    225c:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
							}
							//Cue-Control
							CueControl();
    2260:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
    2264:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						}
						else
						{
							if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][REMMIC]) && (ConsoleFunctionData[Module]&REMOTE_FUNCTION))
    2268:	f7 01       	movw	r30, r14
    226a:	ee 0f       	add	r30, r30
    226c:	ff 1f       	adc	r31, r31
    226e:	ee 0f       	add	r30, r30
    2270:	ff 1f       	adc	r31, r31
    2272:	ee 0f       	add	r30, r30
    2274:	ff 1f       	adc	r31, r31
    2276:	e8 54       	subi	r30, 0x48	; 72
    2278:	f7 4d       	sbci	r31, 0xD7	; 215
    227a:	87 81       	ldd	r24, Z+7	; 0x07
    227c:	88 23       	and	r24, r24
    227e:	cc f4       	brge	.+50     	; 0x22b2 <__DATA_REGION_LENGTH__+0x2b2>
    2280:	8d e1       	ldi	r24, 0x1D	; 29
    2282:	8e 9d       	mul	r24, r14
    2284:	f0 01       	movw	r30, r0
    2286:	8f 9d       	mul	r24, r15
    2288:	f0 0d       	add	r31, r0
    228a:	11 24       	eor	r1, r1
    228c:	e1 56       	subi	r30, 0x61	; 97
    228e:	f0 4d       	sbci	r31, 0xD0	; 208
    2290:	84 85       	ldd	r24, Z+12	; 0x0c
    2292:	88 23       	and	r24, r24
    2294:	71 f0       	breq	.+28     	; 0x22b2 <__DATA_REGION_LENGTH__+0x2b2>
    2296:	f7 01       	movw	r30, r14
    2298:	e3 5b       	subi	r30, 0xB3	; 179
    229a:	fb 4d       	sbci	r31, 0xDB	; 219
    229c:	80 81       	ld	r24, Z
    229e:	80 ff       	sbrs	r24, 0
    22a0:	08 c0       	rjmp	.+16     	; 0x22b2 <__DATA_REGION_LENGTH__+0x2b2>
							{
								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    22a2:	f7 01       	movw	r30, r14
    22a4:	e3 5b       	subi	r30, 0xB3	; 179
    22a6:	fb 4d       	sbci	r31, 0xDB	; 219
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
								ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    22a8:	83 7e       	andi	r24, 0xE3	; 227
    22aa:	80 83       	st	Z, r24
								SendSerialData = 1;
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
							}
							//Cue-Control
							CueControl();
    22b2:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
    22b6:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case FADERON:
		{
			switch (ModuleType[Module])
    22ba:	ce 2c       	mov	r12, r14
    22bc:	d1 2c       	mov	r13, r1
    22be:	f6 01       	movw	r30, r12
    22c0:	e6 5c       	subi	r30, 0xC6	; 198
    22c2:	fb 4d       	sbci	r31, 0xDB	; 219
    22c4:	80 81       	ld	r24, Z
    22c6:	81 30       	cpi	r24, 0x01	; 1
    22c8:	29 f0       	breq	.+10     	; 0x22d4 <__DATA_REGION_LENGTH__+0x2d4>
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <__DATA_REGION_LENGTH__+0x2d0>
    22ce:	ac c0       	rjmp	.+344    	; 0x2428 <__DATA_REGION_LENGTH__+0x428>
    22d0:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			{
				case TRIPLE:
				{ //Triple
					if (EventOn)
    22d4:	01 2b       	or	r16, r17
    22d6:	09 f0       	breq	.+2      	; 0x22da <__DATA_REGION_LENGTH__+0x2da>
    22d8:	63 c0       	rjmp	.+198    	; 0x23a0 <__DATA_REGION_LENGTH__+0x3a0>
					{		// Was eerst het OfEvent JB
							// Inverse reaction bij op P-print by Jan Betten!! 
							// dus onevent is fader uit bij P-print!!!!

						if (ConsoleFunctionData[Module]&ON_LED)
    22da:	f6 01       	movw	r30, r12
    22dc:	e3 5b       	subi	r30, 0xB3	; 179
    22de:	fb 4d       	sbci	r31, 0xDB	; 219
    22e0:	80 81       	ld	r24, Z
    22e2:	85 ff       	sbrs	r24, 5
    22e4:	3f c0       	rjmp	.+126    	; 0x2364 <__DATA_REGION_LENGTH__+0x364>
						{
							ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    22e6:	8f 01       	movw	r16, r30
    22e8:	81 60       	ori	r24, 0x01	; 1
    22ea:	80 83       	st	Z, r24

							//OnAir1/2 Control
							OnAirControl();
    22ec:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>

							TimerControl(Module);
    22f0:	8e 2d       	mov	r24, r14
    22f2:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>

							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    22f6:	f8 01       	movw	r30, r16
    22f8:	80 81       	ld	r24, Z
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    22fa:	83 7f       	andi	r24, 0xF3	; 243
    22fc:	80 83       	st	Z, r24

							//Cue-Control
							if (ConsoleMasterSettings[AUTOCUERESET])
    22fe:	90 91 3b 29 	lds	r25, 0x293B	; 0x80293b <ConsoleMasterSettings>
    2302:	99 23       	and	r25, r25
    2304:	d9 f0       	breq	.+54     	; 0x233c <__DATA_REGION_LENGTH__+0x33c>
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2306:	f6 01       	movw	r30, r12
    2308:	ee 0f       	add	r30, r30
    230a:	ff 1f       	adc	r31, r31
    230c:	ee 0f       	add	r30, r30
    230e:	ff 1f       	adc	r31, r31
    2310:	ee 0f       	add	r30, r30
    2312:	ff 1f       	adc	r31, r31
    2314:	e8 54       	subi	r30, 0x48	; 72
    2316:	f7 4d       	sbci	r31, 0xD7	; 215
    2318:	91 81       	ldd	r25, Z+1	; 0x01
    231a:	99 23       	and	r25, r25
    231c:	7c f4       	brge	.+30     	; 0x233c <__DATA_REGION_LENGTH__+0x33c>
    231e:	85 fd       	sbrc	r24, 5
    2320:	0a c0       	rjmp	.+20     	; 0x2336 <__DATA_REGION_LENGTH__+0x336>
    2322:	0c c0       	rjmp	.+24     	; 0x233c <__DATA_REGION_LENGTH__+0x33c>
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    2324:	e8 2f       	mov	r30, r24
    2326:	f0 e0       	ldi	r31, 0x00	; 0
    2328:	e3 5b       	subi	r30, 0xB3	; 179
    232a:	fb 4d       	sbci	r31, 0xDB	; 219
    232c:	90 81       	ld	r25, Z
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    232e:	93 7f       	andi	r25, 0xF3	; 243
    2330:	90 83       	st	Z, r25
							if (ConsoleMasterSettings[AUTOCUERESET])
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2332:	8f 5f       	subi	r24, 0xFF	; 255
    2334:	01 c0       	rjmp	.+2      	; 0x2338 <__DATA_REGION_LENGTH__+0x338>
    2336:	80 e0       	ldi	r24, 0x00	; 0
    2338:	80 31       	cpi	r24, 0x10	; 16
    233a:	a0 f3       	brcs	.-24     	; 0x2324 <__DATA_REGION_LENGTH__+0x324>
										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
									}
								}
							}
							CueControl();
    233c:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>

							//DJ-Control
							DJControl();
    2340:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
							//StudioMic Control
							StudioMicControl();
    2344:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>

							CheckStartCondition(Module);
    2348:	8e 2d       	mov	r24, r14
    234a:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>

							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    234e:	f6 01       	movw	r30, r12
    2350:	e3 5b       	subi	r30, 0xB3	; 179
    2352:	fb 4d       	sbci	r31, 0xDB	; 219
    2354:	80 81       	ld	r24, Z
    2356:	8f 7e       	andi	r24, 0xEF	; 239
    2358:	80 83       	st	Z, r24
							SendSerialData = 1;
    235a:	81 e0       	ldi	r24, 0x01	; 1
    235c:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2360:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						}
						else
						{
							if ((ConsoleModuleSettings[Module][STARTFADER]) && (!ConsoleModuleSettings[Module][STARTON]))
    2364:	8d e1       	ldi	r24, 0x1D	; 29
    2366:	8c 9d       	mul	r24, r12
    2368:	f0 01       	movw	r30, r0
    236a:	8d 9d       	mul	r24, r13
    236c:	f0 0d       	add	r31, r0
    236e:	11 24       	eor	r1, r1
    2370:	e1 56       	subi	r30, 0x61	; 97
    2372:	f0 4d       	sbci	r31, 0xD0	; 208
    2374:	86 81       	ldd	r24, Z+6	; 0x06
    2376:	88 23       	and	r24, r24
    2378:	71 f0       	breq	.+28     	; 0x2396 <__DATA_REGION_LENGTH__+0x396>
    237a:	8d e1       	ldi	r24, 0x1D	; 29
    237c:	8c 9d       	mul	r24, r12
    237e:	f0 01       	movw	r30, r0
    2380:	8d 9d       	mul	r24, r13
    2382:	f0 0d       	add	r31, r0
    2384:	11 24       	eor	r1, r1
    2386:	e1 56       	subi	r30, 0x61	; 97
    2388:	f0 4d       	sbci	r31, 0xD0	; 208
    238a:	87 81       	ldd	r24, Z+7	; 0x07
    238c:	81 11       	cpse	r24, r1
    238e:	03 c0       	rjmp	.+6      	; 0x2396 <__DATA_REGION_LENGTH__+0x396>
							{
								CheckStartCondition(Module);
    2390:	8e 2d       	mov	r24, r14
    2392:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>
							}
							TimerControl(Module);
    2396:	8e 2d       	mov	r24, r14
    2398:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
    239c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						}
					}
					else
					{
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    23a0:	f6 01       	movw	r30, r12
    23a2:	e3 5b       	subi	r30, 0xB3	; 179
    23a4:	fb 4d       	sbci	r31, 0xDB	; 219
    23a6:	80 81       	ld	r24, Z
    23a8:	80 61       	ori	r24, 0x10	; 16
    23aa:	80 83       	st	Z, r24
						if (ConsoleFunctionData[Module]&ON_LED)
    23ac:	85 ff       	sbrs	r24, 5
    23ae:	18 c0       	rjmp	.+48     	; 0x23e0 <__DATA_REGION_LENGTH__+0x3e0>
						{
							if (ConsoleModuleSettings[Module][STARTFADER]) 
    23b0:	8d e1       	ldi	r24, 0x1D	; 29
    23b2:	8c 9d       	mul	r24, r12
    23b4:	f0 01       	movw	r30, r0
    23b6:	8d 9d       	mul	r24, r13
    23b8:	f0 0d       	add	r31, r0
    23ba:	11 24       	eor	r1, r1
    23bc:	e1 56       	subi	r30, 0x61	; 97
    23be:	f0 4d       	sbci	r31, 0xD0	; 208
    23c0:	86 81       	ldd	r24, Z+6	; 0x06
    23c2:	88 23       	and	r24, r24
    23c4:	19 f0       	breq	.+6      	; 0x23cc <__DATA_REGION_LENGTH__+0x3cc>
							{
									CheckStartCondition(Module);
    23c6:	8e 2d       	mov	r24, r14
    23c8:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>
							}
							//OnAir1/2 Control
							OnAirControl();
    23cc:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>

							TimerControl(Module);
    23d0:	8e 2d       	mov	r24, r14
    23d2:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>

							//DJ-Control
							DJControl();
    23d6:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>

							//StudioMic Control
							StudioMicControl();
    23da:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>
    23de:	19 c0       	rjmp	.+50     	; 0x2412 <__DATA_REGION_LENGTH__+0x412>
						}
						else
						{
							if ((ConsoleModuleSettings[Module][STARTFADER]) && (!ConsoleModuleSettings[Module][STARTON]))
    23e0:	8d e1       	ldi	r24, 0x1D	; 29
    23e2:	8c 9d       	mul	r24, r12
    23e4:	f0 01       	movw	r30, r0
    23e6:	8d 9d       	mul	r24, r13
    23e8:	f0 0d       	add	r31, r0
    23ea:	11 24       	eor	r1, r1
    23ec:	e1 56       	subi	r30, 0x61	; 97
    23ee:	f0 4d       	sbci	r31, 0xD0	; 208
    23f0:	86 81       	ldd	r24, Z+6	; 0x06
    23f2:	88 23       	and	r24, r24
    23f4:	71 f0       	breq	.+28     	; 0x2412 <__DATA_REGION_LENGTH__+0x412>
    23f6:	8d e1       	ldi	r24, 0x1D	; 29
    23f8:	8c 9d       	mul	r24, r12
    23fa:	f0 01       	movw	r30, r0
    23fc:	8d 9d       	mul	r24, r13
    23fe:	f0 0d       	add	r31, r0
    2400:	11 24       	eor	r1, r1
    2402:	e1 56       	subi	r30, 0x61	; 97
    2404:	f0 4d       	sbci	r31, 0xD0	; 208
    2406:	87 81       	ldd	r24, Z+7	; 0x07
    2408:	81 11       	cpse	r24, r1
    240a:	03 c0       	rjmp	.+6      	; 0x2412 <__DATA_REGION_LENGTH__+0x412>
							{
								CheckStartCondition(Module);
    240c:	8e 2d       	mov	r24, r14
    240e:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>
							}
						}
						ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
    2412:	f6 01       	movw	r30, r12
    2414:	e3 5b       	subi	r30, 0xB3	; 179
    2416:	fb 4d       	sbci	r31, 0xDB	; 219
    2418:	80 81       	ld	r24, Z
    241a:	8e 7f       	andi	r24, 0xFE	; 254
    241c:	80 83       	st	Z, r24
						SendSerialData = 1;
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2424:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
// was eerst het OnEvent JB
				}
				break;
				case TELCO:
				{ // Telco
					if (EventOn)
    2428:	01 2b       	or	r16, r17
    242a:	09 f0       	breq	.+2      	; 0x242e <__DATA_REGION_LENGTH__+0x42e>
    242c:	77 c0       	rjmp	.+238    	; 0x251c <__DATA_REGION_LENGTH__+0x51c>
					{// JB was else
						if (ConsoleFunctionData[Module]&ON_LED)
    242e:	f6 01       	movw	r30, r12
    2430:	e3 5b       	subi	r30, 0xB3	; 179
    2432:	fb 4d       	sbci	r31, 0xDB	; 219
    2434:	80 81       	ld	r24, Z
    2436:	85 fd       	sbrc	r24, 5
    2438:	02 c0       	rjmp	.+4      	; 0x243e <__DATA_REGION_LENGTH__+0x43e>
    243a:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						{
							char TelcoNr = GetTelcoNrFromModuleNr(Module);
    243e:	8e 2d       	mov	r24, r14
    2440:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
							if ((TelcoNr>=0) && (TelcoNr<4))
    2444:	84 30       	cpi	r24, 0x04	; 4
    2446:	b8 f4       	brcc	.+46     	; 0x2476 <__DATA_REGION_LENGTH__+0x476>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2448:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    244c:	a1 e0       	ldi	r26, 0x01	; 1
    244e:	ae 0f       	add	r26, r30
    2450:	f0 e0       	ldi	r31, 0x00	; 0
    2452:	ee 58       	subi	r30, 0x8E	; 142
    2454:	fa 4d       	sbci	r31, 0xDA	; 218
    2456:	92 ec       	ldi	r25, 0xC2	; 194
    2458:	90 83       	st	Z, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    245a:	e1 e0       	ldi	r30, 0x01	; 1
    245c:	ea 0f       	add	r30, r26
    245e:	b0 e0       	ldi	r27, 0x00	; 0
    2460:	ae 58       	subi	r26, 0x8E	; 142
    2462:	ba 4d       	sbci	r27, 0xDA	; 218
    2464:	8c 93       	st	X, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2466:	81 e0       	ldi	r24, 0x01	; 1
    2468:	8e 0f       	add	r24, r30
    246a:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    246e:	f0 e0       	ldi	r31, 0x00	; 0
    2470:	ee 58       	subi	r30, 0x8E	; 142
    2472:	fa 4d       	sbci	r31, 0xDA	; 218
    2474:	10 82       	st	Z, r1
							}

							//OnAir1/2 Control
							OnAirControl();
    2476:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>
							TimerControl(Module);
    247a:	8e 2d       	mov	r24, r14
    247c:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
							
							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2480:	f6 01       	movw	r30, r12
    2482:	e3 5b       	subi	r30, 0xB3	; 179
    2484:	fb 4d       	sbci	r31, 0xDB	; 219
    2486:	80 81       	ld	r24, Z
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2488:	83 7f       	andi	r24, 0xF3	; 243
    248a:	80 83       	st	Z, r24

							//Cue-Control
							if (ConsoleMasterSettings[AUTOCUERESET])
    248c:	90 91 3b 29 	lds	r25, 0x293B	; 0x80293b <ConsoleMasterSettings>
    2490:	99 23       	and	r25, r25
    2492:	b9 f1       	breq	.+110    	; 0x2502 <__DATA_REGION_LENGTH__+0x502>
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2494:	f6 01       	movw	r30, r12
    2496:	ee 0f       	add	r30, r30
    2498:	ff 1f       	adc	r31, r31
    249a:	ee 0f       	add	r30, r30
    249c:	ff 1f       	adc	r31, r31
    249e:	ee 0f       	add	r30, r30
    24a0:	ff 1f       	adc	r31, r31
    24a2:	e8 54       	subi	r30, 0x48	; 72
    24a4:	f7 4d       	sbci	r31, 0xD7	; 215
    24a6:	91 81       	ldd	r25, Z+1	; 0x01
    24a8:	99 23       	and	r25, r25
    24aa:	5c f5       	brge	.+86     	; 0x2502 <__DATA_REGION_LENGTH__+0x502>
    24ac:	85 fd       	sbrc	r24, 5
    24ae:	26 c0       	rjmp	.+76     	; 0x24fc <__DATA_REGION_LENGTH__+0x4fc>
    24b0:	28 c0       	rjmp	.+80     	; 0x2502 <__DATA_REGION_LENGTH__+0x502>
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    24b2:	81 2f       	mov	r24, r17
    24b4:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
										if ((TelcoNr>=0) && (TelcoNr<4))
    24b8:	84 30       	cpi	r24, 0x04	; 4
    24ba:	b8 f4       	brcc	.+46     	; 0x24ea <__DATA_REGION_LENGTH__+0x4ea>
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    24bc:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    24c0:	a1 e0       	ldi	r26, 0x01	; 1
    24c2:	ae 0f       	add	r26, r30
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	ee 58       	subi	r30, 0x8E	; 142
    24c8:	fa 4d       	sbci	r31, 0xDA	; 218
    24ca:	92 ec       	ldi	r25, 0xC2	; 194
    24cc:	90 83       	st	Z, r25
											SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    24ce:	e1 e0       	ldi	r30, 0x01	; 1
    24d0:	ea 0f       	add	r30, r26
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	ae 58       	subi	r26, 0x8E	; 142
    24d6:	ba 4d       	sbci	r27, 0xDA	; 218
    24d8:	8c 93       	st	X, r24
											SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    24da:	81 e0       	ldi	r24, 0x01	; 1
    24dc:	8e 0f       	add	r24, r30
    24de:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	ee 58       	subi	r30, 0x8E	; 142
    24e6:	fa 4d       	sbci	r31, 0xDA	; 218
    24e8:	10 82       	st	Z, r1
										}

										ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    24ea:	e1 2f       	mov	r30, r17
    24ec:	f0 e0       	ldi	r31, 0x00	; 0
    24ee:	e3 5b       	subi	r30, 0xB3	; 179
    24f0:	fb 4d       	sbci	r31, 0xDB	; 219
    24f2:	80 81       	ld	r24, Z
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    24f4:	83 7f       	andi	r24, 0xF3	; 243
    24f6:	80 83       	st	Z, r24
							if (ConsoleMasterSettings[AUTOCUERESET])
							{
								if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
								{	 // !JB
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    24f8:	1f 5f       	subi	r17, 0xFF	; 255
    24fa:	01 c0       	rjmp	.+2      	; 0x24fe <__DATA_REGION_LENGTH__+0x4fe>
    24fc:	10 e0       	ldi	r17, 0x00	; 0
    24fe:	10 31       	cpi	r17, 0x10	; 16
    2500:	c0 f2       	brcs	.-80     	; 0x24b2 <__DATA_REGION_LENGTH__+0x4b2>
										ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;

									}
								}
							}
							CueControl();
    2502:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>

							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    2506:	f6 01       	movw	r30, r12
    2508:	e3 5b       	subi	r30, 0xB3	; 179
    250a:	fb 4d       	sbci	r31, 0xDB	; 219
    250c:	80 81       	ld	r24, Z
    250e:	8f 7e       	andi	r24, 0xEF	; 239
    2510:	80 83       	st	Z, r24
							SendSerialData = 1;
    2512:	81 e0       	ldi	r24, 0x01	; 1
    2514:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2518:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						}
					}
					else
					{			// JB was if
 						//OnAir1/2 Control
						OnAirControl();
    251c:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>
						TimerControl(Module);
    2520:	8e 2d       	mov	r24, r14
    2522:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    2526:	f6 01       	movw	r30, r12
    2528:	e3 5b       	subi	r30, 0xB3	; 179
    252a:	fb 4d       	sbci	r31, 0xDB	; 219
    252c:	80 81       	ld	r24, Z
    252e:	80 61       	ori	r24, 0x10	; 16
    2530:	80 83       	st	Z, r24
						SendSerialData = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2538:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case PFL:
		{
			switch (OperatingMode)
    253c:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <OperatingMode>
    2540:	81 30       	cpi	r24, 0x01	; 1
    2542:	09 f0       	breq	.+2      	; 0x2546 <__DATA_REGION_LENGTH__+0x546>
    2544:	2d c1       	rjmp	.+602    	; 0x27a0 <__DATA_REGION_LENGTH__+0x7a0>
			{
				case MODULEMODE:
				{
					if ((EventOn) && (ConsoleMasterSettings[4]))
    2546:	01 2b       	or	r16, r17
    2548:	11 f0       	breq	.+4      	; 0x254e <__DATA_REGION_LENGTH__+0x54e>
    254a:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
    254e:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <ConsoleMasterSettings+0x4>
    2552:	88 23       	and	r24, r24
    2554:	11 f4       	brne	.+4      	; 0x255a <__DATA_REGION_LENGTH__+0x55a>
    2556:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
					{
						unsigned char cntByte;

						char Buffer[] ="Module xx: xxx  ";
    255a:	81 e1       	ldi	r24, 0x11	; 17
    255c:	e6 ed       	ldi	r30, 0xD6	; 214
    255e:	f0 e2       	ldi	r31, 0x20	; 32
    2560:	de 01       	movw	r26, r28
    2562:	11 96       	adiw	r26, 0x01	; 1
    2564:	01 90       	ld	r0, Z+
    2566:	0d 92       	st	X+, r0
    2568:	8a 95       	dec	r24
    256a:	e1 f7       	brne	.-8      	; 0x2564 <__DATA_REGION_LENGTH__+0x564>
						
						if (ConsoleModuleSettings[Module][TextStringPtr])
    256c:	0e 2d       	mov	r16, r14
    256e:	10 e0       	ldi	r17, 0x00	; 0
    2570:	90 91 4b 24 	lds	r25, 0x244B	; 0x80244b <TextStringPtr>
    2574:	29 2f       	mov	r18, r25
    2576:	30 e0       	ldi	r19, 0x00	; 0
    2578:	8d e1       	ldi	r24, 0x1D	; 29
    257a:	80 9f       	mul	r24, r16
    257c:	f0 01       	movw	r30, r0
    257e:	81 9f       	mul	r24, r17
    2580:	f0 0d       	add	r31, r0
    2582:	11 24       	eor	r1, r1
    2584:	e1 56       	subi	r30, 0x61	; 97
    2586:	f0 4d       	sbci	r31, 0xD0	; 208
    2588:	e2 0f       	add	r30, r18
    258a:	f3 1f       	adc	r31, r19
    258c:	80 81       	ld	r24, Z
    258e:	88 23       	and	r24, r24
    2590:	61 f0       	breq	.+24     	; 0x25aa <__DATA_REGION_LENGTH__+0x5aa>
							ConsoleModuleSettings[Module][TextStringPtr] = 0;
    2592:	8d e1       	ldi	r24, 0x1D	; 29
    2594:	80 9f       	mul	r24, r16
    2596:	f0 01       	movw	r30, r0
    2598:	81 9f       	mul	r24, r17
    259a:	f0 0d       	add	r31, r0
    259c:	11 24       	eor	r1, r1
    259e:	e1 56       	subi	r30, 0x61	; 97
    25a0:	f0 4d       	sbci	r31, 0xD0	; 208
    25a2:	e2 0f       	add	r30, r18
    25a4:	f3 1f       	adc	r31, r19
    25a6:	10 82       	st	Z, r1
    25a8:	0c c0       	rjmp	.+24     	; 0x25c2 <__DATA_REGION_LENGTH__+0x5c2>
						else
							ConsoleModuleSettings[Module][TextStringPtr] = 1;
    25aa:	8d e1       	ldi	r24, 0x1D	; 29
    25ac:	80 9f       	mul	r24, r16
    25ae:	f0 01       	movw	r30, r0
    25b0:	81 9f       	mul	r24, r17
    25b2:	f0 0d       	add	r31, r0
    25b4:	11 24       	eor	r1, r1
    25b6:	e1 56       	subi	r30, 0x61	; 97
    25b8:	f0 4d       	sbci	r31, 0xD0	; 208
    25ba:	e2 0f       	add	r30, r18
    25bc:	f3 1f       	adc	r31, r19
    25be:	81 e0       	ldi	r24, 0x01	; 1
    25c0:	80 83       	st	Z, r24

						if (ModuleType[Module]==TELCO)
    25c2:	f8 01       	movw	r30, r16
    25c4:	e6 5c       	subi	r30, 0xC6	; 198
    25c6:	fb 4d       	sbci	r31, 0xDB	; 219
    25c8:	40 81       	ld	r20, Z
    25ca:	42 30       	cpi	r20, 0x02	; 2
    25cc:	29 f5       	brne	.+74     	; 0x2618 <__DATA_REGION_LENGTH__+0x618>
						{
							switch (TextStringPtr)
    25ce:	89 2e       	mov	r8, r25
    25d0:	91 2c       	mov	r9, r1
    25d2:	f4 01       	movw	r30, r8
    25d4:	32 97       	sbiw	r30, 0x02	; 2
    25d6:	ea 31       	cpi	r30, 0x1A	; 26
    25d8:	f1 05       	cpc	r31, r1
    25da:	f0 f4       	brcc	.+60     	; 0x2618 <__DATA_REGION_LENGTH__+0x618>
    25dc:	88 27       	eor	r24, r24
    25de:	e9 57       	subi	r30, 0x79	; 121
    25e0:	fe 4f       	sbci	r31, 0xFE	; 254
    25e2:	8f 4f       	sbci	r24, 0xFF	; 255
    25e4:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__tablejump2__>
								case REMONLINEA:
								case REMONLINEB:
								case MICATLINEA:
								case MICATLINEB:
								{
									ConsoleModuleSettings[Module][TextStringPtr]=0x00;
    25e8:	8d e1       	ldi	r24, 0x1D	; 29
    25ea:	80 9f       	mul	r24, r16
    25ec:	f0 01       	movw	r30, r0
    25ee:	81 9f       	mul	r24, r17
    25f0:	f0 0d       	add	r31, r0
    25f2:	11 24       	eor	r1, r1
    25f4:	e1 56       	subi	r30, 0x61	; 97
    25f6:	f0 4d       	sbci	r31, 0xD0	; 208
    25f8:	e2 0f       	add	r30, r18
    25fa:	f3 1f       	adc	r31, r19
    25fc:	10 82       	st	Z, r1
								}
								break;
    25fe:	0c c0       	rjmp	.+24     	; 0x2618 <__DATA_REGION_LENGTH__+0x618>
								case STARTON:
								case STARTLINEA:
								case STARTLINEB:
								case STARTCUE:
								{
									ConsoleModuleSettings[Module][TextStringPtr]=0x01;
    2600:	8d e1       	ldi	r24, 0x1D	; 29
    2602:	80 9f       	mul	r24, r16
    2604:	f0 01       	movw	r30, r0
    2606:	81 9f       	mul	r24, r17
    2608:	f0 0d       	add	r31, r0
    260a:	11 24       	eor	r1, r1
    260c:	e1 56       	subi	r30, 0x61	; 97
    260e:	f0 4d       	sbci	r31, 0xD0	; 208
    2610:	e2 0f       	add	r30, r18
    2612:	f3 1f       	adc	r31, r19
    2614:	81 e0       	ldi	r24, 0x01	; 1
    2616:	80 83       	st	Z, r24
								}
								break;
							}
						}

						switch (TextStringPtr)
    2618:	89 2f       	mov	r24, r25
    261a:	90 e0       	ldi	r25, 0x00	; 0
    261c:	fc 01       	movw	r30, r24
    261e:	33 97       	sbiw	r30, 0x03	; 3
    2620:	e6 31       	cpi	r30, 0x16	; 22
    2622:	f1 05       	cpc	r31, r1
    2624:	b8 f5       	brcc	.+110    	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
    2626:	88 27       	eor	r24, r24
    2628:	ef 55       	subi	r30, 0x5F	; 95
    262a:	fe 4f       	sbci	r31, 0xFE	; 254
    262c:	8f 4f       	sbci	r24, 0xFF	; 255
    262e:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__tablejump2__>
							case STARTPULS:
							{
								unsigned char cntModule;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									StartControl(cntModule, 0);
    2632:	60 e0       	ldi	r22, 0x00	; 0
    2634:	8f 2d       	mov	r24, r15
    2636:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
									TimerControl(cntModule);
    263a:	8f 2d       	mov	r24, r15
    263c:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
							case STARTON:
							case STARTCUE:
							case STARTPULS:
							{
								unsigned char cntModule;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2640:	f3 94       	inc	r15
    2642:	01 c0       	rjmp	.+2      	; 0x2646 <__DATA_REGION_LENGTH__+0x646>
								}
								break;
							}
						}

						switch (TextStringPtr)
    2644:	f1 2c       	mov	r15, r1
							case STARTON:
							case STARTCUE:
							case STARTPULS:
							{
								unsigned char cntModule;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2646:	ff e0       	ldi	r31, 0x0F	; 15
    2648:	ff 15       	cp	r31, r15
    264a:	98 f7       	brcc	.-26     	; 0x2632 <__DATA_REGION_LENGTH__+0x632>
    264c:	23 c0       	rjmp	.+70     	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
								}
							}
							break;
							case DJMIC:
							{
								DJControl();
    264e:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
							}
							break;
    2652:	20 c0       	rjmp	.+64     	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
							case MICATLINEA:
							case MICATLINEB:
							{
								DJControl();
    2654:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
								StudioMicControl();
    2658:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>
							}
							break;
    265c:	1b c0       	rjmp	.+54     	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
							case ANNMIC:
							{
								if (ModuleType[Module]==TRIPLE)
    265e:	41 30       	cpi	r20, 0x01	; 1
    2660:	89 f4       	brne	.+34     	; 0x2684 <__DATA_REGION_LENGTH__+0x684>
    2662:	0d c0       	rjmp	.+26     	; 0x267e <__DATA_REGION_LENGTH__+0x67e>
								{
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										if (cntModule!=Module)
    2664:	8e 15       	cp	r24, r14
    2666:	49 f0       	breq	.+18     	; 0x267a <__DATA_REGION_LENGTH__+0x67a>
											ConsoleModuleSettings[cntModule][TextStringPtr] = 0x00;
    2668:	5d e1       	ldi	r21, 0x1D	; 29
    266a:	85 9f       	mul	r24, r21
    266c:	f0 01       	movw	r30, r0
    266e:	11 24       	eor	r1, r1
    2670:	e1 56       	subi	r30, 0x61	; 97
    2672:	f0 4d       	sbci	r31, 0xD0	; 208
    2674:	e2 0f       	add	r30, r18
    2676:	f3 1f       	adc	r31, r19
    2678:	10 82       	st	Z, r1
							case ANNMIC:
							{
								if (ModuleType[Module]==TRIPLE)
								{
									unsigned char cntModule;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    267a:	8f 5f       	subi	r24, 0xFF	; 255
    267c:	01 c0       	rjmp	.+2      	; 0x2680 <__DATA_REGION_LENGTH__+0x680>
    267e:	80 e0       	ldi	r24, 0x00	; 0
    2680:	80 31       	cpi	r24, 0x10	; 16
    2682:	80 f3       	brcs	.-32     	; 0x2664 <__DATA_REGION_LENGTH__+0x664>
									{
										if (cntModule!=Module)
											ConsoleModuleSettings[cntModule][TextStringPtr] = 0x00;
									}
								}
								StudioMicControl();
    2684:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>
							}
							break;
    2688:	05 c0       	rjmp	.+10     	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
							case STUDIOMIC:
							{
								StudioMicControl();
    268a:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>
							}
							break;
    268e:	02 c0       	rjmp	.+4      	; 0x2694 <__DATA_REGION_LENGTH__+0x694>
							case ONAIR2LINEA:
							case ONAIR2LINEB:
							case ONAIR2MIC:
							{
								//OnAir1/2 Control
								OnAirControl();
    2690:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>
							}
							break;
						}

						Buffer[7] = 0x30+((Module+1)/10);
    2694:	c8 01       	movw	r24, r16
    2696:	01 96       	adiw	r24, 0x01	; 1
    2698:	6a e0       	ldi	r22, 0x0A	; 10
    269a:	70 e0       	ldi	r23, 0x00	; 0
    269c:	0e 94 7b 29 	call	0x52f6	; 0x52f6 <__divmodhi4>
    26a0:	60 5d       	subi	r22, 0xD0	; 208
    26a2:	68 87       	std	Y+8, r22	; 0x08
						Buffer[8] = 0x30+((Module+1)%10);
    26a4:	80 5d       	subi	r24, 0xD0	; 208
    26a6:	89 87       	std	Y+9, r24	; 0x09
						if (TextStringPtr==STARTPULS)
    26a8:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    26ac:	89 30       	cpi	r24, 0x09	; 9
    26ae:	f9 f4       	brne	.+62     	; 0x26ee <__DATA_REGION_LENGTH__+0x6ee>
						{
							if (ConsoleModuleSettings[Module][TextStringPtr])
    26b0:	9d e1       	ldi	r25, 0x1D	; 29
    26b2:	90 9f       	mul	r25, r16
    26b4:	f0 01       	movw	r30, r0
    26b6:	91 9f       	mul	r25, r17
    26b8:	f0 0d       	add	r31, r0
    26ba:	11 24       	eor	r1, r1
    26bc:	e1 56       	subi	r30, 0x61	; 97
    26be:	f0 4d       	sbci	r31, 0xD0	; 208
    26c0:	e8 0f       	add	r30, r24
    26c2:	f1 1d       	adc	r31, r1
    26c4:	80 81       	ld	r24, Z
    26c6:	88 23       	and	r24, r24
    26c8:	49 f0       	breq	.+18     	; 0x26dc <__DATA_REGION_LENGTH__+0x6dc>
							{
								Buffer[11] = 'P';
    26ca:	80 e5       	ldi	r24, 0x50	; 80
    26cc:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'u';
    26ce:	85 e7       	ldi	r24, 0x75	; 117
    26d0:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'l';
    26d2:	8c e6       	ldi	r24, 0x6C	; 108
    26d4:	8e 87       	std	Y+14, r24	; 0x0e
								Buffer[14] = 's';
    26d6:	83 e7       	ldi	r24, 0x73	; 115
    26d8:	8f 87       	std	Y+15, r24	; 0x0f
    26da:	23 c0       	rjmp	.+70     	; 0x2722 <__DATA_REGION_LENGTH__+0x722>
							}
							else
							{
								Buffer[11] = 'C';
    26dc:	83 e4       	ldi	r24, 0x43	; 67
    26de:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'o';
    26e0:	8f e6       	ldi	r24, 0x6F	; 111
    26e2:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'n';
    26e4:	8e e6       	ldi	r24, 0x6E	; 110
    26e6:	8e 87       	std	Y+14, r24	; 0x0e
								Buffer[14] = 't';
    26e8:	84 e7       	ldi	r24, 0x74	; 116
    26ea:	8f 87       	std	Y+15, r24	; 0x0f
    26ec:	1a c0       	rjmp	.+52     	; 0x2722 <__DATA_REGION_LENGTH__+0x722>
							}
						}
						else
						{
							if (ConsoleModuleSettings[Module][TextStringPtr])
    26ee:	9d e1       	ldi	r25, 0x1D	; 29
    26f0:	90 9f       	mul	r25, r16
    26f2:	f0 01       	movw	r30, r0
    26f4:	91 9f       	mul	r25, r17
    26f6:	f0 0d       	add	r31, r0
    26f8:	11 24       	eor	r1, r1
    26fa:	e1 56       	subi	r30, 0x61	; 97
    26fc:	f0 4d       	sbci	r31, 0xD0	; 208
    26fe:	e8 0f       	add	r30, r24
    2700:	f1 1d       	adc	r31, r1
    2702:	80 81       	ld	r24, Z
    2704:	88 23       	and	r24, r24
    2706:	39 f0       	breq	.+14     	; 0x2716 <__DATA_REGION_LENGTH__+0x716>
							{
								Buffer[11] = 'Y';
    2708:	89 e5       	ldi	r24, 0x59	; 89
    270a:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'e';
    270c:	85 e6       	ldi	r24, 0x65	; 101
    270e:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 's';
    2710:	83 e7       	ldi	r24, 0x73	; 115
    2712:	8e 87       	std	Y+14, r24	; 0x0e
    2714:	06 c0       	rjmp	.+12     	; 0x2722 <__DATA_REGION_LENGTH__+0x722>
							}
							else
							{
								Buffer[11] = ' ';
    2716:	80 e2       	ldi	r24, 0x20	; 32
    2718:	8c 87       	std	Y+12, r24	; 0x0c
								Buffer[12] = 'N';
    271a:	8e e4       	ldi	r24, 0x4E	; 78
    271c:	8d 87       	std	Y+13, r24	; 0x0d
								Buffer[13] = 'o';
    271e:	8f e6       	ldi	r24, 0x6F	; 111
    2720:	8e 87       	std	Y+14, r24	; 0x0e
							}
						}
						SetLCD(0,"\xC0");
    2722:	6f e2       	ldi	r22, 0x2F	; 47
    2724:	70 e2       	ldi	r23, 0x20	; 32
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	90 e0       	ldi	r25, 0x00	; 0
    272a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,Buffer);
    272e:	be 01       	movw	r22, r28
    2730:	6f 5f       	subi	r22, 0xFF	; 255
    2732:	7f 4f       	sbci	r23, 0xFF	; 255
    2734:	81 e0       	ldi	r24, 0x01	; 1
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						ShowFunction(TextStringPtr);
    273c:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    2740:	0e 94 29 03 	call	0x652	; 0x652 <ShowFunction>

			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    2744:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2748:	e1 e0       	ldi	r30, 0x01	; 1
    274a:	ea 0f       	add	r30, r26
    274c:	b0 e0       	ldi	r27, 0x00	; 0
    274e:	ae 58       	subi	r26, 0x8E	; 142
    2750:	ba 4d       	sbci	r27, 0xDA	; 218
    2752:	83 e9       	ldi	r24, 0x93	; 147
    2754:	8c 93       	st	X, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	8e 0f       	add	r24, r30
    275a:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    275e:	f0 e0       	ldi	r31, 0x00	; 0
    2760:	ee 58       	subi	r30, 0x8E	; 142
    2762:	fa 4d       	sbci	r31, 0xDA	; 218
    2764:	e0 82       	st	Z, r14
						for (cntByte=0; cntByte<29; cntByte++)
    2766:	80 e0       	ldi	r24, 0x00	; 0
    2768:	17 c0       	rjmp	.+46     	; 0x2798 <__DATA_REGION_LENGTH__+0x798>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] =
    276a:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    276e:	91 e0       	ldi	r25, 0x01	; 1
    2770:	9e 0f       	add	r25, r30
    2772:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    2776:	f0 e0       	ldi	r31, 0x00	; 0
							ConsoleModuleSettings[Module][cntByte]&0x7F;
    2778:	9d e1       	ldi	r25, 0x1D	; 29
    277a:	90 9f       	mul	r25, r16
    277c:	d0 01       	movw	r26, r0
    277e:	91 9f       	mul	r25, r17
    2780:	b0 0d       	add	r27, r0
    2782:	11 24       	eor	r1, r1
    2784:	a1 56       	subi	r26, 0x61	; 97
    2786:	b0 4d       	sbci	r27, 0xD0	; 208
    2788:	a8 0f       	add	r26, r24
    278a:	b1 1d       	adc	r27, r1
    278c:	9c 91       	ld	r25, X
			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
						for (cntByte=0; cntByte<29; cntByte++)
						{
							SerialBufferOut[SerialBufferOutPtrTop++] =
    278e:	ee 58       	subi	r30, 0x8E	; 142
    2790:	fa 4d       	sbci	r31, 0xDA	; 218
    2792:	9f 77       	andi	r25, 0x7F	; 127
    2794:	90 83       	st	Z, r25
						ShowFunction(TextStringPtr);

			
						SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
						SerialBufferOut[SerialBufferOutPtrTop++] = Module;
						for (cntByte=0; cntByte<29; cntByte++)
    2796:	8f 5f       	subi	r24, 0xFF	; 255
    2798:	8d 31       	cpi	r24, 0x1D	; 29
    279a:	38 f3       	brcs	.-50     	; 0x276a <__DATA_REGION_LENGTH__+0x76a>
    279c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
					}
				}
				break;
				default:
				{
					switch (ModuleType[Module])
    27a0:	ce 2c       	mov	r12, r14
    27a2:	d1 2c       	mov	r13, r1
    27a4:	f6 01       	movw	r30, r12
    27a6:	e6 5c       	subi	r30, 0xC6	; 198
    27a8:	fb 4d       	sbci	r31, 0xDB	; 219
    27aa:	80 81       	ld	r24, Z
    27ac:	81 30       	cpi	r24, 0x01	; 1
    27ae:	29 f0       	breq	.+10     	; 0x27ba <__DATA_REGION_LENGTH__+0x7ba>
    27b0:	82 30       	cpi	r24, 0x02	; 2
    27b2:	09 f4       	brne	.+2      	; 0x27b6 <__DATA_REGION_LENGTH__+0x7b6>
    27b4:	99 c0       	rjmp	.+306    	; 0x28e8 <__DATA_REGION_LENGTH__+0x8e8>
    27b6:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
					{
						case TRIPLE:
						{	// Triple
							if (EventOn)
    27ba:	01 2b       	or	r16, r17
    27bc:	11 f0       	breq	.+4      	; 0x27c2 <__DATA_REGION_LENGTH__+0x7c2>
    27be:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
							{
								if (ConsoleFunctionData[Module]&CUE_FUNCTION)
    27c2:	f6 01       	movw	r30, r12
    27c4:	e3 5b       	subi	r30, 0xB3	; 179
    27c6:	fb 4d       	sbci	r31, 0xDB	; 219
    27c8:	80 81       	ld	r24, Z
    27ca:	82 ff       	sbrs	r24, 2
    27cc:	45 c0       	rjmp	.+138    	; 0x2858 <__DATA_REGION_LENGTH__+0x858>
								{
									unsigned char cntModule;

									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    27ce:	0d e4       	ldi	r16, 0x4D	; 77
    27d0:	14 e2       	ldi	r17, 0x24	; 36
    27d2:	f6 01       	movw	r30, r12
    27d4:	e3 5b       	subi	r30, 0xB3	; 179
    27d6:	fb 4d       	sbci	r31, 0xDB	; 219
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    27d8:	83 7f       	andi	r24, 0xF3	; 243
    27da:	80 83       	st	Z, r24

									CheckStartCondition(Module);
    27dc:	8e 2d       	mov	r24, r14
    27de:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>
									//DJ-Control
									DJControl();
    27e2:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>

									//Check auto communication
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    27e6:	f8 01       	movw	r30, r16
    27e8:	80 89       	ldd	r24, Z+16	; 0x10
    27ea:	87 7f       	andi	r24, 0xF7	; 247
    27ec:	80 8b       	std	Z+16, r24	; 0x10
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    27ee:	80 e0       	ldi	r24, 0x00	; 0
    27f0:	2b c0       	rjmp	.+86     	; 0x2848 <__DATA_REGION_LENGTH__+0x848>
									{
										if (ConsoleFunctionData[cntModule]&CUE_LED)
    27f2:	28 2f       	mov	r18, r24
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	f9 01       	movw	r30, r18
    27f8:	e3 5b       	subi	r30, 0xB3	; 179
    27fa:	fb 4d       	sbci	r31, 0xDB	; 219
    27fc:	90 81       	ld	r25, Z
    27fe:	93 ff       	sbrs	r25, 3
    2800:	22 c0       	rjmp	.+68     	; 0x2846 <__DATA_REGION_LENGTH__+0x846>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    2802:	f9 01       	movw	r30, r18
    2804:	ee 0f       	add	r30, r30
    2806:	ff 1f       	adc	r31, r31
    2808:	ee 0f       	add	r30, r30
    280a:	ff 1f       	adc	r31, r31
    280c:	ee 0f       	add	r30, r30
    280e:	ff 1f       	adc	r31, r31
    2810:	e8 54       	subi	r30, 0x48	; 72
    2812:	f7 4d       	sbci	r31, 0xD7	; 215
    2814:	47 81       	ldd	r20, Z+7	; 0x07
    2816:	44 23       	and	r20, r20
    2818:	b4 f4       	brge	.+44     	; 0x2846 <__DATA_REGION_LENGTH__+0x846>
    281a:	4d e1       	ldi	r20, 0x1D	; 29
    281c:	42 9f       	mul	r20, r18
    281e:	f0 01       	movw	r30, r0
    2820:	43 9f       	mul	r20, r19
    2822:	f0 0d       	add	r31, r0
    2824:	11 24       	eor	r1, r1
    2826:	e1 56       	subi	r30, 0x61	; 97
    2828:	f0 4d       	sbci	r31, 0xD0	; 208
    282a:	26 85       	ldd	r18, Z+14	; 0x0e
    282c:	22 23       	and	r18, r18
    282e:	59 f0       	breq	.+22     	; 0x2846 <__DATA_REGION_LENGTH__+0x846>
    2830:	94 ff       	sbrs	r25, 4
    2832:	09 c0       	rjmp	.+18     	; 0x2846 <__DATA_REGION_LENGTH__+0x846>
    2834:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <ConsoleMasterSettings+0x2>
    2838:	99 23       	and	r25, r25
    283a:	29 f0       	breq	.+10     	; 0x2846 <__DATA_REGION_LENGTH__+0x846>
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    283c:	ed e4       	ldi	r30, 0x4D	; 77
    283e:	f4 e2       	ldi	r31, 0x24	; 36
    2840:	90 89       	ldd	r25, Z+16	; 0x10
    2842:	98 60       	ori	r25, 0x08	; 8
    2844:	90 8b       	std	Z+16, r25	; 0x10
									//DJ-Control
									DJControl();

									//Check auto communication
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2846:	8f 5f       	subi	r24, 0xFF	; 255
    2848:	80 31       	cpi	r24, 0x10	; 16
    284a:	98 f2       	brcs	.-90     	; 0x27f2 <__DATA_REGION_LENGTH__+0x7f2>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
										}
									}
  								CheckTBMic();
    284c:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
									SendSerialData = 1;
    2850:	81 e0       	ldi	r24, 0x01	; 1
    2852:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2856:	44 c0       	rjmp	.+136    	; 0x28e0 <__DATA_REGION_LENGTH__+0x8e0>
								}
								else
								{
									unsigned char cntModule;

									ConsoleFunctionData[Module] |= CUE_LED;
    2858:	0d e4       	ldi	r16, 0x4D	; 77
    285a:	14 e2       	ldi	r17, 0x24	; 36
    285c:	f6 01       	movw	r30, r12
    285e:	e3 5b       	subi	r30, 0xB3	; 179
    2860:	fb 4d       	sbci	r31, 0xDB	; 219
									ConsoleFunctionData[Module] |= CUE_FUNCTION;
    2862:	8c 60       	ori	r24, 0x0C	; 12
    2864:	80 83       	st	Z, r24
									CheckStartCondition(Module);									
    2866:	8e 2d       	mov	r24, r14
    2868:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>

									//DJ-Control
									DJControl();
    286c:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>

									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    2870:	f8 01       	movw	r30, r16
    2872:	80 89       	ldd	r24, Z+16	; 0x10
    2874:	87 7f       	andi	r24, 0xF7	; 247
    2876:	80 8b       	std	Z+16, r24	; 0x10
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	2b c0       	rjmp	.+86     	; 0x28d2 <__DATA_REGION_LENGTH__+0x8d2>
									{
										if (ConsoleFunctionData[cntModule]&CUE_LED)
    287c:	28 2f       	mov	r18, r24
    287e:	30 e0       	ldi	r19, 0x00	; 0
    2880:	f9 01       	movw	r30, r18
    2882:	e3 5b       	subi	r30, 0xB3	; 179
    2884:	fb 4d       	sbci	r31, 0xDB	; 219
    2886:	90 81       	ld	r25, Z
    2888:	93 ff       	sbrs	r25, 3
    288a:	22 c0       	rjmp	.+68     	; 0x28d0 <__DATA_REGION_LENGTH__+0x8d0>
										{
											if ((ModuleData[cntModule][MIC_RING]&0x80) && (ConsoleModuleSettings[cntModule][ANNMIC]) && (ConsoleFunctionData[cntModule]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    288c:	f9 01       	movw	r30, r18
    288e:	ee 0f       	add	r30, r30
    2890:	ff 1f       	adc	r31, r31
    2892:	ee 0f       	add	r30, r30
    2894:	ff 1f       	adc	r31, r31
    2896:	ee 0f       	add	r30, r30
    2898:	ff 1f       	adc	r31, r31
    289a:	e8 54       	subi	r30, 0x48	; 72
    289c:	f7 4d       	sbci	r31, 0xD7	; 215
    289e:	47 81       	ldd	r20, Z+7	; 0x07
    28a0:	44 23       	and	r20, r20
    28a2:	b4 f4       	brge	.+44     	; 0x28d0 <__DATA_REGION_LENGTH__+0x8d0>
    28a4:	4d e1       	ldi	r20, 0x1D	; 29
    28a6:	42 9f       	mul	r20, r18
    28a8:	f0 01       	movw	r30, r0
    28aa:	43 9f       	mul	r20, r19
    28ac:	f0 0d       	add	r31, r0
    28ae:	11 24       	eor	r1, r1
    28b0:	e1 56       	subi	r30, 0x61	; 97
    28b2:	f0 4d       	sbci	r31, 0xD0	; 208
    28b4:	26 85       	ldd	r18, Z+14	; 0x0e
    28b6:	22 23       	and	r18, r18
    28b8:	59 f0       	breq	.+22     	; 0x28d0 <__DATA_REGION_LENGTH__+0x8d0>
    28ba:	94 ff       	sbrs	r25, 4
    28bc:	09 c0       	rjmp	.+18     	; 0x28d0 <__DATA_REGION_LENGTH__+0x8d0>
    28be:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <ConsoleMasterSettings+0x2>
    28c2:	99 23       	and	r25, r25
    28c4:	29 f0       	breq	.+10     	; 0x28d0 <__DATA_REGION_LENGTH__+0x8d0>
											{
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    28c6:	ed e4       	ldi	r30, 0x4D	; 77
    28c8:	f4 e2       	ldi	r31, 0x24	; 36
    28ca:	90 89       	ldd	r25, Z+16	; 0x10
    28cc:	98 60       	ori	r25, 0x08	; 8
    28ce:	90 8b       	std	Z+16, r25	; 0x10

									//DJ-Control
									DJControl();

									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    28d0:	8f 5f       	subi	r24, 0xFF	; 255
    28d2:	80 31       	cpi	r24, 0x10	; 16
    28d4:	98 f2       	brcs	.-90     	; 0x287c <__DATA_REGION_LENGTH__+0x87c>
											{
												ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
											}
										}
								}
  								CheckTBMic();
    28d6:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
									SendSerialData = 1;
    28da:	81 e0       	ldi	r24, 0x01	; 1
    28dc:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
								}
								// Cue-Control
								CueControl();
    28e0:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
    28e4:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
							}
						}
						break;
						case TELCO:
						{	// Telco
							if ((EventOn) && (!(ModuleData[Module][FADERON]&0x80)))
    28e8:	01 2b       	or	r16, r17
    28ea:	11 f0       	breq	.+4      	; 0x28f0 <__DATA_REGION_LENGTH__+0x8f0>
    28ec:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
    28f0:	f6 01       	movw	r30, r12
    28f2:	ee 0f       	add	r30, r30
    28f4:	ff 1f       	adc	r31, r31
    28f6:	ee 0f       	add	r30, r30
    28f8:	ff 1f       	adc	r31, r31
    28fa:	ee 0f       	add	r30, r30
    28fc:	ff 1f       	adc	r31, r31
    28fe:	e8 54       	subi	r30, 0x48	; 72
    2900:	f7 4d       	sbci	r31, 0xD7	; 215
    2902:	81 81       	ldd	r24, Z+1	; 0x01
    2904:	88 23       	and	r24, r24
    2906:	14 f4       	brge	.+4      	; 0x290c <__DATA_REGION_LENGTH__+0x90c>
    2908:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
							{	 // JB
								char TelcoNr = GetTelcoNrFromModuleNr(Module);
    290c:	8e 2d       	mov	r24, r14
    290e:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>

								if (ConsoleFunctionData[Module]&CUE_FUNCTION)
    2912:	f6 01       	movw	r30, r12
    2914:	e3 5b       	subi	r30, 0xB3	; 179
    2916:	fb 4d       	sbci	r31, 0xDB	; 219
    2918:	90 81       	ld	r25, Z
    291a:	92 ff       	sbrs	r25, 2
    291c:	24 c0       	rjmp	.+72     	; 0x2966 <__DATA_REGION_LENGTH__+0x966>
								{
									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    291e:	f6 01       	movw	r30, r12
    2920:	e3 5b       	subi	r30, 0xB3	; 179
    2922:	fb 4d       	sbci	r31, 0xDB	; 219
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2924:	93 7f       	andi	r25, 0xF3	; 243
    2926:	90 83       	st	Z, r25

									if ((TelcoNr>=0) && (TelcoNr<4))
    2928:	84 30       	cpi	r24, 0x04	; 4
    292a:	b8 f4       	brcc	.+46     	; 0x295a <__DATA_REGION_LENGTH__+0x95a>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    292c:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2930:	a1 e0       	ldi	r26, 0x01	; 1
    2932:	ae 0f       	add	r26, r30
    2934:	f0 e0       	ldi	r31, 0x00	; 0
    2936:	ee 58       	subi	r30, 0x8E	; 142
    2938:	fa 4d       	sbci	r31, 0xDA	; 218
    293a:	92 ec       	ldi	r25, 0xC2	; 194
    293c:	90 83       	st	Z, r25
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    293e:	e1 e0       	ldi	r30, 0x01	; 1
    2940:	ea 0f       	add	r30, r26
    2942:	b0 e0       	ldi	r27, 0x00	; 0
    2944:	ae 58       	subi	r26, 0x8E	; 142
    2946:	ba 4d       	sbci	r27, 0xDA	; 218
    2948:	8c 93       	st	X, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    294a:	81 e0       	ldi	r24, 0x01	; 1
    294c:	8e 0f       	add	r24, r30
    294e:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2952:	f0 e0       	ldi	r31, 0x00	; 0
    2954:	ee 58       	subi	r30, 0x8E	; 142
    2956:	fa 4d       	sbci	r31, 0xDA	; 218
    2958:	10 82       	st	Z, r1
									}
									CheckTBMic();
    295a:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
									SendSerialData = 1;
    295e:	81 e0       	ldi	r24, 0x01	; 1
    2960:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2964:	59 c0       	rjmp	.+178    	; 0x2a18 <__DATA_REGION_LENGTH__+0xa18>
								}
								else
								{
									ConsoleFunctionData[Module] |= START_FUNCTION;
    2966:	f6 01       	movw	r30, r12
    2968:	e3 5b       	subi	r30, 0xB3	; 179
    296a:	fb 4d       	sbci	r31, 0xDB	; 219
									ConsoleFunctionData[Module] |= ON_LED;
									ConsoleFunctionData[Module] |= CUE_LED;
									ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    296c:	9b 62       	ori	r25, 0x2B	; 43
    296e:	90 83       	st	Z, r25
//									ConsoleFunctionData[Module] |= CUE_FUNCTION;
									cntCueFunction[Module] = DELAY;
    2970:	f6 01       	movw	r30, r12
    2972:	e3 52       	subi	r30, 0x23	; 35
    2974:	fd 4d       	sbci	r31, 0xDD	; 221
    2976:	9a e0       	ldi	r25, 0x0A	; 10
    2978:	90 83       	st	Z, r25

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
    297a:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    297e:	e1 e0       	ldi	r30, 0x01	; 1
    2980:	ea 0f       	add	r30, r26
    2982:	b0 e0       	ldi	r27, 0x00	; 0
    2984:	ae 58       	subi	r26, 0x8E	; 142
    2986:	ba 4d       	sbci	r27, 0xDA	; 218
    2988:	92 e8       	ldi	r25, 0x82	; 130
    298a:	9c 93       	st	X, r25
									SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    298c:	a1 e0       	ldi	r26, 0x01	; 1
    298e:	ae 0f       	add	r26, r30
    2990:	f0 e0       	ldi	r31, 0x00	; 0
    2992:	ee 58       	subi	r30, 0x8E	; 142
    2994:	fa 4d       	sbci	r31, 0xDA	; 218
    2996:	e0 82       	st	Z, r14
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2998:	e1 e0       	ldi	r30, 0x01	; 1
    299a:	ea 0f       	add	r30, r26
    299c:	e0 93 4c 24 	sts	0x244C, r30	; 0x80244c <SerialBufferOutPtrTop>
    29a0:	b0 e0       	ldi	r27, 0x00	; 0
    29a2:	ae 58       	subi	r26, 0x8E	; 142
    29a4:	ba 4d       	sbci	r27, 0xDA	; 218
    29a6:	91 e0       	ldi	r25, 0x01	; 1
    29a8:	9c 93       	st	X, r25

									if ((TelcoNr>=0) && (TelcoNr<4))
    29aa:	84 30       	cpi	r24, 0x04	; 4
    29ac:	b0 f4       	brcc	.+44     	; 0x29da <__DATA_REGION_LENGTH__+0x9da>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    29ae:	a1 e0       	ldi	r26, 0x01	; 1
    29b0:	ae 0f       	add	r26, r30
    29b2:	f0 e0       	ldi	r31, 0x00	; 0
    29b4:	ee 58       	subi	r30, 0x8E	; 142
    29b6:	fa 4d       	sbci	r31, 0xDA	; 218
    29b8:	90 ec       	ldi	r25, 0xC0	; 192
    29ba:	90 83       	st	Z, r25
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    29bc:	e1 e0       	ldi	r30, 0x01	; 1
    29be:	ea 0f       	add	r30, r26
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	ae 58       	subi	r26, 0x8E	; 142
    29c4:	ba 4d       	sbci	r27, 0xDA	; 218
    29c6:	8c 93       	st	X, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    29c8:	91 e0       	ldi	r25, 0x01	; 1
    29ca:	9e 0f       	add	r25, r30
    29cc:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	ee 58       	subi	r30, 0x8E	; 142
    29d4:	fa 4d       	sbci	r31, 0xDA	; 218
    29d6:	91 e0       	ldi	r25, 0x01	; 1
    29d8:	90 83       	st	Z, r25
									}

									if ((TelcoNr>=0) && (TelcoNr<4))
    29da:	84 30       	cpi	r24, 0x04	; 4
    29dc:	c0 f4       	brcc	.+48     	; 0x2a0e <__DATA_REGION_LENGTH__+0xa0e>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    29de:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    29e2:	a1 e0       	ldi	r26, 0x01	; 1
    29e4:	ae 0f       	add	r26, r30
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	ee 58       	subi	r30, 0x8E	; 142
    29ea:	fa 4d       	sbci	r31, 0xDA	; 218
    29ec:	92 ec       	ldi	r25, 0xC2	; 194
    29ee:	90 83       	st	Z, r25
										SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    29f0:	e1 e0       	ldi	r30, 0x01	; 1
    29f2:	ea 0f       	add	r30, r26
    29f4:	b0 e0       	ldi	r27, 0x00	; 0
    29f6:	ae 58       	subi	r26, 0x8E	; 142
    29f8:	ba 4d       	sbci	r27, 0xDA	; 218
    29fa:	8c 93       	st	X, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	8e 0f       	add	r24, r30
    2a00:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	ee 58       	subi	r30, 0x8E	; 142
    2a08:	fa 4d       	sbci	r31, 0xDA	; 218
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	80 83       	st	Z, r24
									}
									CheckTBMic();
    2a0e:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
									SendSerialData = 1;
    2a12:	81 e0       	ldi	r24, 0x01	; 1
    2a14:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
								}
								// Cue-Control
								CueControl();
    2a18:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
    2a1c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case ON:
		{
			switch (ModuleType[Module])
    2a20:	ce 2c       	mov	r12, r14
    2a22:	d1 2c       	mov	r13, r1
    2a24:	f6 01       	movw	r30, r12
    2a26:	e6 5c       	subi	r30, 0xC6	; 198
    2a28:	fb 4d       	sbci	r31, 0xDB	; 219
    2a2a:	80 81       	ld	r24, Z
    2a2c:	81 30       	cpi	r24, 0x01	; 1
    2a2e:	29 f0       	breq	.+10     	; 0x2a3a <__DATA_REGION_LENGTH__+0xa3a>
    2a30:	82 30       	cpi	r24, 0x02	; 2
    2a32:	09 f4       	brne	.+2      	; 0x2a36 <__DATA_REGION_LENGTH__+0xa36>
    2a34:	c4 c0       	rjmp	.+392    	; 0x2bbe <__DATA_REGION_LENGTH__+0xbbe>
    2a36:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			{
				case TRIPLE:
				{	// Triple
					if (ConsoleModuleSettings[Module][SWITCHSTART])
    2a3a:	8d e1       	ldi	r24, 0x1D	; 29
    2a3c:	8c 9d       	mul	r24, r12
    2a3e:	f0 01       	movw	r30, r0
    2a40:	8d 9d       	mul	r24, r13
    2a42:	f0 0d       	add	r31, r0
    2a44:	11 24       	eor	r1, r1
    2a46:	e1 56       	subi	r30, 0x61	; 97
    2a48:	f0 4d       	sbci	r31, 0xD0	; 208
    2a4a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2a4c:	88 23       	and	r24, r24
    2a4e:	59 f1       	breq	.+86     	; 0x2aa6 <__DATA_REGION_LENGTH__+0xaa6>
					{
						ConsoleFunctionData[Module] |= ON_LED;
    2a50:	f6 01       	movw	r30, r12
    2a52:	e3 5b       	subi	r30, 0xB3	; 179
    2a54:	fb 4d       	sbci	r31, 0xDB	; 219
    2a56:	80 81       	ld	r24, Z
						ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    2a58:	81 62       	ori	r24, 0x21	; 33
						ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    2a5a:	8f 7e       	andi	r24, 0xEF	; 239
    2a5c:	80 83       	st	Z, r24

						if (EventOn)
    2a5e:	01 2b       	or	r16, r17
    2a60:	51 f4       	brne	.+20     	; 0x2a76 <__DATA_REGION_LENGTH__+0xa76>
						{
							StartControl(Module,1);
    2a62:	61 e0       	ldi	r22, 0x01	; 1
    2a64:	8e 2d       	mov	r24, r14
    2a66:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
							StartActive[Module] = 1;
    2a6a:	f6 01       	movw	r30, r12
    2a6c:	ef 5b       	subi	r30, 0xBF	; 191
    2a6e:	f6 4d       	sbci	r31, 0xD6	; 214
    2a70:	81 e0       	ldi	r24, 0x01	; 1
    2a72:	80 83       	st	Z, r24
    2a74:	13 c0       	rjmp	.+38     	; 0x2a9c <__DATA_REGION_LENGTH__+0xa9c>
						}
						else
						{
							if (!ConsoleModuleSettings[Module][STARTPULS])
    2a76:	8d e1       	ldi	r24, 0x1D	; 29
    2a78:	8c 9d       	mul	r24, r12
    2a7a:	f0 01       	movw	r30, r0
    2a7c:	8d 9d       	mul	r24, r13
    2a7e:	f0 0d       	add	r31, r0
    2a80:	11 24       	eor	r1, r1
    2a82:	e1 56       	subi	r30, 0x61	; 97
    2a84:	f0 4d       	sbci	r31, 0xD0	; 208
    2a86:	81 85       	ldd	r24, Z+9	; 0x09
    2a88:	81 11       	cpse	r24, r1
    2a8a:	08 c0       	rjmp	.+16     	; 0x2a9c <__DATA_REGION_LENGTH__+0xa9c>
							{
								StartControl(Module,0);
    2a8c:	60 e0       	ldi	r22, 0x00	; 0
    2a8e:	8e 2d       	mov	r24, r14
    2a90:	0e 94 10 06 	call	0xc20	; 0xc20 <StartControl>
								StartActive[Module] = 0;
    2a94:	f6 01       	movw	r30, r12
    2a96:	ef 5b       	subi	r30, 0xBF	; 191
    2a98:	f6 4d       	sbci	r31, 0xD6	; 214
    2a9a:	10 82       	st	Z, r1
							}
						}
						SendSerialData = 1;
    2a9c:	81 e0       	ldi	r24, 0x01	; 1
    2a9e:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2aa2:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
					}
					else
					{
						if (EventOn)
    2aa6:	01 2b       	or	r16, r17
    2aa8:	11 f0       	breq	.+4      	; 0x2aae <__DATA_REGION_LENGTH__+0xaae>
    2aaa:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						{
							if (ConsoleFunctionData[Module]&ON_LED)
    2aae:	f6 01       	movw	r30, r12
    2ab0:	e3 5b       	subi	r30, 0xB3	; 179
    2ab2:	fb 4d       	sbci	r31, 0xDB	; 219
    2ab4:	80 81       	ld	r24, Z
    2ab6:	85 ff       	sbrs	r24, 5
    2ab8:	27 c0       	rjmp	.+78     	; 0x2b08 <__DATA_REGION_LENGTH__+0xb08>
							{
								ConsoleFunctionData[Module] &= ON_LED^0xFF;
    2aba:	8f 01       	movw	r16, r30
								ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
    2abc:	8e 7d       	andi	r24, 0xDE	; 222
    2abe:	80 83       	st	Z, r24
	
								CheckStartCondition(Module);
    2ac0:	8e 2d       	mov	r24, r14
    2ac2:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>

								ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    2ac6:	f8 01       	movw	r30, r16
    2ac8:	80 81       	ld	r24, Z
    2aca:	80 61       	ori	r24, 0x10	; 16
    2acc:	80 83       	st	Z, r24
				
								if ((ModuleData[Module][FADERON]&0x80))
    2ace:	f6 01       	movw	r30, r12
    2ad0:	ee 0f       	add	r30, r30
    2ad2:	ff 1f       	adc	r31, r31
    2ad4:	ee 0f       	add	r30, r30
    2ad6:	ff 1f       	adc	r31, r31
    2ad8:	ee 0f       	add	r30, r30
    2ada:	ff 1f       	adc	r31, r31
    2adc:	e8 54       	subi	r30, 0x48	; 72
    2ade:	f7 4d       	sbci	r31, 0xD7	; 215
    2ae0:	81 81       	ldd	r24, Z+1	; 0x01
    2ae2:	88 23       	and	r24, r24
    2ae4:	64 f4       	brge	.+24     	; 0x2afe <__DATA_REGION_LENGTH__+0xafe>
								{	 // !JB
									CheckStartCondition(Module);
    2ae6:	8e 2d       	mov	r24, r14
    2ae8:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>

									//DJ-Control
									DJControl();
    2aec:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
			
									//Studio-Mic-Control
									StudioMicControl();			
    2af0:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>

									//Timer-Control
									TimerControl(Module);
    2af4:	8e 2d       	mov	r24, r14
    2af6:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
				
									//OnAir Control
									OnAirControl();
    2afa:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>
								}
								SendSerialData = 1;
    2afe:	81 e0       	ldi	r24, 0x01	; 1
    2b00:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2b04:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
							}
							else
							{
								ConsoleFunctionData[Module] |= ON_LED;
    2b08:	f6 01       	movw	r30, r12
    2b0a:	e3 5b       	subi	r30, 0xB3	; 179
    2b0c:	fb 4d       	sbci	r31, 0xDB	; 219
    2b0e:	80 62       	ori	r24, 0x20	; 32
    2b10:	80 83       	st	Z, r24

								CheckStartCondition(Module);
    2b12:	8e 2d       	mov	r24, r14
    2b14:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>

								if ((ModuleData[Module][FADERON]&0x80))
    2b18:	f6 01       	movw	r30, r12
    2b1a:	ee 0f       	add	r30, r30
    2b1c:	ff 1f       	adc	r31, r31
    2b1e:	ee 0f       	add	r30, r30
    2b20:	ff 1f       	adc	r31, r31
    2b22:	ee 0f       	add	r30, r30
    2b24:	ff 1f       	adc	r31, r31
    2b26:	e8 54       	subi	r30, 0x48	; 72
    2b28:	f7 4d       	sbci	r31, 0xD7	; 215
    2b2a:	81 81       	ldd	r24, Z+1	; 0x01
    2b2c:	88 23       	and	r24, r24
    2b2e:	0c f0       	brlt	.+2      	; 0x2b32 <__DATA_REGION_LENGTH__+0xb32>
    2b30:	41 c0       	rjmp	.+130    	; 0x2bb4 <__DATA_REGION_LENGTH__+0xbb4>
								{	 // !JB
									ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    2b32:	86 01       	movw	r16, r12
    2b34:	03 5b       	subi	r16, 0xB3	; 179
    2b36:	1b 4d       	sbci	r17, 0xDB	; 219
    2b38:	f8 01       	movw	r30, r16
    2b3a:	80 81       	ld	r24, Z
    2b3c:	81 60       	ori	r24, 0x01	; 1
    2b3e:	80 83       	st	Z, r24

									CheckStartCondition(Module);
    2b40:	8e 2d       	mov	r24, r14
    2b42:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>

									ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2b46:	f8 01       	movw	r30, r16
    2b48:	80 81       	ld	r24, Z
									ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2b4a:	83 7f       	andi	r24, 0xF3	; 243
    2b4c:	80 83       	st	Z, r24
								
									//Cue-Control
									if (ConsoleMasterSettings[AUTOCUERESET])
    2b4e:	90 91 3b 29 	lds	r25, 0x293B	; 0x80293b <ConsoleMasterSettings>
    2b52:	99 23       	and	r25, r25
    2b54:	d9 f0       	breq	.+54     	; 0x2b8c <__DATA_REGION_LENGTH__+0xb8c>
									{
										if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2b56:	f6 01       	movw	r30, r12
    2b58:	ee 0f       	add	r30, r30
    2b5a:	ff 1f       	adc	r31, r31
    2b5c:	ee 0f       	add	r30, r30
    2b5e:	ff 1f       	adc	r31, r31
    2b60:	ee 0f       	add	r30, r30
    2b62:	ff 1f       	adc	r31, r31
    2b64:	e8 54       	subi	r30, 0x48	; 72
    2b66:	f7 4d       	sbci	r31, 0xD7	; 215
    2b68:	91 81       	ldd	r25, Z+1	; 0x01
    2b6a:	99 23       	and	r25, r25
    2b6c:	7c f4       	brge	.+30     	; 0x2b8c <__DATA_REGION_LENGTH__+0xb8c>
    2b6e:	85 fd       	sbrc	r24, 5
    2b70:	0a c0       	rjmp	.+20     	; 0x2b86 <__DATA_REGION_LENGTH__+0xb86>
    2b72:	0c c0       	rjmp	.+24     	; 0x2b8c <__DATA_REGION_LENGTH__+0xb8c>
										{	 // !JB
											unsigned char cntModule;
											for (cntModule=0; cntModule<NROFMODULES; cntModule++)
											{
												ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    2b74:	e8 2f       	mov	r30, r24
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	e3 5b       	subi	r30, 0xB3	; 179
    2b7a:	fb 4d       	sbci	r31, 0xDB	; 219
    2b7c:	90 81       	ld	r25, Z
												ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    2b7e:	93 7f       	andi	r25, 0xF3	; 243
    2b80:	90 83       	st	Z, r25
									if (ConsoleMasterSettings[AUTOCUERESET])
									{
										if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
										{	 // !JB
											unsigned char cntModule;
											for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2b82:	8f 5f       	subi	r24, 0xFF	; 255
    2b84:	01 c0       	rjmp	.+2      	; 0x2b88 <__DATA_REGION_LENGTH__+0xb88>
    2b86:	80 e0       	ldi	r24, 0x00	; 0
    2b88:	80 31       	cpi	r24, 0x10	; 16
    2b8a:	a0 f3       	brcs	.-24     	; 0x2b74 <__DATA_REGION_LENGTH__+0xb74>
												ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
												ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
											}
										}
									}
									CueControl();
    2b8c:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
			
									//Timer-Control
									TimerControl(Module);
    2b90:	8e 2d       	mov	r24, r14
    2b92:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
											
									//OnAirControl
									OnAirControl();
    2b96:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>

									//DJ-Control
									DJControl();
    2b9a:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
			
									//Studio-Mic-Control
									StudioMicControl();
    2b9e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>

									CheckStartCondition(Module);
    2ba2:	8e 2d       	mov	r24, r14
    2ba4:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>
														
									ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;					
    2ba8:	f6 01       	movw	r30, r12
    2baa:	e3 5b       	subi	r30, 0xB3	; 179
    2bac:	fb 4d       	sbci	r31, 0xDB	; 219
    2bae:	80 81       	ld	r24, Z
    2bb0:	8f 7e       	andi	r24, 0xEF	; 239
    2bb2:	80 83       	st	Z, r24
								}
								SendSerialData = 1;
    2bb4:	81 e0       	ldi	r24, 0x01	; 1
    2bb6:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2bba:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
					}
				}
				break;
				case TELCO:
				{ //Telco
					if (EventOn)
    2bbe:	01 2b       	or	r16, r17
    2bc0:	11 f0       	breq	.+4      	; 0x2bc6 <__DATA_REGION_LENGTH__+0xbc6>
    2bc2:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
					{
						char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2bc6:	8e 2d       	mov	r24, r14
    2bc8:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
    2bcc:	18 2f       	mov	r17, r24

						if (ConsoleFunctionData[Module]&ON_LED)
    2bce:	f6 01       	movw	r30, r12
    2bd0:	e3 5b       	subi	r30, 0xB3	; 179
    2bd2:	fb 4d       	sbci	r31, 0xDB	; 219
    2bd4:	80 81       	ld	r24, Z
    2bd6:	85 ff       	sbrs	r24, 5
    2bd8:	86 c0       	rjmp	.+268    	; 0x2ce6 <__DATA_REGION_LENGTH__+0xce6>
						{
							char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2bda:	8e 2d       	mov	r24, r14
    2bdc:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
    2be0:	18 2f       	mov	r17, r24
							if ((TelcoNr>=0) && (TelcoNr<4))
    2be2:	84 30       	cpi	r24, 0x04	; 4
    2be4:	50 f5       	brcc	.+84     	; 0x2c3a <__DATA_REGION_LENGTH__+0xc3a>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2be6:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2bea:	e1 e0       	ldi	r30, 0x01	; 1
    2bec:	ea 0f       	add	r30, r26
    2bee:	b0 e0       	ldi	r27, 0x00	; 0
    2bf0:	ae 58       	subi	r26, 0x8E	; 142
    2bf2:	ba 4d       	sbci	r27, 0xDA	; 218
    2bf4:	82 ec       	ldi	r24, 0xC2	; 194
    2bf6:	8c 93       	st	X, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2bf8:	a1 e0       	ldi	r26, 0x01	; 1
    2bfa:	ae 0f       	add	r26, r30
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	ee 58       	subi	r30, 0x8E	; 142
    2c00:	fa 4d       	sbci	r31, 0xDA	; 218
    2c02:	10 83       	st	Z, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2c04:	e1 e0       	ldi	r30, 0x01	; 1
    2c06:	ea 0f       	add	r30, r26
    2c08:	b0 e0       	ldi	r27, 0x00	; 0
    2c0a:	ae 58       	subi	r26, 0x8E	; 142
    2c0c:	ba 4d       	sbci	r27, 0xDA	; 218
    2c0e:	1c 92       	st	X, r1

								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    2c10:	a1 e0       	ldi	r26, 0x01	; 1
    2c12:	ae 0f       	add	r26, r30
    2c14:	f0 e0       	ldi	r31, 0x00	; 0
    2c16:	ee 58       	subi	r30, 0x8E	; 142
    2c18:	fa 4d       	sbci	r31, 0xDA	; 218
    2c1a:	83 ec       	ldi	r24, 0xC3	; 195
    2c1c:	80 83       	st	Z, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2c1e:	e1 e0       	ldi	r30, 0x01	; 1
    2c20:	ea 0f       	add	r30, r26
    2c22:	b0 e0       	ldi	r27, 0x00	; 0
    2c24:	ae 58       	subi	r26, 0x8E	; 142
    2c26:	ba 4d       	sbci	r27, 0xDA	; 218
    2c28:	1c 93       	st	X, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2c2a:	81 e0       	ldi	r24, 0x01	; 1
    2c2c:	8e 0f       	add	r24, r30
    2c2e:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2c32:	f0 e0       	ldi	r31, 0x00	; 0
    2c34:	ee 58       	subi	r30, 0x8E	; 142
    2c36:	fa 4d       	sbci	r31, 0xDA	; 218
    2c38:	10 82       	st	Z, r1
							}

							ConsoleFunctionData[Module] &= ON_LED^0xFF;
    2c3a:	f6 01       	movw	r30, r12
    2c3c:	e3 5b       	subi	r30, 0xB3	; 179
    2c3e:	fb 4d       	sbci	r31, 0xDB	; 219
    2c40:	80 81       	ld	r24, Z
    2c42:	8f 7d       	andi	r24, 0xDF	; 223
							ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    2c44:	80 61       	ori	r24, 0x10	; 16
							ConsoleFunctionData[Module] &= REMOTE_FUNCTION^0xFF;
							ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
							ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2c46:	82 7f       	andi	r24, 0xF2	; 242
    2c48:	80 83       	st	Z, r24
//							ConsoleFunctionData[Module] &= START_FUNCTION^0xFF;			
							cntStartFunction[Module] = DELAY;
    2c4a:	f6 01       	movw	r30, r12
    2c4c:	e1 5a       	subi	r30, 0xA1	; 161
    2c4e:	fb 4d       	sbci	r31, 0xDB	; 219
    2c50:	8a e0       	ldi	r24, 0x0A	; 10
    2c52:	80 83       	st	Z, r24
				
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_STOP;
    2c54:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2c58:	a1 e0       	ldi	r26, 0x01	; 1
    2c5a:	ae 0f       	add	r26, r30
    2c5c:	f0 e0       	ldi	r31, 0x00	; 0
    2c5e:	ee 58       	subi	r30, 0x8E	; 142
    2c60:	fa 4d       	sbci	r31, 0xDA	; 218
    2c62:	83 e8       	ldi	r24, 0x83	; 131
    2c64:	80 83       	st	Z, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    2c66:	e1 e0       	ldi	r30, 0x01	; 1
    2c68:	ea 0f       	add	r30, r26
    2c6a:	b0 e0       	ldi	r27, 0x00	; 0
    2c6c:	ae 58       	subi	r26, 0x8E	; 142
    2c6e:	ba 4d       	sbci	r27, 0xDA	; 218
    2c70:	ec 92       	st	X, r14
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2c72:	81 e0       	ldi	r24, 0x01	; 1
    2c74:	8e 0f       	add	r24, r30
    2c76:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2c7a:	f0 e0       	ldi	r31, 0x00	; 0
    2c7c:	ee 58       	subi	r30, 0x8E	; 142
    2c7e:	fa 4d       	sbci	r31, 0xDA	; 218
    2c80:	81 e0       	ldi	r24, 0x01	; 1
    2c82:	80 83       	st	Z, r24

							CueControl();
    2c84:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>

							if ((ModuleData[Module][FADERON]&0x80))
    2c88:	f6 01       	movw	r30, r12
    2c8a:	ee 0f       	add	r30, r30
    2c8c:	ff 1f       	adc	r31, r31
    2c8e:	ee 0f       	add	r30, r30
    2c90:	ff 1f       	adc	r31, r31
    2c92:	ee 0f       	add	r30, r30
    2c94:	ff 1f       	adc	r31, r31
    2c96:	e8 54       	subi	r30, 0x48	; 72
    2c98:	f7 4d       	sbci	r31, 0xD7	; 215
    2c9a:	81 81       	ldd	r24, Z+1	; 0x01
    2c9c:	88 23       	and	r24, r24
    2c9e:	2c f4       	brge	.+10     	; 0x2caa <__DATA_REGION_LENGTH__+0xcaa>
							{	 // !JB
								//Timer-Control
								TimerControl(Module);
    2ca0:	8e 2d       	mov	r24, r14
    2ca2:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
				
								//OnAir Control
								OnAirControl();
    2ca6:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>
							}

							if ((TelcoNr>=0) && (TelcoNr<4))
    2caa:	14 30       	cpi	r17, 0x04	; 4
    2cac:	b8 f4       	brcc	.+46     	; 0x2cdc <__DATA_REGION_LENGTH__+0xcdc>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    2cae:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2cb2:	a1 e0       	ldi	r26, 0x01	; 1
    2cb4:	ae 0f       	add	r26, r30
    2cb6:	f0 e0       	ldi	r31, 0x00	; 0
    2cb8:	ee 58       	subi	r30, 0x8E	; 142
    2cba:	fa 4d       	sbci	r31, 0xDA	; 218
    2cbc:	80 ec       	ldi	r24, 0xC0	; 192
    2cbe:	80 83       	st	Z, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2cc0:	e1 e0       	ldi	r30, 0x01	; 1
    2cc2:	ea 0f       	add	r30, r26
    2cc4:	b0 e0       	ldi	r27, 0x00	; 0
    2cc6:	ae 58       	subi	r26, 0x8E	; 142
    2cc8:	ba 4d       	sbci	r27, 0xDA	; 218
    2cca:	1c 93       	st	X, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2ccc:	81 e0       	ldi	r24, 0x01	; 1
    2cce:	8e 0f       	add	r24, r30
    2cd0:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2cd4:	f0 e0       	ldi	r31, 0x00	; 0
    2cd6:	ee 58       	subi	r30, 0x8E	; 142
    2cd8:	fa 4d       	sbci	r31, 0xDA	; 218
    2cda:	10 82       	st	Z, r1
							}
							SendSerialData = 1;
    2cdc:	81 e0       	ldi	r24, 0x01	; 1
    2cde:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2ce2:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
						}
						else
						{
							ConsoleFunctionData[Module] |= ON_LED;
    2ce6:	f6 01       	movw	r30, r12
    2ce8:	e3 5b       	subi	r30, 0xB3	; 179
    2cea:	fb 4d       	sbci	r31, 0xDB	; 219
							ConsoleFunctionData[Module] |= START_FUNCTION;			
							ConsoleFunctionData[Module] |= REMOTE_FUNCTION;
    2cec:	83 62       	ori	r24, 0x23	; 35
    2cee:	80 83       	st	Z, r24
				
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_START;
    2cf0:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2cf4:	a1 e0       	ldi	r26, 0x01	; 1
    2cf6:	ae 0f       	add	r26, r30
    2cf8:	f0 e0       	ldi	r31, 0x00	; 0
    2cfa:	ee 58       	subi	r30, 0x8E	; 142
    2cfc:	fa 4d       	sbci	r31, 0xDA	; 218
    2cfe:	82 e8       	ldi	r24, 0x82	; 130
    2d00:	80 83       	st	Z, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = Module;
    2d02:	e1 e0       	ldi	r30, 0x01	; 1
    2d04:	ea 0f       	add	r30, r26
    2d06:	b0 e0       	ldi	r27, 0x00	; 0
    2d08:	ae 58       	subi	r26, 0x8E	; 142
    2d0a:	ba 4d       	sbci	r27, 0xDA	; 218
    2d0c:	ec 92       	st	X, r14
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2d0e:	81 e0       	ldi	r24, 0x01	; 1
    2d10:	8e 0f       	add	r24, r30
    2d12:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2d16:	f0 e0       	ldi	r31, 0x00	; 0
    2d18:	ee 58       	subi	r30, 0x8E	; 142
    2d1a:	fa 4d       	sbci	r31, 0xDA	; 218
    2d1c:	81 e0       	ldi	r24, 0x01	; 1
    2d1e:	80 83       	st	Z, r24
							
							if ((ModuleData[Module][FADERON]&0x80))
    2d20:	f6 01       	movw	r30, r12
    2d22:	ee 0f       	add	r30, r30
    2d24:	ff 1f       	adc	r31, r31
    2d26:	ee 0f       	add	r30, r30
    2d28:	ff 1f       	adc	r31, r31
    2d2a:	ee 0f       	add	r30, r30
    2d2c:	ff 1f       	adc	r31, r31
    2d2e:	e8 54       	subi	r30, 0x48	; 72
    2d30:	f7 4d       	sbci	r31, 0xD7	; 215
    2d32:	81 81       	ldd	r24, Z+1	; 0x01
    2d34:	88 23       	and	r24, r24
    2d36:	0c f0       	brlt	.+2      	; 0x2d3a <__DATA_REGION_LENGTH__+0xd3a>
    2d38:	69 c0       	rjmp	.+210    	; 0x2e0c <__DATA_REGION_LENGTH__+0xe0c>
							{	// !JB
								char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2d3a:	8e 2d       	mov	r24, r14
    2d3c:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
								if ((TelcoNr>=0) && (TelcoNr<4))
    2d40:	84 30       	cpi	r24, 0x04	; 4
    2d42:	b8 f4       	brcc	.+46     	; 0x2d72 <__DATA_REGION_LENGTH__+0xd72>
								{
									SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2d44:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2d48:	a1 e0       	ldi	r26, 0x01	; 1
    2d4a:	ae 0f       	add	r26, r30
    2d4c:	f0 e0       	ldi	r31, 0x00	; 0
    2d4e:	ee 58       	subi	r30, 0x8E	; 142
    2d50:	fa 4d       	sbci	r31, 0xDA	; 218
    2d52:	92 ec       	ldi	r25, 0xC2	; 194
    2d54:	90 83       	st	Z, r25
									SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2d56:	e1 e0       	ldi	r30, 0x01	; 1
    2d58:	ea 0f       	add	r30, r26
    2d5a:	b0 e0       	ldi	r27, 0x00	; 0
    2d5c:	ae 58       	subi	r26, 0x8E	; 142
    2d5e:	ba 4d       	sbci	r27, 0xDA	; 218
    2d60:	8c 93       	st	X, r24
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2d62:	81 e0       	ldi	r24, 0x01	; 1
    2d64:	8e 0f       	add	r24, r30
    2d66:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2d6a:	f0 e0       	ldi	r31, 0x00	; 0
    2d6c:	ee 58       	subi	r30, 0x8E	; 142
    2d6e:	fa 4d       	sbci	r31, 0xDA	; 218
    2d70:	10 82       	st	Z, r1
								}

								ConsoleFunctionData[Module] &= CUE_LED^0xFF;
    2d72:	f6 01       	movw	r30, r12
    2d74:	e3 5b       	subi	r30, 0xB3	; 179
    2d76:	fb 4d       	sbci	r31, 0xDB	; 219
    2d78:	80 81       	ld	r24, Z
								ConsoleFunctionData[Module] &= CUE_FUNCTION^0xFF;
    2d7a:	83 7f       	andi	r24, 0xF3	; 243
    2d7c:	80 83       	st	Z, r24
//								ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
								cntMuteFunction[Module] = DELAY;
    2d7e:	9a e0       	ldi	r25, 0x0A	; 10
    2d80:	f6 01       	movw	r30, r12
    2d82:	e2 5c       	subi	r30, 0xC2	; 194
    2d84:	f4 4d       	sbci	r31, 0xD4	; 212
    2d86:	90 83       	st	Z, r25

								//Cue-Control
								if (ConsoleMasterSettings[AUTOCUERESET])
    2d88:	90 91 3b 29 	lds	r25, 0x293B	; 0x80293b <ConsoleMasterSettings>
    2d8c:	99 23       	and	r25, r25
    2d8e:	b9 f1       	breq	.+110    	; 0x2dfe <__DATA_REGION_LENGTH__+0xdfe>
								{
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
    2d90:	f6 01       	movw	r30, r12
    2d92:	ee 0f       	add	r30, r30
    2d94:	ff 1f       	adc	r31, r31
    2d96:	ee 0f       	add	r30, r30
    2d98:	ff 1f       	adc	r31, r31
    2d9a:	ee 0f       	add	r30, r30
    2d9c:	ff 1f       	adc	r31, r31
    2d9e:	e8 54       	subi	r30, 0x48	; 72
    2da0:	f7 4d       	sbci	r31, 0xD7	; 215
    2da2:	91 81       	ldd	r25, Z+1	; 0x01
    2da4:	99 23       	and	r25, r25
    2da6:	5c f5       	brge	.+86     	; 0x2dfe <__DATA_REGION_LENGTH__+0xdfe>
    2da8:	85 fd       	sbrc	r24, 5
    2daa:	26 c0       	rjmp	.+76     	; 0x2df8 <__DATA_REGION_LENGTH__+0xdf8>
    2dac:	28 c0       	rjmp	.+80     	; 0x2dfe <__DATA_REGION_LENGTH__+0xdfe>
									{		// !JB
										unsigned char cntModule;
										for (cntModule=0; cntModule<NROFMODULES; cntModule++)
										{
											char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    2dae:	80 2f       	mov	r24, r16
    2db0:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
											if ((TelcoNr>=0) && (TelcoNr<4))
    2db4:	84 30       	cpi	r24, 0x04	; 4
    2db6:	b8 f4       	brcc	.+46     	; 0x2de6 <__DATA_REGION_LENGTH__+0xde6>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    2db8:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2dbc:	a1 e0       	ldi	r26, 0x01	; 1
    2dbe:	ae 0f       	add	r26, r30
    2dc0:	f0 e0       	ldi	r31, 0x00	; 0
    2dc2:	ee 58       	subi	r30, 0x8E	; 142
    2dc4:	fa 4d       	sbci	r31, 0xDA	; 218
    2dc6:	92 ec       	ldi	r25, 0xC2	; 194
    2dc8:	90 83       	st	Z, r25
												SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2dca:	e1 e0       	ldi	r30, 0x01	; 1
    2dcc:	ea 0f       	add	r30, r26
    2dce:	b0 e0       	ldi	r27, 0x00	; 0
    2dd0:	ae 58       	subi	r26, 0x8E	; 142
    2dd2:	ba 4d       	sbci	r27, 0xDA	; 218
    2dd4:	8c 93       	st	X, r24
												SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2dd6:	81 e0       	ldi	r24, 0x01	; 1
    2dd8:	8e 0f       	add	r24, r30
    2dda:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2dde:	f0 e0       	ldi	r31, 0x00	; 0
    2de0:	ee 58       	subi	r30, 0x8E	; 142
    2de2:	fa 4d       	sbci	r31, 0xDA	; 218
    2de4:	10 82       	st	Z, r1
											}

											ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    2de6:	e0 2f       	mov	r30, r16
    2de8:	f0 e0       	ldi	r31, 0x00	; 0
    2dea:	e3 5b       	subi	r30, 0xB3	; 179
    2dec:	fb 4d       	sbci	r31, 0xDB	; 219
    2dee:	80 81       	ld	r24, Z
											ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    2df0:	83 7f       	andi	r24, 0xF3	; 243
    2df2:	80 83       	st	Z, r24
								if (ConsoleMasterSettings[AUTOCUERESET])
								{
									if (((ModuleData[Module][FADERON]&0x80)) && ((ConsoleFunctionData[Module]&ON_LED)))
									{		// !JB
										unsigned char cntModule;
										for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2df4:	0f 5f       	subi	r16, 0xFF	; 255
    2df6:	01 c0       	rjmp	.+2      	; 0x2dfa <__DATA_REGION_LENGTH__+0xdfa>
    2df8:	00 e0       	ldi	r16, 0x00	; 0
    2dfa:	00 31       	cpi	r16, 0x10	; 16
    2dfc:	c0 f2       	brcs	.-80     	; 0x2dae <__DATA_REGION_LENGTH__+0xdae>
											ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
											ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
										}
									}
								}
								CueControl();
    2dfe:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
			
								//Timer-Control
								TimerControl(Module);
    2e02:	8e 2d       	mov	r24, r14
    2e04:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
			
								//OnAirControl
								OnAirControl();
    2e08:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>
							}

							if ((TelcoNr>=0) && (TelcoNr<4))
    2e0c:	14 30       	cpi	r17, 0x04	; 4
    2e0e:	c0 f4       	brcc	.+48     	; 0x2e40 <__DATA_REGION_LENGTH__+0xe40>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CONNECT;
    2e10:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2e14:	a1 e0       	ldi	r26, 0x01	; 1
    2e16:	ae 0f       	add	r26, r30
    2e18:	f0 e0       	ldi	r31, 0x00	; 0
    2e1a:	ee 58       	subi	r30, 0x8E	; 142
    2e1c:	fa 4d       	sbci	r31, 0xDA	; 218
    2e1e:	80 ec       	ldi	r24, 0xC0	; 192
    2e20:	80 83       	st	Z, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2e22:	e1 e0       	ldi	r30, 0x01	; 1
    2e24:	ea 0f       	add	r30, r26
    2e26:	b0 e0       	ldi	r27, 0x00	; 0
    2e28:	ae 58       	subi	r26, 0x8E	; 142
    2e2a:	ba 4d       	sbci	r27, 0xDA	; 218
    2e2c:	1c 93       	st	X, r17
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	8e 0f       	add	r24, r30
    2e32:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	ee 58       	subi	r30, 0x8E	; 142
    2e3a:	fa 4d       	sbci	r31, 0xDA	; 218
    2e3c:	81 e0       	ldi	r24, 0x01	; 1
    2e3e:	80 83       	st	Z, r24
							}
							SendSerialData = 1;
    2e40:	81 e0       	ldi	r24, 0x01	; 1
    2e42:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    2e46:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case LINEB:
		{
			CheckStartCondition(Module);
    2e4a:	8e 2d       	mov	r24, r14
    2e4c:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>
			TimeAndDate.Hours = 0;
    2e50:	ea e9       	ldi	r30, 0x9A	; 154
    2e52:	f1 e3       	ldi	r31, 0x31	; 49
    2e54:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
    2e56:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
    2e58:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
    2e5a:	10 82       	st	Z, r1
			TimerControl(Module);
    2e5c:	8e 2d       	mov	r24, r14
    2e5e:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
			DJControl();
    2e62:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
			StudioMicControl();
    2e66:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>
			OnAirControl();
    2e6a:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>
		}
		break;
    2e6e:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
		case MIC_RING:
		{
			switch (ModuleType[Module])
    2e72:	ce 2c       	mov	r12, r14
    2e74:	d1 2c       	mov	r13, r1
    2e76:	f6 01       	movw	r30, r12
    2e78:	e6 5c       	subi	r30, 0xC6	; 198
    2e7a:	fb 4d       	sbci	r31, 0xDB	; 219
    2e7c:	80 81       	ld	r24, Z
    2e7e:	81 30       	cpi	r24, 0x01	; 1
    2e80:	21 f0       	breq	.+8      	; 0x2e8a <__DATA_REGION_LENGTH__+0xe8a>
    2e82:	82 30       	cpi	r24, 0x02	; 2
    2e84:	61 f1       	breq	.+88     	; 0x2ede <__DATA_REGION_LENGTH__+0xede>
    2e86:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			{
				case TRIPLE:
				{
					if (!(ModuleData[Module][MIC_RING]&0x80))
    2e8a:	f6 01       	movw	r30, r12
    2e8c:	ee 0f       	add	r30, r30
    2e8e:	ff 1f       	adc	r31, r31
    2e90:	ee 0f       	add	r30, r30
    2e92:	ff 1f       	adc	r31, r31
    2e94:	ee 0f       	add	r30, r30
    2e96:	ff 1f       	adc	r31, r31
    2e98:	e8 54       	subi	r30, 0x48	; 72
    2e9a:	f7 4d       	sbci	r31, 0xD7	; 215
    2e9c:	87 81       	ldd	r24, Z+7	; 0x07
    2e9e:	88 23       	and	r24, r24
    2ea0:	54 f0       	brlt	.+20     	; 0x2eb6 <__DATA_REGION_LENGTH__+0xeb6>
					{
						ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    2ea2:	ed e4       	ldi	r30, 0x4D	; 77
    2ea4:	f4 e2       	ldi	r31, 0x24	; 36
    2ea6:	80 89       	ldd	r24, Z+16	; 0x10
    2ea8:	87 7f       	andi	r24, 0xF7	; 247
    2eaa:	80 8b       	std	Z+16, r24	; 0x10
						CheckTBMic();
    2eac:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
						SendSerialData = 1;
    2eb0:	81 e0       	ldi	r24, 0x01	; 1
    2eb2:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
					}
		
					CheckStartCondition(Module);
    2eb6:	8e 2d       	mov	r24, r14
    2eb8:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>
					TimeAndDate.Hours = 0;
    2ebc:	ea e9       	ldi	r30, 0x9A	; 154
    2ebe:	f1 e3       	ldi	r31, 0x31	; 49
    2ec0:	13 82       	std	Z+3, r1	; 0x03
					TimeAndDate.Minutes = 0;
    2ec2:	12 82       	std	Z+2, r1	; 0x02
					TimeAndDate.Seconds = 0;
    2ec4:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Frames = 0;
    2ec6:	10 82       	st	Z, r1
					TimerControl(Module);
    2ec8:	8e 2d       	mov	r24, r14
    2eca:	0e 94 a8 02 	call	0x550	; 0x550 <TimerControl>
					DJControl();
    2ece:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
					StudioMicControl();
    2ed2:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>
					OnAirControl();
    2ed6:	0e 94 ac 04 	call	0x958	; 0x958 <OnAirControl>
				}
				break;
    2eda:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
				case TELCO:
				{
					char TelcoNr = GetTelcoNrFromModuleNr(Module);
    2ede:	8e 2d       	mov	r24, r14
    2ee0:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
					
					if (EventOn)
    2ee4:	01 2b       	or	r16, r17
    2ee6:	09 f5       	brne	.+66     	; 0x2f2a <__DATA_REGION_LENGTH__+0xf2a>
					{
						ConsoleFunctionData[Module]|=CUE_LED;
    2ee8:	f6 01       	movw	r30, r12
    2eea:	e3 5b       	subi	r30, 0xB3	; 179
    2eec:	fb 4d       	sbci	r31, 0xDB	; 219
    2eee:	90 81       	ld	r25, Z
						ConsoleFunctionData[Module]|=REMOTE_FUNCTION;
    2ef0:	99 60       	ori	r25, 0x09	; 9
    2ef2:	90 83       	st	Z, r25

						if ((TelcoNr>=0) && (TelcoNr<4))
    2ef4:	84 30       	cpi	r24, 0x04	; 4
    2ef6:	e8 f5       	brcc	.+122    	; 0x2f72 <__DATA_REGION_LENGTH__+0xf72>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_RING;
    2ef8:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2efc:	a1 e0       	ldi	r26, 0x01	; 1
    2efe:	ae 0f       	add	r26, r30
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	ee 58       	subi	r30, 0x8E	; 142
    2f04:	fa 4d       	sbci	r31, 0xDA	; 218
    2f06:	91 ec       	ldi	r25, 0xC1	; 193
    2f08:	90 83       	st	Z, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2f0a:	e1 e0       	ldi	r30, 0x01	; 1
    2f0c:	ea 0f       	add	r30, r26
    2f0e:	b0 e0       	ldi	r27, 0x00	; 0
    2f10:	ae 58       	subi	r26, 0x8E	; 142
    2f12:	ba 4d       	sbci	r27, 0xDA	; 218
    2f14:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    2f16:	81 e0       	ldi	r24, 0x01	; 1
    2f18:	8e 0f       	add	r24, r30
    2f1a:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2f1e:	f0 e0       	ldi	r31, 0x00	; 0
    2f20:	ee 58       	subi	r30, 0x8E	; 142
    2f22:	fa 4d       	sbci	r31, 0xDA	; 218
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	80 83       	st	Z, r24
    2f28:	24 c0       	rjmp	.+72     	; 0x2f72 <__DATA_REGION_LENGTH__+0xf72>
						}
					}
					else
					{
						if (!(ConsoleFunctionData[Module]&START_FUNCTION))
    2f2a:	f6 01       	movw	r30, r12
    2f2c:	e3 5b       	subi	r30, 0xB3	; 179
    2f2e:	fb 4d       	sbci	r31, 0xDB	; 219
    2f30:	90 81       	ld	r25, Z
    2f32:	91 fd       	sbrc	r25, 1
    2f34:	05 c0       	rjmp	.+10     	; 0x2f40 <__DATA_REGION_LENGTH__+0xf40>
						{
							ConsoleFunctionData[Module]&=CUE_LED^0xFF;
    2f36:	f6 01       	movw	r30, r12
    2f38:	e3 5b       	subi	r30, 0xB3	; 179
    2f3a:	fb 4d       	sbci	r31, 0xDB	; 219
							ConsoleFunctionData[Module]&=REMOTE_FUNCTION^0xFF;
    2f3c:	96 7f       	andi	r25, 0xF6	; 246
    2f3e:	90 83       	st	Z, r25
						}

						if ((TelcoNr>=0) && (TelcoNr<4))
    2f40:	84 30       	cpi	r24, 0x04	; 4
    2f42:	b8 f4       	brcc	.+46     	; 0x2f72 <__DATA_REGION_LENGTH__+0xf72>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_RING;
    2f44:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    2f48:	a1 e0       	ldi	r26, 0x01	; 1
    2f4a:	ae 0f       	add	r26, r30
    2f4c:	f0 e0       	ldi	r31, 0x00	; 0
    2f4e:	ee 58       	subi	r30, 0x8E	; 142
    2f50:	fa 4d       	sbci	r31, 0xDA	; 218
    2f52:	91 ec       	ldi	r25, 0xC1	; 193
    2f54:	90 83       	st	Z, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    2f56:	e1 e0       	ldi	r30, 0x01	; 1
    2f58:	ea 0f       	add	r30, r26
    2f5a:	b0 e0       	ldi	r27, 0x00	; 0
    2f5c:	ae 58       	subi	r26, 0x8E	; 142
    2f5e:	ba 4d       	sbci	r27, 0xDA	; 218
    2f60:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	8e 0f       	add	r24, r30
    2f66:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    2f6a:	f0 e0       	ldi	r31, 0x00	; 0
    2f6c:	ee 58       	subi	r30, 0x8E	; 142
    2f6e:	fa 4d       	sbci	r31, 0xDA	; 218
    2f70:	10 82       	st	Z, r1
						}
					}
					SendSerialData = 1;
    2f72:	81 e0       	ldi	r24, 0x01	; 1
    2f74:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
				}
				break;
    2f78:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case ESCAPE:
		{
			SetLCD(0,"\xC0");
    2f7c:	6f e2       	ldi	r22, 0x2F	; 47
    2f7e:	70 e2       	ldi	r23, 0x20	; 32
    2f80:	80 e0       	ldi	r24, 0x00	; 0
    2f82:	90 e0       	ldi	r25, 0x00	; 0
    2f84:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
			if (EventOn)
    2f88:	01 2b       	or	r16, r17
    2f8a:	11 f0       	breq	.+4      	; 0x2f90 <__DATA_REGION_LENGTH__+0xf90>
    2f8c:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
 			{
				if (OperatingMode != NORMALMODE)
    2f90:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <OperatingMode>
    2f94:	88 23       	and	r24, r24
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <__DATA_REGION_LENGTH__+0xf9a>
    2f98:	a2 c0       	rjmp	.+324    	; 0x30de <__DATA_REGION_LENGTH__+0x10de>
				{
					char TextBuffer[9];

					if (OperatingMode==MODULEMODE)
    2f9a:	81 30       	cpi	r24, 0x01	; 1
    2f9c:	f1 f4       	brne	.+60     	; 0x2fda <__DATA_REGION_LENGTH__+0xfda>
    2f9e:	19 c0       	rjmp	.+50     	; 0x2fd2 <__DATA_REGION_LENGTH__+0xfd2>
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
						{
							for (cntByte=0; cntByte<29; cntByte++)
							{
								ConsoleModuleSettings[cntModule][cntByte] = UndoConsoleModuleSettings[cntModule][cntByte];
    2fa0:	84 2f       	mov	r24, r20
    2fa2:	90 e0       	ldi	r25, 0x00	; 0
    2fa4:	fd e1       	ldi	r31, 0x1D	; 29
    2fa6:	6f 9f       	mul	r22, r31
    2fa8:	90 01       	movw	r18, r0
    2faa:	11 24       	eor	r1, r1
    2fac:	f9 01       	movw	r30, r18
    2fae:	e1 53       	subi	r30, 0x31	; 49
    2fb0:	f2 4d       	sbci	r31, 0xD2	; 210
    2fb2:	e8 0f       	add	r30, r24
    2fb4:	f9 1f       	adc	r31, r25
    2fb6:	50 81       	ld	r21, Z
    2fb8:	21 56       	subi	r18, 0x61	; 97
    2fba:	30 4d       	sbci	r19, 0xD0	; 208
    2fbc:	f9 01       	movw	r30, r18
    2fbe:	e8 0f       	add	r30, r24
    2fc0:	f9 1f       	adc	r31, r25
    2fc2:	50 83       	st	Z, r21
					if (OperatingMode==MODULEMODE)
					{
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
						{
							for (cntByte=0; cntByte<29; cntByte++)
    2fc4:	4f 5f       	subi	r20, 0xFF	; 255
    2fc6:	01 c0       	rjmp	.+2      	; 0x2fca <__DATA_REGION_LENGTH__+0xfca>
    2fc8:	40 e0       	ldi	r20, 0x00	; 0
    2fca:	4d 31       	cpi	r20, 0x1D	; 29
    2fcc:	48 f3       	brcs	.-46     	; 0x2fa0 <__DATA_REGION_LENGTH__+0xfa0>
					char TextBuffer[9];

					if (OperatingMode==MODULEMODE)
					{
						unsigned char cntModule, cntByte;
						for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    2fce:	6f 5f       	subi	r22, 0xFF	; 255
    2fd0:	01 c0       	rjmp	.+2      	; 0x2fd4 <__DATA_REGION_LENGTH__+0xfd4>
    2fd2:	60 e0       	ldi	r22, 0x00	; 0
    2fd4:	60 31       	cpi	r22, 0x10	; 16
    2fd6:	c0 f3       	brcs	.-16     	; 0x2fc8 <__DATA_REGION_LENGTH__+0xfc8>
    2fd8:	12 c0       	rjmp	.+36     	; 0x2ffe <__DATA_REGION_LENGTH__+0xffe>
							{
								ConsoleModuleSettings[cntModule][cntByte] = UndoConsoleModuleSettings[cntModule][cntByte];
							}
						}
					}
					else if (OperatingMode==MASTERMODE)
    2fda:	82 30       	cpi	r24, 0x02	; 2
    2fdc:	81 f4       	brne	.+32     	; 0x2ffe <__DATA_REGION_LENGTH__+0xffe>
    2fde:	0c c0       	rjmp	.+24     	; 0x2ff8 <__DATA_REGION_LENGTH__+0xff8>
					{
						unsigned char cntByte;
						for (cntByte=0; cntByte<5; cntByte++)
						{
								ConsoleMasterSettings[cntByte] = UndoConsoleMasterSettings[cntByte];
    2fe0:	82 2f       	mov	r24, r18
    2fe2:	90 e0       	ldi	r25, 0x00	; 0
    2fe4:	fc 01       	movw	r30, r24
    2fe6:	e6 53       	subi	r30, 0x36	; 54
    2fe8:	f2 4d       	sbci	r31, 0xD2	; 210
    2fea:	30 81       	ld	r19, Z
    2fec:	fc 01       	movw	r30, r24
    2fee:	e5 5c       	subi	r30, 0xC5	; 197
    2ff0:	f6 4d       	sbci	r31, 0xD6	; 214
    2ff2:	30 83       	st	Z, r19
						}
					}
					else if (OperatingMode==MASTERMODE)
					{
						unsigned char cntByte;
						for (cntByte=0; cntByte<5; cntByte++)
    2ff4:	2f 5f       	subi	r18, 0xFF	; 255
    2ff6:	01 c0       	rjmp	.+2      	; 0x2ffa <__DATA_REGION_LENGTH__+0xffa>
    2ff8:	20 e0       	ldi	r18, 0x00	; 0
    2ffa:	25 30       	cpi	r18, 0x05	; 5
    2ffc:	88 f3       	brcs	.-30     	; 0x2fe0 <__DATA_REGION_LENGTH__+0xfe0>
						{
								ConsoleMasterSettings[cntByte] = UndoConsoleMasterSettings[cntByte];
						}
					}

					OperatingMode = NORMALMODE;
    2ffe:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <OperatingMode>
					TextStringPtr = 0;
    3002:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>

					SetLCD(0,"\x80");
    3006:	61 e5       	ldi	r22, 0x51	; 81
    3008:	70 e2       	ldi	r23, 0x20	; 32
    300a:	80 e0       	ldi	r24, 0x00	; 0
    300c:	90 e0       	ldi	r25, 0x00	; 0
    300e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1,"                ");
    3012:	64 e6       	ldi	r22, 0x64	; 100
    3014:	70 e2       	ldi	r23, 0x20	; 32
    3016:	81 e0       	ldi	r24, 0x01	; 1
    3018:	90 e0       	ldi	r25, 0x00	; 0
    301a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(0,"\xC0");
    301e:	6f e2       	ldi	r22, 0x2F	; 47
    3020:	70 e2       	ldi	r23, 0x20	; 32
    3022:	80 e0       	ldi	r24, 0x00	; 0
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    302a:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    302e:	31 e1       	ldi	r19, 0x11	; 17
    3030:	63 9f       	mul	r22, r19
    3032:	b0 01       	movw	r22, r0
    3034:	11 24       	eor	r1, r1
    3036:	60 51       	subi	r22, 0x10	; 16
    3038:	7c 4d       	sbci	r23, 0xDC	; 220
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	90 e0       	ldi	r25, 0x00	; 0
    303e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    3042:	ea e9       	ldi	r30, 0x9A	; 154
    3044:	f1 e3       	ldi	r31, 0x31	; 49
    3046:	23 81       	ldd	r18, Z+3	; 0x03
    3048:	8d ec       	ldi	r24, 0xCD	; 205
    304a:	28 9f       	mul	r18, r24
    304c:	91 2d       	mov	r25, r1
    304e:	11 24       	eor	r1, r1
    3050:	96 95       	lsr	r25
    3052:	96 95       	lsr	r25
    3054:	96 95       	lsr	r25
    3056:	30 e3       	ldi	r19, 0x30	; 48
    3058:	39 0f       	add	r19, r25
    305a:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    305c:	99 0f       	add	r25, r25
    305e:	39 2f       	mov	r19, r25
    3060:	33 0f       	add	r19, r19
    3062:	33 0f       	add	r19, r19
    3064:	93 0f       	add	r25, r19
    3066:	29 1b       	sub	r18, r25
    3068:	20 5d       	subi	r18, 0xD0	; 208
    306a:	2a 83       	std	Y+2, r18	; 0x02
					TextBuffer[2] = ':';
    306c:	4a e3       	ldi	r20, 0x3A	; 58
    306e:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    3070:	22 81       	ldd	r18, Z+2	; 0x02
    3072:	28 9f       	mul	r18, r24
    3074:	91 2d       	mov	r25, r1
    3076:	11 24       	eor	r1, r1
    3078:	96 95       	lsr	r25
    307a:	96 95       	lsr	r25
    307c:	96 95       	lsr	r25
    307e:	30 e3       	ldi	r19, 0x30	; 48
    3080:	39 0f       	add	r19, r25
    3082:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    3084:	99 0f       	add	r25, r25
    3086:	39 2f       	mov	r19, r25
    3088:	33 0f       	add	r19, r19
    308a:	33 0f       	add	r19, r19
    308c:	93 0f       	add	r25, r19
    308e:	29 1b       	sub	r18, r25
    3090:	20 5d       	subi	r18, 0xD0	; 208
    3092:	2d 83       	std	Y+5, r18	; 0x05
					TextBuffer[5] = ':';
    3094:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    3096:	91 81       	ldd	r25, Z+1	; 0x01
    3098:	98 9f       	mul	r25, r24
    309a:	81 2d       	mov	r24, r1
    309c:	11 24       	eor	r1, r1
    309e:	86 95       	lsr	r24
    30a0:	86 95       	lsr	r24
    30a2:	86 95       	lsr	r24
    30a4:	20 e3       	ldi	r18, 0x30	; 48
    30a6:	28 0f       	add	r18, r24
    30a8:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    30aa:	88 0f       	add	r24, r24
    30ac:	28 2f       	mov	r18, r24
    30ae:	22 0f       	add	r18, r18
    30b0:	22 0f       	add	r18, r18
    30b2:	82 0f       	add	r24, r18
    30b4:	98 1b       	sub	r25, r24
    30b6:	90 5d       	subi	r25, 0xD0	; 208
    30b8:	98 87       	std	Y+8, r25	; 0x08
/*				TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    30ba:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    30bc:	65 e7       	ldi	r22, 0x75	; 117
    30be:	70 e2       	ldi	r23, 0x20	; 32
    30c0:	80 e0       	ldi	r24, 0x00	; 0
    30c2:	90 e0       	ldi	r25, 0x00	; 0
    30c4:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1,TextBuffer);
    30c8:	be 01       	movw	r22, r28
    30ca:	6f 5f       	subi	r22, 0xFF	; 255
    30cc:	7f 4f       	sbci	r23, 0xFF	; 255
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	90 e0       	ldi	r25, 0x00	; 0
    30d2:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetConsoleData();
    30d6:	0e 94 a2 07 	call	0xf44	; 0xf44 <SetConsoleData>
    30da:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
				}
				else if (TextStringPtr==0)
    30de:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    30e2:	81 11       	cpse	r24, r1
    30e4:	08 c0       	rjmp	.+16     	; 0x30f6 <__DATA_REGION_LENGTH__+0x10f6>
				{
					TimeAndDate.Hours = 0;
    30e6:	ea e9       	ldi	r30, 0x9A	; 154
    30e8:	f1 e3       	ldi	r31, 0x31	; 49
    30ea:	13 82       	std	Z+3, r1	; 0x03
					TimeAndDate.Minutes = 0;
    30ec:	12 82       	std	Z+2, r1	; 0x02
					TimeAndDate.Seconds = 0;
    30ee:	11 82       	std	Z+1, r1	; 0x01
					TimeAndDate.Frames = 0;
    30f0:	10 82       	st	Z, r1
    30f2:	0c 94 7d 20 	jmp	0x40fa	; 0x40fa <__stack+0xfb>
				}
				else
				{
					char TextBuffer[9];
					//New in v1.12
					SetupLCD();
    30f6:	0e 94 35 22 	call	0x446a	; 0x446a <SetupLCD>
	 				SetLCD(0,"\xC0");
    30fa:	6f e2       	ldi	r22, 0x2F	; 47
    30fc:	70 e2       	ldi	r23, 0x20	; 32
    30fe:	80 e0       	ldi	r24, 0x00	; 0
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

					SetLCD(0,"\x80");
    3106:	61 e5       	ldi	r22, 0x51	; 81
    3108:	70 e2       	ldi	r23, 0x20	; 32
    310a:	80 e0       	ldi	r24, 0x00	; 0
    310c:	90 e0       	ldi	r25, 0x00	; 0
    310e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1,"                ");
    3112:	64 e6       	ldi	r22, 0x64	; 100
    3114:	70 e2       	ldi	r23, 0x20	; 32
    3116:	81 e0       	ldi	r24, 0x01	; 1
    3118:	90 e0       	ldi	r25, 0x00	; 0
    311a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(0,"\xC0");
    311e:	6f e2       	ldi	r22, 0x2F	; 47
    3120:	70 e2       	ldi	r23, 0x20	; 32
    3122:	80 e0       	ldi	r24, 0x00	; 0
    3124:	90 e0       	ldi	r25, 0x00	; 0
    3126:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    312a:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    312e:	51 e1       	ldi	r21, 0x11	; 17
    3130:	65 9f       	mul	r22, r21
    3132:	b0 01       	movw	r22, r0
    3134:	11 24       	eor	r1, r1
    3136:	60 51       	subi	r22, 0x10	; 16
    3138:	7c 4d       	sbci	r23, 0xDC	; 220
    313a:	81 e0       	ldi	r24, 0x01	; 1
    313c:	90 e0       	ldi	r25, 0x00	; 0
    313e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    3142:	ea e9       	ldi	r30, 0x9A	; 154
    3144:	f1 e3       	ldi	r31, 0x31	; 49
    3146:	23 81       	ldd	r18, Z+3	; 0x03
    3148:	8d ec       	ldi	r24, 0xCD	; 205
    314a:	28 9f       	mul	r18, r24
    314c:	91 2d       	mov	r25, r1
    314e:	11 24       	eor	r1, r1
    3150:	96 95       	lsr	r25
    3152:	96 95       	lsr	r25
    3154:	96 95       	lsr	r25
    3156:	30 e3       	ldi	r19, 0x30	; 48
    3158:	39 0f       	add	r19, r25
    315a:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    315c:	99 0f       	add	r25, r25
    315e:	39 2f       	mov	r19, r25
    3160:	33 0f       	add	r19, r19
    3162:	33 0f       	add	r19, r19
    3164:	93 0f       	add	r25, r19
    3166:	29 1b       	sub	r18, r25
    3168:	20 5d       	subi	r18, 0xD0	; 208
    316a:	2a 83       	std	Y+2, r18	; 0x02
					TextBuffer[2] = ':';
    316c:	4a e3       	ldi	r20, 0x3A	; 58
    316e:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    3170:	22 81       	ldd	r18, Z+2	; 0x02
    3172:	28 9f       	mul	r18, r24
    3174:	91 2d       	mov	r25, r1
    3176:	11 24       	eor	r1, r1
    3178:	96 95       	lsr	r25
    317a:	96 95       	lsr	r25
    317c:	96 95       	lsr	r25
    317e:	30 e3       	ldi	r19, 0x30	; 48
    3180:	39 0f       	add	r19, r25
    3182:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    3184:	99 0f       	add	r25, r25
    3186:	39 2f       	mov	r19, r25
    3188:	33 0f       	add	r19, r19
    318a:	33 0f       	add	r19, r19
    318c:	93 0f       	add	r25, r19
    318e:	29 1b       	sub	r18, r25
    3190:	20 5d       	subi	r18, 0xD0	; 208
    3192:	2d 83       	std	Y+5, r18	; 0x05
					TextBuffer[5] = ':';
    3194:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    3196:	91 81       	ldd	r25, Z+1	; 0x01
    3198:	98 9f       	mul	r25, r24
    319a:	81 2d       	mov	r24, r1
    319c:	11 24       	eor	r1, r1
    319e:	86 95       	lsr	r24
    31a0:	86 95       	lsr	r24
    31a2:	86 95       	lsr	r24
    31a4:	20 e3       	ldi	r18, 0x30	; 48
    31a6:	28 0f       	add	r18, r24
    31a8:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    31aa:	88 0f       	add	r24, r24
    31ac:	28 2f       	mov	r18, r24
    31ae:	22 0f       	add	r18, r18
    31b0:	22 0f       	add	r18, r18
    31b2:	82 0f       	add	r24, r18
    31b4:	98 1b       	sub	r25, r24
    31b6:	90 5d       	subi	r25, 0xD0	; 208
    31b8:	98 87       	std	Y+8, r25	; 0x08
/*				TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    31ba:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    31bc:	65 e7       	ldi	r22, 0x75	; 117
    31be:	70 e2       	ldi	r23, 0x20	; 32
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1,TextBuffer);
    31c8:	be 01       	movw	r22, r28
    31ca:	6f 5f       	subi	r22, 0xFF	; 255
    31cc:	7f 4f       	sbci	r23, 0xFF	; 255
    31ce:	81 e0       	ldi	r24, 0x01	; 1
    31d0:	90 e0       	ldi	r25, 0x00	; 0
    31d2:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetConsoleData();
    31d6:	0e 94 a2 07 	call	0xf44	; 0xf44 <SetConsoleData>
    31da:	8f c7       	rjmp	.+3870   	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case ENTER:
		{
			if (EventOn)
    31dc:	01 2b       	or	r16, r17
    31de:	09 f0       	breq	.+2      	; 0x31e2 <__DATA_REGION_LENGTH__+0x11e2>
    31e0:	8c c7       	rjmp	.+3864   	; 0x40fa <__stack+0xfb>
			{
				switch (OperatingMode)
    31e2:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <OperatingMode>
    31e6:	88 23       	and	r24, r24
    31e8:	21 f0       	breq	.+8      	; 0x31f2 <__DATA_REGION_LENGTH__+0x11f2>
    31ea:	83 30       	cpi	r24, 0x03	; 3
    31ec:	09 f4       	brne	.+2      	; 0x31f0 <__DATA_REGION_LENGTH__+0x11f0>
    31ee:	b7 c0       	rjmp	.+366    	; 0x335e <__DATA_REGION_LENGTH__+0x135e>
    31f0:	cf c2       	rjmp	.+1438   	; 0x3790 <__DATA_REGION_LENGTH__+0x1790>
				{
					case NORMALMODE:
					{
						switch (TextStringPtr)
    31f2:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    31f6:	81 30       	cpi	r24, 0x01	; 1
    31f8:	59 f1       	breq	.+86     	; 0x3250 <__DATA_REGION_LENGTH__+0x1250>
    31fa:	38 f0       	brcs	.+14     	; 0x320a <__DATA_REGION_LENGTH__+0x120a>
    31fc:	82 30       	cpi	r24, 0x02	; 2
    31fe:	09 f4       	brne	.+2      	; 0x3202 <__DATA_REGION_LENGTH__+0x1202>
    3200:	5e c0       	rjmp	.+188    	; 0x32be <__DATA_REGION_LENGTH__+0x12be>
    3202:	83 30       	cpi	r24, 0x03	; 3
    3204:	09 f4       	brne	.+2      	; 0x3208 <__DATA_REGION_LENGTH__+0x1208>
    3206:	91 c0       	rjmp	.+290    	; 0x332a <__DATA_REGION_LENGTH__+0x132a>
    3208:	78 c7       	rjmp	.+3824   	; 0x40fa <__stack+0xfb>
						{
							case 0:
							{
								TimeAndDate.Hours = 0;
    320a:	ea e9       	ldi	r30, 0x9A	; 154
    320c:	f1 e3       	ldi	r31, 0x31	; 49
    320e:	13 82       	std	Z+3, r1	; 0x03
								TimeAndDate.Minutes = 0;
    3210:	12 82       	std	Z+2, r1	; 0x02
								TimeAndDate.Seconds = 0;
    3212:	11 82       	std	Z+1, r1	; 0x01
								TimeAndDate.Frames = 0;
    3214:	10 82       	st	Z, r1
								GlobalTimerActive = 1;
    3216:	81 e0       	ldi	r24, 0x01	; 1
    3218:	80 93 9f 31 	sts	0x319F, r24	; 0x80319f <GlobalTimerActive>
							}
							break;
    321c:	6e c7       	rjmp	.+3804   	; 0x40fa <__stack+0xfb>
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									for (cntByte=0; cntByte<29; cntByte++)
									{
										UndoConsoleModuleSettings[cntModule][cntByte] = ConsoleModuleSettings[cntModule][cntByte];
    321e:	84 2f       	mov	r24, r20
    3220:	90 e0       	ldi	r25, 0x00	; 0
    3222:	ed e1       	ldi	r30, 0x1D	; 29
    3224:	6e 9f       	mul	r22, r30
    3226:	90 01       	movw	r18, r0
    3228:	11 24       	eor	r1, r1
    322a:	f9 01       	movw	r30, r18
    322c:	e1 56       	subi	r30, 0x61	; 97
    322e:	f0 4d       	sbci	r31, 0xD0	; 208
    3230:	e8 0f       	add	r30, r24
    3232:	f9 1f       	adc	r31, r25
    3234:	50 81       	ld	r21, Z
    3236:	21 53       	subi	r18, 0x31	; 49
    3238:	32 4d       	sbci	r19, 0xD2	; 210
    323a:	f9 01       	movw	r30, r18
    323c:	e8 0f       	add	r30, r24
    323e:	f9 1f       	adc	r31, r25
    3240:	50 83       	st	Z, r21
							case 1:
							{
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
								{
									for (cntByte=0; cntByte<29; cntByte++)
    3242:	4f 5f       	subi	r20, 0xFF	; 255
    3244:	01 c0       	rjmp	.+2      	; 0x3248 <__DATA_REGION_LENGTH__+0x1248>
    3246:	40 e0       	ldi	r20, 0x00	; 0
    3248:	4d 31       	cpi	r20, 0x1D	; 29
    324a:	48 f3       	brcs	.-46     	; 0x321e <__DATA_REGION_LENGTH__+0x121e>
							}
							break;
							case 1:
							{
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    324c:	6f 5f       	subi	r22, 0xFF	; 255
    324e:	01 c0       	rjmp	.+2      	; 0x3252 <__DATA_REGION_LENGTH__+0x1252>
			{
				switch (OperatingMode)
				{
					case NORMALMODE:
					{
						switch (TextStringPtr)
    3250:	60 e0       	ldi	r22, 0x00	; 0
							}
							break;
							case 1:
							{
								unsigned char cntModule, cntByte;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3252:	60 31       	cpi	r22, 0x10	; 16
    3254:	c0 f3       	brcs	.-16     	; 0x3246 <__DATA_REGION_LENGTH__+0x1246>
									for (cntByte=0; cntByte<29; cntByte++)
									{
										UndoConsoleModuleSettings[cntModule][cntByte] = ConsoleModuleSettings[cntModule][cntByte];
									}
								}
								OperatingMode = MODULEMODE;
    3256:	81 e0       	ldi	r24, 0x01	; 1
    3258:	80 93 ed 22 	sts	0x22ED, r24	; 0x8022ed <OperatingMode>
								TextStringPtr = 0;
    325c:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>
								SetLCD(0,"\x80");
    3260:	61 e5       	ldi	r22, 0x51	; 81
    3262:	70 e2       	ldi	r23, 0x20	; 32
    3264:	80 e0       	ldi	r24, 0x00	; 0
    3266:	90 e0       	ldi	r25, 0x00	; 0
    3268:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(1,ModuleTextString[TextStringPtr]);
    326c:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3270:	f1 e1       	ldi	r31, 0x11	; 17
    3272:	6f 9f       	mul	r22, r31
    3274:	b0 01       	movw	r22, r0
    3276:	11 24       	eor	r1, r1
    3278:	6f 5a       	subi	r22, 0xAF	; 175
    327a:	76 4d       	sbci	r23, 0xD6	; 214
    327c:	81 e0       	ldi	r24, 0x01	; 1
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(0,"\xC0");
    3284:	6f e2       	ldi	r22, 0x2F	; 47
    3286:	70 e2       	ldi	r23, 0x20	; 32
    3288:	80 e0       	ldi	r24, 0x00	; 0
    328a:	90 e0       	ldi	r25, 0x00	; 0
    328c:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
//								SetLCD(1,"Select Module   ");
								SetLCD(1,"Toggle by SELECT");
    3290:	67 e7       	ldi	r22, 0x77	; 119
    3292:	70 e2       	ldi	r23, 0x20	; 32
    3294:	81 e0       	ldi	r24, 0x01	; 1
    3296:	90 e0       	ldi	r25, 0x00	; 0
    3298:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								ShowFunction(TextStringPtr);
    329c:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    32a0:	0e 94 29 03 	call	0x652	; 0x652 <ShowFunction>
							}
							break;
    32a4:	2a c7       	rjmp	.+3668   	; 0x40fa <__stack+0xfb>
							case 2:
							{
								unsigned char cntByte;
								for (cntByte=0; cntByte<5; cntByte++)
								{
										UndoConsoleMasterSettings[cntByte] = ConsoleMasterSettings[cntByte];
    32a6:	82 2f       	mov	r24, r18
    32a8:	90 e0       	ldi	r25, 0x00	; 0
    32aa:	fc 01       	movw	r30, r24
    32ac:	e5 5c       	subi	r30, 0xC5	; 197
    32ae:	f6 4d       	sbci	r31, 0xD6	; 214
    32b0:	30 81       	ld	r19, Z
    32b2:	fc 01       	movw	r30, r24
    32b4:	e6 53       	subi	r30, 0x36	; 54
    32b6:	f2 4d       	sbci	r31, 0xD2	; 210
    32b8:	30 83       	st	Z, r19
							}
							break;
							case 2:
							{
								unsigned char cntByte;
								for (cntByte=0; cntByte<5; cntByte++)
    32ba:	2f 5f       	subi	r18, 0xFF	; 255
    32bc:	01 c0       	rjmp	.+2      	; 0x32c0 <__DATA_REGION_LENGTH__+0x12c0>
			{
				switch (OperatingMode)
				{
					case NORMALMODE:
					{
						switch (TextStringPtr)
    32be:	20 e0       	ldi	r18, 0x00	; 0
							}
							break;
							case 2:
							{
								unsigned char cntByte;
								for (cntByte=0; cntByte<5; cntByte++)
    32c0:	25 30       	cpi	r18, 0x05	; 5
    32c2:	88 f3       	brcs	.-30     	; 0x32a6 <__DATA_REGION_LENGTH__+0x12a6>
								{
										UndoConsoleMasterSettings[cntByte] = ConsoleMasterSettings[cntByte];
								}

								OperatingMode = MASTERMODE;
    32c4:	82 e0       	ldi	r24, 0x02	; 2
    32c6:	80 93 ed 22 	sts	0x22ED, r24	; 0x8022ed <OperatingMode>
								TextStringPtr = 0;
    32ca:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>
								SetLCD(0,"\x80");
    32ce:	61 e5       	ldi	r22, 0x51	; 81
    32d0:	70 e2       	ldi	r23, 0x20	; 32
    32d2:	80 e0       	ldi	r24, 0x00	; 0
    32d4:	90 e0       	ldi	r25, 0x00	; 0
    32d6:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(1,MasterTextString[TextStringPtr]);
    32da:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    32de:	31 e1       	ldi	r19, 0x11	; 17
    32e0:	63 9f       	mul	r22, r19
    32e2:	b0 01       	movw	r22, r0
    32e4:	11 24       	eor	r1, r1
    32e6:	6e 58       	subi	r22, 0x8E	; 142
    32e8:	79 4d       	sbci	r23, 0xD9	; 217
    32ea:	81 e0       	ldi	r24, 0x01	; 1
    32ec:	90 e0       	ldi	r25, 0x00	; 0
    32ee:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

								SetLCD(0,"\xC0");
    32f2:	6f e2       	ldi	r22, 0x2F	; 47
    32f4:	70 e2       	ldi	r23, 0x20	; 32
    32f6:	80 e0       	ldi	r24, 0x00	; 0
    32f8:	90 e0       	ldi	r25, 0x00	; 0
    32fa:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								if (ConsoleMasterSettings[TextStringPtr])
    32fe:	e0 91 4b 24 	lds	r30, 0x244B	; 0x80244b <TextStringPtr>
    3302:	f0 e0       	ldi	r31, 0x00	; 0
    3304:	e5 5c       	subi	r30, 0xC5	; 197
    3306:	f6 4d       	sbci	r31, 0xD6	; 214
    3308:	80 81       	ld	r24, Z
    330a:	88 23       	and	r24, r24
    330c:	39 f0       	breq	.+14     	; 0x331c <__DATA_REGION_LENGTH__+0x131c>
								{
									SetLCD(1,"Yes             ");
    330e:	68 e8       	ldi	r22, 0x88	; 136
    3310:	70 e2       	ldi	r23, 0x20	; 32
    3312:	81 e0       	ldi	r24, 0x01	; 1
    3314:	90 e0       	ldi	r25, 0x00	; 0
    3316:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
    331a:	ef c6       	rjmp	.+3550   	; 0x40fa <__stack+0xfb>
								}
								else
								{
									SetLCD(1," No             ");
    331c:	69 e9       	ldi	r22, 0x99	; 153
    331e:	70 e2       	ldi	r23, 0x20	; 32
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	90 e0       	ldi	r25, 0x00	; 0
    3324:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
    3328:	e8 c6       	rjmp	.+3536   	; 0x40fa <__stack+0xfb>
								}
							}
							break;
							case 3:
							{
								OperatingMode = SYSTEMMODE;
    332a:	83 e0       	ldi	r24, 0x03	; 3
    332c:	80 93 ed 22 	sts	0x22ED, r24	; 0x8022ed <OperatingMode>
								TextStringPtr = 0;
    3330:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>
								SetLCD(0,"\x80");
    3334:	61 e5       	ldi	r22, 0x51	; 81
    3336:	70 e2       	ldi	r23, 0x20	; 32
    3338:	80 e0       	ldi	r24, 0x00	; 0
    333a:	90 e0       	ldi	r25, 0x00	; 0
    333c:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(1,SystemTextString[TextStringPtr]);
    3340:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3344:	51 e1       	ldi	r21, 0x11	; 17
    3346:	65 9f       	mul	r22, r21
    3348:	b0 01       	movw	r22, r0
    334a:	11 24       	eor	r1, r1
    334c:	62 5b       	subi	r22, 0xB2	; 178
    334e:	74 4d       	sbci	r23, 0xD4	; 212
    3350:	81 e0       	ldi	r24, 0x01	; 1
    3352:	90 e0       	ldi	r25, 0x00	; 0
    3354:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								ShowConfig();
    3358:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <ShowConfig>
							}
							break;
    335c:	ce c6       	rjmp	.+3484   	; 0x40fa <__stack+0xfb>
					}
					break;
					case SYSTEMMODE:
					{
						char TextBuffer[9];
						switch (TextStringPtr)
    335e:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3362:	83 30       	cpi	r24, 0x03	; 3
    3364:	09 f4       	brne	.+2      	; 0x3368 <__DATA_REGION_LENGTH__+0x1368>
    3366:	a8 c0       	rjmp	.+336    	; 0x34b8 <__DATA_REGION_LENGTH__+0x14b8>
    3368:	84 30       	cpi	r24, 0x04	; 4
    336a:	09 f4       	brne	.+2      	; 0x336e <__DATA_REGION_LENGTH__+0x136e>
    336c:	72 c1       	rjmp	.+740    	; 0x3652 <__DATA_REGION_LENGTH__+0x1652>
    336e:	81 30       	cpi	r24, 0x01	; 1
    3370:	09 f0       	breq	.+2      	; 0x3374 <__DATA_REGION_LENGTH__+0x1374>
    3372:	a1 c1       	rjmp	.+834    	; 0x36b6 <__DATA_REGION_LENGTH__+0x16b6>
							{	// EEPROM Load
								unsigned char cntModule;
								unsigned int Address = 0x0000;

								Address = 0x0000;
							  ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
    3374:	20 e1       	ldi	r18, 0x10	; 16
    3376:	4a e3       	ldi	r20, 0x3A	; 58
    3378:	54 e2       	ldi	r21, 0x24	; 36
    337a:	60 e0       	ldi	r22, 0x00	; 0
    337c:	70 e0       	ldi	r23, 0x00	; 0
    337e:	80 e7       	ldi	r24, 0x70	; 112
    3380:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
							  Address += NROFMODULES;
    3384:	68 94       	set
    3386:	ee 24       	eor	r14, r14
    3388:	e4 f8       	bld	r14, 4
    338a:	f1 2c       	mov	r15, r1
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    338c:	10 e0       	ldi	r17, 0x00	; 0
    338e:	0f c0       	rjmp	.+30     	; 0x33ae <__DATA_REGION_LENGTH__+0x13ae>
								{
									ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    3390:	8d e1       	ldi	r24, 0x1D	; 29
    3392:	18 9f       	mul	r17, r24
    3394:	a0 01       	movw	r20, r0
    3396:	11 24       	eor	r1, r1
    3398:	41 56       	subi	r20, 0x61	; 97
    339a:	50 4d       	sbci	r21, 0xD0	; 208
    339c:	2d e1       	ldi	r18, 0x1D	; 29
    339e:	b7 01       	movw	r22, r14
    33a0:	80 e7       	ldi	r24, 0x70	; 112
    33a2:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
								  Address += 29;
    33a6:	9d e1       	ldi	r25, 0x1D	; 29
    33a8:	e9 0e       	add	r14, r25
    33aa:	f1 1c       	adc	r15, r1
								unsigned int Address = 0x0000;

								Address = 0x0000;
							  ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
							  Address += NROFMODULES;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    33ac:	1f 5f       	subi	r17, 0xFF	; 255
    33ae:	10 31       	cpi	r17, 0x10	; 16
    33b0:	78 f3       	brcs	.-34     	; 0x3390 <__DATA_REGION_LENGTH__+0x1390>
								{
									ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
								  Address += 29;
								}
								ReadData(I2CAddressEEProm, Address, &(ConsoleMasterSettings[0]), 5);
    33b2:	25 e0       	ldi	r18, 0x05	; 5
    33b4:	4b e3       	ldi	r20, 0x3B	; 59
    33b6:	59 e2       	ldi	r21, 0x29	; 41
    33b8:	b7 01       	movw	r22, r14
    33ba:	80 e7       	ldi	r24, 0x70	; 112
    33bc:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>


								{//Reload
									unsigned char cntByte, cntChannel;

									for (cntChannel=0; cntChannel<16; cntChannel++)
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	50 c0       	rjmp	.+160    	; 0x3464 <__DATA_REGION_LENGTH__+0x1464>
									{
										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
    33c4:	24 2f       	mov	r18, r20
    33c6:	30 e0       	ldi	r19, 0x00	; 0
    33c8:	f9 01       	movw	r30, r18
    33ca:	e6 5c       	subi	r30, 0xC6	; 198
    33cc:	fb 4d       	sbci	r31, 0xDB	; 219
    33ce:	80 81       	ld	r24, Z
    33d0:	81 50       	subi	r24, 0x01	; 1
    33d2:	82 30       	cpi	r24, 0x02	; 2
    33d4:	60 f5       	brcc	.+88     	; 0x342e <__DATA_REGION_LENGTH__+0x142e>
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    33d6:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    33da:	e1 e0       	ldi	r30, 0x01	; 1
    33dc:	ea 0f       	add	r30, r26
    33de:	b0 e0       	ldi	r27, 0x00	; 0
    33e0:	ae 58       	subi	r26, 0x8E	; 142
    33e2:	ba 4d       	sbci	r27, 0xDA	; 218
    33e4:	83 e9       	ldi	r24, 0x93	; 147
    33e6:	8c 93       	st	X, r24
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    33e8:	81 e0       	ldi	r24, 0x01	; 1
    33ea:	8e 0f       	add	r24, r30
    33ec:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    33f0:	f0 e0       	ldi	r31, 0x00	; 0
    33f2:	ee 58       	subi	r30, 0x8E	; 142
    33f4:	fa 4d       	sbci	r31, 0xDA	; 218
    33f6:	40 83       	st	Z, r20
											for (cntByte=0; cntByte<29; cntByte++)
    33f8:	80 e0       	ldi	r24, 0x00	; 0
    33fa:	17 c0       	rjmp	.+46     	; 0x342a <__DATA_REGION_LENGTH__+0x142a>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
    33fc:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3400:	91 e0       	ldi	r25, 0x01	; 1
    3402:	9e 0f       	add	r25, r30
    3404:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    3408:	f0 e0       	ldi	r31, 0x00	; 0
												ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
    340a:	9d e1       	ldi	r25, 0x1D	; 29
    340c:	92 9f       	mul	r25, r18
    340e:	d0 01       	movw	r26, r0
    3410:	93 9f       	mul	r25, r19
    3412:	b0 0d       	add	r27, r0
    3414:	11 24       	eor	r1, r1
    3416:	a1 56       	subi	r26, 0x61	; 97
    3418:	b0 4d       	sbci	r27, 0xD0	; 208
    341a:	a8 0f       	add	r26, r24
    341c:	b1 1d       	adc	r27, r1
    341e:	9c 91       	ld	r25, X
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
											for (cntByte=0; cntByte<29; cntByte++)
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
    3420:	ee 58       	subi	r30, 0x8E	; 142
    3422:	fa 4d       	sbci	r31, 0xDA	; 218
    3424:	9f 77       	andi	r25, 0x7F	; 127
    3426:	90 83       	st	Z, r25
									{
										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
											SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
											for (cntByte=0; cntByte<29; cntByte++)
    3428:	8f 5f       	subi	r24, 0xFF	; 255
    342a:	8d 31       	cpi	r24, 0x1D	; 29
    342c:	38 f3       	brcs	.-50     	; 0x33fc <__DATA_REGION_LENGTH__+0x13fc>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] =
												ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
								 		  }
										}
										if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    342e:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3432:	e0 91 40 29 	lds	r30, 0x2940	; 0x802940 <SerialBufferOutPtrBottom>
    3436:	8e 17       	cp	r24, r30
    3438:	81 f0       	breq	.+32     	; 0x345a <__DATA_REGION_LENGTH__+0x145a>
    343a:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <SendSerialReady>
    343e:	88 23       	and	r24, r24
    3440:	61 f0       	breq	.+24     	; 0x345a <__DATA_REGION_LENGTH__+0x145a>
										{
											USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	8e 0f       	add	r24, r30
    3446:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <SerialBufferOutPtrBottom>
    344a:	f0 e0       	ldi	r31, 0x00	; 0
    344c:	ee 58       	subi	r30, 0x8E	; 142
    344e:	fa 4d       	sbci	r31, 0xDA	; 218
    3450:	80 81       	ld	r24, Z
    3452:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
											SendSerialReady = 0;
    3456:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <SendSerialReady>
										}
										while(!SendSerialReady);
    345a:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <SendSerialReady>
    345e:	88 23       	and	r24, r24
    3460:	e1 f3       	breq	.-8      	; 0x345a <__DATA_REGION_LENGTH__+0x145a>


								{//Reload
									unsigned char cntByte, cntChannel;

									for (cntChannel=0; cntChannel<16; cntChannel++)
    3462:	4f 5f       	subi	r20, 0xFF	; 255
    3464:	40 31       	cpi	r20, 0x10	; 16
    3466:	08 f4       	brcc	.+2      	; 0x346a <__DATA_REGION_LENGTH__+0x146a>
    3468:	ad cf       	rjmp	.-166    	; 0x33c4 <__DATA_REGION_LENGTH__+0x13c4>
											SendSerialReady = 0;
										}
										while(!SendSerialReady);
									}

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    346a:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    346e:	e1 e0       	ldi	r30, 0x01	; 1
    3470:	ea 0f       	add	r30, r26
    3472:	b0 e0       	ldi	r27, 0x00	; 0
    3474:	ae 58       	subi	r26, 0x8E	; 142
    3476:	ba 4d       	sbci	r27, 0xDA	; 218
    3478:	84 e9       	ldi	r24, 0x94	; 148
    347a:	8c 93       	st	X, r24
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	8e 0f       	add	r24, r30
    3480:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    3484:	f0 e0       	ldi	r31, 0x00	; 0
    3486:	ee 58       	subi	r30, 0x8E	; 142
    3488:	fa 4d       	sbci	r31, 0xDA	; 218
    348a:	10 82       	st	Z, r1
									for (cntByte=0; cntByte<5; cntByte++)
    348c:	80 e0       	ldi	r24, 0x00	; 0
    348e:	11 c0       	rjmp	.+34     	; 0x34b2 <__DATA_REGION_LENGTH__+0x14b2>
									{
										SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3490:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3494:	91 e0       	ldi	r25, 0x01	; 1
    3496:	9e 0f       	add	r25, r30
    3498:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    349c:	f0 e0       	ldi	r31, 0x00	; 0
    349e:	a8 2f       	mov	r26, r24
    34a0:	b0 e0       	ldi	r27, 0x00	; 0
    34a2:	a5 5c       	subi	r26, 0xC5	; 197
    34a4:	b6 4d       	sbci	r27, 0xD6	; 214
    34a6:	9c 91       	ld	r25, X
    34a8:	ee 58       	subi	r30, 0x8E	; 142
    34aa:	fa 4d       	sbci	r31, 0xDA	; 218
    34ac:	9f 77       	andi	r25, 0x7F	; 127
    34ae:	90 83       	st	Z, r25
										while(!SendSerialReady);
									}

									SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
									SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
									for (cntByte=0; cntByte<5; cntByte++)
    34b0:	8f 5f       	subi	r24, 0xFF	; 255
    34b2:	85 30       	cpi	r24, 0x05	; 5
    34b4:	68 f3       	brcs	.-38     	; 0x3490 <__DATA_REGION_LENGTH__+0x1490>
    34b6:	ff c0       	rjmp	.+510    	; 0x36b6 <__DATA_REGION_LENGTH__+0x16b6>
								unsigned char ReadedModuleType[NROFMODULES];
								unsigned char cntModule;
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);
    34b8:	20 e1       	ldi	r18, 0x10	; 16
    34ba:	ae 01       	movw	r20, r28
    34bc:	4f 5f       	subi	r20, 0xFF	; 255
    34be:	5f 4f       	sbci	r21, 0xFF	; 255
    34c0:	60 e0       	ldi	r22, 0x00	; 0
    34c2:	70 e0       	ldi	r23, 0x00	; 0
    34c4:	80 e5       	ldi	r24, 0x50	; 80
    34c6:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
							case 3:
							{ // SmartCard Load
								unsigned char ReadedModuleType[NROFMODULES];
								unsigned char cntModule;
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;
    34ca:	40 e0       	ldi	r20, 0x00	; 0

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);

								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    34cc:	20 e0       	ldi	r18, 0x00	; 0
    34ce:	10 c0       	rjmp	.+32     	; 0x34f0 <__DATA_REGION_LENGTH__+0x14f0>
								{
									if (ModuleType[cntModule] != ReadedModuleType[cntModule])
    34d0:	82 2f       	mov	r24, r18
    34d2:	90 e0       	ldi	r25, 0x00	; 0
    34d4:	fc 01       	movw	r30, r24
    34d6:	e6 5c       	subi	r30, 0xC6	; 198
    34d8:	fb 4d       	sbci	r31, 0xDB	; 219
    34da:	30 81       	ld	r19, Z
    34dc:	e1 e0       	ldi	r30, 0x01	; 1
    34de:	f0 e0       	ldi	r31, 0x00	; 0
    34e0:	ec 0f       	add	r30, r28
    34e2:	fd 1f       	adc	r31, r29
    34e4:	e8 0f       	add	r30, r24
    34e6:	f9 1f       	adc	r31, r25
    34e8:	80 81       	ld	r24, Z
    34ea:	38 13       	cpse	r19, r24
									{
										DifferentConfiguration = 1;
    34ec:	41 e0       	ldi	r20, 0x01	; 1
								unsigned int Address = 0x0000;
								unsigned char DifferentConfiguration=0;

							  ReadData(I2CAddressSmartCard, Address, ReadedModuleType, NROFMODULES);

								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    34ee:	2f 5f       	subi	r18, 0xFF	; 255
    34f0:	20 31       	cpi	r18, 0x10	; 16
    34f2:	70 f3       	brcs	.-36     	; 0x34d0 <__DATA_REGION_LENGTH__+0x14d0>
									{
										DifferentConfiguration = 1;
									}
								}

								if (!DifferentConfiguration)
    34f4:	44 23       	and	r20, r20
    34f6:	89 f0       	breq	.+34     	; 0x351a <__DATA_REGION_LENGTH__+0x151a>
    34f8:	9b c0       	rjmp	.+310    	; 0x3630 <__DATA_REGION_LENGTH__+0x1630>
								{
									Address += NROFMODULES;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
									{
										ReadData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    34fa:	ed e1       	ldi	r30, 0x1D	; 29
    34fc:	1e 9f       	mul	r17, r30
    34fe:	a0 01       	movw	r20, r0
    3500:	11 24       	eor	r1, r1
    3502:	41 56       	subi	r20, 0x61	; 97
    3504:	50 4d       	sbci	r21, 0xD0	; 208
    3506:	2d e1       	ldi	r18, 0x1D	; 29
    3508:	b7 01       	movw	r22, r14
    350a:	80 e5       	ldi	r24, 0x50	; 80
    350c:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
										Address += 29;
    3510:	fd e1       	ldi	r31, 0x1D	; 29
    3512:	ef 0e       	add	r14, r31
    3514:	f1 1c       	adc	r15, r1
								}

								if (!DifferentConfiguration)
								{
									Address += NROFMODULES;
									for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3516:	1f 5f       	subi	r17, 0xFF	; 255
    3518:	05 c0       	rjmp	.+10     	; 0x3524 <__DATA_REGION_LENGTH__+0x1524>
    351a:	68 94       	set
    351c:	ee 24       	eor	r14, r14
    351e:	e4 f8       	bld	r14, 4
    3520:	f1 2c       	mov	r15, r1
    3522:	10 e0       	ldi	r17, 0x00	; 0
    3524:	10 31       	cpi	r17, 0x10	; 16
    3526:	48 f3       	brcs	.-46     	; 0x34fa <__DATA_REGION_LENGTH__+0x14fa>
									{
										ReadData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
										Address += 29;
									}
									ReadData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);
    3528:	25 e0       	ldi	r18, 0x05	; 5
    352a:	4b e3       	ldi	r20, 0x3B	; 59
    352c:	59 e2       	ldi	r21, 0x29	; 41
    352e:	b7 01       	movw	r22, r14
    3530:	80 e5       	ldi	r24, 0x50	; 80
    3532:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>

									{//Reload
										unsigned char cntByte, cntChannel;

										for (cntChannel=0; cntChannel<16; cntChannel++)
    3536:	30 e0       	ldi	r19, 0x00	; 0
    3538:	51 c0       	rjmp	.+162    	; 0x35dc <__DATA_REGION_LENGTH__+0x15dc>
										{
  										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
    353a:	43 2f       	mov	r20, r19
    353c:	50 e0       	ldi	r21, 0x00	; 0
    353e:	fa 01       	movw	r30, r20
    3540:	e6 5c       	subi	r30, 0xC6	; 198
    3542:	fb 4d       	sbci	r31, 0xDB	; 219
    3544:	80 81       	ld	r24, Z
    3546:	81 50       	subi	r24, 0x01	; 1
    3548:	82 30       	cpi	r24, 0x02	; 2
    354a:	68 f5       	brcc	.+90     	; 0x35a6 <__DATA_REGION_LENGTH__+0x15a6>
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    354c:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3550:	e1 e0       	ldi	r30, 0x01	; 1
    3552:	ea 0f       	add	r30, r26
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	ae 58       	subi	r26, 0x8E	; 142
    3558:	ba 4d       	sbci	r27, 0xDA	; 218
    355a:	83 e9       	ldi	r24, 0x93	; 147
    355c:	8c 93       	st	X, r24
												SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
    355e:	81 e0       	ldi	r24, 0x01	; 1
    3560:	8e 0f       	add	r24, r30
    3562:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    3566:	f0 e0       	ldi	r31, 0x00	; 0
    3568:	ee 58       	subi	r30, 0x8E	; 142
    356a:	fa 4d       	sbci	r31, 0xDA	; 218
    356c:	30 83       	st	Z, r19
												for (cntByte=0; cntByte<29; cntByte++)
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	18 c0       	rjmp	.+48     	; 0x35a2 <__DATA_REGION_LENGTH__+0x15a2>
												{
													ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
    3572:	8d e1       	ldi	r24, 0x1D	; 29
    3574:	84 9f       	mul	r24, r20
    3576:	f0 01       	movw	r30, r0
    3578:	85 9f       	mul	r24, r21
    357a:	f0 0d       	add	r31, r0
    357c:	11 24       	eor	r1, r1
    357e:	e1 56       	subi	r30, 0x61	; 97
    3580:	f0 4d       	sbci	r31, 0xD0	; 208
    3582:	e9 0f       	add	r30, r25
    3584:	f1 1d       	adc	r31, r1
    3586:	80 81       	ld	r24, Z
    3588:	81 70       	andi	r24, 0x01	; 1
    358a:	80 83       	st	Z, r24
													SerialBufferOut[SerialBufferOutPtrTop++] =
    358c:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3590:	21 e0       	ldi	r18, 0x01	; 1
    3592:	2e 0f       	add	r18, r30
    3594:	20 93 4c 24 	sts	0x244C, r18	; 0x80244c <SerialBufferOutPtrTop>
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	ee 58       	subi	r30, 0x8E	; 142
    359c:	fa 4d       	sbci	r31, 0xDA	; 218
    359e:	80 83       	st	Z, r24
										{
  										if ((ModuleType[cntChannel]==0x01) || (ModuleType[cntChannel]==0x02))
											{
												SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
												SerialBufferOut[SerialBufferOutPtrTop++] = cntChannel;
												for (cntByte=0; cntByte<29; cntByte++)
    35a0:	9f 5f       	subi	r25, 0xFF	; 255
    35a2:	9d 31       	cpi	r25, 0x1D	; 29
    35a4:	30 f3       	brcs	.-52     	; 0x3572 <__DATA_REGION_LENGTH__+0x1572>
													ConsoleModuleSettings[cntChannel][cntByte]&=0x01;
													SerialBufferOut[SerialBufferOutPtrTop++] =
													ConsoleModuleSettings[cntChannel][cntByte]&0x7F;
									 		  }
											}
											if ((SerialBufferOutPtrTop != SerialBufferOutPtrBottom) && SendSerialReady)
    35a6:	80 91 4c 24 	lds	r24, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    35aa:	e0 91 40 29 	lds	r30, 0x2940	; 0x802940 <SerialBufferOutPtrBottom>
    35ae:	8e 17       	cp	r24, r30
    35b0:	81 f0       	breq	.+32     	; 0x35d2 <__DATA_REGION_LENGTH__+0x15d2>
    35b2:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <SendSerialReady>
    35b6:	88 23       	and	r24, r24
    35b8:	61 f0       	breq	.+24     	; 0x35d2 <__DATA_REGION_LENGTH__+0x15d2>
											{
												USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    35ba:	81 e0       	ldi	r24, 0x01	; 1
    35bc:	8e 0f       	add	r24, r30
    35be:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <SerialBufferOutPtrBottom>
    35c2:	f0 e0       	ldi	r31, 0x00	; 0
    35c4:	ee 58       	subi	r30, 0x8E	; 142
    35c6:	fa 4d       	sbci	r31, 0xDA	; 218
    35c8:	80 81       	ld	r24, Z
    35ca:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
												SendSerialReady = 0;
    35ce:	10 92 34 24 	sts	0x2434, r1	; 0x802434 <SendSerialReady>
											}
											while(!SendSerialReady);
    35d2:	80 91 34 24 	lds	r24, 0x2434	; 0x802434 <SendSerialReady>
    35d6:	88 23       	and	r24, r24
    35d8:	e1 f3       	breq	.-8      	; 0x35d2 <__DATA_REGION_LENGTH__+0x15d2>
									ReadData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);

									{//Reload
										unsigned char cntByte, cntChannel;

										for (cntChannel=0; cntChannel<16; cntChannel++)
    35da:	3f 5f       	subi	r19, 0xFF	; 255
    35dc:	30 31       	cpi	r19, 0x10	; 16
    35de:	08 f4       	brcc	.+2      	; 0x35e2 <__DATA_REGION_LENGTH__+0x15e2>
    35e0:	ac cf       	rjmp	.-168    	; 0x353a <__DATA_REGION_LENGTH__+0x153a>
												SendSerialReady = 0;
											}
											while(!SendSerialReady);
										}
	
										SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    35e2:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    35e6:	e1 e0       	ldi	r30, 0x01	; 1
    35e8:	ea 0f       	add	r30, r26
    35ea:	b0 e0       	ldi	r27, 0x00	; 0
    35ec:	ae 58       	subi	r26, 0x8E	; 142
    35ee:	ba 4d       	sbci	r27, 0xDA	; 218
    35f0:	84 e9       	ldi	r24, 0x94	; 148
    35f2:	8c 93       	st	X, r24
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    35f4:	81 e0       	ldi	r24, 0x01	; 1
    35f6:	8e 0f       	add	r24, r30
    35f8:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    35fc:	f0 e0       	ldi	r31, 0x00	; 0
    35fe:	ee 58       	subi	r30, 0x8E	; 142
    3600:	fa 4d       	sbci	r31, 0xDA	; 218
    3602:	10 82       	st	Z, r1
										for (cntByte=0; cntByte<5; cntByte++)
    3604:	80 e0       	ldi	r24, 0x00	; 0
    3606:	11 c0       	rjmp	.+34     	; 0x362a <__DATA_REGION_LENGTH__+0x162a>
										{
											SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3608:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    360c:	91 e0       	ldi	r25, 0x01	; 1
    360e:	9e 0f       	add	r25, r30
    3610:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    3614:	f0 e0       	ldi	r31, 0x00	; 0
    3616:	a8 2f       	mov	r26, r24
    3618:	b0 e0       	ldi	r27, 0x00	; 0
    361a:	a5 5c       	subi	r26, 0xC5	; 197
    361c:	b6 4d       	sbci	r27, 0xD6	; 214
    361e:	9c 91       	ld	r25, X
    3620:	ee 58       	subi	r30, 0x8E	; 142
    3622:	fa 4d       	sbci	r31, 0xDA	; 218
    3624:	9f 77       	andi	r25, 0x7F	; 127
    3626:	90 83       	st	Z, r25
											while(!SendSerialReady);
										}
	
										SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
										SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
										for (cntByte=0; cntByte<5; cntByte++)
    3628:	8f 5f       	subi	r24, 0xFF	; 255
    362a:	85 30       	cpi	r24, 0x05	; 5
    362c:	68 f3       	brcs	.-38     	; 0x3608 <__DATA_REGION_LENGTH__+0x1608>
    362e:	43 c0       	rjmp	.+134    	; 0x36b6 <__DATA_REGION_LENGTH__+0x16b6>
										}
									}
 							  }
								else
								{
									SetLCD(0,"\xC0");
    3630:	6f e2       	ldi	r22, 0x2F	; 47
    3632:	70 e2       	ldi	r23, 0x20	; 32
    3634:	80 e0       	ldi	r24, 0x00	; 0
    3636:	90 e0       	ldi	r25, 0x00	; 0
    3638:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
									SetLCD(1,"Other Config.   ");
    363c:	6a ea       	ldi	r22, 0xAA	; 170
    363e:	70 e2       	ldi	r23, 0x20	; 32
    3640:	81 e0       	ldi	r24, 0x01	; 1
    3642:	90 e0       	ldi	r25, 0x00	; 0
    3644:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
									Delay(100);
    3648:	84 e6       	ldi	r24, 0x64	; 100
    364a:	90 e0       	ldi	r25, 0x00	; 0
    364c:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>
								}
							}
							break;
    3650:	32 c0       	rjmp	.+100    	; 0x36b6 <__DATA_REGION_LENGTH__+0x16b6>
							case 4:
							{ // SmartCard Write
								unsigned char cntModule;
								unsigned int Address = 0x0000;

								SetLCD(0,"\x80");
    3652:	61 e5       	ldi	r22, 0x51	; 81
    3654:	70 e2       	ldi	r23, 0x20	; 32
    3656:	80 e0       	ldi	r24, 0x00	; 0
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(1,"Saving...");
    365e:	6b eb       	ldi	r22, 0xBB	; 187
    3660:	70 e2       	ldi	r23, 0x20	; 32
    3662:	81 e0       	ldi	r24, 0x01	; 1
    3664:	90 e0       	ldi	r25, 0x00	; 0
    3666:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

								WriteData(I2CAddressSmartCard, Address, ModuleType, NROFMODULES);
    366a:	20 e1       	ldi	r18, 0x10	; 16
    366c:	4a e3       	ldi	r20, 0x3A	; 58
    366e:	54 e2       	ldi	r21, 0x24	; 36
    3670:	60 e0       	ldi	r22, 0x00	; 0
    3672:	70 e0       	ldi	r23, 0x00	; 0
    3674:	80 e5       	ldi	r24, 0x50	; 80
    3676:	0e 94 83 21 	call	0x4306	; 0x4306 <WriteData>
								Address += NROFMODULES;
    367a:	68 94       	set
    367c:	ee 24       	eor	r14, r14
    367e:	e4 f8       	bld	r14, 4
    3680:	f1 2c       	mov	r15, r1
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3682:	10 e0       	ldi	r17, 0x00	; 0
    3684:	0f c0       	rjmp	.+30     	; 0x36a4 <__DATA_REGION_LENGTH__+0x16a4>
								{
									WriteData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    3686:	3d e1       	ldi	r19, 0x1D	; 29
    3688:	13 9f       	mul	r17, r19
    368a:	a0 01       	movw	r20, r0
    368c:	11 24       	eor	r1, r1
    368e:	41 56       	subi	r20, 0x61	; 97
    3690:	50 4d       	sbci	r21, 0xD0	; 208
    3692:	2d e1       	ldi	r18, 0x1D	; 29
    3694:	b7 01       	movw	r22, r14
    3696:	80 e5       	ldi	r24, 0x50	; 80
    3698:	0e 94 83 21 	call	0x4306	; 0x4306 <WriteData>
									Address += 29;
    369c:	5d e1       	ldi	r21, 0x1D	; 29
    369e:	e5 0e       	add	r14, r21
    36a0:	f1 1c       	adc	r15, r1
								SetLCD(0,"\x80");
								SetLCD(1,"Saving...");

								WriteData(I2CAddressSmartCard, Address, ModuleType, NROFMODULES);
								Address += NROFMODULES;
								for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    36a2:	1f 5f       	subi	r17, 0xFF	; 255
    36a4:	10 31       	cpi	r17, 0x10	; 16
    36a6:	78 f3       	brcs	.-34     	; 0x3686 <__DATA_REGION_LENGTH__+0x1686>
								{
									WriteData(I2CAddressSmartCard, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
									Address += 29;
								}
								WriteData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);
    36a8:	25 e0       	ldi	r18, 0x05	; 5
    36aa:	4b e3       	ldi	r20, 0x3B	; 59
    36ac:	59 e2       	ldi	r21, 0x29	; 41
    36ae:	b7 01       	movw	r22, r14
    36b0:	80 e5       	ldi	r24, 0x50	; 80
    36b2:	0e 94 83 21 	call	0x4306	; 0x4306 <WriteData>
							}
							break;
						}
						OperatingMode = NORMALMODE;
    36b6:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <OperatingMode>
						TextStringPtr = 0;
    36ba:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>

						SetLCD(0,"\x80");
    36be:	61 e5       	ldi	r22, 0x51	; 81
    36c0:	70 e2       	ldi	r23, 0x20	; 32
    36c2:	80 e0       	ldi	r24, 0x00	; 0
    36c4:	90 e0       	ldi	r25, 0x00	; 0
    36c6:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,"                ");
    36ca:	64 e6       	ldi	r22, 0x64	; 100
    36cc:	70 e2       	ldi	r23, 0x20	; 32
    36ce:	81 e0       	ldi	r24, 0x01	; 1
    36d0:	90 e0       	ldi	r25, 0x00	; 0
    36d2:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(0,"\xC0");
    36d6:	6f e2       	ldi	r22, 0x2F	; 47
    36d8:	70 e2       	ldi	r23, 0x20	; 32
    36da:	80 e0       	ldi	r24, 0x00	; 0
    36dc:	90 e0       	ldi	r25, 0x00	; 0
    36de:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1, TextString[TextStringPtr]);
    36e2:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    36e6:	81 e1       	ldi	r24, 0x11	; 17
    36e8:	68 9f       	mul	r22, r24
    36ea:	b0 01       	movw	r22, r0
    36ec:	11 24       	eor	r1, r1
    36ee:	60 51       	subi	r22, 0x10	; 16
    36f0:	7c 4d       	sbci	r23, 0xDC	; 220
    36f2:	81 e0       	ldi	r24, 0x01	; 1
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

						TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    36fa:	ea e9       	ldi	r30, 0x9A	; 154
    36fc:	f1 e3       	ldi	r31, 0x31	; 49
    36fe:	23 81       	ldd	r18, Z+3	; 0x03
    3700:	8d ec       	ldi	r24, 0xCD	; 205
    3702:	28 9f       	mul	r18, r24
    3704:	91 2d       	mov	r25, r1
    3706:	11 24       	eor	r1, r1
    3708:	96 95       	lsr	r25
    370a:	96 95       	lsr	r25
    370c:	96 95       	lsr	r25
    370e:	30 e3       	ldi	r19, 0x30	; 48
    3710:	39 0f       	add	r19, r25
    3712:	39 83       	std	Y+1, r19	; 0x01
						TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    3714:	99 0f       	add	r25, r25
    3716:	39 2f       	mov	r19, r25
    3718:	33 0f       	add	r19, r19
    371a:	33 0f       	add	r19, r19
    371c:	93 0f       	add	r25, r19
    371e:	29 1b       	sub	r18, r25
    3720:	20 5d       	subi	r18, 0xD0	; 208
    3722:	2a 83       	std	Y+2, r18	; 0x02
						TextBuffer[2] = ':';
    3724:	4a e3       	ldi	r20, 0x3A	; 58
    3726:	4b 83       	std	Y+3, r20	; 0x03
					  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    3728:	22 81       	ldd	r18, Z+2	; 0x02
    372a:	28 9f       	mul	r18, r24
    372c:	91 2d       	mov	r25, r1
    372e:	11 24       	eor	r1, r1
    3730:	96 95       	lsr	r25
    3732:	96 95       	lsr	r25
    3734:	96 95       	lsr	r25
    3736:	30 e3       	ldi	r19, 0x30	; 48
    3738:	39 0f       	add	r19, r25
    373a:	3c 83       	std	Y+4, r19	; 0x04
						TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    373c:	99 0f       	add	r25, r25
    373e:	39 2f       	mov	r19, r25
    3740:	33 0f       	add	r19, r19
    3742:	33 0f       	add	r19, r19
    3744:	93 0f       	add	r25, r19
    3746:	29 1b       	sub	r18, r25
    3748:	20 5d       	subi	r18, 0xD0	; 208
    374a:	2d 83       	std	Y+5, r18	; 0x05
						TextBuffer[5] = ':';
    374c:	4e 83       	std	Y+6, r20	; 0x06
						TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    374e:	91 81       	ldd	r25, Z+1	; 0x01
    3750:	98 9f       	mul	r25, r24
    3752:	81 2d       	mov	r24, r1
    3754:	11 24       	eor	r1, r1
    3756:	86 95       	lsr	r24
    3758:	86 95       	lsr	r24
    375a:	86 95       	lsr	r24
    375c:	20 e3       	ldi	r18, 0x30	; 48
    375e:	28 0f       	add	r18, r24
    3760:	2f 83       	std	Y+7, r18	; 0x07
						TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    3762:	88 0f       	add	r24, r24
    3764:	28 2f       	mov	r18, r24
    3766:	22 0f       	add	r18, r18
    3768:	22 0f       	add	r18, r18
    376a:	82 0f       	add	r24, r18
    376c:	98 1b       	sub	r25, r24
    376e:	90 5d       	subi	r25, 0xD0	; 208
    3770:	98 87       	std	Y+8, r25	; 0x08
/*						TextBuffer[8] = ':';
						TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
						TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
						TextBuffer[11] = 0;*/
						TextBuffer[8] = 0;
    3772:	19 86       	std	Y+9, r1	; 0x09
						SetLCD(0,"\x84");
    3774:	65 e7       	ldi	r22, 0x75	; 117
    3776:	70 e2       	ldi	r23, 0x20	; 32
    3778:	80 e0       	ldi	r24, 0x00	; 0
    377a:	90 e0       	ldi	r25, 0x00	; 0
    377c:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,TextBuffer);
    3780:	be 01       	movw	r22, r28
    3782:	6f 5f       	subi	r22, 0xFF	; 255
    3784:	7f 4f       	sbci	r23, 0xFF	; 255
    3786:	81 e0       	ldi	r24, 0x01	; 1
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					}
					break;
    378e:	b5 c4       	rjmp	.+2410   	; 0x40fa <__stack+0xfb>
					default:
					{
						char TextBuffer[9];

						OperatingMode = NORMALMODE;
    3790:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <OperatingMode>
						TextStringPtr = 0;
    3794:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>

						SetLCD(0,"\x80");
    3798:	61 e5       	ldi	r22, 0x51	; 81
    379a:	70 e2       	ldi	r23, 0x20	; 32
    379c:	80 e0       	ldi	r24, 0x00	; 0
    379e:	90 e0       	ldi	r25, 0x00	; 0
    37a0:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,"                ");
    37a4:	64 e6       	ldi	r22, 0x64	; 100
    37a6:	70 e2       	ldi	r23, 0x20	; 32
    37a8:	81 e0       	ldi	r24, 0x01	; 1
    37aa:	90 e0       	ldi	r25, 0x00	; 0
    37ac:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(0,"\xC0");
    37b0:	6f e2       	ldi	r22, 0x2F	; 47
    37b2:	70 e2       	ldi	r23, 0x20	; 32
    37b4:	80 e0       	ldi	r24, 0x00	; 0
    37b6:	90 e0       	ldi	r25, 0x00	; 0
    37b8:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1, TextString[TextStringPtr]);
    37bc:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    37c0:	91 e1       	ldi	r25, 0x11	; 17
    37c2:	69 9f       	mul	r22, r25
    37c4:	b0 01       	movw	r22, r0
    37c6:	11 24       	eor	r1, r1
    37c8:	60 51       	subi	r22, 0x10	; 16
    37ca:	7c 4d       	sbci	r23, 0xDC	; 220
    37cc:	81 e0       	ldi	r24, 0x01	; 1
    37ce:	90 e0       	ldi	r25, 0x00	; 0
    37d0:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

						TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    37d4:	ea e9       	ldi	r30, 0x9A	; 154
    37d6:	f1 e3       	ldi	r31, 0x31	; 49
    37d8:	23 81       	ldd	r18, Z+3	; 0x03
    37da:	8d ec       	ldi	r24, 0xCD	; 205
    37dc:	28 9f       	mul	r18, r24
    37de:	91 2d       	mov	r25, r1
    37e0:	11 24       	eor	r1, r1
    37e2:	96 95       	lsr	r25
    37e4:	96 95       	lsr	r25
    37e6:	96 95       	lsr	r25
    37e8:	30 e3       	ldi	r19, 0x30	; 48
    37ea:	39 0f       	add	r19, r25
    37ec:	39 83       	std	Y+1, r19	; 0x01
						TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    37ee:	99 0f       	add	r25, r25
    37f0:	39 2f       	mov	r19, r25
    37f2:	33 0f       	add	r19, r19
    37f4:	33 0f       	add	r19, r19
    37f6:	93 0f       	add	r25, r19
    37f8:	29 1b       	sub	r18, r25
    37fa:	20 5d       	subi	r18, 0xD0	; 208
    37fc:	2a 83       	std	Y+2, r18	; 0x02
						TextBuffer[2] = ':';
    37fe:	4a e3       	ldi	r20, 0x3A	; 58
    3800:	4b 83       	std	Y+3, r20	; 0x03
					  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    3802:	22 81       	ldd	r18, Z+2	; 0x02
    3804:	28 9f       	mul	r18, r24
    3806:	91 2d       	mov	r25, r1
    3808:	11 24       	eor	r1, r1
    380a:	96 95       	lsr	r25
    380c:	96 95       	lsr	r25
    380e:	96 95       	lsr	r25
    3810:	30 e3       	ldi	r19, 0x30	; 48
    3812:	39 0f       	add	r19, r25
    3814:	3c 83       	std	Y+4, r19	; 0x04
						TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    3816:	99 0f       	add	r25, r25
    3818:	39 2f       	mov	r19, r25
    381a:	33 0f       	add	r19, r19
    381c:	33 0f       	add	r19, r19
    381e:	93 0f       	add	r25, r19
    3820:	29 1b       	sub	r18, r25
    3822:	20 5d       	subi	r18, 0xD0	; 208
    3824:	2d 83       	std	Y+5, r18	; 0x05
						TextBuffer[5] = ':';
    3826:	4e 83       	std	Y+6, r20	; 0x06
						TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    3828:	91 81       	ldd	r25, Z+1	; 0x01
    382a:	98 9f       	mul	r25, r24
    382c:	81 2d       	mov	r24, r1
    382e:	11 24       	eor	r1, r1
    3830:	86 95       	lsr	r24
    3832:	86 95       	lsr	r24
    3834:	86 95       	lsr	r24
    3836:	20 e3       	ldi	r18, 0x30	; 48
    3838:	28 0f       	add	r18, r24
    383a:	2f 83       	std	Y+7, r18	; 0x07
						TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    383c:	88 0f       	add	r24, r24
    383e:	28 2f       	mov	r18, r24
    3840:	22 0f       	add	r18, r18
    3842:	22 0f       	add	r18, r18
    3844:	82 0f       	add	r24, r18
    3846:	98 1b       	sub	r25, r24
    3848:	90 5d       	subi	r25, 0xD0	; 208
    384a:	98 87       	std	Y+8, r25	; 0x08
/*						TextBuffer[8] = ':';
						TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
						TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
						TextBuffer[11] = 0;*/
						TextBuffer[8] = 0;
    384c:	19 86       	std	Y+9, r1	; 0x09
						SetLCD(0,"\x84");
    384e:	65 e7       	ldi	r22, 0x75	; 117
    3850:	70 e2       	ldi	r23, 0x20	; 32
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,TextBuffer);
    385a:	be 01       	movw	r22, r28
    385c:	6f 5f       	subi	r22, 0xFF	; 255
    385e:	7f 4f       	sbci	r23, 0xFF	; 255
    3860:	81 e0       	ldi	r24, 0x01	; 1
    3862:	90 e0       	ldi	r25, 0x00	; 0
    3864:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetConsoleData();
    3868:	0e 94 a2 07 	call	0xf44	; 0xf44 <SetConsoleData>
					}
					break;
    386c:	46 c4       	rjmp	.+2188   	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case RIGHT:
		{
			if (EventOn)
    386e:	01 2b       	or	r16, r17
    3870:	09 f0       	breq	.+2      	; 0x3874 <__DATA_REGION_LENGTH__+0x1874>
    3872:	43 c4       	rjmp	.+2182   	; 0x40fa <__stack+0xfb>
			{
				switch (OperatingMode)
    3874:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <OperatingMode>
    3878:	82 30       	cpi	r24, 0x02	; 2
    387a:	09 f0       	breq	.+2      	; 0x387e <__DATA_REGION_LENGTH__+0x187e>
    387c:	3e c4       	rjmp	.+2172   	; 0x40fa <__stack+0xfb>
					{
					}
					break;
					case MASTERMODE:
					{
						if (ConsoleMasterSettings[4])
    387e:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <ConsoleMasterSettings+0x4>
    3882:	88 23       	and	r24, r24
    3884:	09 f4       	brne	.+2      	; 0x3888 <__DATA_REGION_LENGTH__+0x1888>
    3886:	39 c4       	rjmp	.+2162   	; 0x40fa <__stack+0xfb>
						{
							unsigned char cntByte;

							ConsoleMasterSettings[TextStringPtr] = 1;
    3888:	e0 91 4b 24 	lds	r30, 0x244B	; 0x80244b <TextStringPtr>
    388c:	f0 e0       	ldi	r31, 0x00	; 0
    388e:	e5 5c       	subi	r30, 0xC5	; 197
    3890:	f6 4d       	sbci	r31, 0xD6	; 214
    3892:	81 e0       	ldi	r24, 0x01	; 1
    3894:	80 83       	st	Z, r24
							SetLCD(0,"\xC0");
    3896:	6f e2       	ldi	r22, 0x2F	; 47
    3898:	70 e2       	ldi	r23, 0x20	; 32
    389a:	80 e0       	ldi	r24, 0x00	; 0
    389c:	90 e0       	ldi	r25, 0x00	; 0
    389e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
							SetLCD(1,"Yes             ");
    38a2:	68 e8       	ldi	r22, 0x88	; 136
    38a4:	70 e2       	ldi	r23, 0x20	; 32
    38a6:	81 e0       	ldi	r24, 0x01	; 1
    38a8:	90 e0       	ldi	r25, 0x00	; 0
    38aa:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    38ae:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    38b2:	e1 e0       	ldi	r30, 0x01	; 1
    38b4:	ea 0f       	add	r30, r26
    38b6:	b0 e0       	ldi	r27, 0x00	; 0
    38b8:	ae 58       	subi	r26, 0x8E	; 142
    38ba:	ba 4d       	sbci	r27, 0xDA	; 218
    38bc:	84 e9       	ldi	r24, 0x94	; 148
    38be:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    38c0:	81 e0       	ldi	r24, 0x01	; 1
    38c2:	8e 0f       	add	r24, r30
    38c4:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    38c8:	f0 e0       	ldi	r31, 0x00	; 0
    38ca:	ee 58       	subi	r30, 0x8E	; 142
    38cc:	fa 4d       	sbci	r31, 0xDA	; 218
    38ce:	10 82       	st	Z, r1
							for (cntByte=0; cntByte<5; cntByte++)
    38d0:	80 e0       	ldi	r24, 0x00	; 0
    38d2:	11 c0       	rjmp	.+34     	; 0x38f6 <__DATA_REGION_LENGTH__+0x18f6>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    38d4:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    38d8:	91 e0       	ldi	r25, 0x01	; 1
    38da:	9e 0f       	add	r25, r30
    38dc:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    38e0:	f0 e0       	ldi	r31, 0x00	; 0
    38e2:	a8 2f       	mov	r26, r24
    38e4:	b0 e0       	ldi	r27, 0x00	; 0
    38e6:	a5 5c       	subi	r26, 0xC5	; 197
    38e8:	b6 4d       	sbci	r27, 0xD6	; 214
    38ea:	9c 91       	ld	r25, X
    38ec:	ee 58       	subi	r30, 0x8E	; 142
    38ee:	fa 4d       	sbci	r31, 0xDA	; 218
    38f0:	9f 77       	andi	r25, 0x7F	; 127
    38f2:	90 83       	st	Z, r25
							SetLCD(0,"\xC0");
							SetLCD(1,"Yes             ");

							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
							for (cntByte=0; cntByte<5; cntByte++)
    38f4:	8f 5f       	subi	r24, 0xFF	; 255
    38f6:	85 30       	cpi	r24, 0x05	; 5
    38f8:	68 f3       	brcs	.-38     	; 0x38d4 <__DATA_REGION_LENGTH__+0x18d4>
    38fa:	ff c3       	rjmp	.+2046   	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case UP:
		{
			if (EventOn)
    38fc:	01 2b       	or	r16, r17
    38fe:	09 f0       	breq	.+2      	; 0x3902 <__DATA_REGION_LENGTH__+0x1902>
    3900:	fc c3       	rjmp	.+2040   	; 0x40fa <__stack+0xfb>
			{		
				TextStringPtr--;
    3902:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3906:	81 50       	subi	r24, 0x01	; 1
    3908:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>
				switch (OperatingMode)
    390c:	90 91 ed 22 	lds	r25, 0x22ED	; 0x8022ed <OperatingMode>
    3910:	91 30       	cpi	r25, 0x01	; 1
    3912:	01 f1       	breq	.+64     	; 0x3954 <__DATA_REGION_LENGTH__+0x1954>
    3914:	38 f0       	brcs	.+14     	; 0x3924 <__DATA_REGION_LENGTH__+0x1924>
    3916:	92 30       	cpi	r25, 0x02	; 2
    3918:	09 f4       	brne	.+2      	; 0x391c <__DATA_REGION_LENGTH__+0x191c>
    391a:	44 c0       	rjmp	.+136    	; 0x39a4 <__DATA_REGION_LENGTH__+0x19a4>
    391c:	93 30       	cpi	r25, 0x03	; 3
    391e:	09 f4       	brne	.+2      	; 0x3922 <__DATA_REGION_LENGTH__+0x1922>
    3920:	74 c0       	rjmp	.+232    	; 0x3a0a <__DATA_REGION_LENGTH__+0x1a0a>
    3922:	eb c3       	rjmp	.+2006   	; 0x40fa <__stack+0xfb>
				{
					case NORMALMODE:
					{
						if (TextStringPtr>3)
    3924:	84 30       	cpi	r24, 0x04	; 4
    3926:	18 f0       	brcs	.+6      	; 0x392e <__DATA_REGION_LENGTH__+0x192e>
							TextStringPtr=3;
    3928:	83 e0       	ldi	r24, 0x03	; 3
    392a:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>
						SetLCD(0,"\xC0");					
    392e:	6f e2       	ldi	r22, 0x2F	; 47
    3930:	70 e2       	ldi	r23, 0x20	; 32
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	90 e0       	ldi	r25, 0x00	; 0
    3936:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
		 				SetLCD(1,TextString[TextStringPtr]);
    393a:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    393e:	e1 e1       	ldi	r30, 0x11	; 17
    3940:	6e 9f       	mul	r22, r30
    3942:	b0 01       	movw	r22, r0
    3944:	11 24       	eor	r1, r1
    3946:	60 51       	subi	r22, 0x10	; 16
    3948:	7c 4d       	sbci	r23, 0xDC	; 220
    394a:	81 e0       	ldi	r24, 0x01	; 1
    394c:	90 e0       	ldi	r25, 0x00	; 0
    394e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					}
					break;
    3952:	d3 c3       	rjmp	.+1958   	; 0x40fa <__stack+0xfb>
					case MODULEMODE:
					{
						if (TextStringPtr>28)
    3954:	8d 31       	cpi	r24, 0x1D	; 29
    3956:	18 f0       	brcs	.+6      	; 0x395e <__DATA_REGION_LENGTH__+0x195e>
							TextStringPtr=28;
    3958:	8c e1       	ldi	r24, 0x1C	; 28
    395a:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>

						SetLCD(0,"\x80");					
    395e:	61 e5       	ldi	r22, 0x51	; 81
    3960:	70 e2       	ldi	r23, 0x20	; 32
    3962:	80 e0       	ldi	r24, 0x00	; 0
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,ModuleTextString[TextStringPtr]);
    396a:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    396e:	f1 e1       	ldi	r31, 0x11	; 17
    3970:	6f 9f       	mul	r22, r31
    3972:	b0 01       	movw	r22, r0
    3974:	11 24       	eor	r1, r1
    3976:	6f 5a       	subi	r22, 0xAF	; 175
    3978:	76 4d       	sbci	r23, 0xD6	; 214
    397a:	81 e0       	ldi	r24, 0x01	; 1
    397c:	90 e0       	ldi	r25, 0x00	; 0
    397e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(0,"\xC0");							
    3982:	6f e2       	ldi	r22, 0x2F	; 47
    3984:	70 e2       	ldi	r23, 0x20	; 32
    3986:	80 e0       	ldi	r24, 0x00	; 0
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
//						SetLCD(1,"Select Module   ");
						SetLCD(1,"Toggle by SELECT");
    398e:	67 e7       	ldi	r22, 0x77	; 119
    3990:	70 e2       	ldi	r23, 0x20	; 32
    3992:	81 e0       	ldi	r24, 0x01	; 1
    3994:	90 e0       	ldi	r25, 0x00	; 0
    3996:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						ShowFunction(TextStringPtr);
    399a:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    399e:	0e 94 29 03 	call	0x652	; 0x652 <ShowFunction>
					}
					break;
    39a2:	ab c3       	rjmp	.+1878   	; 0x40fa <__stack+0xfb>
					case MASTERMODE:
					{
						if (TextStringPtr>3)
    39a4:	84 30       	cpi	r24, 0x04	; 4
    39a6:	18 f0       	brcs	.+6      	; 0x39ae <__DATA_REGION_LENGTH__+0x19ae>
							TextStringPtr=3;
    39a8:	83 e0       	ldi	r24, 0x03	; 3
    39aa:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>
						SetLCD(0,"\x80");										
    39ae:	61 e5       	ldi	r22, 0x51	; 81
    39b0:	70 e2       	ldi	r23, 0x20	; 32
    39b2:	80 e0       	ldi	r24, 0x00	; 0
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,MasterTextString[TextStringPtr]);
    39ba:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    39be:	31 e1       	ldi	r19, 0x11	; 17
    39c0:	63 9f       	mul	r22, r19
    39c2:	b0 01       	movw	r22, r0
    39c4:	11 24       	eor	r1, r1
    39c6:	6e 58       	subi	r22, 0x8E	; 142
    39c8:	79 4d       	sbci	r23, 0xD9	; 217
    39ca:	81 e0       	ldi	r24, 0x01	; 1
    39cc:	90 e0       	ldi	r25, 0x00	; 0
    39ce:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(0,"\xC0");
    39d2:	6f e2       	ldi	r22, 0x2F	; 47
    39d4:	70 e2       	ldi	r23, 0x20	; 32
    39d6:	80 e0       	ldi	r24, 0x00	; 0
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						if (ConsoleMasterSettings[TextStringPtr])
    39de:	e0 91 4b 24 	lds	r30, 0x244B	; 0x80244b <TextStringPtr>
    39e2:	f0 e0       	ldi	r31, 0x00	; 0
    39e4:	e5 5c       	subi	r30, 0xC5	; 197
    39e6:	f6 4d       	sbci	r31, 0xD6	; 214
    39e8:	80 81       	ld	r24, Z
    39ea:	88 23       	and	r24, r24
    39ec:	39 f0       	breq	.+14     	; 0x39fc <__DATA_REGION_LENGTH__+0x19fc>
						{
							SetLCD(1,"Yes             ");
    39ee:	68 e8       	ldi	r22, 0x88	; 136
    39f0:	70 e2       	ldi	r23, 0x20	; 32
    39f2:	81 e0       	ldi	r24, 0x01	; 1
    39f4:	90 e0       	ldi	r25, 0x00	; 0
    39f6:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
    39fa:	7f c3       	rjmp	.+1790   	; 0x40fa <__stack+0xfb>
						}
						else
						{
							SetLCD(1," No             ");
    39fc:	69 e9       	ldi	r22, 0x99	; 153
    39fe:	70 e2       	ldi	r23, 0x20	; 32
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
    3a08:	78 c3       	rjmp	.+1776   	; 0x40fa <__stack+0xfb>
						}
					}
					break;
					case SYSTEMMODE:
					{
						if (TextStringPtr>5)
    3a0a:	86 30       	cpi	r24, 0x06	; 6
    3a0c:	18 f0       	brcs	.+6      	; 0x3a14 <__DATA_REGION_LENGTH__+0x1a14>
							TextStringPtr=5;
    3a0e:	85 e0       	ldi	r24, 0x05	; 5
    3a10:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>

						if (!CardInserted)
    3a14:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <CardInserted>
    3a18:	81 11       	cpse	r24, r1
    3a1a:	07 c0       	rjmp	.+14     	; 0x3a2a <__DATA_REGION_LENGTH__+0x1a2a>
						{
							if (TextStringPtr==4)
    3a1c:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3a20:	84 30       	cpi	r24, 0x04	; 4
    3a22:	19 f4       	brne	.+6      	; 0x3a2a <__DATA_REGION_LENGTH__+0x1a2a>
								TextStringPtr=2;
    3a24:	82 e0       	ldi	r24, 0x02	; 2
    3a26:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>
						}
						SetLCD(0,"\x80");										
    3a2a:	61 e5       	ldi	r22, 0x51	; 81
    3a2c:	70 e2       	ldi	r23, 0x20	; 32
    3a2e:	80 e0       	ldi	r24, 0x00	; 0
    3a30:	90 e0       	ldi	r25, 0x00	; 0
    3a32:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,SystemTextString[TextStringPtr]);
    3a36:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3a3a:	51 e1       	ldi	r21, 0x11	; 17
    3a3c:	65 9f       	mul	r22, r21
    3a3e:	b0 01       	movw	r22, r0
    3a40:	11 24       	eor	r1, r1
    3a42:	62 5b       	subi	r22, 0xB2	; 178
    3a44:	74 4d       	sbci	r23, 0xD4	; 212
    3a46:	81 e0       	ldi	r24, 0x01	; 1
    3a48:	90 e0       	ldi	r25, 0x00	; 0
    3a4a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

						switch (TextStringPtr)
    3a4e:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3a52:	88 23       	and	r24, r24
    3a54:	19 f0       	breq	.+6      	; 0x3a5c <__DATA_REGION_LENGTH__+0x1a5c>
    3a56:	85 30       	cpi	r24, 0x05	; 5
    3a58:	21 f0       	breq	.+8      	; 0x3a62 <__DATA_REGION_LENGTH__+0x1a62>
    3a5a:	10 c0       	rjmp	.+32     	; 0x3a7c <__DATA_REGION_LENGTH__+0x1a7c>
						{
							case 0:
							{
								ShowConfig();
    3a5c:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <ShowConfig>
							}
							break;
    3a60:	4c c3       	rjmp	.+1688   	; 0x40fa <__stack+0xfb>
							case 5:
							{
								SetLCD(0,"\xC0");
    3a62:	6f e2       	ldi	r22, 0x2F	; 47
    3a64:	70 e2       	ldi	r23, 0x20	; 32
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	90 e0       	ldi	r25, 0x00	; 0
    3a6a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(1,IDString);
    3a6e:	60 e0       	ldi	r22, 0x00	; 0
    3a70:	70 e2       	ldi	r23, 0x20	; 32
    3a72:	81 e0       	ldi	r24, 0x01	; 1
    3a74:	90 e0       	ldi	r25, 0x00	; 0
    3a76:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
							}
							break;
    3a7a:	3f c3       	rjmp	.+1662   	; 0x40fa <__stack+0xfb>
							default:
							{
								SetLCD(0,"\xC0");
    3a7c:	6f e2       	ldi	r22, 0x2F	; 47
    3a7e:	70 e2       	ldi	r23, 0x20	; 32
    3a80:	80 e0       	ldi	r24, 0x00	; 0
    3a82:	90 e0       	ldi	r25, 0x00	; 0
    3a84:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(1,"Press Enter/Esc ");
    3a88:	65 ec       	ldi	r22, 0xC5	; 197
    3a8a:	70 e2       	ldi	r23, 0x20	; 32
    3a8c:	81 e0       	ldi	r24, 0x01	; 1
    3a8e:	90 e0       	ldi	r25, 0x00	; 0
    3a90:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
							}
							break;
    3a94:	32 c3       	rjmp	.+1636   	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case DOWN:
		{
			if (EventOn)
    3a96:	01 2b       	or	r16, r17
    3a98:	09 f0       	breq	.+2      	; 0x3a9c <__DATA_REGION_LENGTH__+0x1a9c>
    3a9a:	2f c3       	rjmp	.+1630   	; 0x40fa <__stack+0xfb>
			{
				TextStringPtr++;
    3a9c:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3aa0:	8f 5f       	subi	r24, 0xFF	; 255
    3aa2:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>
				switch (OperatingMode)
    3aa6:	90 91 ed 22 	lds	r25, 0x22ED	; 0x8022ed <OperatingMode>
    3aaa:	91 30       	cpi	r25, 0x01	; 1
    3aac:	f9 f0       	breq	.+62     	; 0x3aec <__DATA_REGION_LENGTH__+0x1aec>
    3aae:	38 f0       	brcs	.+14     	; 0x3abe <__DATA_REGION_LENGTH__+0x1abe>
    3ab0:	92 30       	cpi	r25, 0x02	; 2
    3ab2:	09 f4       	brne	.+2      	; 0x3ab6 <__DATA_REGION_LENGTH__+0x1ab6>
    3ab4:	42 c0       	rjmp	.+132    	; 0x3b3a <__DATA_REGION_LENGTH__+0x1b3a>
    3ab6:	93 30       	cpi	r25, 0x03	; 3
    3ab8:	09 f4       	brne	.+2      	; 0x3abc <__DATA_REGION_LENGTH__+0x1abc>
    3aba:	71 c0       	rjmp	.+226    	; 0x3b9e <__DATA_REGION_LENGTH__+0x1b9e>
    3abc:	1e c3       	rjmp	.+1596   	; 0x40fa <__stack+0xfb>
				{
					case NORMALMODE:
					{
						if (TextStringPtr>3)
    3abe:	84 30       	cpi	r24, 0x04	; 4
    3ac0:	10 f0       	brcs	.+4      	; 0x3ac6 <__DATA_REGION_LENGTH__+0x1ac6>
							TextStringPtr=0;
    3ac2:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>
						SetLCD(0,"\xC0");			
    3ac6:	6f e2       	ldi	r22, 0x2F	; 47
    3ac8:	70 e2       	ldi	r23, 0x20	; 32
    3aca:	80 e0       	ldi	r24, 0x00	; 0
    3acc:	90 e0       	ldi	r25, 0x00	; 0
    3ace:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
		 				SetLCD(1,TextString[TextStringPtr]);
    3ad2:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3ad6:	81 e1       	ldi	r24, 0x11	; 17
    3ad8:	68 9f       	mul	r22, r24
    3ada:	b0 01       	movw	r22, r0
    3adc:	11 24       	eor	r1, r1
    3ade:	60 51       	subi	r22, 0x10	; 16
    3ae0:	7c 4d       	sbci	r23, 0xDC	; 220
    3ae2:	81 e0       	ldi	r24, 0x01	; 1
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					}
					break;
    3aea:	07 c3       	rjmp	.+1550   	; 0x40fa <__stack+0xfb>
					case MODULEMODE:
					{
						if (TextStringPtr>28)
    3aec:	8d 31       	cpi	r24, 0x1D	; 29
    3aee:	10 f0       	brcs	.+4      	; 0x3af4 <__DATA_REGION_LENGTH__+0x1af4>
							TextStringPtr=0;
    3af0:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>

						SetLCD(0,"\x80");							
    3af4:	61 e5       	ldi	r22, 0x51	; 81
    3af6:	70 e2       	ldi	r23, 0x20	; 32
    3af8:	80 e0       	ldi	r24, 0x00	; 0
    3afa:	90 e0       	ldi	r25, 0x00	; 0
    3afc:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,ModuleTextString[TextStringPtr]);
    3b00:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3b04:	91 e1       	ldi	r25, 0x11	; 17
    3b06:	69 9f       	mul	r22, r25
    3b08:	b0 01       	movw	r22, r0
    3b0a:	11 24       	eor	r1, r1
    3b0c:	6f 5a       	subi	r22, 0xAF	; 175
    3b0e:	76 4d       	sbci	r23, 0xD6	; 214
    3b10:	81 e0       	ldi	r24, 0x01	; 1
    3b12:	90 e0       	ldi	r25, 0x00	; 0
    3b14:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(0,"\xC0");							
    3b18:	6f e2       	ldi	r22, 0x2F	; 47
    3b1a:	70 e2       	ldi	r23, 0x20	; 32
    3b1c:	80 e0       	ldi	r24, 0x00	; 0
    3b1e:	90 e0       	ldi	r25, 0x00	; 0
    3b20:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
//						SetLCD(1,"Select Module   ");
						SetLCD(1,"Toggle by SELECT");
    3b24:	67 e7       	ldi	r22, 0x77	; 119
    3b26:	70 e2       	ldi	r23, 0x20	; 32
    3b28:	81 e0       	ldi	r24, 0x01	; 1
    3b2a:	90 e0       	ldi	r25, 0x00	; 0
    3b2c:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						ShowFunction(TextStringPtr);
    3b30:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3b34:	0e 94 29 03 	call	0x652	; 0x652 <ShowFunction>
					}
					break;
    3b38:	e0 c2       	rjmp	.+1472   	; 0x40fa <__stack+0xfb>
					case MASTERMODE:
					{
						if (TextStringPtr>3)
    3b3a:	84 30       	cpi	r24, 0x04	; 4
    3b3c:	10 f0       	brcs	.+4      	; 0x3b42 <__DATA_REGION_LENGTH__+0x1b42>
							TextStringPtr=0;
    3b3e:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>
						SetLCD(0,"\x80");					
    3b42:	61 e5       	ldi	r22, 0x51	; 81
    3b44:	70 e2       	ldi	r23, 0x20	; 32
    3b46:	80 e0       	ldi	r24, 0x00	; 0
    3b48:	90 e0       	ldi	r25, 0x00	; 0
    3b4a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,MasterTextString[TextStringPtr]);
    3b4e:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3b52:	e1 e1       	ldi	r30, 0x11	; 17
    3b54:	6e 9f       	mul	r22, r30
    3b56:	b0 01       	movw	r22, r0
    3b58:	11 24       	eor	r1, r1
    3b5a:	6e 58       	subi	r22, 0x8E	; 142
    3b5c:	79 4d       	sbci	r23, 0xD9	; 217
    3b5e:	81 e0       	ldi	r24, 0x01	; 1
    3b60:	90 e0       	ldi	r25, 0x00	; 0
    3b62:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(0,"\xC0");
    3b66:	6f e2       	ldi	r22, 0x2F	; 47
    3b68:	70 e2       	ldi	r23, 0x20	; 32
    3b6a:	80 e0       	ldi	r24, 0x00	; 0
    3b6c:	90 e0       	ldi	r25, 0x00	; 0
    3b6e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						if (ConsoleMasterSettings[TextStringPtr])
    3b72:	e0 91 4b 24 	lds	r30, 0x244B	; 0x80244b <TextStringPtr>
    3b76:	f0 e0       	ldi	r31, 0x00	; 0
    3b78:	e5 5c       	subi	r30, 0xC5	; 197
    3b7a:	f6 4d       	sbci	r31, 0xD6	; 214
    3b7c:	80 81       	ld	r24, Z
    3b7e:	88 23       	and	r24, r24
    3b80:	39 f0       	breq	.+14     	; 0x3b90 <__DATA_REGION_LENGTH__+0x1b90>
						{
							SetLCD(1,"Yes             ");
    3b82:	68 e8       	ldi	r22, 0x88	; 136
    3b84:	70 e2       	ldi	r23, 0x20	; 32
    3b86:	81 e0       	ldi	r24, 0x01	; 1
    3b88:	90 e0       	ldi	r25, 0x00	; 0
    3b8a:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
    3b8e:	b5 c2       	rjmp	.+1386   	; 0x40fa <__stack+0xfb>
						}
						else
						{
							SetLCD(1," No             ");
    3b90:	69 e9       	ldi	r22, 0x99	; 153
    3b92:	70 e2       	ldi	r23, 0x20	; 32
    3b94:	81 e0       	ldi	r24, 0x01	; 1
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
    3b9c:	ae c2       	rjmp	.+1372   	; 0x40fa <__stack+0xfb>
						}
					}
					break;
					case SYSTEMMODE:
					{
						if (TextStringPtr>5)
    3b9e:	86 30       	cpi	r24, 0x06	; 6
    3ba0:	10 f0       	brcs	.+4      	; 0x3ba6 <__DATA_REGION_LENGTH__+0x1ba6>
							TextStringPtr=0;
    3ba2:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>

						if (!CardInserted)
    3ba6:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <CardInserted>
    3baa:	81 11       	cpse	r24, r1
    3bac:	07 c0       	rjmp	.+14     	; 0x3bbc <__DATA_REGION_LENGTH__+0x1bbc>
						{
							if (TextStringPtr==3)
    3bae:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3bb2:	83 30       	cpi	r24, 0x03	; 3
    3bb4:	19 f4       	brne	.+6      	; 0x3bbc <__DATA_REGION_LENGTH__+0x1bbc>
								TextStringPtr=5;
    3bb6:	85 e0       	ldi	r24, 0x05	; 5
    3bb8:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>
						}
						SetLCD(0,"\x80");										
    3bbc:	61 e5       	ldi	r22, 0x51	; 81
    3bbe:	70 e2       	ldi	r23, 0x20	; 32
    3bc0:	80 e0       	ldi	r24, 0x00	; 0
    3bc2:	90 e0       	ldi	r25, 0x00	; 0
    3bc4:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						SetLCD(1,SystemTextString[TextStringPtr]);
    3bc8:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3bcc:	f1 e1       	ldi	r31, 0x11	; 17
    3bce:	6f 9f       	mul	r22, r31
    3bd0:	b0 01       	movw	r22, r0
    3bd2:	11 24       	eor	r1, r1
    3bd4:	62 5b       	subi	r22, 0xB2	; 178
    3bd6:	74 4d       	sbci	r23, 0xD4	; 212
    3bd8:	81 e0       	ldi	r24, 0x01	; 1
    3bda:	90 e0       	ldi	r25, 0x00	; 0
    3bdc:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
						switch (TextStringPtr)
    3be0:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3be4:	88 23       	and	r24, r24
    3be6:	19 f0       	breq	.+6      	; 0x3bee <__DATA_REGION_LENGTH__+0x1bee>
    3be8:	85 30       	cpi	r24, 0x05	; 5
    3bea:	21 f0       	breq	.+8      	; 0x3bf4 <__DATA_REGION_LENGTH__+0x1bf4>
    3bec:	10 c0       	rjmp	.+32     	; 0x3c0e <__DATA_REGION_LENGTH__+0x1c0e>
						{
							case 0:
							{
								ShowConfig();
    3bee:	0e 94 eb 25 	call	0x4bd6	; 0x4bd6 <ShowConfig>
							}
							break;
    3bf2:	83 c2       	rjmp	.+1286   	; 0x40fa <__stack+0xfb>
							case 5:
							{
								SetLCD(0,"\xC0");
    3bf4:	6f e2       	ldi	r22, 0x2F	; 47
    3bf6:	70 e2       	ldi	r23, 0x20	; 32
    3bf8:	80 e0       	ldi	r24, 0x00	; 0
    3bfa:	90 e0       	ldi	r25, 0x00	; 0
    3bfc:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(1,IDString);
    3c00:	60 e0       	ldi	r22, 0x00	; 0
    3c02:	70 e2       	ldi	r23, 0x20	; 32
    3c04:	81 e0       	ldi	r24, 0x01	; 1
    3c06:	90 e0       	ldi	r25, 0x00	; 0
    3c08:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
							}
							break;
    3c0c:	76 c2       	rjmp	.+1260   	; 0x40fa <__stack+0xfb>
							default:
							{
								SetLCD(0,"\xC0");
    3c0e:	6f e2       	ldi	r22, 0x2F	; 47
    3c10:	70 e2       	ldi	r23, 0x20	; 32
    3c12:	80 e0       	ldi	r24, 0x00	; 0
    3c14:	90 e0       	ldi	r25, 0x00	; 0
    3c16:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
								SetLCD(1,"Press Enter/Esc ");
    3c1a:	65 ec       	ldi	r22, 0xC5	; 197
    3c1c:	70 e2       	ldi	r23, 0x20	; 32
    3c1e:	81 e0       	ldi	r24, 0x01	; 1
    3c20:	90 e0       	ldi	r25, 0x00	; 0
    3c22:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
							}
							break;
    3c26:	69 c2       	rjmp	.+1234   	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case LEFT:
		{
			if (EventOn)
    3c28:	01 2b       	or	r16, r17
    3c2a:	09 f0       	breq	.+2      	; 0x3c2e <__DATA_REGION_LENGTH__+0x1c2e>
    3c2c:	66 c2       	rjmp	.+1228   	; 0x40fa <__stack+0xfb>
			{
				switch (OperatingMode)
    3c2e:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <OperatingMode>
    3c32:	82 30       	cpi	r24, 0x02	; 2
    3c34:	09 f0       	breq	.+2      	; 0x3c38 <__DATA_REGION_LENGTH__+0x1c38>
    3c36:	61 c2       	rjmp	.+1218   	; 0x40fa <__stack+0xfb>
					{
					}
					break;
					case MASTERMODE:
					{
						if (ConsoleMasterSettings[4])
    3c38:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <ConsoleMasterSettings+0x4>
    3c3c:	88 23       	and	r24, r24
    3c3e:	09 f4       	brne	.+2      	; 0x3c42 <__DATA_REGION_LENGTH__+0x1c42>
    3c40:	5c c2       	rjmp	.+1208   	; 0x40fa <__stack+0xfb>
						{
							unsigned char cntByte;

							ConsoleMasterSettings[TextStringPtr] = 0;
    3c42:	e0 91 4b 24 	lds	r30, 0x244B	; 0x80244b <TextStringPtr>
    3c46:	f0 e0       	ldi	r31, 0x00	; 0
    3c48:	e5 5c       	subi	r30, 0xC5	; 197
    3c4a:	f6 4d       	sbci	r31, 0xD6	; 214
    3c4c:	10 82       	st	Z, r1
							SetLCD(0,"\xC0");
    3c4e:	6f e2       	ldi	r22, 0x2F	; 47
    3c50:	70 e2       	ldi	r23, 0x20	; 32
    3c52:	80 e0       	ldi	r24, 0x00	; 0
    3c54:	90 e0       	ldi	r25, 0x00	; 0
    3c56:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
							SetLCD(1," No             ");
    3c5a:	69 e9       	ldi	r22, 0x99	; 153
    3c5c:	70 e2       	ldi	r23, 0x20	; 32
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	90 e0       	ldi	r25, 0x00	; 0
    3c62:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
							switch (TextStringPtr)
    3c66:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3c6a:	82 30       	cpi	r24, 0x02	; 2
    3c6c:	18 f0       	brcs	.+6      	; 0x3c74 <__DATA_REGION_LENGTH__+0x1c74>
    3c6e:	82 30       	cpi	r24, 0x02	; 2
    3c70:	21 f0       	breq	.+8      	; 0x3c7a <__DATA_REGION_LENGTH__+0x1c7a>
    3c72:	33 c0       	rjmp	.+102    	; 0x3cda <__DATA_REGION_LENGTH__+0x1cda>
							{
								case AUTOCUERESET:
								case CUETOCRM:
								{
									CueControl();
    3c74:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
								}
								break;
    3c78:	30 c0       	rjmp	.+96     	; 0x3cda <__DATA_REGION_LENGTH__+0x1cda>
								case AUTOCOM:
								{
									ConsoleFunctionData[16] &= ANNOUNCER_COMM_FUNCTION_LED^0xFF;
    3c7a:	ed e4       	ldi	r30, 0x4D	; 77
    3c7c:	f4 e2       	ldi	r31, 0x24	; 36
    3c7e:	80 89       	ldd	r24, Z+16	; 0x10
    3c80:	87 7f       	andi	r24, 0xF7	; 247
    3c82:	80 8b       	std	Z+16, r24	; 0x10
									if ((ModuleData[Module][MIC_RING]&0x80) && (ConsoleModuleSettings[Module][ANNMIC]) && (ConsoleFunctionData[Module]&MUTE_FUNCTION) && (ConsoleMasterSettings[AUTOCOM]))
    3c84:	4e 2d       	mov	r20, r14
    3c86:	50 e0       	ldi	r21, 0x00	; 0
    3c88:	fa 01       	movw	r30, r20
    3c8a:	ee 0f       	add	r30, r30
    3c8c:	ff 1f       	adc	r31, r31
    3c8e:	ee 0f       	add	r30, r30
    3c90:	ff 1f       	adc	r31, r31
    3c92:	ee 0f       	add	r30, r30
    3c94:	ff 1f       	adc	r31, r31
    3c96:	e8 54       	subi	r30, 0x48	; 72
    3c98:	f7 4d       	sbci	r31, 0xD7	; 215
    3c9a:	97 81       	ldd	r25, Z+7	; 0x07
    3c9c:	99 23       	and	r25, r25
    3c9e:	c4 f4       	brge	.+48     	; 0x3cd0 <__DATA_REGION_LENGTH__+0x1cd0>
    3ca0:	9d e1       	ldi	r25, 0x1D	; 29
    3ca2:	94 9f       	mul	r25, r20
    3ca4:	f0 01       	movw	r30, r0
    3ca6:	95 9f       	mul	r25, r21
    3ca8:	f0 0d       	add	r31, r0
    3caa:	11 24       	eor	r1, r1
    3cac:	e1 56       	subi	r30, 0x61	; 97
    3cae:	f0 4d       	sbci	r31, 0xD0	; 208
    3cb0:	96 85       	ldd	r25, Z+14	; 0x0e
    3cb2:	99 23       	and	r25, r25
    3cb4:	69 f0       	breq	.+26     	; 0x3cd0 <__DATA_REGION_LENGTH__+0x1cd0>
    3cb6:	fa 01       	movw	r30, r20
    3cb8:	e3 5b       	subi	r30, 0xB3	; 179
    3cba:	fb 4d       	sbci	r31, 0xDB	; 219
    3cbc:	90 81       	ld	r25, Z
    3cbe:	94 ff       	sbrs	r25, 4
    3cc0:	07 c0       	rjmp	.+14     	; 0x3cd0 <__DATA_REGION_LENGTH__+0x1cd0>
    3cc2:	90 91 3d 29 	lds	r25, 0x293D	; 0x80293d <ConsoleMasterSettings+0x2>
    3cc6:	99 23       	and	r25, r25
    3cc8:	19 f0       	breq	.+6      	; 0x3cd0 <__DATA_REGION_LENGTH__+0x1cd0>
									{
										ConsoleFunctionData[16] |= ANNOUNCER_COMM_FUNCTION_LED;
    3cca:	88 60       	ori	r24, 0x08	; 8
    3ccc:	80 93 5d 24 	sts	0x245D, r24	; 0x80245d <ConsoleFunctionData+0x10>
									}
   								CheckTBMic();
    3cd0:	0e 94 53 03 	call	0x6a6	; 0x6a6 <CheckTBMic>
									SendSerialData = 1;
    3cd4:	81 e0       	ldi	r24, 0x01	; 1
    3cd6:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
								}
								break;
							}
	
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3cda:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3cde:	e1 e0       	ldi	r30, 0x01	; 1
    3ce0:	ea 0f       	add	r30, r26
    3ce2:	b0 e0       	ldi	r27, 0x00	; 0
    3ce4:	ae 58       	subi	r26, 0x8E	; 142
    3ce6:	ba 4d       	sbci	r27, 0xDA	; 218
    3ce8:	84 e9       	ldi	r24, 0x94	; 148
    3cea:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3cec:	81 e0       	ldi	r24, 0x01	; 1
    3cee:	8e 0f       	add	r24, r30
    3cf0:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    3cf4:	f0 e0       	ldi	r31, 0x00	; 0
    3cf6:	ee 58       	subi	r30, 0x8E	; 142
    3cf8:	fa 4d       	sbci	r31, 0xDA	; 218
    3cfa:	10 82       	st	Z, r1
							for (cntByte=0; cntByte<5; cntByte++)
    3cfc:	80 e0       	ldi	r24, 0x00	; 0
    3cfe:	11 c0       	rjmp	.+34     	; 0x3d22 <__DATA_REGION_LENGTH__+0x1d22>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3d00:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3d04:	91 e0       	ldi	r25, 0x01	; 1
    3d06:	9e 0f       	add	r25, r30
    3d08:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    3d0c:	f0 e0       	ldi	r31, 0x00	; 0
    3d0e:	a8 2f       	mov	r26, r24
    3d10:	b0 e0       	ldi	r27, 0x00	; 0
    3d12:	a5 5c       	subi	r26, 0xC5	; 197
    3d14:	b6 4d       	sbci	r27, 0xD6	; 214
    3d16:	9c 91       	ld	r25, X
    3d18:	ee 58       	subi	r30, 0x8E	; 142
    3d1a:	fa 4d       	sbci	r31, 0xDA	; 218
    3d1c:	9f 77       	andi	r25, 0x7F	; 127
    3d1e:	90 83       	st	Z, r25
								break;
							}
	
							SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
							for (cntByte=0; cntByte<5; cntByte++)
    3d20:	8f 5f       	subi	r24, 0xFF	; 255
    3d22:	85 30       	cpi	r24, 0x05	; 5
    3d24:	68 f3       	brcs	.-38     	; 0x3d00 <__DATA_REGION_LENGTH__+0x1d00>
    3d26:	e9 c1       	rjmp	.+978    	; 0x40fa <__stack+0xfb>
		{
			unsigned char cntModule;

			for (cntModule=0; cntModule<NROFMODULES; cntModule++)
			{
				ConsoleFunctionData[cntModule] &= CUE_LED^0xFF;
    3d28:	81 2f       	mov	r24, r17
    3d2a:	90 e0       	ldi	r25, 0x00	; 0
    3d2c:	fc 01       	movw	r30, r24
    3d2e:	e3 5b       	subi	r30, 0xB3	; 179
    3d30:	fb 4d       	sbci	r31, 0xDB	; 219
    3d32:	20 81       	ld	r18, Z
				ConsoleFunctionData[cntModule] &= CUE_FUNCTION^0xFF;
    3d34:	23 7f       	andi	r18, 0xF3	; 243
    3d36:	20 83       	st	Z, r18

				if (ModuleType[cntModule] == TELCO)
    3d38:	fc 01       	movw	r30, r24
    3d3a:	e6 5c       	subi	r30, 0xC6	; 198
    3d3c:	fb 4d       	sbci	r31, 0xDB	; 219
    3d3e:	80 81       	ld	r24, Z
    3d40:	82 30       	cpi	r24, 0x02	; 2
    3d42:	e1 f4       	brne	.+56     	; 0x3d7c <__DATA_REGION_LENGTH__+0x1d7c>
				{
					char TelcoNr = GetTelcoNrFromModuleNr(cntModule);
    3d44:	81 2f       	mov	r24, r17
    3d46:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
					if ((TelcoNr>=0) && (TelcoNr<4))
    3d4a:	84 30       	cpi	r24, 0x04	; 4
    3d4c:	b8 f4       	brcc	.+46     	; 0x3d7c <__DATA_REGION_LENGTH__+0x1d7c>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_CUE;
    3d4e:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3d52:	a1 e0       	ldi	r26, 0x01	; 1
    3d54:	ae 0f       	add	r26, r30
    3d56:	f0 e0       	ldi	r31, 0x00	; 0
    3d58:	ee 58       	subi	r30, 0x8E	; 142
    3d5a:	fa 4d       	sbci	r31, 0xDA	; 218
    3d5c:	92 ec       	ldi	r25, 0xC2	; 194
    3d5e:	90 83       	st	Z, r25
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    3d60:	e1 e0       	ldi	r30, 0x01	; 1
    3d62:	ea 0f       	add	r30, r26
    3d64:	b0 e0       	ldi	r27, 0x00	; 0
    3d66:	ae 58       	subi	r26, 0x8E	; 142
    3d68:	ba 4d       	sbci	r27, 0xDA	; 218
    3d6a:	8c 93       	st	X, r24
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3d6c:	81 e0       	ldi	r24, 0x01	; 1
    3d6e:	8e 0f       	add	r24, r30
    3d70:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    3d74:	f0 e0       	ldi	r31, 0x00	; 0
    3d76:	ee 58       	subi	r30, 0x8E	; 142
    3d78:	fa 4d       	sbci	r31, 0xDA	; 218
    3d7a:	10 82       	st	Z, r1
		break;
		case CUERESET:
		{
			unsigned char cntModule;

			for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3d7c:	1f 5f       	subi	r17, 0xFF	; 255
    3d7e:	01 c0       	rjmp	.+2      	; 0x3d82 <__DATA_REGION_LENGTH__+0x1d82>
	if ((Event&0x287) == EXT_MUTE)
	{
		EventType = MUTE;
	}

	switch (EventType)
    3d80:	10 e0       	ldi	r17, 0x00	; 0
		break;
		case CUERESET:
		{
			unsigned char cntModule;

			for (cntModule=0; cntModule<NROFMODULES; cntModule++)
    3d82:	10 31       	cpi	r17, 0x10	; 16
    3d84:	88 f2       	brcs	.-94     	; 0x3d28 <__DATA_REGION_LENGTH__+0x1d28>
						SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
						SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
					}
				}
			}
			CueControl();
    3d86:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
			DJControl();
    3d8a:	0e 94 05 04 	call	0x80a	; 0x80a <DJControl>
			StudioMicControl();
    3d8e:	0e 94 59 03 	call	0x6b2	; 0x6b2 <StudioMicControl>
			CheckStartCondition(cntModule);
    3d92:	81 2f       	mov	r24, r17
    3d94:	0e 94 ba 06 	call	0xd74	; 0xd74 <CheckStartCondition>

			SendSerialData = 1;
    3d98:	81 e0       	ldi	r24, 0x01	; 1
    3d9a:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
 		}
		break;
    3d9e:	ad c1       	rjmp	.+858    	; 0x40fa <__stack+0xfb>
		case SW_CC:
		{
			if (EventOn)
    3da0:	01 2b       	or	r16, r17
    3da2:	09 f0       	breq	.+2      	; 0x3da6 <__DATA_REGION_LENGTH__+0x1da6>
    3da4:	8d c0       	rjmp	.+282    	; 0x3ec0 <__DATA_REGION_LENGTH__+0x1ec0>
			{
				ConsoleFunctionData[16] &= NOT_POWER_ON_CC^0xFF;
    3da6:	ed e4       	ldi	r30, 0x4D	; 77
    3da8:	f4 e2       	ldi	r31, 0x24	; 36
    3daa:	80 89       	ldd	r24, Z+16	; 0x10
    3dac:	8f 7b       	andi	r24, 0xBF	; 191
    3dae:	80 8b       	std	Z+16, r24	; 0x10
				SetConsoleData();
    3db0:	0e 94 a2 07 	call	0xf44	; 0xf44 <SetConsoleData>
				Delay(5);
    3db4:	85 e0       	ldi	r24, 0x05	; 5
    3db6:	90 e0       	ldi	r25, 0x00	; 0
    3db8:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>
				// CS_CC = 0xFF;   // willem
				Delay(5);
    3dbc:	85 e0       	ldi	r24, 0x05	; 5
    3dbe:	90 e0       	ldi	r25, 0x00	; 0
    3dc0:	0e 94 11 0e 	call	0x1c22	; 0x1c22 <Delay>
				CardInserted = 1;
    3dc4:	81 e0       	ldi	r24, 0x01	; 1
    3dc6:	80 93 37 24 	sts	0x2437, r24	; 0x802437 <CardInserted>
				SetAddress(I2CAddressSmartCard, 0x00);
    3dca:	60 e0       	ldi	r22, 0x00	; 0
    3dcc:	70 e0       	ldi	r23, 0x00	; 0
    3dce:	80 e5       	ldi	r24, 0x50	; 80
    3dd0:	0e 94 a1 20 	call	0x4142	; 0x4142 <SetAddress>
				if (CardInserted)
    3dd4:	80 91 37 24 	lds	r24, 0x2437	; 0x802437 <CardInserted>
    3dd8:	88 23       	and	r24, r24
    3dda:	09 f4       	brne	.+2      	; 0x3dde <__DATA_REGION_LENGTH__+0x1dde>
    3ddc:	6d c0       	rjmp	.+218    	; 0x3eb8 <__DATA_REGION_LENGTH__+0x1eb8>
				{
					unsigned int Address;
					unsigned char cntByte;

					OperatingMode = SYSTEMMODE;
    3dde:	83 e0       	ldi	r24, 0x03	; 3
    3de0:	80 93 ed 22 	sts	0x22ED, r24	; 0x8022ed <OperatingMode>
					TextStringPtr = 3;
    3de4:	80 93 4b 24 	sts	0x244B, r24	; 0x80244b <TextStringPtr>
					SetLCD(0,"\x80");
    3de8:	61 e5       	ldi	r22, 0x51	; 81
    3dea:	70 e2       	ldi	r23, 0x20	; 32
    3dec:	80 e0       	ldi	r24, 0x00	; 0
    3dee:	90 e0       	ldi	r25, 0x00	; 0
    3df0:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1,SystemTextString[TextStringPtr]);
    3df4:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3df8:	31 e1       	ldi	r19, 0x11	; 17
    3dfa:	63 9f       	mul	r22, r19
    3dfc:	b0 01       	movw	r22, r0
    3dfe:	11 24       	eor	r1, r1
    3e00:	62 5b       	subi	r22, 0xB2	; 178
    3e02:	74 4d       	sbci	r23, 0xD4	; 212
    3e04:	81 e0       	ldi	r24, 0x01	; 1
    3e06:	90 e0       	ldi	r25, 0x00	; 0
    3e08:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(0,"\xC0");
    3e0c:	6f e2       	ldi	r22, 0x2F	; 47
    3e0e:	70 e2       	ldi	r23, 0x20	; 32
    3e10:	80 e0       	ldi	r24, 0x00	; 0
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1,"Press Enter/Esc ");
    3e18:	65 ec       	ldi	r22, 0xC5	; 197
    3e1a:	70 e2       	ldi	r23, 0x20	; 32
    3e1c:	81 e0       	ldi	r24, 0x01	; 1
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

					SerialBufferOut[SerialBufferOutPtrTop++] = CARD_INSERTED;
    3e24:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3e28:	a1 e0       	ldi	r26, 0x01	; 1
    3e2a:	ae 0f       	add	r26, r30
    3e2c:	f0 e0       	ldi	r31, 0x00	; 0
    3e2e:	ee 58       	subi	r30, 0x8E	; 142
    3e30:	fa 4d       	sbci	r31, 0xDA	; 218
    3e32:	88 e9       	ldi	r24, 0x98	; 152
    3e34:	80 83       	st	Z, r24
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3e36:	e1 e0       	ldi	r30, 0x01	; 1
    3e38:	ea 0f       	add	r30, r26
    3e3a:	b0 e0       	ldi	r27, 0x00	; 0
    3e3c:	ae 58       	subi	r26, 0x8E	; 142
    3e3e:	ba 4d       	sbci	r27, 0xDA	; 218
    3e40:	1c 92       	st	X, r1
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    3e42:	81 e0       	ldi	r24, 0x01	; 1
    3e44:	8e 0f       	add	r24, r30
    3e46:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    3e4a:	f0 e0       	ldi	r31, 0x00	; 0
    3e4c:	ee 58       	subi	r30, 0x8E	; 142
    3e4e:	fa 4d       	sbci	r31, 0xDA	; 218
    3e50:	81 e0       	ldi	r24, 0x01	; 1
    3e52:	80 83       	st	Z, r24
				
					TempEnableSetup = ConsoleMasterSettings[4];
    3e54:	80 91 3f 29 	lds	r24, 0x293F	; 0x80293f <ConsoleMasterSettings+0x4>
    3e58:	80 93 b7 28 	sts	0x28B7, r24	; 0x8028b7 <TempEnableSetup>
					Address = NROFMODULES + (NROFMODULES*29) + 4;
					ReadData(I2CAddressSmartCard, Address, &(ConsoleMasterSettings[4]), 1);
    3e5c:	21 e0       	ldi	r18, 0x01	; 1
    3e5e:	4f e3       	ldi	r20, 0x3F	; 63
    3e60:	59 e2       	ldi	r21, 0x29	; 41
    3e62:	64 ee       	ldi	r22, 0xE4	; 228
    3e64:	71 e0       	ldi	r23, 0x01	; 1
    3e66:	80 e5       	ldi	r24, 0x50	; 80
    3e68:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>

					SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3e6c:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3e70:	e1 e0       	ldi	r30, 0x01	; 1
    3e72:	ea 0f       	add	r30, r26
    3e74:	b0 e0       	ldi	r27, 0x00	; 0
    3e76:	ae 58       	subi	r26, 0x8E	; 142
    3e78:	ba 4d       	sbci	r27, 0xDA	; 218
    3e7a:	84 e9       	ldi	r24, 0x94	; 148
    3e7c:	8c 93       	st	X, r24
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3e7e:	81 e0       	ldi	r24, 0x01	; 1
    3e80:	8e 0f       	add	r24, r30
    3e82:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    3e86:	f0 e0       	ldi	r31, 0x00	; 0
    3e88:	ee 58       	subi	r30, 0x8E	; 142
    3e8a:	fa 4d       	sbci	r31, 0xDA	; 218
    3e8c:	10 82       	st	Z, r1
					for (cntByte=0; cntByte<5; cntByte++)
    3e8e:	80 e0       	ldi	r24, 0x00	; 0
    3e90:	11 c0       	rjmp	.+34     	; 0x3eb4 <__DATA_REGION_LENGTH__+0x1eb4>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3e92:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3e96:	91 e0       	ldi	r25, 0x01	; 1
    3e98:	9e 0f       	add	r25, r30
    3e9a:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    3e9e:	f0 e0       	ldi	r31, 0x00	; 0
    3ea0:	a8 2f       	mov	r26, r24
    3ea2:	b0 e0       	ldi	r27, 0x00	; 0
    3ea4:	a5 5c       	subi	r26, 0xC5	; 197
    3ea6:	b6 4d       	sbci	r27, 0xD6	; 214
    3ea8:	9c 91       	ld	r25, X
    3eaa:	ee 58       	subi	r30, 0x8E	; 142
    3eac:	fa 4d       	sbci	r31, 0xDA	; 218
    3eae:	9f 77       	andi	r25, 0x7F	; 127
    3eb0:	90 83       	st	Z, r25
					Address = NROFMODULES + (NROFMODULES*29) + 4;
					ReadData(I2CAddressSmartCard, Address, &(ConsoleMasterSettings[4]), 1);

					SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
					SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
					for (cntByte=0; cntByte<5; cntByte++)
    3eb2:	8f 5f       	subi	r24, 0xFF	; 255
    3eb4:	85 30       	cpi	r24, 0x05	; 5
    3eb6:	68 f3       	brcs	.-38     	; 0x3e92 <__DATA_REGION_LENGTH__+0x1e92>
					{
						SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
					}
				}
				SendSerialData = 1;
    3eb8:	81 e0       	ldi	r24, 0x01	; 1
    3eba:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    3ebe:	1d c1       	rjmp	.+570    	; 0x40fa <__stack+0xfb>
			}
			else
			{
				unsigned char cntByte;

				CardInserted = 0;
    3ec0:	10 92 37 24 	sts	0x2437, r1	; 0x802437 <CardInserted>

				SerialBufferOut[SerialBufferOutPtrTop++] = CARD_INSERTED;
    3ec4:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3ec8:	a1 e0       	ldi	r26, 0x01	; 1
    3eca:	ae 0f       	add	r26, r30
    3ecc:	f0 e0       	ldi	r31, 0x00	; 0
    3ece:	ee 58       	subi	r30, 0x8E	; 142
    3ed0:	fa 4d       	sbci	r31, 0xDA	; 218
    3ed2:	88 e9       	ldi	r24, 0x98	; 152
    3ed4:	80 83       	st	Z, r24
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3ed6:	e1 e0       	ldi	r30, 0x01	; 1
    3ed8:	ea 0f       	add	r30, r26
    3eda:	b0 e0       	ldi	r27, 0x00	; 0
    3edc:	ae 58       	subi	r26, 0x8E	; 142
    3ede:	ba 4d       	sbci	r27, 0xDA	; 218
    3ee0:	1c 92       	st	X, r1
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3ee2:	a1 e0       	ldi	r26, 0x01	; 1
    3ee4:	ae 0f       	add	r26, r30
    3ee6:	f0 e0       	ldi	r31, 0x00	; 0
    3ee8:	ee 58       	subi	r30, 0x8E	; 142
    3eea:	fa 4d       	sbci	r31, 0xDA	; 218
    3eec:	10 82       	st	Z, r1

				ConsoleMasterSettings[4] = TempEnableSetup; 
    3eee:	80 91 b7 28 	lds	r24, 0x28B7	; 0x8028b7 <TempEnableSetup>
    3ef2:	80 93 3f 29 	sts	0x293F, r24	; 0x80293f <ConsoleMasterSettings+0x4>

				SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    3ef6:	e1 e0       	ldi	r30, 0x01	; 1
    3ef8:	ea 0f       	add	r30, r26
    3efa:	b0 e0       	ldi	r27, 0x00	; 0
    3efc:	ae 58       	subi	r26, 0x8E	; 142
    3efe:	ba 4d       	sbci	r27, 0xDA	; 218
    3f00:	84 e9       	ldi	r24, 0x94	; 148
    3f02:	8c 93       	st	X, r24
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    3f04:	81 e0       	ldi	r24, 0x01	; 1
    3f06:	8e 0f       	add	r24, r30
    3f08:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    3f0c:	f0 e0       	ldi	r31, 0x00	; 0
    3f0e:	ee 58       	subi	r30, 0x8E	; 142
    3f10:	fa 4d       	sbci	r31, 0xDA	; 218
    3f12:	10 82       	st	Z, r1
				for (cntByte=0; cntByte<5; cntByte++)
    3f14:	80 e0       	ldi	r24, 0x00	; 0
    3f16:	11 c0       	rjmp	.+34     	; 0x3f3a <__DATA_REGION_LENGTH__+0x1f3a>
				{
					SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    3f18:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    3f1c:	91 e0       	ldi	r25, 0x01	; 1
    3f1e:	9e 0f       	add	r25, r30
    3f20:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    3f24:	f0 e0       	ldi	r31, 0x00	; 0
    3f26:	a8 2f       	mov	r26, r24
    3f28:	b0 e0       	ldi	r27, 0x00	; 0
    3f2a:	a5 5c       	subi	r26, 0xC5	; 197
    3f2c:	b6 4d       	sbci	r27, 0xD6	; 214
    3f2e:	9c 91       	ld	r25, X
    3f30:	ee 58       	subi	r30, 0x8E	; 142
    3f32:	fa 4d       	sbci	r31, 0xDA	; 218
    3f34:	9f 77       	andi	r25, 0x7F	; 127
    3f36:	90 83       	st	Z, r25

				ConsoleMasterSettings[4] = TempEnableSetup; 

				SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
				SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
				for (cntByte=0; cntByte<5; cntByte++)
    3f38:	8f 5f       	subi	r24, 0xFF	; 255
    3f3a:	85 30       	cpi	r24, 0x05	; 5
    3f3c:	68 f3       	brcs	.-38     	; 0x3f18 <__DATA_REGION_LENGTH__+0x1f18>
				{
					SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
				}

				ConsoleFunctionData[16] |= NOT_POWER_ON_CC;
    3f3e:	ed e4       	ldi	r30, 0x4D	; 77
    3f40:	f4 e2       	ldi	r31, 0x24	; 36
    3f42:	80 89       	ldd	r24, Z+16	; 0x10
    3f44:	80 64       	ori	r24, 0x40	; 64
    3f46:	80 8b       	std	Z+16, r24	; 0x10
				SendSerialData = 1;
    3f48:	81 e0       	ldi	r24, 0x01	; 1
    3f4a:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
				// CS_CC = 0x00;   willem
				if ((OperatingMode == SYSTEMMODE) && ((TextStringPtr==3) || ((TextStringPtr==4))))
    3f4e:	80 91 ed 22 	lds	r24, 0x22ED	; 0x8022ed <OperatingMode>
    3f52:	83 30       	cpi	r24, 0x03	; 3
    3f54:	09 f0       	breq	.+2      	; 0x3f58 <__DATA_REGION_LENGTH__+0x1f58>
    3f56:	d1 c0       	rjmp	.+418    	; 0x40fa <__stack+0xfb>
    3f58:	80 91 4b 24 	lds	r24, 0x244B	; 0x80244b <TextStringPtr>
    3f5c:	83 50       	subi	r24, 0x03	; 3
    3f5e:	82 30       	cpi	r24, 0x02	; 2
    3f60:	08 f0       	brcs	.+2      	; 0x3f64 <__DATA_REGION_LENGTH__+0x1f64>
    3f62:	cb c0       	rjmp	.+406    	; 0x40fa <__stack+0xfb>
				{
					char TextBuffer[9];

					OperatingMode = NORMALMODE;
    3f64:	10 92 ed 22 	sts	0x22ED, r1	; 0x8022ed <OperatingMode>
					TextStringPtr = 0;
    3f68:	10 92 4b 24 	sts	0x244B, r1	; 0x80244b <TextStringPtr>

					SetLCD(0,"\x80");
    3f6c:	61 e5       	ldi	r22, 0x51	; 81
    3f6e:	70 e2       	ldi	r23, 0x20	; 32
    3f70:	80 e0       	ldi	r24, 0x00	; 0
    3f72:	90 e0       	ldi	r25, 0x00	; 0
    3f74:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1,"                ");
    3f78:	64 e6       	ldi	r22, 0x64	; 100
    3f7a:	70 e2       	ldi	r23, 0x20	; 32
    3f7c:	81 e0       	ldi	r24, 0x01	; 1
    3f7e:	90 e0       	ldi	r25, 0x00	; 0
    3f80:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(0,"\xC0");
    3f84:	6f e2       	ldi	r22, 0x2F	; 47
    3f86:	70 e2       	ldi	r23, 0x20	; 32
    3f88:	80 e0       	ldi	r24, 0x00	; 0
    3f8a:	90 e0       	ldi	r25, 0x00	; 0
    3f8c:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1, TextString[TextStringPtr]);
    3f90:	60 91 4b 24 	lds	r22, 0x244B	; 0x80244b <TextStringPtr>
    3f94:	51 e1       	ldi	r21, 0x11	; 17
    3f96:	65 9f       	mul	r22, r21
    3f98:	b0 01       	movw	r22, r0
    3f9a:	11 24       	eor	r1, r1
    3f9c:	60 51       	subi	r22, 0x10	; 16
    3f9e:	7c 4d       	sbci	r23, 0xDC	; 220
    3fa0:	81 e0       	ldi	r24, 0x01	; 1
    3fa2:	90 e0       	ldi	r25, 0x00	; 0
    3fa4:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

					TextBuffer[0] = 0x30+(TimeAndDate.Hours/10);
    3fa8:	ea e9       	ldi	r30, 0x9A	; 154
    3faa:	f1 e3       	ldi	r31, 0x31	; 49
    3fac:	23 81       	ldd	r18, Z+3	; 0x03
    3fae:	8d ec       	ldi	r24, 0xCD	; 205
    3fb0:	28 9f       	mul	r18, r24
    3fb2:	91 2d       	mov	r25, r1
    3fb4:	11 24       	eor	r1, r1
    3fb6:	96 95       	lsr	r25
    3fb8:	96 95       	lsr	r25
    3fba:	96 95       	lsr	r25
    3fbc:	30 e3       	ldi	r19, 0x30	; 48
    3fbe:	39 0f       	add	r19, r25
    3fc0:	39 83       	std	Y+1, r19	; 0x01
					TextBuffer[1] = 0x30+(TimeAndDate.Hours%10);
    3fc2:	99 0f       	add	r25, r25
    3fc4:	39 2f       	mov	r19, r25
    3fc6:	33 0f       	add	r19, r19
    3fc8:	33 0f       	add	r19, r19
    3fca:	93 0f       	add	r25, r19
    3fcc:	29 1b       	sub	r18, r25
    3fce:	92 2f       	mov	r25, r18
    3fd0:	90 5d       	subi	r25, 0xD0	; 208
    3fd2:	9a 83       	std	Y+2, r25	; 0x02
					TextBuffer[2] = ':';
    3fd4:	4a e3       	ldi	r20, 0x3A	; 58
    3fd6:	4b 83       	std	Y+3, r20	; 0x03
				  TextBuffer[3] = 0x30+(TimeAndDate.Minutes/10);
    3fd8:	22 81       	ldd	r18, Z+2	; 0x02
    3fda:	28 9f       	mul	r18, r24
    3fdc:	91 2d       	mov	r25, r1
    3fde:	11 24       	eor	r1, r1
    3fe0:	96 95       	lsr	r25
    3fe2:	96 95       	lsr	r25
    3fe4:	96 95       	lsr	r25
    3fe6:	30 e3       	ldi	r19, 0x30	; 48
    3fe8:	39 0f       	add	r19, r25
    3fea:	3c 83       	std	Y+4, r19	; 0x04
					TextBuffer[4] = 0x30+(TimeAndDate.Minutes%10);
    3fec:	99 0f       	add	r25, r25
    3fee:	39 2f       	mov	r19, r25
    3ff0:	33 0f       	add	r19, r19
    3ff2:	33 0f       	add	r19, r19
    3ff4:	93 0f       	add	r25, r19
    3ff6:	29 1b       	sub	r18, r25
    3ff8:	92 2f       	mov	r25, r18
    3ffa:	90 5d       	subi	r25, 0xD0	; 208
    3ffc:	9d 83       	std	Y+5, r25	; 0x05
					TextBuffer[5] = ':';
    3ffe:	4e 83       	std	Y+6, r20	; 0x06
					TextBuffer[6] = 0x30+(TimeAndDate.Seconds/10);
    4000:	91 81       	ldd	r25, Z+1	; 0x01
    4002:	98 9f       	mul	r25, r24
    4004:	81 2d       	mov	r24, r1
    4006:	11 24       	eor	r1, r1
    4008:	86 95       	lsr	r24
    400a:	86 95       	lsr	r24
    400c:	86 95       	lsr	r24
    400e:	20 e3       	ldi	r18, 0x30	; 48
    4010:	28 0f       	add	r18, r24
    4012:	2f 83       	std	Y+7, r18	; 0x07
					TextBuffer[7] = 0x30+(TimeAndDate.Seconds%10);
    4014:	88 0f       	add	r24, r24
    4016:	28 2f       	mov	r18, r24
    4018:	22 0f       	add	r18, r18
    401a:	22 0f       	add	r18, r18
    401c:	82 0f       	add	r24, r18
    401e:	98 1b       	sub	r25, r24
    4020:	89 2f       	mov	r24, r25
    4022:	80 5d       	subi	r24, 0xD0	; 208
    4024:	88 87       	std	Y+8, r24	; 0x08
/*					TextBuffer[8] = ':';
					TextBuffer[9] = 0x30+(TimeAndDate.Frames/10);
					TextBuffer[10] = 0x30+(TimeAndDate.Frames%10);
					TextBuffer[11] = 0;*/
					TextBuffer[8] = 0;
    4026:	19 86       	std	Y+9, r1	; 0x09
					SetLCD(0,"\x84");
    4028:	65 e7       	ldi	r22, 0x75	; 117
    402a:	70 e2       	ldi	r23, 0x20	; 32
    402c:	80 e0       	ldi	r24, 0x00	; 0
    402e:	90 e0       	ldi	r25, 0x00	; 0
    4030:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
					SetLCD(1,TextBuffer);
    4034:	be 01       	movw	r22, r28
    4036:	6f 5f       	subi	r22, 0xFF	; 255
    4038:	7f 4f       	sbci	r23, 0xFF	; 255
    403a:	81 e0       	ldi	r24, 0x01	; 1
    403c:	90 e0       	ldi	r25, 0x00	; 0
    403e:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
    4042:	5b c0       	rjmp	.+182    	; 0x40fa <__stack+0xfb>
			}
		}
		break;
		case MUTE:
		{
			char TelcoNr = GetTelcoNrFromModuleNr(Module);
    4044:	8e 2d       	mov	r24, r14
    4046:	0e 94 4c 03 	call	0x698	; 0x698 <GetTelcoNrFromModuleNr>
			
			if (ConsoleFunctionData[Module]&ON_LED)
    404a:	4e 2d       	mov	r20, r14
    404c:	50 e0       	ldi	r21, 0x00	; 0
    404e:	fa 01       	movw	r30, r20
    4050:	e3 5b       	subi	r30, 0xB3	; 179
    4052:	fb 4d       	sbci	r31, 0xDB	; 219
    4054:	90 81       	ld	r25, Z
    4056:	95 ff       	sbrs	r25, 5
    4058:	50 c0       	rjmp	.+160    	; 0x40fa <__stack+0xfb>
			{
				if (EventOn)
    405a:	01 2b       	or	r16, r17
    405c:	39 f5       	brne	.+78     	; 0x40ac <__stack+0xad>
				{
						ConsoleFunctionData[Module] |= MUTE_FUNCTION;
    405e:	fa 01       	movw	r30, r20
    4060:	e3 5b       	subi	r30, 0xB3	; 179
    4062:	fb 4d       	sbci	r31, 0xDB	; 219
    4064:	90 61       	ori	r25, 0x10	; 16
    4066:	90 83       	st	Z, r25
						cntMuteFunction[Module] = 0;
    4068:	fa 01       	movw	r30, r20
    406a:	e2 5c       	subi	r30, 0xC2	; 194
    406c:	f4 4d       	sbci	r31, 0xD4	; 212
    406e:	10 82       	st	Z, r1
	
						if ((TelcoNr>=0) && (TelcoNr<4))
    4070:	84 30       	cpi	r24, 0x04	; 4
    4072:	c0 f4       	brcc	.+48     	; 0x40a4 <__stack+0xa5>
						{
							SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    4074:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4078:	a1 e0       	ldi	r26, 0x01	; 1
    407a:	ae 0f       	add	r26, r30
    407c:	f0 e0       	ldi	r31, 0x00	; 0
    407e:	ee 58       	subi	r30, 0x8E	; 142
    4080:	fa 4d       	sbci	r31, 0xDA	; 218
    4082:	93 ec       	ldi	r25, 0xC3	; 195
    4084:	90 83       	st	Z, r25
							SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    4086:	e1 e0       	ldi	r30, 0x01	; 1
    4088:	ea 0f       	add	r30, r26
    408a:	b0 e0       	ldi	r27, 0x00	; 0
    408c:	ae 58       	subi	r26, 0x8E	; 142
    408e:	ba 4d       	sbci	r27, 0xDA	; 218
    4090:	8c 93       	st	X, r24
							SerialBufferOut[SerialBufferOutPtrTop++] = 0x01;
    4092:	81 e0       	ldi	r24, 0x01	; 1
    4094:	8e 0f       	add	r24, r30
    4096:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    409a:	f0 e0       	ldi	r31, 0x00	; 0
    409c:	ee 58       	subi	r30, 0x8E	; 142
    409e:	fa 4d       	sbci	r31, 0xDA	; 218
    40a0:	81 e0       	ldi	r24, 0x01	; 1
    40a2:	80 83       	st	Z, r24
						}
	
						SendSerialData = 1;
    40a4:	81 e0       	ldi	r24, 0x01	; 1
    40a6:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
    40aa:	27 c0       	rjmp	.+78     	; 0x40fa <__stack+0xfb>
				}
				else
				{
					if (cntMuteFunction[Module] == 0)
    40ac:	fa 01       	movw	r30, r20
    40ae:	e2 5c       	subi	r30, 0xC2	; 194
    40b0:	f4 4d       	sbci	r31, 0xD4	; 212
    40b2:	20 81       	ld	r18, Z
    40b4:	21 11       	cpse	r18, r1
    40b6:	21 c0       	rjmp	.+66     	; 0x40fa <__stack+0xfb>
					{
							ConsoleFunctionData[Module] &= MUTE_FUNCTION^0xFF;
    40b8:	fa 01       	movw	r30, r20
    40ba:	e3 5b       	subi	r30, 0xB3	; 179
    40bc:	fb 4d       	sbci	r31, 0xDB	; 219
    40be:	9f 7e       	andi	r25, 0xEF	; 239
    40c0:	90 83       	st	Z, r25
	
							if ((TelcoNr>=0) && (TelcoNr<4))
    40c2:	84 30       	cpi	r24, 0x04	; 4
    40c4:	b8 f4       	brcc	.+46     	; 0x40f4 <__stack+0xf5>
							{
								SerialBufferOut[SerialBufferOutPtrTop++] = TODIRECTOR_TELCO_MUTE;
    40c6:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    40ca:	a1 e0       	ldi	r26, 0x01	; 1
    40cc:	ae 0f       	add	r26, r30
    40ce:	f0 e0       	ldi	r31, 0x00	; 0
    40d0:	ee 58       	subi	r30, 0x8E	; 142
    40d2:	fa 4d       	sbci	r31, 0xDA	; 218
    40d4:	93 ec       	ldi	r25, 0xC3	; 195
    40d6:	90 83       	st	Z, r25
								SerialBufferOut[SerialBufferOutPtrTop++] = TelcoNr;
    40d8:	e1 e0       	ldi	r30, 0x01	; 1
    40da:	ea 0f       	add	r30, r26
    40dc:	b0 e0       	ldi	r27, 0x00	; 0
    40de:	ae 58       	subi	r26, 0x8E	; 142
    40e0:	ba 4d       	sbci	r27, 0xDA	; 218
    40e2:	8c 93       	st	X, r24
								SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    40e4:	81 e0       	ldi	r24, 0x01	; 1
    40e6:	8e 0f       	add	r24, r30
    40e8:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    40ec:	f0 e0       	ldi	r31, 0x00	; 0
    40ee:	ee 58       	subi	r30, 0x8E	; 142
    40f0:	fa 4d       	sbci	r31, 0xDA	; 218
    40f2:	10 82       	st	Z, r1
							}
						  SendSerialData = 1;
    40f4:	81 e0       	ldi	r24, 0x01	; 1
    40f6:	80 93 39 24 	sts	0x2439, r24	; 0x802439 <SendSerialData>
				}
			}
		}
		break;
	}
}
    40fa:	61 96       	adiw	r28, 0x11	; 17
    40fc:	cd bf       	out	0x3d, r28	; 61
    40fe:	de bf       	out	0x3e, r29	; 62
    4100:	df 91       	pop	r29
    4102:	cf 91       	pop	r28
    4104:	1f 91       	pop	r17
    4106:	0f 91       	pop	r16
    4108:	ff 90       	pop	r15
    410a:	ef 90       	pop	r14
    410c:	df 90       	pop	r13
    410e:	cf 90       	pop	r12
    4110:	bf 90       	pop	r11
    4112:	af 90       	pop	r10
    4114:	9f 90       	pop	r9
    4116:	8f 90       	pop	r8
    4118:	08 95       	ret

0000411a <init_twi>:
//}


void init_twi()
{
	TWIE_MASTER_BAUD=0x14; //baud rate is set such that ftwi=100KHz
    411a:	84 e1       	ldi	r24, 0x14	; 20
    411c:	80 93 a5 04 	sts	0x04A5, r24	; 0x8004a5 <__TEXT_REGION_LENGTH__+0x7de4a5>
	TWIE_CTRL=0x00; //SDA hold time off, normal TWI operation
    4120:	10 92 a0 04 	sts	0x04A0, r1	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7de4a0>
	TWIE_MASTER_CTRLA|=TWI_MASTER_INTLVL_gm|TWI_MASTER_RIEN_bm|TWI_MASTER_WIEN_bm|TWI_MASTER_ENABLE_bm; //enable high priority read and write interrupt, enable MASTER
    4124:	e1 ea       	ldi	r30, 0xA1	; 161
    4126:	f4 e0       	ldi	r31, 0x04	; 4
    4128:	80 81       	ld	r24, Z
    412a:	88 6f       	ori	r24, 0xF8	; 248
    412c:	80 83       	st	Z, r24
	//TWIE_MASTER_CTRLA|=TWI_MASTER_ENABLE_bm;
	//PMIC_LOLVLEN_bm
	TWIE_MASTER_CTRLB=0x00; //no inactive bus timeout, no quick command and smart mode enabled
    412e:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <__TEXT_REGION_LENGTH__+0x7de4a2>
	TWIE_MASTER_CTRLC=0x00; //initially send ACK and no CMD selected
    4132:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7de4a3>
	TWIE_MASTER_STATUS|=TWI_MASTER_RIF_bm|TWI_MASTER_WIF_bm|TWI_MASTER_ARBLOST_bm|TWI_MASTER_BUSERR_bm|TWI_MASTER_BUSSTATE0_bm; //clear all flags initially and select bus state IDLE
    4136:	e4 ea       	ldi	r30, 0xA4	; 164
    4138:	f4 e0       	ldi	r31, 0x04	; 4
    413a:	80 81       	ld	r24, Z
    413c:	8d 6c       	ori	r24, 0xCD	; 205
    413e:	80 83       	st	Z, r24
    4140:	08 95       	ret

00004142 <SetAddress>:
}


void SetAddress(unsigned char I2CAddress, unsigned int StartAddress)
{
    4142:	08 95       	ret

00004144 <ReadData>:
	
	
	//NrOfBytes=29;

	uint8_t twi_data_count = 0;
	NrOfBytes += 4;
    4144:	2c 5f       	subi	r18, 0xFC	; 252
	
	
	
	//NrOfBytes=29;

	uint8_t twi_data_count = 0;
    4146:	30 e0       	ldi	r19, 0x00	; 0
	NrOfBytes += 4;
	unsigned char startDevice;
	
	
	while( twi_data_count < NrOfBytes )
    4148:	6d c0       	rjmp	.+218    	; 0x4224 <ReadData+0xe0>
	{
		if ( twi_data_count == 0 )
    414a:	31 11       	cpse	r19, r1
    414c:	23 c0       	rjmp	.+70     	; 0x4194 <ReadData+0x50>
		{		
			startDevice=(StartAddress>>7)&0x0E;
    414e:	fb 01       	movw	r30, r22
    4150:	ee 0f       	add	r30, r30
    4152:	ef 2f       	mov	r30, r31
    4154:	ee 1f       	adc	r30, r30
    4156:	ff 0b       	sbc	r31, r31
    4158:	f1 95       	neg	r31
    415a:	ee 70       	andi	r30, 0x0E	; 14
			
			for (wacht=0; wacht<140; wacht++); 
    415c:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <wacht>
    4160:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <wacht+0x1>
    4164:	05 c0       	rjmp	.+10     	; 0x4170 <ReadData+0x2c>
    4166:	01 96       	adiw	r24, 0x01	; 1
    4168:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <wacht>
    416c:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <wacht+0x1>
    4170:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <wacht>
    4174:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <wacht+0x1>
    4178:	8c 38       	cpi	r24, 0x8C	; 140
    417a:	91 05       	cpc	r25, r1
    417c:	a0 f3       	brcs	.-24     	; 0x4166 <ReadData+0x22>
			TWIE_MASTER_ADDR=RTC_ADDR|startDevice|RTC_WRITE;  // Schrijf het Device adres, gebeurd altijd als eerste, ook zonder interrupt, ack wordt ook ontvangen	 
    417e:	8e 2f       	mov	r24, r30
    4180:	80 6e       	ori	r24, 0xE0	; 224
    4182:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7de4a6>
			while ( W_transfer_Interrupt_complete != 1 );	// Wacht totdat de interrupt is uitgevoerd, klaar is , in deze regel blijft hij hangen, i2c wordt dan maar een keer verstuurd, tenzij 
    4186:	80 91 a7 32 	lds	r24, 0x32A7	; 0x8032a7 <W_transfer_Interrupt_complete>
    418a:	81 30       	cpi	r24, 0x01	; 1
    418c:	e1 f7       	brne	.-8      	; 0x4186 <ReadData+0x42>
			//                                             // er een interrupt aan staat want dan komt ie hier wel doorheen 
			W_transfer_Interrupt_complete = 0; 		
    418e:	10 92 a7 32 	sts	0x32A7, r1	; 0x8032a7 <W_transfer_Interrupt_complete>
			twi_data_count++;
    4192:	3f 5f       	subi	r19, 0xFF	; 255
		}
	
		if ( twi_data_count == 1 )
    4194:	31 30       	cpi	r19, 0x01	; 1
    4196:	d1 f4       	brne	.+52     	; 0x41cc <ReadData+0x88>
		{
			TWIE_MASTER_DATA=StartAddress;					// readres	 	 
    4198:	60 93 a7 04 	sts	0x04A7, r22	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7de4a7>
			while ( W_transfer_Interrupt_complete != 1 );
    419c:	80 91 a7 32 	lds	r24, 0x32A7	; 0x8032a7 <W_transfer_Interrupt_complete>
    41a0:	81 30       	cpi	r24, 0x01	; 1
    41a2:	e1 f7       	brne	.-8      	; 0x419c <ReadData+0x58>
			W_transfer_Interrupt_complete = 0;
    41a4:	10 92 a7 32 	sts	0x32A7, r1	; 0x8032a7 <W_transfer_Interrupt_complete>
			twi_data_count++;
    41a8:	3f 5f       	subi	r19, 0xFF	; 255
			//TWIE_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp);  // Stop ik weet niet of da hier nodig is
			for (wacht=0; wacht<140; wacht++);	
    41aa:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <wacht>
    41ae:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <wacht+0x1>
    41b2:	05 c0       	rjmp	.+10     	; 0x41be <ReadData+0x7a>
    41b4:	01 96       	adiw	r24, 0x01	; 1
    41b6:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <wacht>
    41ba:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <wacht+0x1>
    41be:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <wacht>
    41c2:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <wacht+0x1>
    41c6:	8c 38       	cpi	r24, 0x8C	; 140
    41c8:	91 05       	cpc	r25, r1
    41ca:	a0 f3       	brcs	.-24     	; 0x41b4 <ReadData+0x70>
		}
			
		if ( twi_data_count == 2 )
    41cc:	32 30       	cpi	r19, 0x02	; 2
    41ce:	c9 f4       	brne	.+50     	; 0x4202 <ReadData+0xbe>
		{
			TWIE_MASTER_ADDR=RTC_ADDR|startDevice|RTC_READ;				// Read Device
    41d0:	8e 2f       	mov	r24, r30
    41d2:	81 6e       	ori	r24, 0xE1	; 225
    41d4:	80 93 a6 04 	sts	0x04A6, r24	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7de4a6>
			while ( R_transfer_Interrupt_complete != 1 );
    41d8:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <R_transfer_Interrupt_complete>
    41dc:	81 30       	cpi	r24, 0x01	; 1
    41de:	e1 f7       	brne	.-8      	; 0x41d8 <ReadData+0x94>
			R_transfer_Interrupt_complete = 0;
    41e0:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <R_transfer_Interrupt_complete>
			twi_data_buffer2[twi_data_count-2]=twi_data_count;  //TWIE_MASTER_DATA;  //Hier wordt de DATA in de buffer gezet
    41e4:	a3 2f       	mov	r26, r19
    41e6:	b0 e0       	ldi	r27, 0x00	; 0
    41e8:	a3 56       	subi	r26, 0x63	; 99
    41ea:	bb 4c       	sbci	r27, 0xCB	; 203
    41ec:	3c 93       	st	X, r19
			twi_data_count++;
    41ee:	3f 5f       	subi	r19, 0xFF	; 255
			//send acknowledge
			TWIE_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp);
    41f0:	82 e0       	ldi	r24, 0x02	; 2
    41f2:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7de4a3>
			while ( R_transfer_Interrupt_complete != 1 );
    41f6:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <R_transfer_Interrupt_complete>
    41fa:	81 30       	cpi	r24, 0x01	; 1
    41fc:	e1 f7       	brne	.-8      	; 0x41f6 <ReadData+0xb2>
			R_transfer_Interrupt_complete = 0;			
    41fe:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <R_transfer_Interrupt_complete>
			
		}			
			
		if ( twi_data_count > 2 )
    4202:	33 30       	cpi	r19, 0x03	; 3
    4204:	78 f0       	brcs	.+30     	; 0x4224 <ReadData+0xe0>
		{						
			//send acknowledge
			TWIE_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(0<<TWI_MASTER_CMD0_bp);
    4206:	82 e0       	ldi	r24, 0x02	; 2
    4208:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7de4a3>
			while ( R_transfer_Interrupt_complete != 1 );
    420c:	80 91 0a 38 	lds	r24, 0x380A	; 0x80380a <R_transfer_Interrupt_complete>
    4210:	81 30       	cpi	r24, 0x01	; 1
    4212:	e1 f7       	brne	.-8      	; 0x420c <ReadData+0xc8>
			R_transfer_Interrupt_complete = 0;
    4214:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <R_transfer_Interrupt_complete>
			twi_data_buffer2[twi_data_count-2]=twi_data_count;  //TWIE_MASTER_DATA;  //Hier wordt de DATA in de buffer gezet
    4218:	a3 2f       	mov	r26, r19
    421a:	b0 e0       	ldi	r27, 0x00	; 0
    421c:	a3 56       	subi	r26, 0x63	; 99
    421e:	bb 4c       	sbci	r27, 0xCB	; 203
    4220:	3c 93       	st	X, r19
			twi_data_count++;
    4222:	3f 5f       	subi	r19, 0xFF	; 255
	uint8_t twi_data_count = 0;
	NrOfBytes += 4;
	unsigned char startDevice;
	
	
	while( twi_data_count < NrOfBytes )
    4224:	32 17       	cp	r19, r18
    4226:	08 f4       	brcc	.+2      	; 0x422a <ReadData+0xe6>
    4228:	90 cf       	rjmp	.-224    	; 0x414a <ReadData+0x6>
		}			
	}
	
	
	
	TWIE_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp);   // Stop
    422a:	87 e0       	ldi	r24, 0x07	; 7
    422c:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7de4a3>
	for (wacht=0; wacht<900; wacht++);
    4230:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <wacht>
    4234:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <wacht+0x1>
    4238:	05 c0       	rjmp	.+10     	; 0x4244 <ReadData+0x100>
    423a:	01 96       	adiw	r24, 0x01	; 1
    423c:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <wacht>
    4240:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <wacht+0x1>
    4244:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <wacht>
    4248:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <wacht+0x1>
    424c:	84 38       	cpi	r24, 0x84	; 132
    424e:	23 e0       	ldi	r18, 0x03	; 3
    4250:	92 07       	cpc	r25, r18
    4252:	98 f3       	brcs	.-26     	; 0x423a <ReadData+0xf6>
    4254:	80 e0       	ldi	r24, 0x00	; 0
    4256:	90 e0       	ldi	r25, 0x00	; 0
    4258:	09 c0       	rjmp	.+18     	; 0x426c <ReadData+0x128>
	
	int t;
		
	for ( t=0; t<29; t++ )
	{
		*(Buffer+t) = twi_data_buffer2[t];
    425a:	fa 01       	movw	r30, r20
    425c:	e8 0f       	add	r30, r24
    425e:	f9 1f       	adc	r31, r25
    4260:	dc 01       	movw	r26, r24
    4262:	a1 56       	subi	r26, 0x61	; 97
    4264:	bb 4c       	sbci	r27, 0xCB	; 203
    4266:	2c 91       	ld	r18, X
    4268:	20 83       	st	Z, r18
	TWIE_MASTER_CTRLC=(1<<TWI_MASTER_ACKACT_bp)|(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp);   // Stop
	for (wacht=0; wacht<900; wacht++);
	
	int t;
		
	for ( t=0; t<29; t++ )
    426a:	01 96       	adiw	r24, 0x01	; 1
    426c:	8d 31       	cpi	r24, 0x1D	; 29
    426e:	91 05       	cpc	r25, r1
    4270:	a4 f3       	brlt	.-24     	; 0x425a <ReadData+0x116>
	////{
		////unsigned char Dummy = I2CBufferIn[I2CBufferInPtrBottom++];
		////if (cnt<NrOfBytes)
			////Buffer[cnt++] = Dummy;
	////}
}
    4272:	08 95       	ret

00004274 <WriteToEEprom>:

/***************************************************************
* WRITE_WriteToEEprom                                                *
***************************************************************/
WriteToEEprom(unsigned int StartAddress, unsigned char *Buffer, unsigned char NrOfBytes)
{
    4274:	dc 01       	movw	r26, r24
	uint8_t twi_data_count=0;
	NrOfBytes += 2;
    4276:	4e 5f       	subi	r20, 0xFE	; 254
/***************************************************************
* WRITE_WriteToEEprom                                                *
***************************************************************/
WriteToEEprom(unsigned int StartAddress, unsigned char *Buffer, unsigned char NrOfBytes)
{
	uint8_t twi_data_count=0;
    4278:	20 e0       	ldi	r18, 0x00	; 0
	NrOfBytes += 2;
	unsigned char startDevice;
		 
	while( twi_data_count < NrOfBytes )
    427a:	2d c0       	rjmp	.+90     	; 0x42d6 <WriteToEEprom+0x62>
	{
		if ( twi_data_count == 0 )
    427c:	21 11       	cpse	r18, r1
    427e:	11 c0       	rjmp	.+34     	; 0x42a2 <WriteToEEprom+0x2e>
		{
			startDevice=(StartAddress>>7)&0x0E;
    4280:	fd 01       	movw	r30, r26
    4282:	ee 0f       	add	r30, r30
    4284:	ef 2f       	mov	r30, r31
    4286:	ee 1f       	adc	r30, r30
    4288:	ff 0b       	sbc	r31, r31
    428a:	f1 95       	neg	r31
    428c:	ee 70       	andi	r30, 0x0E	; 14
			
			TWIE_MASTER_ADDR=RTC_ADDR|startDevice|RTC_WRITE;			
    428e:	e0 6e       	ori	r30, 0xE0	; 224
    4290:	e0 93 a6 04 	sts	0x04A6, r30	; 0x8004a6 <__TEXT_REGION_LENGTH__+0x7de4a6>
			//TWIE_MASTER_ADDR=RTC_ADDR|RTC_WRITE;  // Schrijf het Device adres, gebeurd altijd als eerste, ook zonder interrupt, ack wordt ook ontvangen
			while ( W_transfer_Interrupt_complete != 1 );	// Wacht totdat de interrupt is uitgevoerd, klaar is , in deze regel blijft hij hangen, i2c wordt dan maar een keer verstuurd, tenzij
    4294:	90 91 a7 32 	lds	r25, 0x32A7	; 0x8032a7 <W_transfer_Interrupt_complete>
    4298:	91 30       	cpi	r25, 0x01	; 1
    429a:	e1 f7       	brne	.-8      	; 0x4294 <WriteToEEprom+0x20>
			//                                             // er een interrupt aan staat want dan komt ie hier wel weer opnieuw in terug
			W_transfer_Interrupt_complete = 0;
    429c:	10 92 a7 32 	sts	0x32A7, r1	; 0x8032a7 <W_transfer_Interrupt_complete>
			twi_data_count++;
    42a0:	2f 5f       	subi	r18, 0xFF	; 255
		}
			 
		if ( twi_data_count == 1 )
    42a2:	21 30       	cpi	r18, 0x01	; 1
    42a4:	49 f4       	brne	.+18     	; 0x42b8 <WriteToEEprom+0x44>
		{
			TWIE_MASTER_DATA=StartAddress;  // readres
    42a6:	a0 93 a7 04 	sts	0x04A7, r26	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7de4a7>
			while ( W_transfer_Interrupt_complete != 1 );
    42aa:	90 91 a7 32 	lds	r25, 0x32A7	; 0x8032a7 <W_transfer_Interrupt_complete>
    42ae:	91 30       	cpi	r25, 0x01	; 1
    42b0:	e1 f7       	brne	.-8      	; 0x42aa <WriteToEEprom+0x36>
			W_transfer_Interrupt_complete = 0;
    42b2:	10 92 a7 32 	sts	0x32A7, r1	; 0x8032a7 <W_transfer_Interrupt_complete>
			twi_data_count++;
    42b6:	2f 5f       	subi	r18, 0xFF	; 255
		}
			 
		if ( twi_data_count > 1 )
    42b8:	22 30       	cpi	r18, 0x02	; 2
    42ba:	68 f0       	brcs	.+26     	; 0x42d6 <WriteToEEprom+0x62>
		{
			//TWIE_MASTER_DATA = (twi_data_buffer3[twi_data_count]) & 0x01;
			TWIE_MASTER_DATA = Buffer[twi_data_count];
    42bc:	fb 01       	movw	r30, r22
    42be:	e2 0f       	add	r30, r18
    42c0:	f1 1d       	adc	r31, r1
    42c2:	80 81       	ld	r24, Z
    42c4:	80 93 a7 04 	sts	0x04A7, r24	; 0x8004a7 <__TEXT_REGION_LENGTH__+0x7de4a7>
			//TWIE_MASTER_DATA= 2;
			//TWIE_MASTER_DATA= twi_data_count;                              // Hier even dit laten staan om de EEprom bewust te vullen met allemaal eenen of nullen
			while ( W_transfer_Interrupt_complete != 1 );
    42c8:	90 91 a7 32 	lds	r25, 0x32A7	; 0x8032a7 <W_transfer_Interrupt_complete>
    42cc:	91 30       	cpi	r25, 0x01	; 1
    42ce:	e1 f7       	brne	.-8      	; 0x42c8 <WriteToEEprom+0x54>
			W_transfer_Interrupt_complete = 0;
    42d0:	10 92 a7 32 	sts	0x32A7, r1	; 0x8032a7 <W_transfer_Interrupt_complete>
			twi_data_count++;
    42d4:	2f 5f       	subi	r18, 0xFF	; 255
{
	uint8_t twi_data_count=0;
	NrOfBytes += 2;
	unsigned char startDevice;
		 
	while( twi_data_count < NrOfBytes )
    42d6:	24 17       	cp	r18, r20
    42d8:	88 f2       	brcs	.-94     	; 0x427c <WriteToEEprom+0x8>
			W_transfer_Interrupt_complete = 0;
			twi_data_count++;
		}
	}
	//send stop condition if all bytes are transferred
	TWIE_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp);
    42da:	83 e0       	ldi	r24, 0x03	; 3
    42dc:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7de4a3>
	for (wacht=0; wacht<8000; wacht++);		
    42e0:	10 92 08 38 	sts	0x3808, r1	; 0x803808 <wacht>
    42e4:	10 92 09 38 	sts	0x3809, r1	; 0x803809 <wacht+0x1>
    42e8:	05 c0       	rjmp	.+10     	; 0x42f4 <WriteToEEprom+0x80>
    42ea:	01 96       	adiw	r24, 0x01	; 1
    42ec:	80 93 08 38 	sts	0x3808, r24	; 0x803808 <wacht>
    42f0:	90 93 09 38 	sts	0x3809, r25	; 0x803809 <wacht+0x1>
    42f4:	80 91 08 38 	lds	r24, 0x3808	; 0x803808 <wacht>
    42f8:	90 91 09 38 	lds	r25, 0x3809	; 0x803809 <wacht+0x1>
    42fc:	80 34       	cpi	r24, 0x40	; 64
    42fe:	2f e1       	ldi	r18, 0x1F	; 31
    4300:	92 07       	cpc	r25, r18
    4302:	98 f3       	brcs	.-26     	; 0x42ea <WriteToEEprom+0x76>
}
    4304:	08 95       	ret

00004306 <WriteData>:

/***************************************************************
* WRITE_DATA_I2C                                                    *
***************************************************************/
void WriteData(unsigned char I2CAddress, unsigned int StartAddress, unsigned char* Buffer, unsigned char NrOfBytes)
{
    4306:	ff 92       	push	r15
    4308:	0f 93       	push	r16
    430a:	1f 93       	push	r17
    430c:	cf 93       	push	r28
    430e:	df 93       	push	r29
    4310:	cd b7       	in	r28, 0x3d	; 61
    4312:	de b7       	in	r29, 0x3e	; 62
    4314:	a0 97       	sbiw	r28, 0x20	; 32
    4316:	cd bf       	out	0x3d, r28	; 61
    4318:	de bf       	out	0x3e, r29	; 62
    431a:	8b 01       	movw	r16, r22
    431c:	f2 2e       	mov	r15, r18
	unsigned char buff[32];
	

	
	
	if ( NrOfBytes > 16)
    431e:	80 e1       	ldi	r24, 0x10	; 16
    4320:	82 17       	cp	r24, r18
    4322:	70 f0       	brcs	.+28     	; 0x4340 <WriteData+0x3a>
    4324:	22 e0       	ldi	r18, 0x02	; 2
    4326:	30 e0       	ldi	r19, 0x00	; 0
    4328:	3f c0       	rjmp	.+126    	; 0x43a8 <WriteData+0xa2>
	{
		
		for ( int t=2; t<18; t++)
		buff[t]=6; //Buffer[t-2];
    432a:	e1 e0       	ldi	r30, 0x01	; 1
    432c:	f0 e0       	ldi	r31, 0x00	; 0
    432e:	ec 0f       	add	r30, r28
    4330:	fd 1f       	adc	r31, r29
    4332:	e2 0f       	add	r30, r18
    4334:	f3 1f       	adc	r31, r19
    4336:	86 e0       	ldi	r24, 0x06	; 6
    4338:	80 83       	st	Z, r24
	
	
	if ( NrOfBytes > 16)
	{
		
		for ( int t=2; t<18; t++)
    433a:	2f 5f       	subi	r18, 0xFF	; 255
    433c:	3f 4f       	sbci	r19, 0xFF	; 255
    433e:	02 c0       	rjmp	.+4      	; 0x4344 <WriteData+0x3e>
    4340:	22 e0       	ldi	r18, 0x02	; 2
    4342:	30 e0       	ldi	r19, 0x00	; 0
    4344:	22 31       	cpi	r18, 0x12	; 18
    4346:	31 05       	cpc	r19, r1
    4348:	84 f3       	brlt	.-32     	; 0x432a <WriteData+0x24>
		
		//NrOfBytes -= 13;
//									16            0       29-13=16
		//WriteToEEprom( StartAddress, *I2CDataBufferOut, NrOfBytes-13);
		//WriteToEEprom( StartAddress, 1, NrOfBytes);
		WriteToEEprom( StartAddress, buff, NrOfBytes-13);
    434a:	43 ef       	ldi	r20, 0xF3	; 243
    434c:	4f 0d       	add	r20, r15
    434e:	be 01       	movw	r22, r28
    4350:	6f 5f       	subi	r22, 0xFF	; 255
    4352:	7f 4f       	sbci	r23, 0xFF	; 255
    4354:	c8 01       	movw	r24, r16
    4356:	0e 94 3a 21 	call	0x4274	; 0x4274 <WriteToEEprom>

	
		StartAddress += 16;
    435a:	00 5f       	subi	r16, 0xF0	; 240
    435c:	1f 4f       	sbci	r17, 0xFF	; 255
		//buff += 16;
		//NrOfBytes -= 16;
		
		for ( int t=15; t<28; t++)
    435e:	2f e0       	ldi	r18, 0x0F	; 15
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	0c c0       	rjmp	.+24     	; 0x437c <WriteData+0x76>
		buff[t-13]=7; //Buffer[t+1];
    4364:	f9 01       	movw	r30, r18
    4366:	3d 97       	sbiw	r30, 0x0d	; 13
    4368:	81 e0       	ldi	r24, 0x01	; 1
    436a:	90 e0       	ldi	r25, 0x00	; 0
    436c:	8c 0f       	add	r24, r28
    436e:	9d 1f       	adc	r25, r29
    4370:	e8 0f       	add	r30, r24
    4372:	f9 1f       	adc	r31, r25
    4374:	97 e0       	ldi	r25, 0x07	; 7
    4376:	90 83       	st	Z, r25
	
		StartAddress += 16;
		//buff += 16;
		//NrOfBytes -= 16;
		
		for ( int t=15; t<28; t++)
    4378:	2f 5f       	subi	r18, 0xFF	; 255
    437a:	3f 4f       	sbci	r19, 0xFF	; 255
    437c:	2c 31       	cpi	r18, 0x1C	; 28
    437e:	31 05       	cpc	r19, r1
    4380:	8c f3       	brlt	.-30     	; 0x4364 <WriteData+0x5e>
		
	//
////		                           16+16=32      0+16=16    29-16=13
		////WriteToEEprom( StartAddress, *I2CDataBufferOut+16, NrOfBytes-16);
		////WriteToEEprom( StartAddress, 1, NrOfBytes);
		WriteToEEprom( StartAddress, buff, NrOfBytes-16);
    4382:	40 ef       	ldi	r20, 0xF0	; 240
    4384:	4f 0d       	add	r20, r15
    4386:	be 01       	movw	r22, r28
    4388:	6f 5f       	subi	r22, 0xFF	; 255
    438a:	7f 4f       	sbci	r23, 0xFF	; 255
    438c:	c8 01       	movw	r24, r16
    438e:	0e 94 3a 21 	call	0x4274	; 0x4274 <WriteToEEprom>
    4392:	14 c0       	rjmp	.+40     	; 0x43bc <WriteData+0xb6>
	}
	else
	{		
		//for ( int t=2; t<18; t++)
		for ( int t=2; t<28; t++)
		buff[t]=5; //Buffer[t-2];
    4394:	e1 e0       	ldi	r30, 0x01	; 1
    4396:	f0 e0       	ldi	r31, 0x00	; 0
    4398:	ec 0f       	add	r30, r28
    439a:	fd 1f       	adc	r31, r29
    439c:	e2 0f       	add	r30, r18
    439e:	f3 1f       	adc	r31, r19
    43a0:	95 e0       	ldi	r25, 0x05	; 5
    43a2:	90 83       	st	Z, r25
		//StartAddress += 13;
	}
	else
	{		
		//for ( int t=2; t<18; t++)
		for ( int t=2; t<28; t++)
    43a4:	2f 5f       	subi	r18, 0xFF	; 255
    43a6:	3f 4f       	sbci	r19, 0xFF	; 255
    43a8:	2c 31       	cpi	r18, 0x1C	; 28
    43aa:	31 05       	cpc	r19, r1
    43ac:	9c f3       	brlt	.-26     	; 0x4394 <WriteData+0x8e>
		buff[t]=5; //Buffer[t-2];
			
		WriteToEEprom( StartAddress, buff, NrOfBytes);
    43ae:	4f 2d       	mov	r20, r15
    43b0:	be 01       	movw	r22, r28
    43b2:	6f 5f       	subi	r22, 0xFF	; 255
    43b4:	7f 4f       	sbci	r23, 0xFF	; 255
    43b6:	c8 01       	movw	r24, r16
    43b8:	0e 94 3a 21 	call	0x4274	; 0x4274 <WriteToEEprom>
				//////////////while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
				////////////}		
		
		
		
}
    43bc:	a0 96       	adiw	r28, 0x20	; 32
    43be:	cd bf       	out	0x3d, r28	; 61
    43c0:	de bf       	out	0x3e, r29	; 62
    43c2:	df 91       	pop	r29
    43c4:	cf 91       	pop	r28
    43c6:	1f 91       	pop	r17
    43c8:	0f 91       	pop	r16
    43ca:	ff 90       	pop	r15
    43cc:	08 95       	ret

000043ce <__vector_46>:

/************************************************************************
*       Interrupt on recieving I2C                                                                                                                      *
************************************************************************/
 ISR(TWIE_TWIM_vect)
 {
    43ce:	1f 92       	push	r1
    43d0:	0f 92       	push	r0
    43d2:	0f b6       	in	r0, 0x3f	; 63
    43d4:	0f 92       	push	r0
    43d6:	11 24       	eor	r1, r1
    43d8:	08 b6       	in	r0, 0x38	; 56
    43da:	0f 92       	push	r0
    43dc:	18 be       	out	0x38, r1	; 56
    43de:	0b b6       	in	r0, 0x3b	; 59
    43e0:	0f 92       	push	r0
    43e2:	1b be       	out	0x3b, r1	; 59
    43e4:	8f 93       	push	r24
    43e6:	ef 93       	push	r30
    43e8:	ff 93       	push	r31
	 //If TWI arbitration is lost send STOP
	 if(TWIE_MASTER_STATUS & (1<<TWI_MASTER_ARBLOST_bp))
    43ea:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7de4a4>
    43ee:	83 ff       	sbrs	r24, 3
    43f0:	03 c0       	rjmp	.+6      	; 0x43f8 <__vector_46+0x2a>
	 {
		 TWIE_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
    43f2:	83 e0       	ldi	r24, 0x03	; 3
    43f4:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7de4a3>
	 }
	 
	 //If TWI bus error flag is set or NACK received then send STOP
	 if((TWIE_MASTER_STATUS & (1<<TWI_MASTER_BUSERR_bp))||(TWIE_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp)))
    43f8:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7de4a4>
    43fc:	82 fd       	sbrc	r24, 2
    43fe:	04 c0       	rjmp	.+8      	; 0x4408 <__vector_46+0x3a>
    4400:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7de4a4>
    4404:	84 ff       	sbrs	r24, 4
    4406:	03 c0       	rjmp	.+6      	; 0x440e <__vector_46+0x40>
	 {
		 TWIE_MASTER_CTRLC=(1<<TWI_MASTER_CMD1_bp)|(1<<TWI_MASTER_CMD0_bp); //send stop condition
    4408:	83 e0       	ldi	r24, 0x03	; 3
    440a:	80 93 a3 04 	sts	0x04A3, r24	; 0x8004a3 <__TEXT_REGION_LENGTH__+0x7de4a3>
	 }
	 
	 
	 //If TWI write interrupt flag is set
	 if(TWIE_MASTER_STATUS & (1<<TWI_MASTER_WIF_bp))
    440e:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7de4a4>
    4412:	86 ff       	sbrs	r24, 6
    4414:	0d c0       	rjmp	.+26     	; 0x4430 <__vector_46+0x62>
	 {
		 if(!(TWIE_MASTER_STATUS & (1<<TWI_MASTER_RXACK_bp))) //check whether acknowledge is received or not
    4416:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7de4a4>
    441a:	84 fd       	sbrc	r24, 4
    441c:	0b c0       	rjmp	.+22     	; 0x4434 <__vector_46+0x66>
		 {
			 //TWIE_MASTER_DATA=twi_data_buffer[twi_data_count++];
			 W_transfer_Interrupt_complete = 1;
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	80 93 a7 32 	sts	0x32A7, r24	; 0x8032a7 <W_transfer_Interrupt_complete>
			 PORTA_OUTTGL |= 0x80;  // om als trigger puls te gebruiken voor de oscilloscoop
    4424:	e7 e0       	ldi	r30, 0x07	; 7
    4426:	f6 e0       	ldi	r31, 0x06	; 6
    4428:	80 81       	ld	r24, Z
    442a:	80 68       	ori	r24, 0x80	; 128
    442c:	80 83       	st	Z, r24
    442e:	02 c0       	rjmp	.+4      	; 0x4434 <__vector_46+0x66>
		 }
	 }
	 else
	 {
		 W_transfer_Interrupt_complete = 0;
    4430:	10 92 a7 32 	sts	0x32A7, r1	; 0x8032a7 <W_transfer_Interrupt_complete>
	 }
	 

	 //If read interrupt flag is set
	 if(TWIE_MASTER_STATUS & (1<<TWI_MASTER_RIF_bp)) //Check whether read interrupt flag is set or not
    4434:	80 91 a4 04 	lds	r24, 0x04A4	; 0x8004a4 <__TEXT_REGION_LENGTH__+0x7de4a4>
    4438:	88 23       	and	r24, r24
    443a:	4c f4       	brge	.+18     	; 0x444e <__vector_46+0x80>
	 {
		 ////twi_data_buffer2[twi_data_count++]=TWIE_MASTER_DATA;  //Hier wordt de DATA in de buffer gezet
		 R_transfer_Interrupt_complete = 1;
    443c:	81 e0       	ldi	r24, 0x01	; 1
    443e:	80 93 0a 38 	sts	0x380A, r24	; 0x80380a <R_transfer_Interrupt_complete>
		 PORTA_OUTTGL |= 0x80;  // om als trigger puls te gebruiken voor de oscilloscoop
    4442:	e7 e0       	ldi	r30, 0x07	; 7
    4444:	f6 e0       	ldi	r31, 0x06	; 6
    4446:	80 81       	ld	r24, Z
    4448:	80 68       	ori	r24, 0x80	; 128
    444a:	80 83       	st	Z, r24
    444c:	02 c0       	rjmp	.+4      	; 0x4452 <__vector_46+0x84>
	 }
	 else
	 {
		 R_transfer_Interrupt_complete = 0;
    444e:	10 92 0a 38 	sts	0x380A, r1	; 0x80380a <R_transfer_Interrupt_complete>
	 }
    4452:	ff 91       	pop	r31
    4454:	ef 91       	pop	r30
    4456:	8f 91       	pop	r24
    4458:	0f 90       	pop	r0
    445a:	0b be       	out	0x3b, r0	; 59
    445c:	0f 90       	pop	r0
    445e:	08 be       	out	0x38, r0	; 56
    4460:	0f 90       	pop	r0
    4462:	0f be       	out	0x3f, r0	; 63
    4464:	0f 90       	pop	r0
    4466:	1f 90       	pop	r1
    4468:	18 95       	reti

0000446a <SetupLCD>:
#define		LCD_E   0x20
//#define		STRB1   0x80


void SetupLCD()
{
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    446e:	80 ea       	ldi	r24, 0xA0	; 160
    4470:	8a 95       	dec	r24
    4472:	f1 f7       	brne	.-4      	; 0x4470 <SetupLCD+0x6>


	// Wait minimal 15 ms
	_delay_us(15);

	PORTA_OUTCLR = LCD_E;
    4474:	e6 e0       	ldi	r30, 0x06	; 6
    4476:	f6 e0       	ldi	r31, 0x06	; 6
    4478:	80 e2       	ldi	r24, 0x20	; 32
    447a:	80 83       	st	Z, r24
	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    447c:	20 e4       	ldi	r18, 0x40	; 64
    447e:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    4480:	98 e0       	ldi	r25, 0x08	; 8
    4482:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    4484:	30 e1       	ldi	r19, 0x10	; 16
    4486:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    4488:	64 e0       	ldi	r22, 0x04	; 4
    448a:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;
    448c:	a5 e0       	ldi	r26, 0x05	; 5
    448e:	b6 e0       	ldi	r27, 0x06	; 6
    4490:	52 e0       	ldi	r21, 0x02	; 2
    4492:	5c 93       	st	X, r21
	PORTA_OUTSET = LCD_D4;
    4494:	41 e0       	ldi	r20, 0x01	; 1
    4496:	4c 93       	st	X, r20
	PORTA_OUTSET = LCD_E;
    4498:	8c 93       	st	X, r24
	PORTA_OUTCLR = LCD_E;
    449a:	80 83       	st	Z, r24
    449c:	cf eb       	ldi	r28, 0xBF	; 191
    449e:	d3 e0       	ldi	r29, 0x03	; 3
    44a0:	21 97       	sbiw	r28, 0x01	; 1
    44a2:	f1 f7       	brne	.-4      	; 0x44a0 <SetupLCD+0x36>
    44a4:	00 c0       	rjmp	.+0      	; 0x44a6 <SetupLCD+0x3c>
    44a6:	00 00       	nop
	// Wait minimal 4.1 ms
	_delay_us(Wait*3);

	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    44a8:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    44aa:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    44ac:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    44ae:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;
    44b0:	5c 93       	st	X, r21
	PORTA_OUTSET = LCD_D4;
    44b2:	4c 93       	st	X, r20
	PORTA_OUTSET = LCD_E * 1;
    44b4:	8c 93       	st	X, r24
    44b6:	cf e3       	ldi	r28, 0x3F	; 63
    44b8:	d1 e0       	ldi	r29, 0x01	; 1
    44ba:	21 97       	sbiw	r28, 0x01	; 1
    44bc:	f1 f7       	brne	.-4      	; 0x44ba <SetupLCD+0x50>
    44be:	00 c0       	rjmp	.+0      	; 0x44c0 <SetupLCD+0x56>
    44c0:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    44c2:	80 83       	st	Z, r24
	// Wait minimal 100 us

	// Setup/Reset Display
	PORTA_OUTCLR = LCD_RS;
    44c4:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    44c6:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    44c8:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    44ca:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;
    44cc:	5c 93       	st	X, r21
	PORTA_OUTSET = LCD_D4;
    44ce:	4c 93       	st	X, r20
	PORTA_OUTSET = LCD_E ;
    44d0:	8c 93       	st	X, r24
    44d2:	cf e3       	ldi	r28, 0x3F	; 63
    44d4:	d1 e0       	ldi	r29, 0x01	; 1
    44d6:	21 97       	sbiw	r28, 0x01	; 1
    44d8:	f1 f7       	brne	.-4      	; 0x44d6 <SetupLCD+0x6c>
    44da:	00 c0       	rjmp	.+0      	; 0x44dc <SetupLCD+0x72>
    44dc:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    44de:	80 83       	st	Z, r24
    44e0:	cf e3       	ldi	r28, 0x3F	; 63
    44e2:	d1 e0       	ldi	r29, 0x01	; 1
    44e4:	21 97       	sbiw	r28, 0x01	; 1
    44e6:	f1 f7       	brne	.-4      	; 0x44e4 <SetupLCD+0x7a>
    44e8:	00 c0       	rjmp	.+0      	; 0x44ea <SetupLCD+0x80>
    44ea:	00 00       	nop

	// Busy cannot be checked
	_delay_us(Wait);

	// Setup/Reset Display to 4 bit mode
	PORTA_OUTCLR = LCD_RS;
    44ec:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    44ee:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    44f0:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    44f2:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;
    44f4:	5c 93       	st	X, r21
	PORTA_OUTCLR = LCD_D4;
    44f6:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    44f8:	8c 93       	st	X, r24
    44fa:	cf e3       	ldi	r28, 0x3F	; 63
    44fc:	d1 e0       	ldi	r29, 0x01	; 1
    44fe:	21 97       	sbiw	r28, 0x01	; 1
    4500:	f1 f7       	brne	.-4      	; 0x44fe <SetupLCD+0x94>
    4502:	00 c0       	rjmp	.+0      	; 0x4504 <SetupLCD+0x9a>
    4504:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4506:	80 83       	st	Z, r24

	// Set number of lines etc...
	PORTA_OUTCLR = LCD_RS;
    4508:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    450a:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		// Function set
    450c:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;		// Function set
    450e:	60 83       	st	Z, r22
	PORTA_OUTSET = LCD_D5;		// Function set
    4510:	5c 93       	st	X, r21
	PORTA_OUTCLR = LCD_D4;		// 4 bit
    4512:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    4514:	8c 93       	st	X, r24
    4516:	cf e3       	ldi	r28, 0x3F	; 63
    4518:	d1 e0       	ldi	r29, 0x01	; 1
    451a:	21 97       	sbiw	r28, 0x01	; 1
    451c:	f1 f7       	brne	.-4      	; 0x451a <SetupLCD+0xb0>
    451e:	00 c0       	rjmp	.+0      	; 0x4520 <SetupLCD+0xb6>
    4520:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4522:	80 83       	st	Z, r24

	PORTA_OUTCLR = LCD_RS;
    4524:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    4526:	90 83       	st	Z, r25
	PORTA_OUTSET = LCD_D7;		// 2 lines
    4528:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_D6;		// 5x7 dots chars
    452a:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;		// *
    452c:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;		// *
    452e:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    4530:	8c 93       	st	X, r24
    4532:	cf e3       	ldi	r28, 0x3F	; 63
    4534:	d1 e0       	ldi	r29, 0x01	; 1
    4536:	21 97       	sbiw	r28, 0x01	; 1
    4538:	f1 f7       	brne	.-4      	; 0x4536 <SetupLCD+0xcc>
    453a:	00 c0       	rjmp	.+0      	; 0x453c <SetupLCD+0xd2>
    453c:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    453e:	80 83       	st	Z, r24

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    4540:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_RS;
    4542:	20 83       	st	Z, r18
	PORTA_OUTSET = LCD_RW;
    4544:	9c 93       	st	X, r25
	PORTA_OUTSET = LCD_E;
    4546:	8c 93       	st	X, r24
    4548:	cf e3       	ldi	r28, 0x3F	; 63
    454a:	d1 e0       	ldi	r29, 0x01	; 1
    454c:	21 97       	sbiw	r28, 0x01	; 1
    454e:	f1 f7       	brne	.-4      	; 0x454c <SetupLCD+0xe2>
    4550:	00 c0       	rjmp	.+0      	; 0x4552 <SetupLCD+0xe8>
    4552:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4554:	80 83       	st	Z, r24
	PORTA_OUTSET = LCD_E;
    4556:	8c 93       	st	X, r24
	PORTA_OUTCLR = LCD_D4;		// *
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;

	TimeOut = 0x0F;
    4558:	8f e0       	ldi	r24, 0x0F	; 15
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    455a:	0c c0       	rjmp	.+24     	; 0x4574 <SetupLCD+0x10a>
	{
		PORTA_OUTCLR = LCD_E;
    455c:	80 e2       	ldi	r24, 0x20	; 32
    455e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    4562:	ef e3       	ldi	r30, 0x3F	; 63
    4564:	f1 e0       	ldi	r31, 0x01	; 1
    4566:	31 97       	sbiw	r30, 0x01	; 1
    4568:	f1 f7       	brne	.-4      	; 0x4566 <SetupLCD+0xfc>
    456a:	00 c0       	rjmp	.+0      	; 0x456c <SetupLCD+0x102>
    456c:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
    456e:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    4572:	89 2f       	mov	r24, r25
    4574:	9f ef       	ldi	r25, 0xFF	; 255
    4576:	98 0f       	add	r25, r24
    4578:	81 11       	cpse	r24, r1
    457a:	f0 cf       	rjmp	.-32     	; 0x455c <SetupLCD+0xf2>
	{
		PORTA_OUTCLR = LCD_E;
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    457c:	e6 e0       	ldi	r30, 0x06	; 6
    457e:	f6 e0       	ldi	r31, 0x06	; 6
    4580:	80 e2       	ldi	r24, 0x20	; 32
    4582:	80 83       	st	Z, r24

	// Display Off
	PORTA_OUTCLR = LCD_RS;
    4584:	20 e4       	ldi	r18, 0x40	; 64
    4586:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    4588:	98 e0       	ldi	r25, 0x08	; 8
    458a:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		// Function set
    458c:	30 e1       	ldi	r19, 0x10	; 16
    458e:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;		// Function set
    4590:	64 e0       	ldi	r22, 0x04	; 4
    4592:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;		// Function set
    4594:	52 e0       	ldi	r21, 0x02	; 2
    4596:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;		
    4598:	41 e0       	ldi	r20, 0x01	; 1
    459a:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    459c:	a5 e0       	ldi	r26, 0x05	; 5
    459e:	b6 e0       	ldi	r27, 0x06	; 6
    45a0:	8c 93       	st	X, r24
    45a2:	cf e3       	ldi	r28, 0x3F	; 63
    45a4:	d1 e0       	ldi	r29, 0x01	; 1
    45a6:	21 97       	sbiw	r28, 0x01	; 1
    45a8:	f1 f7       	brne	.-4      	; 0x45a6 <SetupLCD+0x13c>
    45aa:	00 c0       	rjmp	.+0      	; 0x45ac <SetupLCD+0x142>
    45ac:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    45ae:	80 83       	st	Z, r24

	PORTA_OUTCLR = LCD_RS;
    45b0:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    45b2:	90 83       	st	Z, r25
	PORTA_OUTSET = LCD_D7;		// Display off
    45b4:	3c 93       	st	X, r19
	PORTA_OUTSET = LCD_D6;		
    45b6:	6c 93       	st	X, r22
	PORTA_OUTCLR = LCD_D5;	 	// Cursor on
    45b8:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;	 	// Cursor Blink
    45ba:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    45bc:	8c 93       	st	X, r24
    45be:	cf e3       	ldi	r28, 0x3F	; 63
    45c0:	d1 e0       	ldi	r29, 0x01	; 1
    45c2:	21 97       	sbiw	r28, 0x01	; 1
    45c4:	f1 f7       	brne	.-4      	; 0x45c2 <SetupLCD+0x158>
    45c6:	00 c0       	rjmp	.+0      	; 0x45c8 <SetupLCD+0x15e>
    45c8:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    45ca:	80 83       	st	Z, r24

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    45cc:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_RS;
    45ce:	20 83       	st	Z, r18
	PORTA_OUTSET = LCD_RW;
    45d0:	9c 93       	st	X, r25
	PORTA_OUTSET = LCD_E;
    45d2:	8c 93       	st	X, r24
    45d4:	cf e3       	ldi	r28, 0x3F	; 63
    45d6:	d1 e0       	ldi	r29, 0x01	; 1
    45d8:	21 97       	sbiw	r28, 0x01	; 1
    45da:	f1 f7       	brne	.-4      	; 0x45d8 <SetupLCD+0x16e>
    45dc:	00 c0       	rjmp	.+0      	; 0x45de <SetupLCD+0x174>
    45de:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    45e0:	80 83       	st	Z, r24
	PORTA_OUTSET = LCD_E;
    45e2:	8c 93       	st	X, r24
	PORTA_OUTCLR = LCD_D4;	 	// Cursor Blink
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;

	TimeOut = 0x0F;
    45e4:	8f e0       	ldi	r24, 0x0F	; 15
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    45e6:	0c c0       	rjmp	.+24     	; 0x4600 <SetupLCD+0x196>
	{
		PORTA_OUTCLR = LCD_E;
    45e8:	80 e2       	ldi	r24, 0x20	; 32
    45ea:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    45ee:	ef e3       	ldi	r30, 0x3F	; 63
    45f0:	f1 e0       	ldi	r31, 0x01	; 1
    45f2:	31 97       	sbiw	r30, 0x01	; 1
    45f4:	f1 f7       	brne	.-4      	; 0x45f2 <SetupLCD+0x188>
    45f6:	00 c0       	rjmp	.+0      	; 0x45f8 <SetupLCD+0x18e>
    45f8:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
    45fa:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    45fe:	89 2f       	mov	r24, r25
    4600:	9f ef       	ldi	r25, 0xFF	; 255
    4602:	98 0f       	add	r25, r24
    4604:	81 11       	cpse	r24, r1
    4606:	f0 cf       	rjmp	.-32     	; 0x45e8 <SetupLCD+0x17e>
	{
		PORTA_OUTCLR = LCD_E;
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    4608:	e6 e0       	ldi	r30, 0x06	; 6
    460a:	f6 e0       	ldi	r31, 0x06	; 6
    460c:	80 e2       	ldi	r24, 0x20	; 32
    460e:	80 83       	st	Z, r24

	// Display Clear
	PORTA_OUTCLR = LCD_RS;
    4610:	20 e4       	ldi	r18, 0x40	; 64
    4612:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    4614:	98 e0       	ldi	r25, 0x08	; 8
    4616:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		// Function set
    4618:	30 e1       	ldi	r19, 0x10	; 16
    461a:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;		// Function set
    461c:	64 e0       	ldi	r22, 0x04	; 4
    461e:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;		// Function set
    4620:	52 e0       	ldi	r21, 0x02	; 2
    4622:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;		
    4624:	41 e0       	ldi	r20, 0x01	; 1
    4626:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    4628:	a5 e0       	ldi	r26, 0x05	; 5
    462a:	b6 e0       	ldi	r27, 0x06	; 6
    462c:	8c 93       	st	X, r24
    462e:	cf e3       	ldi	r28, 0x3F	; 63
    4630:	d1 e0       	ldi	r29, 0x01	; 1
    4632:	21 97       	sbiw	r28, 0x01	; 1
    4634:	f1 f7       	brne	.-4      	; 0x4632 <SetupLCD+0x1c8>
    4636:	00 c0       	rjmp	.+0      	; 0x4638 <SetupLCD+0x1ce>
    4638:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    463a:	80 83       	st	Z, r24

	PORTA_OUTCLR = LCD_RS;
    463c:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    463e:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		
    4640:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;		
    4642:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;	 
    4644:	50 83       	st	Z, r21
	PORTA_OUTSET = LCD_D4;		
    4646:	4c 93       	st	X, r20
	PORTA_OUTSET = LCD_E;
    4648:	8c 93       	st	X, r24
    464a:	cf e3       	ldi	r28, 0x3F	; 63
    464c:	d1 e0       	ldi	r29, 0x01	; 1
    464e:	21 97       	sbiw	r28, 0x01	; 1
    4650:	f1 f7       	brne	.-4      	; 0x464e <SetupLCD+0x1e4>
    4652:	00 c0       	rjmp	.+0      	; 0x4654 <SetupLCD+0x1ea>
    4654:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    4656:	80 83       	st	Z, r24

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    4658:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_RS;
    465a:	20 83       	st	Z, r18
	PORTA_OUTSET = LCD_RW;
    465c:	9c 93       	st	X, r25
	PORTA_OUTSET = LCD_E;
    465e:	8c 93       	st	X, r24
    4660:	cf e3       	ldi	r28, 0x3F	; 63
    4662:	d1 e0       	ldi	r29, 0x01	; 1
    4664:	21 97       	sbiw	r28, 0x01	; 1
    4666:	f1 f7       	brne	.-4      	; 0x4664 <SetupLCD+0x1fa>
    4668:	00 c0       	rjmp	.+0      	; 0x466a <SetupLCD+0x200>
    466a:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    466c:	80 83       	st	Z, r24
	PORTA_OUTSET = LCD_E;
    466e:	8c 93       	st	X, r24
	PORTA_OUTSET = LCD_D4;		
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;

	TimeOut = 0x0F;
    4670:	8f e0       	ldi	r24, 0x0F	; 15
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    4672:	0c c0       	rjmp	.+24     	; 0x468c <SetupLCD+0x222>
	{
		PORTA_OUTCLR = LCD_E;
    4674:	80 e2       	ldi	r24, 0x20	; 32
    4676:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    467a:	ef e3       	ldi	r30, 0x3F	; 63
    467c:	f1 e0       	ldi	r31, 0x01	; 1
    467e:	31 97       	sbiw	r30, 0x01	; 1
    4680:	f1 f7       	brne	.-4      	; 0x467e <SetupLCD+0x214>
    4682:	00 c0       	rjmp	.+0      	; 0x4684 <SetupLCD+0x21a>
    4684:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
    4686:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    468a:	89 2f       	mov	r24, r25
    468c:	9f ef       	ldi	r25, 0xFF	; 255
    468e:	98 0f       	add	r25, r24
    4690:	81 11       	cpse	r24, r1
    4692:	f0 cf       	rjmp	.-32     	; 0x4674 <SetupLCD+0x20a>
	{
		PORTA_OUTCLR = LCD_E;
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    4694:	e6 e0       	ldi	r30, 0x06	; 6
    4696:	f6 e0       	ldi	r31, 0x06	; 6
    4698:	80 e2       	ldi	r24, 0x20	; 32
    469a:	80 83       	st	Z, r24

	// Entry mode
	PORTA_OUTCLR = LCD_RS;
    469c:	20 e4       	ldi	r18, 0x40	; 64
    469e:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    46a0:	98 e0       	ldi	r25, 0x08	; 8
    46a2:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;
    46a4:	30 e1       	ldi	r19, 0x10	; 16
    46a6:	30 83       	st	Z, r19
	PORTA_OUTCLR = LCD_D6;
    46a8:	64 e0       	ldi	r22, 0x04	; 4
    46aa:	60 83       	st	Z, r22
	PORTA_OUTCLR = LCD_D5;
    46ac:	52 e0       	ldi	r21, 0x02	; 2
    46ae:	50 83       	st	Z, r21
	PORTA_OUTCLR = LCD_D4;		
    46b0:	41 e0       	ldi	r20, 0x01	; 1
    46b2:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    46b4:	a5 e0       	ldi	r26, 0x05	; 5
    46b6:	b6 e0       	ldi	r27, 0x06	; 6
    46b8:	8c 93       	st	X, r24
    46ba:	cf e3       	ldi	r28, 0x3F	; 63
    46bc:	d1 e0       	ldi	r29, 0x01	; 1
    46be:	21 97       	sbiw	r28, 0x01	; 1
    46c0:	f1 f7       	brne	.-4      	; 0x46be <SetupLCD+0x254>
    46c2:	00 c0       	rjmp	.+0      	; 0x46c4 <SetupLCD+0x25a>
    46c4:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    46c6:	80 83       	st	Z, r24

	PORTA_OUTCLR = LCD_RS;
    46c8:	20 83       	st	Z, r18
	PORTA_OUTCLR = LCD_RW;
    46ca:	90 83       	st	Z, r25
	PORTA_OUTCLR = LCD_D7;		
    46cc:	30 83       	st	Z, r19
	PORTA_OUTSET = LCD_D6;
    46ce:	6c 93       	st	X, r22
	PORTA_OUTSET = LCD_D5;		// Position increment after char
    46d0:	5c 93       	st	X, r21
	PORTA_OUTCLR = LCD_D4;		// No shift
    46d2:	40 83       	st	Z, r20
	PORTA_OUTSET = LCD_E;
    46d4:	8c 93       	st	X, r24
    46d6:	cf e3       	ldi	r28, 0x3F	; 63
    46d8:	d1 e0       	ldi	r29, 0x01	; 1
    46da:	21 97       	sbiw	r28, 0x01	; 1
    46dc:	f1 f7       	brne	.-4      	; 0x46da <SetupLCD+0x270>
    46de:	00 c0       	rjmp	.+0      	; 0x46e0 <SetupLCD+0x276>
    46e0:	00 00       	nop
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;
    46e2:	80 83       	st	Z, r24

	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
    46e4:	3c 93       	st	X, r19
	PORTA_OUTCLR = LCD_RS;
    46e6:	20 83       	st	Z, r18
	PORTA_OUTSET = LCD_RW;
    46e8:	9c 93       	st	X, r25
	PORTA_OUTSET = LCD_E;
    46ea:	8c 93       	st	X, r24
	PORTA_OUTCLR = LCD_D4;		// No shift
	PORTA_OUTSET = LCD_E;
	_delay_us(Wait);
	PORTA_OUTCLR = LCD_E;

	TimeOut = 0x0F;
    46ec:	8f e0       	ldi	r24, 0x0F	; 15
	PORTA_OUTSET = LCD_D7;
	PORTA_OUTCLR = LCD_RS;
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    46ee:	0c c0       	rjmp	.+24     	; 0x4708 <SetupLCD+0x29e>
	{
		PORTA_OUTCLR = LCD_E;
    46f0:	80 e2       	ldi	r24, 0x20	; 32
    46f2:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    46f6:	ef e3       	ldi	r30, 0x3F	; 63
    46f8:	f1 e0       	ldi	r31, 0x01	; 1
    46fa:	31 97       	sbiw	r30, 0x01	; 1
    46fc:	f1 f7       	brne	.-4      	; 0x46fa <SetupLCD+0x290>
    46fe:	00 c0       	rjmp	.+0      	; 0x4700 <SetupLCD+0x296>
    4700:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
    4702:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
	TimeOut = 0x0F;
	PORTA_OUTSET = LCD_D7;
	PORTA_OUTCLR = LCD_RS;
	PORTA_OUTSET = LCD_RW;
	PORTA_OUTSET = LCD_E;
	while ((LCD_D7) && (TimeOut--))
    4706:	89 2f       	mov	r24, r25
    4708:	9f ef       	ldi	r25, 0xFF	; 255
    470a:	98 0f       	add	r25, r24
    470c:	81 11       	cpse	r24, r1
    470e:	f0 cf       	rjmp	.-32     	; 0x46f0 <SetupLCD+0x286>
	{
		PORTA_OUTCLR = LCD_E;
		_delay_us(Wait);
		PORTA_OUTSET = LCD_E;
	}
	PORTA_OUTCLR = LCD_E;
    4710:	80 e2       	ldi	r24, 0x20	; 32
    4712:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
}
    4716:	df 91       	pop	r29
    4718:	cf 91       	pop	r28
    471a:	08 95       	ret

0000471c <SetLCD>:
/****************************************
* place data on LCD	RS = 0:	Instruction *
*					RS = 1:	Data        *
****************************************/
void SetLCD( int RS, char Buffer[] )
{
    471c:	cf 93       	push	r28
    471e:	df 93       	push	r29
    4720:	ac 01       	movw	r20, r24
	unsigned char cntBuffer = 0;
    4722:	20 e0       	ldi	r18, 0x00	; 0
//#define		LCD_D7  0x10
//#define		LCD_RW  0x8
//#define		LCD_RS  0x40
//#define		LCD_E   0x20	
	
	while (Buffer[cntBuffer] != 0)
    4724:	89 c0       	rjmp	.+274    	; 0x4838 <SetLCD+0x11c>
	{
		
		//Buffer[cntBuffer]=0xff;
		

		PORTA_OUTCLR = LCD_RS;   //PORTA_OUT |= LCD_RS * RS;
    4726:	c6 e0       	ldi	r28, 0x06	; 6
    4728:	d6 e0       	ldi	r29, 0x06	; 6
    472a:	80 e4       	ldi	r24, 0x40	; 64
    472c:	88 83       	st	Y, r24
		PORTA_OUTSET = LCD_RW;
    472e:	a5 e0       	ldi	r26, 0x05	; 5
    4730:	b6 e0       	ldi	r27, 0x06	; 6
    4732:	88 e0       	ldi	r24, 0x08	; 8
    4734:	8c 93       	st	X, r24
			
		PORTA_OUTSET = LCD_E;
    4736:	90 e2       	ldi	r25, 0x20	; 32
    4738:	9c 93       	st	X, r25
		PORTA_OUTCLR = LCD_E;			// 20
    473a:	98 83       	st	Y, r25
		PORTA_OUTSET = LCD_E;
    473c:	9c 93       	st	X, r25
			
//		PORTA_OUT = PORTA_OUT & 0xf0;
//		PORTA_OUT = PORTA_OUT | ((( char)Buffer[cntBuffer] & 0xF0) >> 4);					
		
	//	PORTA_OUT &= 0b11101000;		
		outb = ( char)Buffer[cntBuffer];
    473e:	90 81       	ld	r25, Z
		
		if(outb & 0x10)
    4740:	94 ff       	sbrs	r25, 4
    4742:	04 c0       	rjmp	.+8      	; 0x474c <SetLCD+0x30>
			PORTA_OUTSET = LCD_D4;
    4744:	81 e0       	ldi	r24, 0x01	; 1
    4746:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    474a:	03 c0       	rjmp	.+6      	; 0x4752 <SetLCD+0x36>
		else
			PORTA_OUTCLR = LCD_D4;
    474c:	81 e0       	ldi	r24, 0x01	; 1
    474e:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
			
		if(outb & 0x20)
    4752:	95 ff       	sbrs	r25, 5
    4754:	04 c0       	rjmp	.+8      	; 0x475e <SetLCD+0x42>
			PORTA_OUTSET = LCD_D5;
    4756:	82 e0       	ldi	r24, 0x02	; 2
    4758:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    475c:	03 c0       	rjmp	.+6      	; 0x4764 <SetLCD+0x48>
		else
			PORTA_OUTCLR = LCD_D5;		
    475e:	82 e0       	ldi	r24, 0x02	; 2
    4760:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
			
		if(outb & 0x40)
    4764:	96 ff       	sbrs	r25, 6
    4766:	04 c0       	rjmp	.+8      	; 0x4770 <SetLCD+0x54>
			PORTA_OUTSET = LCD_D6;
    4768:	84 e0       	ldi	r24, 0x04	; 4
    476a:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    476e:	03 c0       	rjmp	.+6      	; 0x4776 <SetLCD+0x5a>
		else
			PORTA_OUTCLR = LCD_D6;
    4770:	84 e0       	ldi	r24, 0x04	; 4
    4772:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
					
		if(outb & 0x80)
    4776:	99 23       	and	r25, r25
    4778:	24 f4       	brge	.+8      	; 0x4782 <SetLCD+0x66>
			PORTA_OUTSET = LCD_D7;
    477a:	80 e1       	ldi	r24, 0x10	; 16
    477c:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    4780:	03 c0       	rjmp	.+6      	; 0x4788 <SetLCD+0x6c>
		else
			PORTA_OUTCLR = LCD_D7;
    4782:	80 e1       	ldi	r24, 0x10	; 16
    4784:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    4788:	8f e3       	ldi	r24, 0x3F	; 63
    478a:	91 e0       	ldi	r25, 0x01	; 1
    478c:	01 97       	sbiw	r24, 0x01	; 1
    478e:	f1 f7       	brne	.-4      	; 0x478c <SetLCD+0x70>
    4790:	00 c0       	rjmp	.+0      	; 0x4792 <SetLCD+0x76>
    4792:	00 00       	nop



		_delay_us(Wait);		
		
		if(RS==0)
    4794:	41 15       	cp	r20, r1
    4796:	51 05       	cpc	r21, r1
    4798:	21 f4       	brne	.+8      	; 0x47a2 <SetLCD+0x86>
			PORTA_OUTCLR = LCD_RS;   //PORTA_OUT |= LCD_RS * RS;
    479a:	80 e4       	ldi	r24, 0x40	; 64
    479c:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    47a0:	06 c0       	rjmp	.+12     	; 0x47ae <SetLCD+0x92>
		else if(RS==1)
    47a2:	41 30       	cpi	r20, 0x01	; 1
    47a4:	51 05       	cpc	r21, r1
    47a6:	19 f4       	brne	.+6      	; 0x47ae <SetLCD+0x92>
			PORTA_OUTSET = LCD_RS;		
    47a8:	80 e4       	ldi	r24, 0x40	; 64
    47aa:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
		
		PORTA_OUTCLR = LCD_RW;		
    47ae:	a6 e0       	ldi	r26, 0x06	; 6
    47b0:	b6 e0       	ldi	r27, 0x06	; 6
    47b2:	88 e0       	ldi	r24, 0x08	; 8
    47b4:	8c 93       	st	X, r24
		
		PORTA_OUTSET = LCD_E;
    47b6:	90 e2       	ldi	r25, 0x20	; 32
    47b8:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    47bc:	cf e3       	ldi	r28, 0x3F	; 63
    47be:	d1 e0       	ldi	r29, 0x01	; 1
    47c0:	21 97       	sbiw	r28, 0x01	; 1
    47c2:	f1 f7       	brne	.-4      	; 0x47c0 <SetLCD+0xa4>
    47c4:	00 c0       	rjmp	.+0      	; 0x47c6 <SetLCD+0xaa>
    47c6:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTCLR = LCD_E;
    47c8:	9c 93       	st	X, r25
		
//		PORTA_OUT &= 0xf0;
//		PORTA_OUT |= ( ( char)Buffer[cntBuffer] & 0x0F );

		//PORTA_OUT &= 0b11101000;
		outb = ( char)Buffer[cntBuffer];
    47ca:	90 81       	ld	r25, Z

		if(outb & 0x1)
    47cc:	90 ff       	sbrs	r25, 0
    47ce:	04 c0       	rjmp	.+8      	; 0x47d8 <SetLCD+0xbc>
			PORTA_OUTSET = LCD_D4;
    47d0:	81 e0       	ldi	r24, 0x01	; 1
    47d2:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    47d6:	03 c0       	rjmp	.+6      	; 0x47de <SetLCD+0xc2>
		else
			PORTA_OUTCLR = LCD_D4;
    47d8:	81 e0       	ldi	r24, 0x01	; 1
    47da:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
		
		if(outb & 0x2)
    47de:	91 ff       	sbrs	r25, 1
    47e0:	04 c0       	rjmp	.+8      	; 0x47ea <SetLCD+0xce>
			PORTA_OUTSET = LCD_D5;
    47e2:	82 e0       	ldi	r24, 0x02	; 2
    47e4:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    47e8:	03 c0       	rjmp	.+6      	; 0x47f0 <SetLCD+0xd4>
		else
			PORTA_OUTCLR = LCD_D5;
    47ea:	82 e0       	ldi	r24, 0x02	; 2
    47ec:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
		
		if(outb & 0x4)
    47f0:	92 ff       	sbrs	r25, 2
    47f2:	04 c0       	rjmp	.+8      	; 0x47fc <SetLCD+0xe0>
			PORTA_OUTSET = LCD_D6;
    47f4:	84 e0       	ldi	r24, 0x04	; 4
    47f6:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    47fa:	03 c0       	rjmp	.+6      	; 0x4802 <SetLCD+0xe6>
		else
			PORTA_OUTCLR = LCD_D6;
    47fc:	84 e0       	ldi	r24, 0x04	; 4
    47fe:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
		
		if(outb & 0x8)
    4802:	93 ff       	sbrs	r25, 3
    4804:	04 c0       	rjmp	.+8      	; 0x480e <SetLCD+0xf2>
			PORTA_OUTSET = LCD_D7;
    4806:	80 e1       	ldi	r24, 0x10	; 16
    4808:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    480c:	03 c0       	rjmp	.+6      	; 0x4814 <SetLCD+0xf8>
		else
			PORTA_OUTCLR = LCD_D7;
    480e:	80 e1       	ldi	r24, 0x10	; 16
    4810:	80 93 06 06 	sts	0x0606, r24	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>
    4814:	ef e3       	ldi	r30, 0x3F	; 63
    4816:	f1 e0       	ldi	r31, 0x01	; 1
    4818:	31 97       	sbiw	r30, 0x01	; 1
    481a:	f1 f7       	brne	.-4      	; 0x4818 <SetLCD+0xfc>
    481c:	00 c0       	rjmp	.+0      	; 0x481e <SetLCD+0x102>
    481e:	00 00       	nop
		//PORTA_OUT |= outb | outc;
		
		
		_delay_us(Wait);
		
		PORTA_OUTSET = LCD_E;
    4820:	90 e2       	ldi	r25, 0x20	; 32
    4822:	90 93 05 06 	sts	0x0605, r25	; 0x800605 <__TEXT_REGION_LENGTH__+0x7de605>
    4826:	cf e3       	ldi	r28, 0x3F	; 63
    4828:	d1 e0       	ldi	r29, 0x01	; 1
    482a:	21 97       	sbiw	r28, 0x01	; 1
    482c:	f1 f7       	brne	.-4      	; 0x482a <SetLCD+0x10e>
    482e:	00 c0       	rjmp	.+0      	; 0x4830 <SetLCD+0x114>
    4830:	00 00       	nop
		_delay_us(Wait);
		PORTA_OUTCLR = LCD_E;		
    4832:	90 93 06 06 	sts	0x0606, r25	; 0x800606 <__TEXT_REGION_LENGTH__+0x7de606>

		cntBuffer++;
    4836:	2f 5f       	subi	r18, 0xFF	; 255
//#define		LCD_D7  0x10
//#define		LCD_RW  0x8
//#define		LCD_RS  0x40
//#define		LCD_E   0x20	
	
	while (Buffer[cntBuffer] != 0)
    4838:	fb 01       	movw	r30, r22
    483a:	e2 0f       	add	r30, r18
    483c:	f1 1d       	adc	r31, r1
    483e:	80 81       	ld	r24, Z
    4840:	81 11       	cpse	r24, r1
    4842:	71 cf       	rjmp	.-286    	; 0x4726 <SetLCD+0xa>
		_delay_us(Wait);
		PORTA_OUTCLR = LCD_E;		

		cntBuffer++;
	}
}
    4844:	df 91       	pop	r29
    4846:	cf 91       	pop	r28
    4848:	08 95       	ret

0000484a <ReadMasterSwitches>:

void ReadMasterSwitches()
{
	unsigned char cntByte;

	PORTB_OUTCLR = P10; //read master
    484a:	e6 e2       	ldi	r30, 0x26	; 38
    484c:	f6 e0       	ldi	r31, 0x06	; 6
    484e:	84 e0       	ldi	r24, 0x04	; 4
    4850:	80 83       	st	Z, r24
	PORTB_OUTCLR = P11; 
    4852:	92 e0       	ldi	r25, 0x02	; 2
    4854:	90 83       	st	Z, r25
	PORTC_OUTCLR = P12; 
    4856:	91 e0       	ldi	r25, 0x01	; 1
    4858:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
	PORTB_OUTCLR = P13; 
    485c:	98 e0       	ldi	r25, 0x08	; 8
    485e:	90 83       	st	Z, r25
	PORTC_OUTSET = P14; 
    4860:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>

	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    4864:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <Wait>
    4868:	03 c0       	rjmp	.+6      	; 0x4870 <ReadMasterSwitches+0x26>
    486a:	8f 5f       	subi	r24, 0xFF	; 255
    486c:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <Wait>
    4870:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <Wait>
    4874:	82 33       	cpi	r24, 0x32	; 50
    4876:	c8 f3       	brcs	.-14     	; 0x486a <ReadMasterSwitches+0x20>
    4878:	20 e0       	ldi	r18, 0x00	; 0
    487a:	4b c0       	rjmp	.+150    	; 0x4912 <ReadMasterSwitches+0xc8>
	for (cntByte=0; cntByte<8; cntByte++)
	{
		// If bit set and switch isn't ON send event is necessery, else reset counter
		unsigned char Bits;                                                                   // = P5;
		//Bits = PORTC_IN;
		Bits = PORTR_IN;  // willem
    487c:	80 91 e8 07 	lds	r24, 0x07E8	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7de7e8>
		Bits &=0x3;
    4880:	83 70       	andi	r24, 0x03	; 3
		if ((!(Bits&(0x01<<cntByte))) && (!(MasterData[cntByte]&0x80)))
    4882:	42 2f       	mov	r20, r18
    4884:	50 e0       	ldi	r21, 0x00	; 0
    4886:	90 e0       	ldi	r25, 0x00	; 0
    4888:	02 2e       	mov	r0, r18
    488a:	02 c0       	rjmp	.+4      	; 0x4890 <ReadMasterSwitches+0x46>
    488c:	95 95       	asr	r25
    488e:	87 95       	ror	r24
    4890:	0a 94       	dec	r0
    4892:	e2 f7       	brpl	.-8      	; 0x488c <ReadMasterSwitches+0x42>
    4894:	bc 01       	movw	r22, r24
    4896:	61 70       	andi	r22, 0x01	; 1
    4898:	77 27       	eor	r23, r23
    489a:	80 fd       	sbrc	r24, 0
    489c:	1e c0       	rjmp	.+60     	; 0x48da <ReadMasterSwitches+0x90>
    489e:	fa 01       	movw	r30, r20
    48a0:	e1 58       	subi	r30, 0x81	; 129
    48a2:	fe 4c       	sbci	r31, 0xCE	; 206
    48a4:	80 81       	ld	r24, Z
    48a6:	88 23       	and	r24, r24
    48a8:	c4 f0       	brlt	.+48     	; 0x48da <ReadMasterSwitches+0x90>
		{
			if ((--MasterData[cntByte])&0x80)
    48aa:	81 50       	subi	r24, 0x01	; 1
    48ac:	fa 01       	movw	r30, r20
    48ae:	e1 58       	subi	r30, 0x81	; 129
    48b0:	fe 4c       	sbci	r31, 0xCE	; 206
    48b2:	80 83       	st	Z, r24
    48b4:	88 23       	and	r24, r24
    48b6:	64 f5       	brge	.+88     	; 0x4910 <ReadMasterSwitches+0xc6>
			{
				EventBuffer[EventBufferPtrTop++] = 0x80 | cntByte;
    48b8:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    48bc:	81 e0       	ldi	r24, 0x01	; 1
    48be:	8e 0f       	add	r24, r30
    48c0:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    48c4:	f0 e0       	ldi	r31, 0x00	; 0
    48c6:	ee 0f       	add	r30, r30
    48c8:	ff 1f       	adc	r31, r31
    48ca:	e9 54       	subi	r30, 0x49	; 73
    48cc:	f9 4d       	sbci	r31, 0xD9	; 217
    48ce:	82 2f       	mov	r24, r18
    48d0:	80 68       	ori	r24, 0x80	; 128
    48d2:	90 e0       	ldi	r25, 0x00	; 0
    48d4:	80 83       	st	Z, r24
    48d6:	91 83       	std	Z+1, r25	; 0x01
    48d8:	1b c0       	rjmp	.+54     	; 0x4910 <ReadMasterSwitches+0xc6>
			}
		}
		else if ((Bits&(0x01<<cntByte))&& (MasterData[cntByte]&0x80))
    48da:	67 2b       	or	r22, r23
    48dc:	c9 f0       	breq	.+50     	; 0x4910 <ReadMasterSwitches+0xc6>
    48de:	fa 01       	movw	r30, r20
    48e0:	e1 58       	subi	r30, 0x81	; 129
    48e2:	fe 4c       	sbci	r31, 0xCE	; 206
    48e4:	80 81       	ld	r24, Z
    48e6:	88 23       	and	r24, r24
    48e8:	9c f4       	brge	.+38     	; 0x4910 <ReadMasterSwitches+0xc6>
		{
			MasterData[cntByte]=ATTACK;
    48ea:	fa 01       	movw	r30, r20
    48ec:	e1 58       	subi	r30, 0x81	; 129
    48ee:	fe 4c       	sbci	r31, 0xCE	; 206
    48f0:	81 e0       	ldi	r24, 0x01	; 1
    48f2:	80 83       	st	Z, r24
			EventBuffer[EventBufferPtrTop++] = 0x180 | cntByte;
    48f4:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    48f8:	8e 0f       	add	r24, r30
    48fa:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    48fe:	f0 e0       	ldi	r31, 0x00	; 0
    4900:	40 68       	ori	r20, 0x80	; 128
    4902:	51 60       	ori	r21, 0x01	; 1
    4904:	ee 0f       	add	r30, r30
    4906:	ff 1f       	adc	r31, r31
    4908:	e9 54       	subi	r30, 0x49	; 73
    490a:	f9 4d       	sbci	r31, 0xD9	; 217
    490c:	40 83       	st	Z, r20
    490e:	51 83       	std	Z+1, r21	; 0x01
	PORTB_OUTCLR = P13; 
	PORTC_OUTSET = P14; 

	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);

	for (cntByte=0; cntByte<8; cntByte++)
    4910:	2f 5f       	subi	r18, 0xFF	; 255
    4912:	28 30       	cpi	r18, 0x08	; 8
    4914:	08 f4       	brcc	.+2      	; 0x4918 <ReadMasterSwitches+0xce>
    4916:	b2 cf       	rjmp	.-156    	; 0x487c <ReadMasterSwitches+0x32>
		{
			MasterData[cntByte]=ATTACK;
			EventBuffer[EventBufferPtrTop++] = 0x180 | cntByte;
		}
	}
}
    4918:	08 95       	ret

0000491a <ReadModuleSwitches>:




void ReadModuleSwitches(unsigned char High)
{
    491a:	cf 93       	push	r28
    491c:	df 93       	push	r29


	
	//P13 = High;  // AS3
	
	if (High==1)
    491e:	81 30       	cpi	r24, 0x01	; 1
    4920:	21 f4       	brne	.+8      	; 0x492a <ReadModuleSwitches+0x10>
		PORTB_OUTSET = P13;
    4922:	98 e0       	ldi	r25, 0x08	; 8
    4924:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
    4928:	03 c0       	rjmp	.+6      	; 0x4930 <ReadModuleSwitches+0x16>
	else
		PORTB_OUTCLR = P13;
    492a:	98 e0       	ldi	r25, 0x08	; 8
    492c:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
	
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;
    4930:	94 e0       	ldi	r25, 0x04	; 4
    4932:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>

	for (cntByte=0; cntByte<8; cntByte++)
    4936:	50 e0       	ldi	r21, 0x00	; 0
    4938:	36 c1       	rjmp	.+620    	; 0x4ba6 <ReadModuleSwitches+0x28c>
			//PORTD_OUT |= cntByte&0x01;  // AS0
			//PORTD_OUT |= cntByte&0x02;  // AS1
			//PORTD_OUT |= cntByte&0x04;  // AS2
			
			
			if(cntByte&0x01)
    493a:	50 ff       	sbrs	r21, 0
    493c:	04 c0       	rjmp	.+8      	; 0x4946 <ReadModuleSwitches+0x2c>
			{	
				PORTB_OUTSET = P10;
    493e:	94 e0       	ldi	r25, 0x04	; 4
    4940:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
    4944:	03 c0       	rjmp	.+6      	; 0x494c <ReadModuleSwitches+0x32>
			}
			else
			{
				PORTB_OUTCLR = P10;
    4946:	94 e0       	ldi	r25, 0x04	; 4
    4948:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
			}
			
			
			if(cntByte&0x02)
    494c:	51 ff       	sbrs	r21, 1
    494e:	04 c0       	rjmp	.+8      	; 0x4958 <ReadModuleSwitches+0x3e>
			{
				PORTB_OUTSET = P11;
    4950:	92 e0       	ldi	r25, 0x02	; 2
    4952:	90 93 25 06 	sts	0x0625, r25	; 0x800625 <__TEXT_REGION_LENGTH__+0x7de625>
    4956:	03 c0       	rjmp	.+6      	; 0x495e <ReadModuleSwitches+0x44>
			}
			else
			{
				PORTB_OUTCLR = P11;
    4958:	92 e0       	ldi	r25, 0x02	; 2
    495a:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <__TEXT_REGION_LENGTH__+0x7de626>
			}
			
			
			if(cntByte&0x04)
    495e:	52 ff       	sbrs	r21, 2
    4960:	04 c0       	rjmp	.+8      	; 0x496a <ReadModuleSwitches+0x50>
			{
				PORTC_OUTSET = P12;
    4962:	91 e0       	ldi	r25, 0x01	; 1
    4964:	90 93 45 06 	sts	0x0645, r25	; 0x800645 <__TEXT_REGION_LENGTH__+0x7de645>
    4968:	03 c0       	rjmp	.+6      	; 0x4970 <ReadModuleSwitches+0x56>
			}
			else
			{
				PORTC_OUTCLR = P12;
    496a:	91 e0       	ldi	r25, 0x01	; 1
    496c:	90 93 46 06 	sts	0x0646, r25	; 0x800646 <__TEXT_REGION_LENGTH__+0x7de646>
			//PORTD_OUT |= 0x2;
			//PORTD_OUT &= ~0x4;
			//PORTD_OUT &= ~0x8;
			//PORTD_OUT &= ~0x10;					

			for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    4970:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <Wait>
    4974:	03 c0       	rjmp	.+6      	; 0x497c <ReadModuleSwitches+0x62>
    4976:	9f 5f       	subi	r25, 0xFF	; 255
    4978:	90 93 b6 26 	sts	0x26B6, r25	; 0x8026b6 <Wait>
    497c:	90 91 b6 26 	lds	r25, 0x26B6	; 0x8026b6 <Wait>
    4980:	92 33       	cpi	r25, 0x32	; 50
    4982:	c8 f3       	brcs	.-14     	; 0x4976 <ReadModuleSwitches+0x5c>

			// If bit set and switch isn't ON send event is necessery, else reset counter
			//Bits = P5;
			//Bits &=0x3;  // willem
			
			if ( (PORTR_IN&0x2)&0x2 ) // SW1 PR1
    4984:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7de7e8>
    4988:	91 ff       	sbrs	r25, 1
    498a:	06 c0       	rjmp	.+12     	; 0x4998 <ReadModuleSwitches+0x7e>
				Bits |= 0x1;
    498c:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4990:	91 60       	ori	r25, 0x01	; 1
    4992:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
    4996:	05 c0       	rjmp	.+10     	; 0x49a2 <ReadModuleSwitches+0x88>
			else
				Bits  &= ~0x1;
    4998:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    499c:	9e 7f       	andi	r25, 0xFE	; 254
    499e:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
			
			if ( (PORTR_IN&0x1)&0x1 ) // SW2 PR0
    49a2:	90 91 e8 07 	lds	r25, 0x07E8	; 0x8007e8 <__TEXT_REGION_LENGTH__+0x7de7e8>
    49a6:	90 ff       	sbrs	r25, 0
    49a8:	06 c0       	rjmp	.+12     	; 0x49b6 <ReadModuleSwitches+0x9c>
				Bits |= 0x2;
    49aa:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    49ae:	92 60       	ori	r25, 0x02	; 2
    49b0:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
    49b4:	05 c0       	rjmp	.+10     	; 0x49c0 <ReadModuleSwitches+0xa6>
			else
				Bits &= ~0x2;
    49b6:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    49ba:	9d 7f       	andi	r25, 0xFD	; 253
    49bc:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
			
				
			if ( (PORTD_IN&0x8)&0x8 )  // SW3 PD3 
    49c0:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    49c4:	93 ff       	sbrs	r25, 3
    49c6:	06 c0       	rjmp	.+12     	; 0x49d4 <ReadModuleSwitches+0xba>
				Bits |= 0x4;
    49c8:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    49cc:	94 60       	ori	r25, 0x04	; 4
    49ce:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
    49d2:	05 c0       	rjmp	.+10     	; 0x49de <ReadModuleSwitches+0xc4>
			else
				Bits &= ~0x4;
    49d4:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    49d8:	9b 7f       	andi	r25, 0xFB	; 251
    49da:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
			
			if ( (PORTD_IN&0x4)&0x4 )  // SW4 PD2
    49de:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    49e2:	92 ff       	sbrs	r25, 2
    49e4:	06 c0       	rjmp	.+12     	; 0x49f2 <ReadModuleSwitches+0xd8>
				Bits |= 0x8;
    49e6:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    49ea:	98 60       	ori	r25, 0x08	; 8
    49ec:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
    49f0:	05 c0       	rjmp	.+10     	; 0x49fc <ReadModuleSwitches+0xe2>
			else
				Bits  &= ~0x8;		
    49f2:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    49f6:	97 7f       	andi	r25, 0xF7	; 247
    49f8:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
				
				
			if ( (PORTD_IN&0x80)&0x80 )  // SW5 PD7
    49fc:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    4a00:	99 23       	and	r25, r25
    4a02:	34 f4       	brge	.+12     	; 0x4a10 <ReadModuleSwitches+0xf6>
			Bits |= 0x10;
    4a04:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4a08:	90 61       	ori	r25, 0x10	; 16
    4a0a:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
    4a0e:	05 c0       	rjmp	.+10     	; 0x4a1a <ReadModuleSwitches+0x100>
			else
			Bits &= ~0x10;
    4a10:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4a14:	9f 7e       	andi	r25, 0xEF	; 239
    4a16:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
			
			if ( (PORTD_IN&0x40)&0x40 )  // SW6 PD6
    4a1a:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    4a1e:	96 ff       	sbrs	r25, 6
    4a20:	06 c0       	rjmp	.+12     	; 0x4a2e <ReadModuleSwitches+0x114>
			Bits |= 0x20;
    4a22:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4a26:	90 62       	ori	r25, 0x20	; 32
    4a28:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
    4a2c:	05 c0       	rjmp	.+10     	; 0x4a38 <ReadModuleSwitches+0x11e>
			else
			Bits  &= ~0x20;		
    4a2e:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4a32:	9f 7d       	andi	r25, 0xDF	; 223
    4a34:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
			
			
			if ( (PORTD_IN&0x20)&0x20 )  // SW7 PD5
    4a38:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    4a3c:	95 ff       	sbrs	r25, 5
    4a3e:	06 c0       	rjmp	.+12     	; 0x4a4c <ReadModuleSwitches+0x132>
			Bits |= 0x40;
    4a40:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4a44:	90 64       	ori	r25, 0x40	; 64
    4a46:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
    4a4a:	05 c0       	rjmp	.+10     	; 0x4a56 <ReadModuleSwitches+0x13c>
			else
			Bits &= ~0x40;
    4a4c:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4a50:	9f 7b       	andi	r25, 0xBF	; 191
    4a52:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
			
			if ( (PORTD_IN&0x10)&0x10 )  // SW8 PD4
    4a56:	90 91 68 06 	lds	r25, 0x0668	; 0x800668 <__TEXT_REGION_LENGTH__+0x7de668>
    4a5a:	94 ff       	sbrs	r25, 4
    4a5c:	06 c0       	rjmp	.+12     	; 0x4a6a <ReadModuleSwitches+0x150>
			Bits |= 0x80;
    4a5e:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4a62:	90 68       	ori	r25, 0x80	; 128
    4a64:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
    4a68:	05 c0       	rjmp	.+10     	; 0x4a74 <ReadModuleSwitches+0x15a>
			else
			Bits  &= ~0x80;							
    4a6a:	90 91 0b 38 	lds	r25, 0x380B	; 0x80380b <Bits>
    4a6e:	9f 77       	andi	r25, 0x7F	; 127
    4a70:	90 93 0b 38 	sts	0x380B, r25	; 0x80380b <Bits>
			

			
			
			for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    4a74:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <Wait>
    4a78:	03 c0       	rjmp	.+6      	; 0x4a80 <ReadModuleSwitches+0x166>
    4a7a:	9f 5f       	subi	r25, 0xFF	; 255
    4a7c:	90 93 b6 26 	sts	0x26B6, r25	; 0x8026b6 <Wait>
    4a80:	90 91 b6 26 	lds	r25, 0x26B6	; 0x8026b6 <Wait>
    4a84:	92 33       	cpi	r25, 0x32	; 50
    4a86:	c8 f3       	brcs	.-14     	; 0x4a7a <ReadModuleSwitches+0x160>
			
			if ((!(Bits&(0x01<<cntModule))) && (!(ModuleData[cntModule+(8*High)][cntByte]&0x80)))
    4a88:	64 2f       	mov	r22, r20
    4a8a:	70 e0       	ldi	r23, 0x00	; 0
    4a8c:	20 91 0b 38 	lds	r18, 0x380B	; 0x80380b <Bits>
    4a90:	30 e0       	ldi	r19, 0x00	; 0
    4a92:	04 2e       	mov	r0, r20
    4a94:	02 c0       	rjmp	.+4      	; 0x4a9a <ReadModuleSwitches+0x180>
    4a96:	35 95       	asr	r19
    4a98:	27 95       	ror	r18
    4a9a:	0a 94       	dec	r0
    4a9c:	e2 f7       	brpl	.-8      	; 0x4a96 <ReadModuleSwitches+0x17c>
    4a9e:	e9 01       	movw	r28, r18
    4aa0:	c1 70       	andi	r28, 0x01	; 1
    4aa2:	dd 27       	eor	r29, r29
    4aa4:	20 fd       	sbrc	r18, 0
    4aa6:	40 c0       	rjmp	.+128    	; 0x4b28 <ReadModuleSwitches+0x20e>
    4aa8:	28 2f       	mov	r18, r24
    4aaa:	30 e0       	ldi	r19, 0x00	; 0
    4aac:	22 0f       	add	r18, r18
    4aae:	33 1f       	adc	r19, r19
    4ab0:	22 0f       	add	r18, r18
    4ab2:	33 1f       	adc	r19, r19
    4ab4:	22 0f       	add	r18, r18
    4ab6:	33 1f       	adc	r19, r19
    4ab8:	26 0f       	add	r18, r22
    4aba:	37 1f       	adc	r19, r23
    4abc:	a5 2f       	mov	r26, r21
    4abe:	b0 e0       	ldi	r27, 0x00	; 0
    4ac0:	f9 01       	movw	r30, r18
    4ac2:	ee 0f       	add	r30, r30
    4ac4:	ff 1f       	adc	r31, r31
    4ac6:	ee 0f       	add	r30, r30
    4ac8:	ff 1f       	adc	r31, r31
    4aca:	ee 0f       	add	r30, r30
    4acc:	ff 1f       	adc	r31, r31
    4ace:	e8 54       	subi	r30, 0x48	; 72
    4ad0:	f7 4d       	sbci	r31, 0xD7	; 215
    4ad2:	ea 0f       	add	r30, r26
    4ad4:	fb 1f       	adc	r31, r27
    4ad6:	90 81       	ld	r25, Z
    4ad8:	99 23       	and	r25, r25
    4ada:	34 f1       	brlt	.+76     	; 0x4b28 <ReadModuleSwitches+0x20e>
			{
				if ((--ModuleData[cntModule+(8*High)][cntByte])&0x80)
    4adc:	91 50       	subi	r25, 0x01	; 1
    4ade:	f9 01       	movw	r30, r18
    4ae0:	ee 0f       	add	r30, r30
    4ae2:	ff 1f       	adc	r31, r31
    4ae4:	ee 0f       	add	r30, r30
    4ae6:	ff 1f       	adc	r31, r31
    4ae8:	ee 0f       	add	r30, r30
    4aea:	ff 1f       	adc	r31, r31
    4aec:	e8 54       	subi	r30, 0x48	; 72
    4aee:	f7 4d       	sbci	r31, 0xD7	; 215
    4af0:	ea 0f       	add	r30, r26
    4af2:	fb 1f       	adc	r31, r27
    4af4:	90 83       	st	Z, r25
    4af6:	99 23       	and	r25, r25
    4af8:	0c f0       	brlt	.+2      	; 0x4afc <ReadModuleSwitches+0x1e2>
    4afa:	4e c0       	rjmp	.+156    	; 0x4b98 <ReadModuleSwitches+0x27e>
				{
					EventBuffer[EventBufferPtrTop++] = ((cntModule+(8*High))<<3) | cntByte;
    4afc:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    4b00:	91 e0       	ldi	r25, 0x01	; 1
    4b02:	9e 0f       	add	r25, r30
    4b04:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <EventBufferPtrTop>
    4b08:	f0 e0       	ldi	r31, 0x00	; 0
    4b0a:	22 0f       	add	r18, r18
    4b0c:	33 1f       	adc	r19, r19
    4b0e:	22 0f       	add	r18, r18
    4b10:	33 1f       	adc	r19, r19
    4b12:	22 0f       	add	r18, r18
    4b14:	33 1f       	adc	r19, r19
    4b16:	a2 2b       	or	r26, r18
    4b18:	b3 2b       	or	r27, r19
    4b1a:	ee 0f       	add	r30, r30
    4b1c:	ff 1f       	adc	r31, r31
    4b1e:	e9 54       	subi	r30, 0x49	; 73
    4b20:	f9 4d       	sbci	r31, 0xD9	; 217
    4b22:	a0 83       	st	Z, r26
    4b24:	b1 83       	std	Z+1, r27	; 0x01
    4b26:	38 c0       	rjmp	.+112    	; 0x4b98 <ReadModuleSwitches+0x27e>
				}
			}
			else if ((Bits&(0x01<<cntModule)) && (ModuleData[cntModule+(8*High)][cntByte]&0x80))
    4b28:	cd 2b       	or	r28, r29
    4b2a:	b1 f1       	breq	.+108    	; 0x4b98 <ReadModuleSwitches+0x27e>
    4b2c:	28 2f       	mov	r18, r24
    4b2e:	30 e0       	ldi	r19, 0x00	; 0
    4b30:	22 0f       	add	r18, r18
    4b32:	33 1f       	adc	r19, r19
    4b34:	22 0f       	add	r18, r18
    4b36:	33 1f       	adc	r19, r19
    4b38:	22 0f       	add	r18, r18
    4b3a:	33 1f       	adc	r19, r19
    4b3c:	26 0f       	add	r18, r22
    4b3e:	37 1f       	adc	r19, r23
    4b40:	65 2f       	mov	r22, r21
    4b42:	70 e0       	ldi	r23, 0x00	; 0
    4b44:	f9 01       	movw	r30, r18
    4b46:	ee 0f       	add	r30, r30
    4b48:	ff 1f       	adc	r31, r31
    4b4a:	ee 0f       	add	r30, r30
    4b4c:	ff 1f       	adc	r31, r31
    4b4e:	ee 0f       	add	r30, r30
    4b50:	ff 1f       	adc	r31, r31
    4b52:	e8 54       	subi	r30, 0x48	; 72
    4b54:	f7 4d       	sbci	r31, 0xD7	; 215
    4b56:	e6 0f       	add	r30, r22
    4b58:	f7 1f       	adc	r31, r23
    4b5a:	90 81       	ld	r25, Z
    4b5c:	99 23       	and	r25, r25
    4b5e:	e4 f4       	brge	.+56     	; 0x4b98 <ReadModuleSwitches+0x27e>
			{
				ModuleData[cntModule+(8*High)][cntByte]=ATTACK;
    4b60:	22 0f       	add	r18, r18
    4b62:	33 1f       	adc	r19, r19
    4b64:	22 0f       	add	r18, r18
    4b66:	33 1f       	adc	r19, r19
    4b68:	22 0f       	add	r18, r18
    4b6a:	33 1f       	adc	r19, r19
    4b6c:	f9 01       	movw	r30, r18
    4b6e:	e8 54       	subi	r30, 0x48	; 72
    4b70:	f7 4d       	sbci	r31, 0xD7	; 215
    4b72:	e6 0f       	add	r30, r22
    4b74:	f7 1f       	adc	r31, r23
    4b76:	91 e0       	ldi	r25, 0x01	; 1
    4b78:	90 83       	st	Z, r25
				EventBuffer[EventBufferPtrTop++] = 0x100 | ((cntModule+(8*High))<<3) | cntByte;
    4b7a:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    4b7e:	9e 0f       	add	r25, r30
    4b80:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <EventBufferPtrTop>
    4b84:	f0 e0       	ldi	r31, 0x00	; 0
    4b86:	31 60       	ori	r19, 0x01	; 1
    4b88:	26 2b       	or	r18, r22
    4b8a:	37 2b       	or	r19, r23
    4b8c:	ee 0f       	add	r30, r30
    4b8e:	ff 1f       	adc	r31, r31
    4b90:	e9 54       	subi	r30, 0x49	; 73
    4b92:	f9 4d       	sbci	r31, 0xD9	; 217
    4b94:	20 83       	st	Z, r18
    4b96:	31 83       	std	Z+1, r19	; 0x01
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;

	for (cntByte=0; cntByte<8; cntByte++)
	{
		for (cntModule=0; cntModule<8; cntModule++)
    4b98:	4f 5f       	subi	r20, 0xFF	; 255
    4b9a:	01 c0       	rjmp	.+2      	; 0x4b9e <ReadModuleSwitches+0x284>
    4b9c:	40 e0       	ldi	r20, 0x00	; 0
    4b9e:	48 30       	cpi	r20, 0x08	; 8
    4ba0:	08 f4       	brcc	.+2      	; 0x4ba4 <ReadModuleSwitches+0x28a>
    4ba2:	cb ce       	rjmp	.-618    	; 0x493a <ReadModuleSwitches+0x20>
		PORTB_OUTCLR = P13;
	
	//P14 = 0; // Not read master  AS4
	PORTC_OUTCLR = P14;

	for (cntByte=0; cntByte<8; cntByte++)
    4ba4:	5f 5f       	subi	r21, 0xFF	; 255
    4ba6:	58 30       	cpi	r21, 0x08	; 8
    4ba8:	c8 f3       	brcs	.-14     	; 0x4b9c <ReadModuleSwitches+0x282>
				ModuleData[cntModule+(8*High)][cntByte]=ATTACK;
				EventBuffer[EventBufferPtrTop++] = 0x100 | ((cntModule+(8*High))<<3) | cntByte;
			}
		}
	}
}
    4baa:	df 91       	pop	r29
    4bac:	cf 91       	pop	r28
    4bae:	08 95       	ret

00004bb0 <ReadConsole>:

unsigned char Bits;

void ReadConsole()
{
	ReadMasterSwitches();
    4bb0:	0e 94 25 24 	call	0x484a	; 0x484a <ReadMasterSwitches>
	//PORTB_OUTCLR = P10;
	//PORTB_OUTCLR = P11;
	//PORTC_OUTCLR = P12;
	//PORTB_OUTCLR = P13;
	//PORTC_OUTSET = P14;
	for (Wait=0; Wait<SET_SWITCH_WAIT; Wait++);
    4bb4:	10 92 b6 26 	sts	0x26B6, r1	; 0x8026b6 <Wait>
    4bb8:	03 c0       	rjmp	.+6      	; 0x4bc0 <ReadConsole+0x10>
    4bba:	8f 5f       	subi	r24, 0xFF	; 255
    4bbc:	80 93 b6 26 	sts	0x26B6, r24	; 0x8026b6 <Wait>
    4bc0:	80 91 b6 26 	lds	r24, 0x26B6	; 0x8026b6 <Wait>
    4bc4:	82 33       	cpi	r24, 0x32	; 50
    4bc6:	c8 f3       	brcs	.-14     	; 0x4bba <ReadConsole+0xa>
	ReadModuleSwitches(MODULE1_8);
    4bc8:	80 e0       	ldi	r24, 0x00	; 0
    4bca:	0e 94 8d 24 	call	0x491a	; 0x491a <ReadModuleSwitches>
	ReadModuleSwitches(MODULE9_16);
    4bce:	81 e0       	ldi	r24, 0x01	; 1
    4bd0:	0e 94 8d 24 	call	0x491a	; 0x491a <ReadModuleSwitches>
    4bd4:	08 95       	ret

00004bd6 <ShowConfig>:
	}
}


void ShowConfig()
{
    4bd6:	cf 93       	push	r28
    4bd8:	df 93       	push	r29
    4bda:	cd b7       	in	r28, 0x3d	; 61
    4bdc:	de b7       	in	r29, 0x3e	; 62
    4bde:	61 97       	sbiw	r28, 0x11	; 17
    4be0:	cd bf       	out	0x3d, r28	; 61
    4be2:	de bf       	out	0x3e, r29	; 62
	char TextBuffer[17];
	unsigned char Ptr=0;

	
	TextBuffer[Ptr++] = 'S'; //"StMod:x Telco:xx"
    4be4:	83 e5       	ldi	r24, 0x53	; 83
    4be6:	89 83       	std	Y+1, r24	; 0x01
	TextBuffer[Ptr++] = 't'; //"StMod:xx Telco:x"
    4be8:	84 e7       	ldi	r24, 0x74	; 116
    4bea:	8a 83       	std	Y+2, r24	; 0x02
	TextBuffer[Ptr++] = 'M';
    4bec:	8d e4       	ldi	r24, 0x4D	; 77
    4bee:	8b 83       	std	Y+3, r24	; 0x03
	TextBuffer[Ptr++] = 'o';
    4bf0:	8f e6       	ldi	r24, 0x6F	; 111
    4bf2:	8c 83       	std	Y+4, r24	; 0x04
	TextBuffer[Ptr++] = 'd';
    4bf4:	84 e6       	ldi	r24, 0x64	; 100
    4bf6:	8d 83       	std	Y+5, r24	; 0x05
	TextBuffer[Ptr++] = ':';
    4bf8:	8a e3       	ldi	r24, 0x3A	; 58
    4bfa:	8e 83       	std	Y+6, r24	; 0x06
	
	if ((NrOfTriples/10)!=0)
    4bfc:	20 91 6f 24 	lds	r18, 0x246F	; 0x80246f <NrOfTriples>
    4c00:	2a 30       	cpi	r18, 0x0A	; 10
    4c02:	58 f0       	brcs	.+22     	; 0x4c1a <ShowConfig+0x44>
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTriples/10);
    4c04:	8d ec       	ldi	r24, 0xCD	; 205
    4c06:	28 9f       	mul	r18, r24
    4c08:	81 2d       	mov	r24, r1
    4c0a:	11 24       	eor	r1, r1
    4c0c:	86 95       	lsr	r24
    4c0e:	86 95       	lsr	r24
    4c10:	86 95       	lsr	r24
    4c12:	80 5d       	subi	r24, 0xD0	; 208
    4c14:	8f 83       	std	Y+7, r24	; 0x07
    4c16:	87 e0       	ldi	r24, 0x07	; 7
    4c18:	01 c0       	rjmp	.+2      	; 0x4c1c <ShowConfig+0x46>
	TextBuffer[Ptr++] = 'S'; //"StMod:x Telco:xx"
	TextBuffer[Ptr++] = 't'; //"StMod:xx Telco:x"
	TextBuffer[Ptr++] = 'M';
	TextBuffer[Ptr++] = 'o';
	TextBuffer[Ptr++] = 'd';
	TextBuffer[Ptr++] = ':';
    4c1a:	86 e0       	ldi	r24, 0x06	; 6
	if ((NrOfTriples/10)!=0)
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTriples/10);
	}

	TextBuffer[Ptr++] = 0x30+(NrOfTriples%10);
    4c1c:	e1 e0       	ldi	r30, 0x01	; 1
    4c1e:	f0 e0       	ldi	r31, 0x00	; 0
    4c20:	ec 0f       	add	r30, r28
    4c22:	fd 1f       	adc	r31, r29
    4c24:	e8 0f       	add	r30, r24
    4c26:	f1 1d       	adc	r31, r1
    4c28:	9d ec       	ldi	r25, 0xCD	; 205
    4c2a:	29 9f       	mul	r18, r25
    4c2c:	91 2d       	mov	r25, r1
    4c2e:	11 24       	eor	r1, r1
    4c30:	96 95       	lsr	r25
    4c32:	96 95       	lsr	r25
    4c34:	96 95       	lsr	r25
    4c36:	99 0f       	add	r25, r25
    4c38:	39 2f       	mov	r19, r25
    4c3a:	33 0f       	add	r19, r19
    4c3c:	33 0f       	add	r19, r19
    4c3e:	93 0f       	add	r25, r19
    4c40:	29 1b       	sub	r18, r25
    4c42:	20 5d       	subi	r18, 0xD0	; 208
    4c44:	20 83       	st	Z, r18
	
	TextBuffer[Ptr++] = ' ';
    4c46:	91 e0       	ldi	r25, 0x01	; 1
    4c48:	98 0f       	add	r25, r24
    4c4a:	e1 e0       	ldi	r30, 0x01	; 1
    4c4c:	f0 e0       	ldi	r31, 0x00	; 0
    4c4e:	ec 0f       	add	r30, r28
    4c50:	fd 1f       	adc	r31, r29
    4c52:	e9 0f       	add	r30, r25
    4c54:	f1 1d       	adc	r31, r1
    4c56:	90 e2       	ldi	r25, 0x20	; 32
    4c58:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'T';
    4c5a:	92 e0       	ldi	r25, 0x02	; 2
    4c5c:	98 0f       	add	r25, r24
    4c5e:	e1 e0       	ldi	r30, 0x01	; 1
    4c60:	f0 e0       	ldi	r31, 0x00	; 0
    4c62:	ec 0f       	add	r30, r28
    4c64:	fd 1f       	adc	r31, r29
    4c66:	e9 0f       	add	r30, r25
    4c68:	f1 1d       	adc	r31, r1
    4c6a:	94 e5       	ldi	r25, 0x54	; 84
    4c6c:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'e';
    4c6e:	93 e0       	ldi	r25, 0x03	; 3
    4c70:	98 0f       	add	r25, r24
    4c72:	e1 e0       	ldi	r30, 0x01	; 1
    4c74:	f0 e0       	ldi	r31, 0x00	; 0
    4c76:	ec 0f       	add	r30, r28
    4c78:	fd 1f       	adc	r31, r29
    4c7a:	e9 0f       	add	r30, r25
    4c7c:	f1 1d       	adc	r31, r1
    4c7e:	95 e6       	ldi	r25, 0x65	; 101
    4c80:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'l';
    4c82:	94 e0       	ldi	r25, 0x04	; 4
    4c84:	98 0f       	add	r25, r24
    4c86:	e1 e0       	ldi	r30, 0x01	; 1
    4c88:	f0 e0       	ldi	r31, 0x00	; 0
    4c8a:	ec 0f       	add	r30, r28
    4c8c:	fd 1f       	adc	r31, r29
    4c8e:	e9 0f       	add	r30, r25
    4c90:	f1 1d       	adc	r31, r1
    4c92:	9c e6       	ldi	r25, 0x6C	; 108
    4c94:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'c';
    4c96:	95 e0       	ldi	r25, 0x05	; 5
    4c98:	98 0f       	add	r25, r24
    4c9a:	e1 e0       	ldi	r30, 0x01	; 1
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	ec 0f       	add	r30, r28
    4ca0:	fd 1f       	adc	r31, r29
    4ca2:	e9 0f       	add	r30, r25
    4ca4:	f1 1d       	adc	r31, r1
    4ca6:	93 e6       	ldi	r25, 0x63	; 99
    4ca8:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 'o';
    4caa:	96 e0       	ldi	r25, 0x06	; 6
    4cac:	98 0f       	add	r25, r24
    4cae:	e1 e0       	ldi	r30, 0x01	; 1
    4cb0:	f0 e0       	ldi	r31, 0x00	; 0
    4cb2:	ec 0f       	add	r30, r28
    4cb4:	fd 1f       	adc	r31, r29
    4cb6:	e9 0f       	add	r30, r25
    4cb8:	f1 1d       	adc	r31, r1
    4cba:	9f e6       	ldi	r25, 0x6F	; 111
    4cbc:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = ':';
    4cbe:	28 e0       	ldi	r18, 0x08	; 8
    4cc0:	28 0f       	add	r18, r24
    4cc2:	97 e0       	ldi	r25, 0x07	; 7
    4cc4:	98 0f       	add	r25, r24
    4cc6:	e1 e0       	ldi	r30, 0x01	; 1
    4cc8:	f0 e0       	ldi	r31, 0x00	; 0
    4cca:	ec 0f       	add	r30, r28
    4ccc:	fd 1f       	adc	r31, r29
    4cce:	e9 0f       	add	r30, r25
    4cd0:	f1 1d       	adc	r31, r1
    4cd2:	9a e3       	ldi	r25, 0x3A	; 58
    4cd4:	90 83       	st	Z, r25
	
	if ((NrOfTelcos/10)!=0)
    4cd6:	90 91 70 24 	lds	r25, 0x2470	; 0x802470 <NrOfTelcos>
    4cda:	9a 30       	cpi	r25, 0x0A	; 10
    4cdc:	88 f0       	brcs	.+34     	; 0x4d00 <ShowConfig+0x12a>
	{
		TextBuffer[Ptr++] = 0x30+(NrOfTelcos/10);
    4cde:	e1 e0       	ldi	r30, 0x01	; 1
    4ce0:	f0 e0       	ldi	r31, 0x00	; 0
    4ce2:	ec 0f       	add	r30, r28
    4ce4:	fd 1f       	adc	r31, r29
    4ce6:	e2 0f       	add	r30, r18
    4ce8:	f1 1d       	adc	r31, r1
    4cea:	2d ec       	ldi	r18, 0xCD	; 205
    4cec:	92 9f       	mul	r25, r18
    4cee:	21 2d       	mov	r18, r1
    4cf0:	11 24       	eor	r1, r1
    4cf2:	26 95       	lsr	r18
    4cf4:	26 95       	lsr	r18
    4cf6:	26 95       	lsr	r18
    4cf8:	20 5d       	subi	r18, 0xD0	; 208
    4cfa:	20 83       	st	Z, r18
    4cfc:	29 e0       	ldi	r18, 0x09	; 9
    4cfe:	28 0f       	add	r18, r24
	////	else
	////	{
	////		TextBuffer[Ptr++] = ' ';
	////	}
	
	TextBuffer[Ptr++] = 0x30+(NrOfTelcos%10);
    4d00:	31 e0       	ldi	r19, 0x01	; 1
    4d02:	32 0f       	add	r19, r18
    4d04:	e1 e0       	ldi	r30, 0x01	; 1
    4d06:	f0 e0       	ldi	r31, 0x00	; 0
    4d08:	ec 0f       	add	r30, r28
    4d0a:	fd 1f       	adc	r31, r29
    4d0c:	e2 0f       	add	r30, r18
    4d0e:	f1 1d       	adc	r31, r1
    4d10:	8d ec       	ldi	r24, 0xCD	; 205
    4d12:	98 9f       	mul	r25, r24
    4d14:	81 2d       	mov	r24, r1
    4d16:	11 24       	eor	r1, r1
    4d18:	86 95       	lsr	r24
    4d1a:	86 95       	lsr	r24
    4d1c:	86 95       	lsr	r24
    4d1e:	88 0f       	add	r24, r24
    4d20:	28 2f       	mov	r18, r24
    4d22:	22 0f       	add	r18, r18
    4d24:	22 0f       	add	r18, r18
    4d26:	82 0f       	add	r24, r18
    4d28:	98 1b       	sub	r25, r24
    4d2a:	90 5d       	subi	r25, 0xD0	; 208
    4d2c:	90 83       	st	Z, r25
	TextBuffer[Ptr++] = 0;
    4d2e:	e1 e0       	ldi	r30, 0x01	; 1
    4d30:	f0 e0       	ldi	r31, 0x00	; 0
    4d32:	ec 0f       	add	r30, r28
    4d34:	fd 1f       	adc	r31, r29
    4d36:	e3 0f       	add	r30, r19
    4d38:	f1 1d       	adc	r31, r1
    4d3a:	10 82       	st	Z, r1
	
	SetLCD(0,"\xC0");
    4d3c:	6f e2       	ldi	r22, 0x2F	; 47
    4d3e:	70 e2       	ldi	r23, 0x20	; 32
    4d40:	80 e0       	ldi	r24, 0x00	; 0
    4d42:	90 e0       	ldi	r25, 0x00	; 0
    4d44:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>
	SetLCD(1,TextBuffer);
    4d48:	be 01       	movw	r22, r28
    4d4a:	6f 5f       	subi	r22, 0xFF	; 255
    4d4c:	7f 4f       	sbci	r23, 0xFF	; 255
    4d4e:	81 e0       	ldi	r24, 0x01	; 1
    4d50:	90 e0       	ldi	r25, 0x00	; 0
    4d52:	0e 94 8e 23 	call	0x471c	; 0x471c <SetLCD>

}
    4d56:	61 96       	adiw	r28, 0x11	; 17
    4d58:	cd bf       	out	0x3d, r28	; 61
    4d5a:	de bf       	out	0x3e, r29	; 62
    4d5c:	df 91       	pop	r29
    4d5e:	cf 91       	pop	r28
    4d60:	08 95       	ret

00004d62 <DoSerial>:
char IDString[30]= "D&R Airlab v2.04 - 08/2006";



void DoSerial()
{
    4d62:	0f 93       	push	r16
    4d64:	1f 93       	push	r17
    4d66:	cf 93       	push	r28
    4d68:	df 93       	push	r29

	
	unsigned char Event = SerialBufferIn[SerialBufferInPtrBottom++];
    4d6a:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <SerialBufferInPtrBottom>
    4d6e:	c1 e0       	ldi	r28, 0x01	; 1
    4d70:	ce 0f       	add	r28, r30
    4d72:	f0 e0       	ldi	r31, 0x00	; 0
    4d74:	e0 51       	subi	r30, 0x10	; 16
    4d76:	fd 4d       	sbci	r31, 0xDD	; 221
    4d78:	e0 81       	ld	r30, Z
	unsigned char Channel = SerialBufferIn[SerialBufferInPtrBottom++];
    4d7a:	a1 e0       	ldi	r26, 0x01	; 1
    4d7c:	ac 0f       	add	r26, r28
    4d7e:	d0 e0       	ldi	r29, 0x00	; 0
    4d80:	c0 51       	subi	r28, 0x10	; 16
    4d82:	dd 4d       	sbci	r29, 0xDD	; 221
    4d84:	28 81       	ld	r18, Y
	unsigned char Data = SerialBufferIn[SerialBufferInPtrBottom++];
    4d86:	81 e0       	ldi	r24, 0x01	; 1
    4d88:	8a 0f       	add	r24, r26
    4d8a:	80 93 ee 22 	sts	0x22EE, r24	; 0x8022ee <SerialBufferInPtrBottom>
    4d8e:	b0 e0       	ldi	r27, 0x00	; 0
    4d90:	a0 51       	subi	r26, 0x10	; 16
    4d92:	bd 4d       	sbci	r27, 0xDD	; 221
    4d94:	cc 91       	ld	r28, X
	
	//unsigned char EEread[16], wr[16], Address;

	switch (Event)
    4d96:	8e 2f       	mov	r24, r30
    4d98:	90 e0       	ldi	r25, 0x00	; 0
    4d9a:	fc 01       	movw	r30, r24
    4d9c:	e0 58       	subi	r30, 0x80	; 128
    4d9e:	f1 09       	sbc	r31, r1
    4da0:	e1 37       	cpi	r30, 0x71	; 113
    4da2:	f1 05       	cpc	r31, r1
    4da4:	08 f0       	brcs	.+2      	; 0x4da8 <DoSerial+0x46>
    4da6:	f7 c1       	rjmp	.+1006   	; 0x5196 <DoSerial+0x434>
    4da8:	88 27       	eor	r24, r24
    4daa:	e9 54       	subi	r30, 0x49	; 73
    4dac:	fe 4f       	sbci	r31, 0xFE	; 254
    4dae:	8f 4f       	sbci	r24, 0xFF	; 255
    4db0:	0c 94 8f 29 	jmp	0x531e	; 0x531e <__tablejump2__>
	{
		case SERIAL_ON:
		{
			EventBuffer[EventBufferPtrTop++] = (unsigned int)ON | (Channel<<3);
    4db4:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    4db8:	81 e0       	ldi	r24, 0x01	; 1
    4dba:	8e 0f       	add	r24, r30
    4dbc:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    4dc0:	f0 e0       	ldi	r31, 0x00	; 0
    4dc2:	30 e0       	ldi	r19, 0x00	; 0
    4dc4:	22 0f       	add	r18, r18
    4dc6:	33 1f       	adc	r19, r19
    4dc8:	22 0f       	add	r18, r18
    4dca:	33 1f       	adc	r19, r19
    4dcc:	22 0f       	add	r18, r18
    4dce:	33 1f       	adc	r19, r19
    4dd0:	23 60       	ori	r18, 0x03	; 3
    4dd2:	ee 0f       	add	r30, r30
    4dd4:	ff 1f       	adc	r31, r31
    4dd6:	e9 54       	subi	r30, 0x49	; 73
    4dd8:	f9 4d       	sbci	r31, 0xD9	; 217
    4dda:	20 83       	st	Z, r18
    4ddc:	31 83       	std	Z+1, r19	; 0x01
		}
		break;
    4dde:	db c1       	rjmp	.+950    	; 0x5196 <DoSerial+0x434>
		case SERIAL_CUE:
		{
			EventBuffer[EventBufferPtrTop++] = (unsigned int)PFL | (Channel<<3);
    4de0:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    4de4:	81 e0       	ldi	r24, 0x01	; 1
    4de6:	8e 0f       	add	r24, r30
    4de8:	80 93 38 29 	sts	0x2938, r24	; 0x802938 <EventBufferPtrTop>
    4dec:	f0 e0       	ldi	r31, 0x00	; 0
    4dee:	30 e0       	ldi	r19, 0x00	; 0
    4df0:	22 0f       	add	r18, r18
    4df2:	33 1f       	adc	r19, r19
    4df4:	22 0f       	add	r18, r18
    4df6:	33 1f       	adc	r19, r19
    4df8:	22 0f       	add	r18, r18
    4dfa:	33 1f       	adc	r19, r19
    4dfc:	22 60       	ori	r18, 0x02	; 2
    4dfe:	ee 0f       	add	r30, r30
    4e00:	ff 1f       	adc	r31, r31
    4e02:	e9 54       	subi	r30, 0x49	; 73
    4e04:	f9 4d       	sbci	r31, 0xD9	; 217
    4e06:	20 83       	st	Z, r18
    4e08:	31 83       	std	Z+1, r19	; 0x01
		}
		break;
    4e0a:	c5 c1       	rjmp	.+906    	; 0x5196 <DoSerial+0x434>
		case TIMER_START:
		{
			GlobalTimerActive = 1;
    4e0c:	81 e0       	ldi	r24, 0x01	; 1
    4e0e:	80 93 9f 31 	sts	0x319F, r24	; 0x80319f <GlobalTimerActive>
		}
		break;
    4e12:	c1 c1       	rjmp	.+898    	; 0x5196 <DoSerial+0x434>
		case TIMER_STOP:
		{
			GlobalTimerActive = 0;
    4e14:	10 92 9f 31 	sts	0x319F, r1	; 0x80319f <GlobalTimerActive>
		}
		break;
    4e18:	be c1       	rjmp	.+892    	; 0x5196 <DoSerial+0x434>
		case TIMER_RESET:
		{
			TimeAndDate.Hours = 0;
    4e1a:	ea e9       	ldi	r30, 0x9A	; 154
    4e1c:	f1 e3       	ldi	r31, 0x31	; 49
    4e1e:	13 82       	std	Z+3, r1	; 0x03
			TimeAndDate.Minutes = 0;
    4e20:	12 82       	std	Z+2, r1	; 0x02
			TimeAndDate.Seconds = 0;
    4e22:	11 82       	std	Z+1, r1	; 0x01
			TimeAndDate.Frames = 0;
    4e24:	10 82       	st	Z, r1
		}
		break;
    4e26:	b7 c1       	rjmp	.+878    	; 0x5196 <DoSerial+0x434>
		case SERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;
			ConsoleModuleSettings[Channel][0] = Data;
    4e28:	42 2f       	mov	r20, r18
    4e2a:	50 e0       	ldi	r21, 0x00	; 0
    4e2c:	8d e1       	ldi	r24, 0x1D	; 29
    4e2e:	84 9f       	mul	r24, r20
    4e30:	f0 01       	movw	r30, r0
    4e32:	85 9f       	mul	r24, r21
    4e34:	f0 0d       	add	r31, r0
    4e36:	11 24       	eor	r1, r1
    4e38:	e1 56       	subi	r30, 0x61	; 97
    4e3a:	f0 4d       	sbci	r31, 0xD0	; 208
    4e3c:	c0 83       	st	Z, r28
			for (cntByte=1; cntByte<29; cntByte++)
    4e3e:	81 e0       	ldi	r24, 0x01	; 1
    4e40:	16 c0       	rjmp	.+44     	; 0x4e6e <DoSerial+0x10c>
			{
				ConsoleModuleSettings[Channel][cntByte] = SerialBufferIn[SerialBufferInPtrBottom++];
    4e42:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <SerialBufferInPtrBottom>
    4e46:	91 e0       	ldi	r25, 0x01	; 1
    4e48:	9e 0f       	add	r25, r30
    4e4a:	90 93 ee 22 	sts	0x22EE, r25	; 0x8022ee <SerialBufferInPtrBottom>
    4e4e:	f0 e0       	ldi	r31, 0x00	; 0
    4e50:	e0 51       	subi	r30, 0x10	; 16
    4e52:	fd 4d       	sbci	r31, 0xDD	; 221
    4e54:	90 81       	ld	r25, Z
    4e56:	3d e1       	ldi	r19, 0x1D	; 29
    4e58:	34 9f       	mul	r19, r20
    4e5a:	f0 01       	movw	r30, r0
    4e5c:	35 9f       	mul	r19, r21
    4e5e:	f0 0d       	add	r31, r0
    4e60:	11 24       	eor	r1, r1
    4e62:	e1 56       	subi	r30, 0x61	; 97
    4e64:	f0 4d       	sbci	r31, 0xD0	; 208
    4e66:	e8 0f       	add	r30, r24
    4e68:	f1 1d       	adc	r31, r1
    4e6a:	90 83       	st	Z, r25
		break;
		case SERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;
			ConsoleModuleSettings[Channel][0] = Data;
			for (cntByte=1; cntByte<29; cntByte++)
    4e6c:	8f 5f       	subi	r24, 0xFF	; 255
    4e6e:	8d 31       	cpi	r24, 0x1D	; 29
    4e70:	40 f3       	brcs	.-48     	; 0x4e42 <DoSerial+0xe0>
    4e72:	91 c1       	rjmp	.+802    	; 0x5196 <DoSerial+0x434>
		}
		break;
		case SERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;
			ConsoleMasterSettings[0] = Data;
    4e74:	c0 93 3b 29 	sts	0x293B, r28	; 0x80293b <ConsoleMasterSettings>
			for (cntByte=1; cntByte<5; cntByte++)
    4e78:	81 e0       	ldi	r24, 0x01	; 1
    4e7a:	11 c0       	rjmp	.+34     	; 0x4e9e <DoSerial+0x13c>
			{
				ConsoleMasterSettings[cntByte] = SerialBufferIn[SerialBufferInPtrBottom++];
    4e7c:	28 2f       	mov	r18, r24
    4e7e:	30 e0       	ldi	r19, 0x00	; 0
    4e80:	e0 91 ee 22 	lds	r30, 0x22EE	; 0x8022ee <SerialBufferInPtrBottom>
    4e84:	91 e0       	ldi	r25, 0x01	; 1
    4e86:	9e 0f       	add	r25, r30
    4e88:	90 93 ee 22 	sts	0x22EE, r25	; 0x8022ee <SerialBufferInPtrBottom>
    4e8c:	f0 e0       	ldi	r31, 0x00	; 0
    4e8e:	e0 51       	subi	r30, 0x10	; 16
    4e90:	fd 4d       	sbci	r31, 0xDD	; 221
    4e92:	90 81       	ld	r25, Z
    4e94:	f9 01       	movw	r30, r18
    4e96:	e5 5c       	subi	r30, 0xC5	; 197
    4e98:	f6 4d       	sbci	r31, 0xD6	; 214
    4e9a:	90 83       	st	Z, r25
		break;
		case SERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;
			ConsoleMasterSettings[0] = Data;
			for (cntByte=1; cntByte<5; cntByte++)
    4e9c:	8f 5f       	subi	r24, 0xFF	; 255
    4e9e:	85 30       	cpi	r24, 0x05	; 5
    4ea0:	68 f3       	brcs	.-38     	; 0x4e7c <DoSerial+0x11a>
    4ea2:	79 c1       	rjmp	.+754    	; 0x5196 <DoSerial+0x434>
		}
		break;
		case GETSERIAL_IDSTRING:
		{
			unsigned char cntByte;
			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_IDSTRING;
    4ea4:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4ea8:	e1 e0       	ldi	r30, 0x01	; 1
    4eaa:	ea 0f       	add	r30, r26
    4eac:	b0 e0       	ldi	r27, 0x00	; 0
    4eae:	ae 58       	subi	r26, 0x8E	; 142
    4eb0:	ba 4d       	sbci	r27, 0xDA	; 218
    4eb2:	8a e9       	ldi	r24, 0x9A	; 154
    4eb4:	8c 93       	st	X, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4eb6:	81 e0       	ldi	r24, 0x01	; 1
    4eb8:	8e 0f       	add	r24, r30
    4eba:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    4ebe:	f0 e0       	ldi	r31, 0x00	; 0
    4ec0:	ee 58       	subi	r30, 0x8E	; 142
    4ec2:	fa 4d       	sbci	r31, 0xDA	; 218
    4ec4:	10 82       	st	Z, r1
			for (cntByte=0; cntByte<30; cntByte++)
    4ec6:	80 e0       	ldi	r24, 0x00	; 0
    4ec8:	11 c0       	rjmp	.+34     	; 0x4eec <DoSerial+0x18a>
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = IDString[cntByte]&0x7F;
    4eca:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4ece:	91 e0       	ldi	r25, 0x01	; 1
    4ed0:	9e 0f       	add	r25, r30
    4ed2:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    4ed6:	f0 e0       	ldi	r31, 0x00	; 0
    4ed8:	a8 2f       	mov	r26, r24
    4eda:	b0 e0       	ldi	r27, 0x00	; 0
    4edc:	a0 50       	subi	r26, 0x00	; 0
    4ede:	b0 4e       	sbci	r27, 0xE0	; 224
    4ee0:	9c 91       	ld	r25, X
    4ee2:	ee 58       	subi	r30, 0x8E	; 142
    4ee4:	fa 4d       	sbci	r31, 0xDA	; 218
    4ee6:	9f 77       	andi	r25, 0x7F	; 127
    4ee8:	90 83       	st	Z, r25
		case GETSERIAL_IDSTRING:
		{
			unsigned char cntByte;
			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_IDSTRING;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<30; cntByte++)
    4eea:	8f 5f       	subi	r24, 0xFF	; 255
    4eec:	8e 31       	cpi	r24, 0x1E	; 30
    4eee:	68 f3       	brcs	.-38     	; 0x4eca <DoSerial+0x168>
    4ef0:	52 c1       	rjmp	.+676    	; 0x5196 <DoSerial+0x434>
		break;
		case GETSERIAL_MODULESETUPDATA:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
    4ef2:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4ef6:	e1 e0       	ldi	r30, 0x01	; 1
    4ef8:	ea 0f       	add	r30, r26
    4efa:	b0 e0       	ldi	r27, 0x00	; 0
    4efc:	ae 58       	subi	r26, 0x8E	; 142
    4efe:	ba 4d       	sbci	r27, 0xDA	; 218
    4f00:	83 e9       	ldi	r24, 0x93	; 147
    4f02:	8c 93       	st	X, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = Channel;
    4f04:	81 e0       	ldi	r24, 0x01	; 1
    4f06:	8e 0f       	add	r24, r30
    4f08:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    4f0c:	f0 e0       	ldi	r31, 0x00	; 0
    4f0e:	ee 58       	subi	r30, 0x8E	; 142
    4f10:	fa 4d       	sbci	r31, 0xDA	; 218
    4f12:	20 83       	st	Z, r18
			for (cntByte=0; cntByte<29; cntByte++)
    4f14:	80 e0       	ldi	r24, 0x00	; 0
    4f16:	15 c0       	rjmp	.+42     	; 0x4f42 <DoSerial+0x1e0>
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleModuleSettings[Channel][cntByte]&0x7F;
    4f18:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4f1c:	91 e0       	ldi	r25, 0x01	; 1
    4f1e:	9e 0f       	add	r25, r30
    4f20:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    4f24:	f0 e0       	ldi	r31, 0x00	; 0
    4f26:	9d e1       	ldi	r25, 0x1D	; 29
    4f28:	29 9f       	mul	r18, r25
    4f2a:	d0 01       	movw	r26, r0
    4f2c:	11 24       	eor	r1, r1
    4f2e:	a1 56       	subi	r26, 0x61	; 97
    4f30:	b0 4d       	sbci	r27, 0xD0	; 208
    4f32:	a8 0f       	add	r26, r24
    4f34:	b1 1d       	adc	r27, r1
    4f36:	9c 91       	ld	r25, X
    4f38:	ee 58       	subi	r30, 0x8E	; 142
    4f3a:	fa 4d       	sbci	r31, 0xDA	; 218
    4f3c:	9f 77       	andi	r25, 0x7F	; 127
    4f3e:	90 83       	st	Z, r25
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MODULESETUPDATA;
			SerialBufferOut[SerialBufferOutPtrTop++] = Channel;
			for (cntByte=0; cntByte<29; cntByte++)
    4f40:	8f 5f       	subi	r24, 0xFF	; 255
    4f42:	8d 31       	cpi	r24, 0x1D	; 29
    4f44:	48 f3       	brcs	.-46     	; 0x4f18 <DoSerial+0x1b6>
    4f46:	27 c1       	rjmp	.+590    	; 0x5196 <DoSerial+0x434>
		break;
		case GETSERIAL_MASTERSETUPDATA:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
    4f48:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4f4c:	e1 e0       	ldi	r30, 0x01	; 1
    4f4e:	ea 0f       	add	r30, r26
    4f50:	b0 e0       	ldi	r27, 0x00	; 0
    4f52:	ae 58       	subi	r26, 0x8E	; 142
    4f54:	ba 4d       	sbci	r27, 0xDA	; 218
    4f56:	84 e9       	ldi	r24, 0x94	; 148
    4f58:	8c 93       	st	X, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4f5a:	81 e0       	ldi	r24, 0x01	; 1
    4f5c:	8e 0f       	add	r24, r30
    4f5e:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    4f62:	f0 e0       	ldi	r31, 0x00	; 0
    4f64:	ee 58       	subi	r30, 0x8E	; 142
    4f66:	fa 4d       	sbci	r31, 0xDA	; 218
    4f68:	10 82       	st	Z, r1
			for (cntByte=0; cntByte<5; cntByte++)
    4f6a:	80 e0       	ldi	r24, 0x00	; 0
    4f6c:	11 c0       	rjmp	.+34     	; 0x4f90 <DoSerial+0x22e>
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ConsoleMasterSettings[cntByte]&0x7F;
    4f6e:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4f72:	91 e0       	ldi	r25, 0x01	; 1
    4f74:	9e 0f       	add	r25, r30
    4f76:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    4f7a:	f0 e0       	ldi	r31, 0x00	; 0
    4f7c:	a8 2f       	mov	r26, r24
    4f7e:	b0 e0       	ldi	r27, 0x00	; 0
    4f80:	a5 5c       	subi	r26, 0xC5	; 197
    4f82:	b6 4d       	sbci	r27, 0xD6	; 214
    4f84:	9c 91       	ld	r25, X
    4f86:	ee 58       	subi	r30, 0x8E	; 142
    4f88:	fa 4d       	sbci	r31, 0xDA	; 218
    4f8a:	9f 77       	andi	r25, 0x7F	; 127
    4f8c:	90 83       	st	Z, r25
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_MASTERSETUPDATA;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<5; cntByte++)
    4f8e:	8f 5f       	subi	r24, 0xFF	; 255
    4f90:	85 30       	cpi	r24, 0x05	; 5
    4f92:	68 f3       	brcs	.-38     	; 0x4f6e <DoSerial+0x20c>
    4f94:	00 c1       	rjmp	.+512    	; 0x5196 <DoSerial+0x434>
		break;
		case GETSERIAL_CONFIG:
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_CONFIG;
    4f96:	a0 91 4c 24 	lds	r26, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4f9a:	e1 e0       	ldi	r30, 0x01	; 1
    4f9c:	ea 0f       	add	r30, r26
    4f9e:	b0 e0       	ldi	r27, 0x00	; 0
    4fa0:	ae 58       	subi	r26, 0x8E	; 142
    4fa2:	ba 4d       	sbci	r27, 0xDA	; 218
    4fa4:	85 e9       	ldi	r24, 0x95	; 149
    4fa6:	8c 93       	st	X, r24
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
    4fa8:	81 e0       	ldi	r24, 0x01	; 1
    4faa:	8e 0f       	add	r24, r30
    4fac:	80 93 4c 24 	sts	0x244C, r24	; 0x80244c <SerialBufferOutPtrTop>
    4fb0:	f0 e0       	ldi	r31, 0x00	; 0
    4fb2:	ee 58       	subi	r30, 0x8E	; 142
    4fb4:	fa 4d       	sbci	r31, 0xDA	; 218
    4fb6:	10 82       	st	Z, r1
			for (cntByte=0; cntByte<16; cntByte++)
    4fb8:	80 e0       	ldi	r24, 0x00	; 0
    4fba:	11 c0       	rjmp	.+34     	; 0x4fde <DoSerial+0x27c>
			{
				SerialBufferOut[SerialBufferOutPtrTop++] = ModuleType[cntByte]&0x7F;
    4fbc:	e0 91 4c 24 	lds	r30, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    4fc0:	91 e0       	ldi	r25, 0x01	; 1
    4fc2:	9e 0f       	add	r25, r30
    4fc4:	90 93 4c 24 	sts	0x244C, r25	; 0x80244c <SerialBufferOutPtrTop>
    4fc8:	f0 e0       	ldi	r31, 0x00	; 0
    4fca:	a8 2f       	mov	r26, r24
    4fcc:	b0 e0       	ldi	r27, 0x00	; 0
    4fce:	a6 5c       	subi	r26, 0xC6	; 198
    4fd0:	bb 4d       	sbci	r27, 0xDB	; 219
    4fd2:	9c 91       	ld	r25, X
    4fd4:	ee 58       	subi	r30, 0x8E	; 142
    4fd6:	fa 4d       	sbci	r31, 0xDA	; 218
    4fd8:	9f 77       	andi	r25, 0x7F	; 127
    4fda:	90 83       	st	Z, r25
		{
			unsigned char cntByte;

			SerialBufferOut[SerialBufferOutPtrTop++] = SERIAL_CONFIG;
			SerialBufferOut[SerialBufferOutPtrTop++] = 0x00;
			for (cntByte=0; cntByte<16; cntByte++)
    4fdc:	8f 5f       	subi	r24, 0xFF	; 255
    4fde:	80 31       	cpi	r24, 0x10	; 16
    4fe0:	68 f3       	brcs	.-38     	; 0x4fbc <DoSerial+0x25a>
    4fe2:	d9 c0       	rjmp	.+434    	; 0x5196 <DoSerial+0x434>
			//////////////TWIM_Transmit(I2CAddressEEProm, Address, ConsoleMasterSettings, 5);
			//////////////while(!((TWIM_Status() == TWI_MASTER_SEND) || (TWIM_Status() == TWI_MASTER_ERROR)));
			
			unsigned char cntModule;
			unsigned int Address = 0x0000;
			WriteData(I2CAddressEEProm, Address, ModuleType, NROFMODULES);
    4fe4:	20 e1       	ldi	r18, 0x10	; 16
    4fe6:	30 e0       	ldi	r19, 0x00	; 0
    4fe8:	4a e3       	ldi	r20, 0x3A	; 58
    4fea:	54 e2       	ldi	r21, 0x24	; 36
    4fec:	60 e0       	ldi	r22, 0x00	; 0
    4fee:	70 e0       	ldi	r23, 0x00	; 0
    4ff0:	80 e7       	ldi	r24, 0x70	; 112
    4ff2:	90 e0       	ldi	r25, 0x00	; 0
    4ff4:	0e 94 83 21 	call	0x4306	; 0x4306 <WriteData>
			Address += NROFMODULES;
    4ff8:	00 e1       	ldi	r16, 0x10	; 16
    4ffa:	10 e0       	ldi	r17, 0x00	; 0
			for (cntModule=0; cntModule<16; cntModule++)
    4ffc:	c0 e0       	ldi	r28, 0x00	; 0
    4ffe:	10 c0       	rjmp	.+32     	; 0x5020 <DoSerial+0x2be>
			{
				WriteData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    5000:	8d e1       	ldi	r24, 0x1D	; 29
    5002:	c8 9f       	mul	r28, r24
    5004:	a0 01       	movw	r20, r0
    5006:	11 24       	eor	r1, r1
    5008:	41 56       	subi	r20, 0x61	; 97
    500a:	50 4d       	sbci	r21, 0xD0	; 208
    500c:	2d e1       	ldi	r18, 0x1D	; 29
    500e:	30 e0       	ldi	r19, 0x00	; 0
    5010:	b8 01       	movw	r22, r16
    5012:	80 e7       	ldi	r24, 0x70	; 112
    5014:	90 e0       	ldi	r25, 0x00	; 0
    5016:	0e 94 83 21 	call	0x4306	; 0x4306 <WriteData>
				Address += 29;
    501a:	03 5e       	subi	r16, 0xE3	; 227
    501c:	1f 4f       	sbci	r17, 0xFF	; 255
			
			unsigned char cntModule;
			unsigned int Address = 0x0000;
			WriteData(I2CAddressEEProm, Address, ModuleType, NROFMODULES);
			Address += NROFMODULES;
			for (cntModule=0; cntModule<16; cntModule++)
    501e:	cf 5f       	subi	r28, 0xFF	; 255
    5020:	c0 31       	cpi	r28, 0x10	; 16
    5022:	70 f3       	brcs	.-36     	; 0x5000 <DoSerial+0x29e>
			{
				WriteData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
				Address += 29;
			}
			WriteData(I2CAddressEEProm, Address, ConsoleMasterSettings, 5);			
    5024:	25 e0       	ldi	r18, 0x05	; 5
    5026:	30 e0       	ldi	r19, 0x00	; 0
    5028:	4b e3       	ldi	r20, 0x3B	; 59
    502a:	59 e2       	ldi	r21, 0x29	; 41
    502c:	b8 01       	movw	r22, r16
    502e:	80 e7       	ldi	r24, 0x70	; 112
    5030:	90 e0       	ldi	r25, 0x00	; 0
    5032:	0e 94 83 21 	call	0x4306	; 0x4306 <WriteData>
	
		}
		break;	
    5036:	af c0       	rjmp	.+350    	; 0x5196 <DoSerial+0x434>
		{
			//---------------------------------------------------------------------------------------------
			unsigned int Address;
				// First Load all data from EEPROM (or Card?)
				Address = 0x0000;
				ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
    5038:	20 e1       	ldi	r18, 0x10	; 16
    503a:	30 e0       	ldi	r19, 0x00	; 0
    503c:	4a e3       	ldi	r20, 0x3A	; 58
    503e:	54 e2       	ldi	r21, 0x24	; 36
    5040:	60 e0       	ldi	r22, 0x00	; 0
    5042:	70 e0       	ldi	r23, 0x00	; 0
    5044:	80 e7       	ldi	r24, 0x70	; 112
    5046:	90 e0       	ldi	r25, 0x00	; 0
    5048:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
				Address += NROFMODULES;
				for (unsigned int cntModule=0; cntModule<16; cntModule++)
    504c:	c0 e0       	ldi	r28, 0x00	; 0
    504e:	d0 e0       	ldi	r29, 0x00	; 0
			//---------------------------------------------------------------------------------------------
			unsigned int Address;
				// First Load all data from EEPROM (or Card?)
				Address = 0x0000;
				ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
				Address += NROFMODULES;
    5050:	00 e1       	ldi	r16, 0x10	; 16
    5052:	10 e0       	ldi	r17, 0x00	; 0
				for (unsigned int cntModule=0; cntModule<16; cntModule++)
    5054:	12 c0       	rjmp	.+36     	; 0x507a <DoSerial+0x318>
				{
					ReadData(I2CAddressEEProm, Address, &(ConsoleModuleSettings[cntModule][0]), 29);
    5056:	8d e1       	ldi	r24, 0x1D	; 29
    5058:	8c 9f       	mul	r24, r28
    505a:	a0 01       	movw	r20, r0
    505c:	8d 9f       	mul	r24, r29
    505e:	50 0d       	add	r21, r0
    5060:	11 24       	eor	r1, r1
    5062:	41 56       	subi	r20, 0x61	; 97
    5064:	50 4d       	sbci	r21, 0xD0	; 208
    5066:	2d e1       	ldi	r18, 0x1D	; 29
    5068:	30 e0       	ldi	r19, 0x00	; 0
    506a:	b8 01       	movw	r22, r16
    506c:	80 e7       	ldi	r24, 0x70	; 112
    506e:	90 e0       	ldi	r25, 0x00	; 0
    5070:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
					Address += 29;
    5074:	03 5e       	subi	r16, 0xE3	; 227
    5076:	1f 4f       	sbci	r17, 0xFF	; 255
			unsigned int Address;
				// First Load all data from EEPROM (or Card?)
				Address = 0x0000;
				ReadData(I2CAddressEEProm, Address, &(ModuleType[0]), NROFMODULES);
				Address += NROFMODULES;
				for (unsigned int cntModule=0; cntModule<16; cntModule++)
    5078:	21 96       	adiw	r28, 0x01	; 1
    507a:	c0 31       	cpi	r28, 0x10	; 16
    507c:	d1 05       	cpc	r29, r1
    507e:	58 f3       	brcs	.-42     	; 0x5056 <DoSerial+0x2f4>

					// Watchdog
					//PCON |= 0x10;
					//T3 = 0;
				}
				ReadData(I2CAddressEEProm, Address, &(ConsoleMasterSettings[0]), 5);
    5080:	25 e0       	ldi	r18, 0x05	; 5
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	4b e3       	ldi	r20, 0x3B	; 59
    5086:	59 e2       	ldi	r21, 0x29	; 41
    5088:	b8 01       	movw	r22, r16
    508a:	80 e7       	ldi	r24, 0x70	; 112
    508c:	90 e0       	ldi	r25, 0x00	; 0
    508e:	0e 94 a2 20 	call	0x4144	; 0x4144 <ReadData>
				////////WriteData(I2CAddressSmartCard, Address, ConsoleMasterSettings, 5);
			////////}
		}
		
		
		break;
    5092:	81 c0       	rjmp	.+258    	; 0x5196 <DoSerial+0x434>
			//////////			SerialBufferOut[SerialBufferOutPtrTop++] = CardInserted;
		////////}		
		break;
		case FROMDIRECTOR_TELCO_ON_CONNECT:
		{
			if (Data)
    5094:	cc 23       	and	r28, r28
    5096:	09 f4       	brne	.+2      	; 0x509a <DoSerial+0x338>
    5098:	7e c0       	rjmp	.+252    	; 0x5196 <DoSerial+0x434>
			{
				char ModuleNr;
			
				ModuleNr = GetModuleNrFromTelcoNr(Channel);
    509a:	82 2f       	mov	r24, r18
    509c:	0e 94 b6 08 	call	0x116c	; 0x116c <GetModuleNrFromTelcoNr>

				if (ModuleNr != -1)
				{
					EventBuffer[EventBufferPtrTop++] = (ModuleNr<<3) | ON;
    50a0:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    50a4:	91 e0       	ldi	r25, 0x01	; 1
    50a6:	9e 0f       	add	r25, r30
    50a8:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <EventBufferPtrTop>
    50ac:	f0 e0       	ldi	r31, 0x00	; 0
    50ae:	90 e0       	ldi	r25, 0x00	; 0
    50b0:	88 0f       	add	r24, r24
    50b2:	99 1f       	adc	r25, r25
    50b4:	88 0f       	add	r24, r24
    50b6:	99 1f       	adc	r25, r25
    50b8:	88 0f       	add	r24, r24
    50ba:	99 1f       	adc	r25, r25
    50bc:	83 60       	ori	r24, 0x03	; 3
    50be:	ee 0f       	add	r30, r30
    50c0:	ff 1f       	adc	r31, r31
    50c2:	e9 54       	subi	r30, 0x49	; 73
    50c4:	f9 4d       	sbci	r31, 0xD9	; 217
    50c6:	80 83       	st	Z, r24
    50c8:	91 83       	std	Z+1, r25	; 0x01
    50ca:	65 c0       	rjmp	.+202    	; 0x5196 <DoSerial+0x434>
		break;
		case FROMDIRECTOR_TELCO_MUTE:
		{
			char ModuleNr;
			
			ModuleNr = GetModuleNrFromTelcoNr(Channel);
    50cc:	82 2f       	mov	r24, r18
    50ce:	0e 94 b6 08 	call	0x116c	; 0x116c <GetModuleNrFromTelcoNr>

			if (ModuleNr != -1)
			{
				if (Data)
    50d2:	cc 23       	and	r28, r28
    50d4:	b9 f0       	breq	.+46     	; 0x5104 <DoSerial+0x3a2>
				{
					EventBuffer[EventBufferPtrTop++] = (unsigned int)(ModuleNr<<3) | EXT_MUTE;
    50d6:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    50da:	91 e0       	ldi	r25, 0x01	; 1
    50dc:	9e 0f       	add	r25, r30
    50de:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <EventBufferPtrTop>
    50e2:	f0 e0       	ldi	r31, 0x00	; 0
    50e4:	90 e0       	ldi	r25, 0x00	; 0
    50e6:	88 0f       	add	r24, r24
    50e8:	99 1f       	adc	r25, r25
    50ea:	88 0f       	add	r24, r24
    50ec:	99 1f       	adc	r25, r25
    50ee:	88 0f       	add	r24, r24
    50f0:	99 1f       	adc	r25, r25
    50f2:	87 68       	ori	r24, 0x87	; 135
    50f4:	92 60       	ori	r25, 0x02	; 2
    50f6:	ee 0f       	add	r30, r30
    50f8:	ff 1f       	adc	r31, r31
    50fa:	e9 54       	subi	r30, 0x49	; 73
    50fc:	f9 4d       	sbci	r31, 0xD9	; 217
    50fe:	80 83       	st	Z, r24
    5100:	91 83       	std	Z+1, r25	; 0x01
    5102:	49 c0       	rjmp	.+146    	; 0x5196 <DoSerial+0x434>
				}
				else
				{
					EventBuffer[EventBufferPtrTop++] = (unsigned int)(ModuleNr<<3) | EXT_MUTE | 0x100;
    5104:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    5108:	91 e0       	ldi	r25, 0x01	; 1
    510a:	9e 0f       	add	r25, r30
    510c:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <EventBufferPtrTop>
    5110:	f0 e0       	ldi	r31, 0x00	; 0
    5112:	90 e0       	ldi	r25, 0x00	; 0
    5114:	88 0f       	add	r24, r24
    5116:	99 1f       	adc	r25, r25
    5118:	88 0f       	add	r24, r24
    511a:	99 1f       	adc	r25, r25
    511c:	88 0f       	add	r24, r24
    511e:	99 1f       	adc	r25, r25
    5120:	87 68       	ori	r24, 0x87	; 135
    5122:	93 60       	ori	r25, 0x03	; 3
    5124:	ee 0f       	add	r30, r30
    5126:	ff 1f       	adc	r31, r31
    5128:	e9 54       	subi	r30, 0x49	; 73
    512a:	f9 4d       	sbci	r31, 0xD9	; 217
    512c:	80 83       	st	Z, r24
    512e:	91 83       	std	Z+1, r25	; 0x01
    5130:	32 c0       	rjmp	.+100    	; 0x5196 <DoSerial+0x434>
			}
		}
		break;
		case FROMDIRECTOR_TELCO_TB:
		{
			if (Data)
    5132:	cc 23       	and	r28, r28
    5134:	81 f1       	breq	.+96     	; 0x5196 <DoSerial+0x434>
			{
				char ModuleNr;
			
				ModuleNr = GetModuleNrFromTelcoNr(Channel);
    5136:	82 2f       	mov	r24, r18
    5138:	0e 94 b6 08 	call	0x116c	; 0x116c <GetModuleNrFromTelcoNr>
	
				if (ModuleNr != -1)
				{
					EventBuffer[EventBufferPtrTop++] = (ModuleNr<<3) | PFL;
    513c:	e0 91 38 29 	lds	r30, 0x2938	; 0x802938 <EventBufferPtrTop>
    5140:	91 e0       	ldi	r25, 0x01	; 1
    5142:	9e 0f       	add	r25, r30
    5144:	90 93 38 29 	sts	0x2938, r25	; 0x802938 <EventBufferPtrTop>
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	90 e0       	ldi	r25, 0x00	; 0
    514c:	88 0f       	add	r24, r24
    514e:	99 1f       	adc	r25, r25
    5150:	88 0f       	add	r24, r24
    5152:	99 1f       	adc	r25, r25
    5154:	88 0f       	add	r24, r24
    5156:	99 1f       	adc	r25, r25
    5158:	82 60       	ori	r24, 0x02	; 2
    515a:	ee 0f       	add	r30, r30
    515c:	ff 1f       	adc	r31, r31
    515e:	e9 54       	subi	r30, 0x49	; 73
    5160:	f9 4d       	sbci	r31, 0xD9	; 217
    5162:	80 83       	st	Z, r24
    5164:	91 83       	std	Z+1, r25	; 0x01
    5166:	17 c0       	rjmp	.+46     	; 0x5196 <DoSerial+0x434>
			}
		}
		break;
		case FROMDIRECTOR_TB:
		{
			if (Channel == TB_CONSOLE)
    5168:	21 11       	cpse	r18, r1
    516a:	09 c0       	rjmp	.+18     	; 0x517e <DoSerial+0x41c>
			{
				if (Data)
    516c:	cc 23       	and	r28, r28
    516e:	21 f0       	breq	.+8      	; 0x5178 <DoSerial+0x416>
				{
					DirectorTBCUEBussActive = 1;
    5170:	81 e0       	ldi	r24, 0x01	; 1
    5172:	80 93 c4 2b 	sts	0x2BC4, r24	; 0x802bc4 <DirectorTBCUEBussActive>
    5176:	0d c0       	rjmp	.+26     	; 0x5192 <DoSerial+0x430>
				}
				else
				{
					DirectorTBCUEBussActive = 0;
    5178:	10 92 c4 2b 	sts	0x2BC4, r1	; 0x802bc4 <DirectorTBCUEBussActive>
    517c:	0a c0       	rjmp	.+20     	; 0x5192 <DoSerial+0x430>
				}
			}
			else if (Channel == TB_ALL)
    517e:	21 30       	cpi	r18, 0x01	; 1
    5180:	41 f4       	brne	.+16     	; 0x5192 <DoSerial+0x430>
			{
				if (Data)
    5182:	cc 23       	and	r28, r28
    5184:	21 f0       	breq	.+8      	; 0x518e <DoSerial+0x42c>
				{
					DirectorTBCUEBussActive = 1;
    5186:	81 e0       	ldi	r24, 0x01	; 1
    5188:	80 93 c4 2b 	sts	0x2BC4, r24	; 0x802bc4 <DirectorTBCUEBussActive>
    518c:	02 c0       	rjmp	.+4      	; 0x5192 <DoSerial+0x430>
				}
				else
				{
					DirectorTBCUEBussActive = 0;
    518e:	10 92 c4 2b 	sts	0x2BC4, r1	; 0x802bc4 <DirectorTBCUEBussActive>
				}
			}
			CueControl();
    5192:	0e 94 bd 08 	call	0x117a	; 0x117a <CueControl>
		}
		break;
	}
}
    5196:	df 91       	pop	r29
    5198:	cf 91       	pop	r28
    519a:	1f 91       	pop	r17
    519c:	0f 91       	pop	r16
    519e:	08 95       	ret

000051a0 <SetupSIO0>:

void SetupSIO0()
{
			

	cli();
    51a0:	f8 94       	cli

		PORTE_OUTSET = 0x8;
    51a2:	88 e0       	ldi	r24, 0x08	; 8
    51a4:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x7de685>
					
		// Communication mode: Asynchronous USART on PORTE
		// Data bits: 8
		// Stop bits: 1
		// Parity: Disabled
		USARTE0_CTRLC = USART_CMODE_ASYNCHRONOUS_gc | USART_PMODE_DISABLED_gc | USART_CHSIZE_8BIT_gc;
    51a8:	83 e0       	ldi	r24, 0x03	; 3
    51aa:	80 93 a5 0a 	sts	0x0AA5, r24	; 0x800aa5 <__TEXT_REGION_LENGTH__+0x7deaa5>

		// Receive complete interrupt: Medium Level
		// Transmit complete interrupt: Medium Level
		// Data register empty interrupt: Disabled
		USARTE0.CTRLA=(USARTE0.CTRLA & (~(USART_RXCINTLVL_gm | USART_TXCINTLVL_gm | USART_DREINTLVL_gm))) |
    51ae:	e0 ea       	ldi	r30, 0xA0	; 160
    51b0:	fa e0       	ldi	r31, 0x0A	; 10
    51b2:	83 81       	ldd	r24, Z+3	; 0x03
    51b4:	80 7c       	andi	r24, 0xC0	; 192
    51b6:	88 62       	ori	r24, 0x28	; 40
    51b8:	83 83       	std	Z+3, r24	; 0x03
		//USARTE0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x04;
		
		// Bij een interne OSC van 9 MHz
		// Required Baud rate: 57600
		// Real Baud Rate: 57600,0 (x1 Mode), Error: 0,0 %
		USARTE0.BAUDCTRLA=0x62;
    51ba:	82 e6       	ldi	r24, 0x62	; 98
    51bc:	86 83       	std	Z+6, r24	; 0x06
		USARTE0.BAUDCTRLB=((0x09 << USART_BSCALE_gp) & USART_BSCALE_gm) | 0x04;		
    51be:	84 e9       	ldi	r24, 0x94	; 148
    51c0:	87 83       	std	Z+7, r24	; 0x07

		// Receiver: On
		// Transmitter: On
		// Double transmission speed mode: Off
		// Multi-processor communication mode: Off
		USARTE0.CTRLB=(USARTE0.CTRLB & (~(USART_RXEN_bm | USART_TXEN_bm | USART_CLK2X_bm | USART_MPCM_bm | USART_TXB8_bm))) |
    51c2:	84 81       	ldd	r24, Z+4	; 0x04
    51c4:	80 7e       	andi	r24, 0xE0	; 224
    51c6:	88 61       	ori	r24, 0x18	; 24
    51c8:	84 83       	std	Z+4, r24	; 0x04
		USART_RXEN_bm | USART_TXEN_bm;

				
		sei();
    51ca:	78 94       	sei
    51cc:	08 95       	ret

000051ce <__vector_58>:
}


ISR(USARTE0_RXC_vect)
{
    51ce:	1f 92       	push	r1
    51d0:	0f 92       	push	r0
    51d2:	0f b6       	in	r0, 0x3f	; 63
    51d4:	0f 92       	push	r0
    51d6:	11 24       	eor	r1, r1
    51d8:	08 b6       	in	r0, 0x38	; 56
    51da:	0f 92       	push	r0
    51dc:	18 be       	out	0x38, r1	; 56
    51de:	09 b6       	in	r0, 0x39	; 57
    51e0:	0f 92       	push	r0
    51e2:	19 be       	out	0x39, r1	; 57
    51e4:	0b b6       	in	r0, 0x3b	; 59
    51e6:	0f 92       	push	r0
    51e8:	1b be       	out	0x3b, r1	; 59
    51ea:	2f 93       	push	r18
    51ec:	8f 93       	push	r24
    51ee:	9f 93       	push	r25
    51f0:	af 93       	push	r26
    51f2:	bf 93       	push	r27
    51f4:	ef 93       	push	r30
    51f6:	ff 93       	push	r31
	SerialByte = USARTE0.DATA;
    51f8:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
    51fc:	80 93 5e 24 	sts	0x245E, r24	; 0x80245e <SerialByte>

	if (SerialByte&0x80)
    5200:	88 23       	and	r24, r24
    5202:	94 f4       	brge	.+36     	; 0x5228 <__vector_58+0x5a>
	{

		SerialCnt = 0;
    5204:	10 92 71 25 	sts	0x2571, r1	; 0x802571 <SerialCnt>
		switch (SerialByte)
    5208:	83 39       	cpi	r24, 0x93	; 147
    520a:	19 f0       	breq	.+6      	; 0x5212 <__vector_58+0x44>
    520c:	84 39       	cpi	r24, 0x94	; 148
    520e:	29 f0       	breq	.+10     	; 0x521a <__vector_58+0x4c>
    5210:	08 c0       	rjmp	.+16     	; 0x5222 <__vector_58+0x54>
		{
			case SERIAL_MODULESETUPDATA:
			{

				SerialLength = 31;
    5212:	9f e1       	ldi	r25, 0x1F	; 31
    5214:	90 93 38 24 	sts	0x2438, r25	; 0x802438 <SerialLength>
				
			}
			break;
    5218:	07 c0       	rjmp	.+14     	; 0x5228 <__vector_58+0x5a>
			case SERIAL_MASTERSETUPDATA:
			{

				SerialLength = 7;
    521a:	97 e0       	ldi	r25, 0x07	; 7
    521c:	90 93 38 24 	sts	0x2438, r25	; 0x802438 <SerialLength>
			}
			break;
    5220:	03 c0       	rjmp	.+6      	; 0x5228 <__vector_58+0x5a>
			default:
			{

				SerialLength = 3;
    5222:	93 e0       	ldi	r25, 0x03	; 3
    5224:	90 93 38 24 	sts	0x2438, r25	; 0x802438 <SerialLength>
			}
			break;
		}	
	}
		
	DummySerialBuffer[SerialCnt++] = SerialByte;
    5228:	e0 91 71 25 	lds	r30, 0x2571	; 0x802571 <SerialCnt>
    522c:	91 e0       	ldi	r25, 0x01	; 1
    522e:	9e 0f       	add	r25, r30
    5230:	90 93 71 25 	sts	0x2571, r25	; 0x802571 <SerialCnt>
    5234:	f0 e0       	ldi	r31, 0x00	; 0
    5236:	ef 58       	subi	r30, 0x8F	; 143
    5238:	fb 4d       	sbci	r31, 0xDB	; 219
    523a:	80 83       	st	Z, r24
	if (SerialCnt >= SerialLength)
    523c:	20 91 38 24 	lds	r18, 0x2438	; 0x802438 <SerialLength>
    5240:	92 17       	cp	r25, r18
    5242:	90 f4       	brcc	.+36     	; 0x5268 <__vector_58+0x9a>
    5244:	14 c0       	rjmp	.+40     	; 0x526e <__vector_58+0xa0>
		{
							//PORTB_OUTSET = 1;  // TEST LED
							//Delay(1000);
							//PORTB_OUTCLR = 1;
							//Delay(1000);
			SerialBufferIn[SerialBufferInPtrTop++] = DummySerialBuffer[cnt];
    5246:	e0 91 99 31 	lds	r30, 0x3199	; 0x803199 <SerialBufferInPtrTop>
    524a:	91 e0       	ldi	r25, 0x01	; 1
    524c:	9e 0f       	add	r25, r30
    524e:	90 93 99 31 	sts	0x3199, r25	; 0x803199 <SerialBufferInPtrTop>
    5252:	f0 e0       	ldi	r31, 0x00	; 0
    5254:	a8 2f       	mov	r26, r24
    5256:	b0 e0       	ldi	r27, 0x00	; 0
    5258:	af 58       	subi	r26, 0x8F	; 143
    525a:	bb 4d       	sbci	r27, 0xDB	; 219
    525c:	9c 91       	ld	r25, X
    525e:	e0 51       	subi	r30, 0x10	; 16
    5260:	fd 4d       	sbci	r31, 0xDD	; 221
    5262:	90 83       	st	Z, r25
		
	DummySerialBuffer[SerialCnt++] = SerialByte;
	if (SerialCnt >= SerialLength)
	{
		unsigned char cnt;
		for (cnt=0; cnt<SerialLength; cnt++)
    5264:	8f 5f       	subi	r24, 0xFF	; 255
    5266:	01 c0       	rjmp	.+2      	; 0x526a <__vector_58+0x9c>
    5268:	80 e0       	ldi	r24, 0x00	; 0
    526a:	82 17       	cp	r24, r18
    526c:	60 f3       	brcs	.-40     	; 0x5246 <__vector_58+0x78>
							//PORTB_OUTCLR = 1;
							//Delay(1000);
			SerialBufferIn[SerialBufferInPtrTop++] = DummySerialBuffer[cnt];
		}
	}
}
    526e:	ff 91       	pop	r31
    5270:	ef 91       	pop	r30
    5272:	bf 91       	pop	r27
    5274:	af 91       	pop	r26
    5276:	9f 91       	pop	r25
    5278:	8f 91       	pop	r24
    527a:	2f 91       	pop	r18
    527c:	0f 90       	pop	r0
    527e:	0b be       	out	0x3b, r0	; 59
    5280:	0f 90       	pop	r0
    5282:	09 be       	out	0x39, r0	; 57
    5284:	0f 90       	pop	r0
    5286:	08 be       	out	0x38, r0	; 56
    5288:	0f 90       	pop	r0
    528a:	0f be       	out	0x3f, r0	; 63
    528c:	0f 90       	pop	r0
    528e:	1f 90       	pop	r1
    5290:	18 95       	reti

00005292 <__vector_60>:

ISR(USARTE0_TXC_vect)
{
    5292:	1f 92       	push	r1
    5294:	0f 92       	push	r0
    5296:	0f b6       	in	r0, 0x3f	; 63
    5298:	0f 92       	push	r0
    529a:	11 24       	eor	r1, r1
    529c:	08 b6       	in	r0, 0x38	; 56
    529e:	0f 92       	push	r0
    52a0:	18 be       	out	0x38, r1	; 56
    52a2:	0b b6       	in	r0, 0x3b	; 59
    52a4:	0f 92       	push	r0
    52a6:	1b be       	out	0x3b, r1	; 59
    52a8:	8f 93       	push	r24
    52aa:	9f 93       	push	r25
    52ac:	ef 93       	push	r30
    52ae:	ff 93       	push	r31
	//USARTE0_DATA = (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80));
	//USARTE0_DATA = SerialBufferOutPtrTop;
	//while ( !( USARTE0.STATUS & USART_DREIF_bm) );
	//USARTE0_DATA = SerialBufferOutPtrBottom;
	//while ( !( USARTE0.STATUS & USART_DREIF_bm) );
	if ((SerialBufferOutPtrBottom != SerialBufferOutPtrTop) &&  (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80)))
    52b0:	80 91 40 29 	lds	r24, 0x2940	; 0x802940 <SerialBufferOutPtrBottom>
    52b4:	90 91 4c 24 	lds	r25, 0x244C	; 0x80244c <SerialBufferOutPtrTop>
    52b8:	89 17       	cp	r24, r25
    52ba:	69 f0       	breq	.+26     	; 0x52d6 <__vector_60+0x44>
    52bc:	e8 2f       	mov	r30, r24
    52be:	f0 e0       	ldi	r31, 0x00	; 0
    52c0:	ee 58       	subi	r30, 0x8E	; 142
    52c2:	fa 4d       	sbci	r31, 0xDA	; 218
    52c4:	90 81       	ld	r25, Z
    52c6:	99 23       	and	r25, r25
    52c8:	34 f0       	brlt	.+12     	; 0x52d6 <__vector_60+0x44>
	//if (SerialBufferOutPtrBottom != SerialBufferOutPtrTop)
	//if (!(SerialBufferOut[SerialBufferOutPtrBottom]&0x80))
	{
		USARTE0_DATA = SerialBufferOut[SerialBufferOutPtrBottom++];
    52ca:	8f 5f       	subi	r24, 0xFF	; 255
    52cc:	80 93 40 29 	sts	0x2940, r24	; 0x802940 <SerialBufferOutPtrBottom>
    52d0:	90 93 a0 0a 	sts	0x0AA0, r25	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x7deaa0>
    52d4:	03 c0       	rjmp	.+6      	; 0x52dc <__vector_60+0x4a>
	}
	else
	{
		SendSerialReady = 1;
    52d6:	81 e0       	ldi	r24, 0x01	; 1
    52d8:	80 93 34 24 	sts	0x2434, r24	; 0x802434 <SendSerialReady>
	}
}
    52dc:	ff 91       	pop	r31
    52de:	ef 91       	pop	r30
    52e0:	9f 91       	pop	r25
    52e2:	8f 91       	pop	r24
    52e4:	0f 90       	pop	r0
    52e6:	0b be       	out	0x3b, r0	; 59
    52e8:	0f 90       	pop	r0
    52ea:	08 be       	out	0x38, r0	; 56
    52ec:	0f 90       	pop	r0
    52ee:	0f be       	out	0x3f, r0	; 63
    52f0:	0f 90       	pop	r0
    52f2:	1f 90       	pop	r1
    52f4:	18 95       	reti

000052f6 <__divmodhi4>:
    52f6:	97 fb       	bst	r25, 7
    52f8:	07 2e       	mov	r0, r23
    52fa:	16 f4       	brtc	.+4      	; 0x5300 <__divmodhi4+0xa>
    52fc:	00 94       	com	r0
    52fe:	07 d0       	rcall	.+14     	; 0x530e <__divmodhi4_neg1>
    5300:	77 fd       	sbrc	r23, 7
    5302:	09 d0       	rcall	.+18     	; 0x5316 <__divmodhi4_neg2>
    5304:	0e 94 98 29 	call	0x5330	; 0x5330 <__udivmodhi4>
    5308:	07 fc       	sbrc	r0, 7
    530a:	05 d0       	rcall	.+10     	; 0x5316 <__divmodhi4_neg2>
    530c:	3e f4       	brtc	.+14     	; 0x531c <__divmodhi4_exit>

0000530e <__divmodhi4_neg1>:
    530e:	90 95       	com	r25
    5310:	81 95       	neg	r24
    5312:	9f 4f       	sbci	r25, 0xFF	; 255
    5314:	08 95       	ret

00005316 <__divmodhi4_neg2>:
    5316:	70 95       	com	r23
    5318:	61 95       	neg	r22
    531a:	7f 4f       	sbci	r23, 0xFF	; 255

0000531c <__divmodhi4_exit>:
    531c:	08 95       	ret

0000531e <__tablejump2__>:
    531e:	ee 0f       	add	r30, r30
    5320:	ff 1f       	adc	r31, r31
    5322:	88 1f       	adc	r24, r24
    5324:	8b bf       	out	0x3b, r24	; 59
    5326:	07 90       	elpm	r0, Z+
    5328:	f6 91       	elpm	r31, Z
    532a:	e0 2d       	mov	r30, r0
    532c:	1b be       	out	0x3b, r1	; 59
    532e:	19 94       	eijmp

00005330 <__udivmodhi4>:
    5330:	aa 1b       	sub	r26, r26
    5332:	bb 1b       	sub	r27, r27
    5334:	51 e1       	ldi	r21, 0x11	; 17
    5336:	07 c0       	rjmp	.+14     	; 0x5346 <__udivmodhi4_ep>

00005338 <__udivmodhi4_loop>:
    5338:	aa 1f       	adc	r26, r26
    533a:	bb 1f       	adc	r27, r27
    533c:	a6 17       	cp	r26, r22
    533e:	b7 07       	cpc	r27, r23
    5340:	10 f0       	brcs	.+4      	; 0x5346 <__udivmodhi4_ep>
    5342:	a6 1b       	sub	r26, r22
    5344:	b7 0b       	sbc	r27, r23

00005346 <__udivmodhi4_ep>:
    5346:	88 1f       	adc	r24, r24
    5348:	99 1f       	adc	r25, r25
    534a:	5a 95       	dec	r21
    534c:	a9 f7       	brne	.-22     	; 0x5338 <__udivmodhi4_loop>
    534e:	80 95       	com	r24
    5350:	90 95       	com	r25
    5352:	bc 01       	movw	r22, r24
    5354:	cd 01       	movw	r24, r26
    5356:	08 95       	ret

00005358 <_exit>:
    5358:	f8 94       	cli

0000535a <__stop_program>:
    535a:	ff cf       	rjmp	.-2      	; 0x535a <__stop_program>
